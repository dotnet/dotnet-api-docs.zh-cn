<Type Name="RoutedCommand" FullName="System.Windows.Input.RoutedCommand">
  <Metadata><Meta Name="ms.openlocfilehash" Value="497b96aab4f74c79a9d5aace60e6f70efbb920ae" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86699684" /></Metadata><TypeSignature Language="C#" Value="public class RoutedCommand : System.Windows.Input.ICommand" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RoutedCommand extends System.Object implements class System.Windows.Input.ICommand" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.RoutedCommand" />
  <TypeSignature Language="VB.NET" Value="Public Class RoutedCommand&#xA;Implements ICommand" />
  <TypeSignature Language="C++ CLI" Value="public ref class RoutedCommand : System::Windows::Input::ICommand" />
  <TypeSignature Language="F#" Value="type RoutedCommand = class&#xA;    interface ICommand" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Input.ICommand</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Windows.Markup.ValueSerializer("System.Windows.Input.CommandValueSerializer, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Windows.Markup.ValueSerializer("System.Windows.Input.CommandValueSerializer, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
      <AttributeName Language="C#">[System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
      <AttributeName Language="C#">[System.Windows.Markup.ValueSerializer("System.Windows.Input.CommandValueSerializer, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Windows.Markup.ValueSerializer("System.Windows.Input.CommandValueSerializer, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="b35ee-101">定义一个实现 <see cref="T:System.Windows.Input.ICommand" /> 并在元素树之内进行路由的命令。</span><span class="sxs-lookup"><span data-stu-id="b35ee-101">Defines a command that implements <see cref="T:System.Windows.Input.ICommand" /> and is routed through the element tree.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b35ee-102"><xref:System.Windows.Input.RoutedCommand.Execute%2A>在上，的和 <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> 方法 <xref:System.Windows.Input.RoutedCommand> 不包含该命令的应用程序逻辑（与典型的情况相同 <xref:System.Windows.Input.ICommand> ），但这些方法会引发事件，这些事件遍历元素树，而该元素树查找具有的对象 <xref:System.Windows.Input.CommandBinding> 。</span><span class="sxs-lookup"><span data-stu-id="b35ee-102">The <xref:System.Windows.Input.RoutedCommand.Execute%2A> and <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> methods on a <xref:System.Windows.Input.RoutedCommand> do not contain the application logic for the command as is the case with a typical <xref:System.Windows.Input.ICommand>, but rather, these methods raise events that traverse the element tree looking for an object with a <xref:System.Windows.Input.CommandBinding>.</span></span>  <span data-ttu-id="b35ee-103">附加到的事件处理程序 <xref:System.Windows.Input.CommandBinding> 包含命令逻辑。</span><span class="sxs-lookup"><span data-stu-id="b35ee-103">The event handlers attached to the <xref:System.Windows.Input.CommandBinding> contain the command logic.</span></span>  
  
 <span data-ttu-id="b35ee-104"><xref:System.Windows.Input.RoutedCommand.Execute%2A>方法引发 <xref:System.Windows.Input.CommandManager.PreviewExecuted> 和 <xref:System.Windows.Input.CommandManager.Executed> 事件。</span><span class="sxs-lookup"><span data-stu-id="b35ee-104">The <xref:System.Windows.Input.RoutedCommand.Execute%2A> method raises the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events.</span></span>  <span data-ttu-id="b35ee-105"><xref:System.Windows.Input.RoutedCommand.CanExecute%2A>方法引发 <xref:System.Windows.Input.CommandManager.PreviewCanExecute> 和 <xref:System.Windows.Input.CommandManager.CanExecute> 事件。</span><span class="sxs-lookup"><span data-stu-id="b35ee-105">The <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method raises the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.CanExecute> events.</span></span>  
  
<a name="xamlAttributeUsage_RoutedCommand"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="b35ee-106">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="b35ee-106">XAML Attribute Usage</span></span>  
 \<*object* *property*="*predefinedCommandName*"/>  
  
<span data-ttu-id="b35ee-107">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b35ee-107">-or-</span></span>
  
 \<*object* *property*="*predefinedClassName*.*predefinedCommandName*"/>  
  
<span data-ttu-id="b35ee-108">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b35ee-108">-or-</span></span>
  
 \<*object* *property*="{ *customClassName*.*customCommandName*}"/>  
  
<a name="xamlValues_RoutedCommand"></a>   
## <a name="xaml-values"></a><span data-ttu-id="b35ee-109">XAML 值</span><span class="sxs-lookup"><span data-stu-id="b35ee-109">XAML Values</span></span>  
 <span data-ttu-id="b35ee-110">*predefinedClassName*</span><span class="sxs-lookup"><span data-stu-id="b35ee-110">*predefinedClassName*</span></span>  
 <span data-ttu-id="b35ee-111">预定义的命令类之一。</span><span class="sxs-lookup"><span data-stu-id="b35ee-111">One of the predefined command classes.</span></span>  
  
 <span data-ttu-id="b35ee-112">*predefinedCommandName*</span><span class="sxs-lookup"><span data-stu-id="b35ee-112">*predefinedCommandName*</span></span>  
 <span data-ttu-id="b35ee-113">预定义的命令之一。</span><span class="sxs-lookup"><span data-stu-id="b35ee-113">One of the predefined commands.</span></span>  
  
 <span data-ttu-id="b35ee-114">*customClassName*</span><span class="sxs-lookup"><span data-stu-id="b35ee-114">*customClassName*</span></span>  
 <span data-ttu-id="b35ee-115">一个包含自定义命令的自定义类。</span><span class="sxs-lookup"><span data-stu-id="b35ee-115">A custom class which contains the custom command.</span></span> <span data-ttu-id="b35ee-116">自定义类通常需要 `xlmns` 前缀映射; 请参阅 [WPF Xaml 的 XAML 命名空间和命名空间映射](/dotnet/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml)。</span><span class="sxs-lookup"><span data-stu-id="b35ee-116">Custom classes generally require an `xlmns` prefix mapping; see [XAML Namespaces and Namespace Mapping for WPF XAML](/dotnet/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml).</span></span>  
  
 <span data-ttu-id="b35ee-117">*customCommandName*</span><span class="sxs-lookup"><span data-stu-id="b35ee-117">*customCommandName*</span></span>  
 <span data-ttu-id="b35ee-118">自定义命令。</span><span class="sxs-lookup"><span data-stu-id="b35ee-118">A custom command.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.RoutedUICommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.InputBinding" />
    <altmember cref="T:System.Windows.Input.KeyGesture" />
    <altmember cref="T:System.Windows.Input.MouseGesture" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b35ee-119">初始化 <see cref="T:System.Windows.Input.RoutedCommand" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="b35ee-119">Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedCommand" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b35ee-120">初始化 <see cref="T:System.Windows.Input.RoutedCommand" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="b35ee-120">Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedCommand" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand (string name, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, ownerType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand(System::String ^ name, Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.RoutedCommand : string * Type -&gt; System.Windows.Input.RoutedCommand" Usage="new System.Windows.Input.RoutedCommand (name, ownerType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="b35ee-121">用于序列化的已声明名称。</span><span class="sxs-lookup"><span data-stu-id="b35ee-121">Declared name for serialization.</span></span></param>
        <param name="ownerType"><span data-ttu-id="b35ee-122">正在注册命令的类型。</span><span class="sxs-lookup"><span data-stu-id="b35ee-122">The type which is registering the command.</span></span></param>
        <summary><span data-ttu-id="b35ee-123">使用指定的名称和所有者类型初始化 <see cref="T:System.Windows.Input.RoutedCommand" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="b35ee-123">Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedCommand" /> class with the specified name and owner type.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b35ee-124"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b35ee-124"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b35ee-125"><paramref name="ownerType" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b35ee-125"><paramref name="ownerType" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand (string name, Type ownerType, System.Windows.Input.InputGestureCollection inputGestures);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type ownerType, class System.Windows.Input.InputGestureCollection inputGestures) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, ownerType As Type, inputGestures As InputGestureCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand(System::String ^ name, Type ^ ownerType, System::Windows::Input::InputGestureCollection ^ inputGestures);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.RoutedCommand : string * Type * System.Windows.Input.InputGestureCollection -&gt; System.Windows.Input.RoutedCommand" Usage="new System.Windows.Input.RoutedCommand (name, ownerType, inputGestures)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="inputGestures" Type="System.Windows.Input.InputGestureCollection" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="b35ee-126">用于序列化的已声明名称。</span><span class="sxs-lookup"><span data-stu-id="b35ee-126">Declared name for serialization.</span></span></param>
        <param name="ownerType"><span data-ttu-id="b35ee-127">正在注册命令的类型。</span><span class="sxs-lookup"><span data-stu-id="b35ee-127">The type that is registering the command.</span></span></param>
        <param name="inputGestures"><span data-ttu-id="b35ee-128">与此命令关联的默认输入笔势。</span><span class="sxs-lookup"><span data-stu-id="b35ee-128">Default input gestures associated with this command.</span></span></param>
        <summary><span data-ttu-id="b35ee-129">使用指定的名称、所有者类型和笔势集合初始化 <see cref="T:System.Windows.Input.RoutedCommand" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="b35ee-129">Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedCommand" /> class with the specified name, owner type, and collection of gestures.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b35ee-130"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b35ee-130"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b35ee-131"><paramref name="name" /> 的长度为零。</span><span class="sxs-lookup"><span data-stu-id="b35ee-131">the length of <paramref name="name" /> is zero</span></span> 
<span data-ttu-id="b35ee-132">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b35ee-132">-or-</span></span> 
 <span data-ttu-id="b35ee-133"><paramref name="ownerType" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b35ee-133"><paramref name="ownerType" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="public bool CanExecute (object parameter, System.Windows.IInputElement target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanExecute(object parameter, class System.Windows.IInputElement target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanExecute (parameter As Object, target As IInputElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanExecute(System::Object ^ parameter, System::Windows::IInputElement ^ target);" />
      <MemberSignature Language="F#" Value="member this.CanExecute : obj * System.Windows.IInputElement -&gt; bool" Usage="routedCommand.CanExecute (parameter, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
        <Parameter Name="target" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="parameter"><span data-ttu-id="b35ee-134">用户定义的数据类型。</span><span class="sxs-lookup"><span data-stu-id="b35ee-134">A user defined data type.</span></span></param>
        <param name="target"><span data-ttu-id="b35ee-135">命令目标。</span><span class="sxs-lookup"><span data-stu-id="b35ee-135">The command target.</span></span></param>
        <summary><span data-ttu-id="b35ee-136">确定此 <see cref="T:System.Windows.Input.RoutedCommand" /> 在其当前状态是否可以执行。</span><span class="sxs-lookup"><span data-stu-id="b35ee-136">Determines whether this <see cref="T:System.Windows.Input.RoutedCommand" /> can execute in its current state.</span></span></summary>
        <returns><span data-ttu-id="b35ee-137">如果可以对当前命令目标执行此命令，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b35ee-137"><see langword="true" /> if the command can execute on the current command target; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b35ee-138">确定是否 <xref:System.Windows.Input.RoutedCommand> 可以在当前命令目标上执行的实际逻辑不包含在 <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> 方法中，而是 <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> 引发 <xref:System.Windows.Input.CommandManager.PreviewCanExecute> 和 <xref:System.Windows.Input.CommandManager.CanExecute> 事件，这些事件通过元素树进行隧道和冒泡，并使用来查找对象 <xref:System.Windows.Input.CommandBinding> 。</span><span class="sxs-lookup"><span data-stu-id="b35ee-138">The actual logic that determines if a <xref:System.Windows.Input.RoutedCommand> can execute on the current command target is not contained in the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> methods, rather <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> raises the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and the <xref:System.Windows.Input.CommandManager.CanExecute> events which tunnel and bubble through element tree looking for a object with a <xref:System.Windows.Input.CommandBinding>.</span></span>  <span data-ttu-id="b35ee-139">如果 <xref:System.Windows.Input.CommandBinding> <xref:System.Windows.Input.RoutedCommand> 找到了，则 <xref:System.Windows.Input.CanExecuteRoutedEventHandler> 调用附加到的 <xref:System.Windows.Input.CommandBinding> 。</span><span class="sxs-lookup"><span data-stu-id="b35ee-139">If a <xref:System.Windows.Input.CommandBinding> for that <xref:System.Windows.Input.RoutedCommand> is found, then the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> attached to <xref:System.Windows.Input.CommandBinding> is called.</span></span>  <span data-ttu-id="b35ee-140">这些处理程序提供编程逻辑来确定 <xref:System.Windows.Input.RoutedCommand> 能否执行。</span><span class="sxs-lookup"><span data-stu-id="b35ee-140">These handlers supply the programming logic for determining if the <xref:System.Windows.Input.RoutedCommand> can execute or not.</span></span>  
  
 <span data-ttu-id="b35ee-141">在 <xref:System.Windows.Input.CommandManager.PreviewCanExecute> <xref:System.Windows.Input.CommandManager.PreviewExecuted> 上引发和事件 <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> 。</span><span class="sxs-lookup"><span data-stu-id="b35ee-141">The <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.PreviewExecuted> events are raised on the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.</span></span>  <span data-ttu-id="b35ee-142">如果 <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> 未在上设置，则将 <xref:System.Windows.Input.ICommandSource> <xref:System.Windows.Input.CommandManager.PreviewCanExecute> <xref:System.Windows.Input.CommandManager.CanExecute> 在具有键盘焦点的元素上引发和事件。</span><span class="sxs-lookup"><span data-stu-id="b35ee-142">If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is not set on the <xref:System.Windows.Input.ICommandSource>, the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.CanExecute> events are raised on the element with keyboard focus.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b35ee-143">下面的示例是 <xref:System.Windows.Input.ICommand.CanExecuteChanged> 自的自定义实现的事件处理程序 <xref:System.Windows.Input.ICommandSource> 。</span><span class="sxs-lookup"><span data-stu-id="b35ee-143">The following example is a <xref:System.Windows.Input.ICommand.CanExecuteChanged> event handler from a custom implementation of <xref:System.Windows.Input.ICommandSource>.</span></span>  
  
 <span data-ttu-id="b35ee-144">`this.Command` 在此示例中，是中的 <xref:System.Windows.Input.ICommandSource.Command%2A> 属性 <xref:System.Windows.Input.ICommandSource> 。</span><span class="sxs-lookup"><span data-stu-id="b35ee-144">`this.Command` in this example is the <xref:System.Windows.Input.ICommandSource.Command%2A> property on the <xref:System.Windows.Input.ICommandSource>.</span></span>  <span data-ttu-id="b35ee-145">如果命令不为 `null` ，则将命令强制转换为 <xref:System.Windows.Input.RoutedCommand> 。</span><span class="sxs-lookup"><span data-stu-id="b35ee-145">If the command is not `null`, the command is cast to a <xref:System.Windows.Input.RoutedCommand>.</span></span>  <span data-ttu-id="b35ee-146">如果命令为，则 <xref:System.Windows.Input.RoutedCommand> <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> 调用方法以传递 <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> 和 <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> 。</span><span class="sxs-lookup"><span data-stu-id="b35ee-146">If the command is a <xref:System.Windows.Input.RoutedCommand>, then the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  <span data-ttu-id="b35ee-147">如果命令不是 <xref:System.Windows.Input.RoutedCommand> ，则会将其强制转换为， <xref:System.Windows.Input.ICommand> 并将 <xref:System.Windows.Input.ICommand.CanExecute%2A> 方法称为传递 <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> 。</span><span class="sxs-lookup"><span data-stu-id="b35ee-147">If command is not a <xref:System.Windows.Input.RoutedCommand>, it is cast to an <xref:System.Windows.Input.ICommand> and the <xref:System.Windows.Input.ICommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  
  
 <span data-ttu-id="b35ee-148">如果该 <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> 方法返回 `true` ，则启用该控件; 否则，该控件将处于禁用状态。</span><span class="sxs-lookup"><span data-stu-id="b35ee-148">If the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method returns `true`, then the control is enabled; otherwise, the control is disable.</span></span>  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandcanexecutechanged)]
 [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandcanexecutechanged)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b35ee-149"><paramref name="target" /> 不是 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="b35ee-149"><paramref name="target" /> is not a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CanExecuteChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CanExecuteChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CanExecuteChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.RoutedCommand.CanExecuteChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CanExecuteChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ CanExecuteChanged;" />
      <MemberSignature Language="F#" Value="member this.CanExecuteChanged : EventHandler " Usage="member this.CanExecuteChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.Input.ICommand.CanExecuteChanged</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b35ee-150">当命令管理器检测到对命令源所进行的更改时发生。</span><span class="sxs-lookup"><span data-stu-id="b35ee-150">Occurs when changes to the command source are detected by the command manager.</span></span> <span data-ttu-id="b35ee-151">这些更改通常影响是否应对当前命令目标执行命令。</span><span class="sxs-lookup"><span data-stu-id="b35ee-151">These changes often affect whether the command should execute on the current command target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b35ee-152"><xref:System.Windows.Input.RoutedCommand>侦听 <xref:System.Windows.Input.CommandManager.RequerySuggested> 事件，该事件是由引发的 <xref:System.Windows.Input.CommandManager> 。</span><span class="sxs-lookup"><span data-stu-id="b35ee-152">The <xref:System.Windows.Input.RoutedCommand> listens for the <xref:System.Windows.Input.CommandManager.RequerySuggested> event, which is raised by the <xref:System.Windows.Input.CommandManager>.</span></span> <span data-ttu-id="b35ee-153"><xref:System.Windows.Input.CommandManager.RequerySuggested>满足条件时将引发事件，该事件可更改是否应执行该命令，例如键盘焦点的变化。</span><span class="sxs-lookup"><span data-stu-id="b35ee-153">The <xref:System.Windows.Input.CommandManager.RequerySuggested> event is raised whenever conditions are met that may change the whether the command should execute, such as a change in keyboard focus.</span></span>  <span data-ttu-id="b35ee-154">当命令收到事件时 <xref:System.Windows.Input.CommandManager.RequerySuggested> ，它会引发 <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> 事件。</span><span class="sxs-lookup"><span data-stu-id="b35ee-154">When the command receives the <xref:System.Windows.Input.CommandManager.RequerySuggested> event, it raises the <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> event.</span></span>  <span data-ttu-id="b35ee-155">通常，命令源将侦听此事件并 <xref:System.Windows.Input.RoutedCommand> 通过方法进行查询 <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> 。</span><span class="sxs-lookup"><span data-stu-id="b35ee-155">Generally, the command source will listen for this event and query the <xref:System.Windows.Input.RoutedCommand> by way of the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method.</span></span>  <span data-ttu-id="b35ee-156">如果命令无法执行，则大多数命令源会自行禁用，作为其命令绑定的一部分。</span><span class="sxs-lookup"><span data-stu-id="b35ee-156">Most command sources will disable themselves if the command cannot be executed, as part of their command binding.</span></span>  <span data-ttu-id="b35ee-157">例如，当无法执行命令时，这就是一个 <xref:System.Windows.Controls.MenuItem> 灰色。</span><span class="sxs-lookup"><span data-stu-id="b35ee-157">An example of this is when a <xref:System.Windows.Controls.MenuItem> grays itself out when the command cannot be executed.</span></span>  
  
 <span data-ttu-id="b35ee-158">在某些情况下， <xref:System.Windows.Input.CommandManager> 不知道更改要执行的命令的能力的条件更改。</span><span class="sxs-lookup"><span data-stu-id="b35ee-158">In some situations, the <xref:System.Windows.Input.CommandManager> is unaware of a change in conditions that alters the ability of a command to execute.</span></span>  <span data-ttu-id="b35ee-159">在这些情况下，你可以 <xref:System.Windows.Input.CommandManager> <xref:System.Windows.Input.CommandManager.RequerySuggested> 通过调用方法来强制引发事件 <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> ，这将导致 <xref:System.Windows.Input.RoutedCommand> 引发 <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> 事件。</span><span class="sxs-lookup"><span data-stu-id="b35ee-159">In these cases, you can force the <xref:System.Windows.Input.CommandManager> to raises the <xref:System.Windows.Input.CommandManager.RequerySuggested> event by calling the <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> method, this will in turn cause the <xref:System.Windows.Input.RoutedCommand> to raise the <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b35ee-160">下面的示例是 <xref:System.Windows.Input.ICommand.CanExecuteChanged> 自的自定义实现的事件处理程序 <xref:System.Windows.Input.ICommandSource> 。</span><span class="sxs-lookup"><span data-stu-id="b35ee-160">The following example is a <xref:System.Windows.Input.ICommand.CanExecuteChanged> event handler from a custom implementation of <xref:System.Windows.Input.ICommandSource>.</span></span>  
  
 <span data-ttu-id="b35ee-161">`this.Command` 在此示例中，是中的 <xref:System.Windows.Input.ICommandSource.Command%2A> 属性 <xref:System.Windows.Input.ICommandSource> 。</span><span class="sxs-lookup"><span data-stu-id="b35ee-161">`this.Command` in this example is the <xref:System.Windows.Input.ICommandSource.Command%2A> property on the <xref:System.Windows.Input.ICommandSource>.</span></span>  <span data-ttu-id="b35ee-162">如果命令不为 `null` ，则将命令强制转换为 <xref:System.Windows.Input.RoutedCommand> 。</span><span class="sxs-lookup"><span data-stu-id="b35ee-162">If the command is not `null`, the command is cast to a <xref:System.Windows.Input.RoutedCommand>.</span></span>  <span data-ttu-id="b35ee-163">如果命令为，则 <xref:System.Windows.Input.RoutedCommand> <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> 调用方法以传递 <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> 和 <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> 。</span><span class="sxs-lookup"><span data-stu-id="b35ee-163">If the command is a <xref:System.Windows.Input.RoutedCommand>, then the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  <span data-ttu-id="b35ee-164">如果命令不是 <xref:System.Windows.Input.RoutedCommand> ，则会将其强制转换为， <xref:System.Windows.Input.ICommand> 并将 <xref:System.Windows.Input.ICommand.CanExecute%2A> 方法称为传递 <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> 。</span><span class="sxs-lookup"><span data-stu-id="b35ee-164">If command is not a <xref:System.Windows.Input.RoutedCommand>, it is cast to an <xref:System.Windows.Input.ICommand> and the <xref:System.Windows.Input.ICommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  
  
 <span data-ttu-id="b35ee-165">如果该 <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> 方法返回 `true` ，则启用该控件; 否则，将禁用该控件。</span><span class="sxs-lookup"><span data-stu-id="b35ee-165">If the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method returns `true`, then the control is enabled; otherwise, the control is disabled.</span></span>  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandcanexecutechanged)]
 [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandcanexecutechanged)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (object parameter, System.Windows.IInputElement target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(object parameter, class System.Windows.IInputElement target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (parameter As Object, target As IInputElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::Object ^ parameter, System::Windows::IInputElement ^ target);" />
      <MemberSignature Language="F#" Value="member this.Execute : obj * System.Windows.IInputElement -&gt; unit" Usage="routedCommand.Execute (parameter, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
        <Parameter Name="target" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="parameter"><span data-ttu-id="b35ee-166">要传递到处理程序的用户定义的参数。</span><span class="sxs-lookup"><span data-stu-id="b35ee-166">User defined parameter to be passed to the handler.</span></span></param>
        <param name="target"><span data-ttu-id="b35ee-167">要在其中查找命令处理程序的元素。</span><span class="sxs-lookup"><span data-stu-id="b35ee-167">Element at which to begin looking for command handlers.</span></span></param>
        <summary><span data-ttu-id="b35ee-168">对当前命令目标执行 <see cref="T:System.Windows.Input.RoutedCommand" />。</span><span class="sxs-lookup"><span data-stu-id="b35ee-168">Executes the <see cref="T:System.Windows.Input.RoutedCommand" /> on the current command target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b35ee-169">执行的实际逻辑 <xref:System.Windows.Input.RoutedCommand> 不包含在 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法中。</span><span class="sxs-lookup"><span data-stu-id="b35ee-169">The actual logic that executes the <xref:System.Windows.Input.RoutedCommand> is not contained in the <xref:System.Windows.Input.RoutedCommand.Execute%2A> methods.</span></span>  <span data-ttu-id="b35ee-170"><xref:System.Windows.Input.RoutedCommand.Execute%2A> 引发 <xref:System.Windows.Input.CommandManager.PreviewExecuted> 和 <xref:System.Windows.Input.CommandManager.Executed> 事件，这些事件通过使用查找对象的元素树进行隧道和冒泡 <xref:System.Windows.Input.CommandBinding> 。</span><span class="sxs-lookup"><span data-stu-id="b35ee-170"><xref:System.Windows.Input.RoutedCommand.Execute%2A> raises the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events, which tunnel and bubble through the element tree looking for an object with a <xref:System.Windows.Input.CommandBinding>.</span></span>  <span data-ttu-id="b35ee-171">如果 <xref:System.Windows.Input.CommandBinding> <xref:System.Windows.Input.RoutedCommand> 找到了，则 <xref:System.Windows.Input.ExecutedRoutedEventHandler> 调用附加到的 <xref:System.Windows.Input.CommandBinding> 。</span><span class="sxs-lookup"><span data-stu-id="b35ee-171">If a <xref:System.Windows.Input.CommandBinding> for that <xref:System.Windows.Input.RoutedCommand> is found, then the <xref:System.Windows.Input.ExecutedRoutedEventHandler> attached to <xref:System.Windows.Input.CommandBinding> is called.</span></span>  <span data-ttu-id="b35ee-172">这些处理程序提供执行的编程逻辑 <xref:System.Windows.Input.RoutedCommand> 。</span><span class="sxs-lookup"><span data-stu-id="b35ee-172">These handlers supply the programming logic that performs the <xref:System.Windows.Input.RoutedCommand>.</span></span>  
  
 <span data-ttu-id="b35ee-173">在 <xref:System.Windows.Input.CommandManager.PreviewExecuted> <xref:System.Windows.Input.CommandManager.Executed> 上引发和事件 <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> 。</span><span class="sxs-lookup"><span data-stu-id="b35ee-173">The <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events are raised on the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.</span></span>  <span data-ttu-id="b35ee-174">如果 <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> 未在上设置，则将 <xref:System.Windows.Input.ICommandSource> <xref:System.Windows.Input.CommandManager.PreviewExecuted> <xref:System.Windows.Input.CommandManager.Executed> 在具有键盘焦点的元素上引发和事件。</span><span class="sxs-lookup"><span data-stu-id="b35ee-174">If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is not set on the <xref:System.Windows.Input.ICommandSource>, the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events are raised on the element with keyboard focus.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b35ee-175">下面的示例来自于示例的自定义实现 <xref:System.Windows.Input.ICommandSource> 。</span><span class="sxs-lookup"><span data-stu-id="b35ee-175">The following example is from a custom implementation of <xref:System.Windows.Input.ICommandSource> sample.</span></span>  
  
 <span data-ttu-id="b35ee-176">`this.Command` 在此示例中，是的命令属性 <xref:System.Windows.Input.ICommandSource> 。</span><span class="sxs-lookup"><span data-stu-id="b35ee-176">`this.Command` in this example is the Command property on the <xref:System.Windows.Input.ICommandSource>.</span></span>  <span data-ttu-id="b35ee-177">如果此命令不为 null，则该命令将强制转换为 <xref:System.Windows.Input.RoutedCommand> 。</span><span class="sxs-lookup"><span data-stu-id="b35ee-177">If the command is not null, the command is cast to a <xref:System.Windows.Input.RoutedCommand>.</span></span>  <span data-ttu-id="b35ee-178">如果它是 <xref:System.Windows.Input.RoutedCommand> ，则 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 调用方法，将和传递给 <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> 。</span><span class="sxs-lookup"><span data-stu-id="b35ee-178">If it is a <xref:System.Windows.Input.RoutedCommand>, then the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  <span data-ttu-id="b35ee-179">如果该命令不是 <xref:System.Windows.Input.RoutedCommand> ，则会将其强制转换为， <xref:System.Windows.Input.ICommand> 并 <xref:System.Windows.Input.ICommand.Execute%2A> 通过传递来调用方法 <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> 。</span><span class="sxs-lookup"><span data-stu-id="b35ee-179">If the command is not a <xref:System.Windows.Input.RoutedCommand>, it is cast to an <xref:System.Windows.Input.ICommand> and the <xref:System.Windows.Input.ICommand.Execute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandexecute)]
 [!code-vb[ImplementICommandSource#ImplementICommandExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandexecute)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b35ee-180"><paramref name="target" /> 不是 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="b35ee-180"><paramref name="target" /> is not a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="InputGestures">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputGestureCollection InputGestures { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputGestureCollection InputGestures" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.InputGestures" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputGestures As InputGestureCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputGestureCollection ^ InputGestures { System::Windows::Input::InputGestureCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InputGestures : System.Windows.Input.InputGestureCollection" Usage="System.Windows.Input.RoutedCommand.InputGestures" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputGestureCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b35ee-181">获取与此命令关联的 <see cref="T:System.Windows.Input.InputGesture" /> 对象的集合。</span><span class="sxs-lookup"><span data-stu-id="b35ee-181">Gets the collection of <see cref="T:System.Windows.Input.InputGesture" /> objects that are associated with this command.</span></span></summary>
        <value><span data-ttu-id="b35ee-182">输入笔势。</span><span class="sxs-lookup"><span data-stu-id="b35ee-182">The input gestures.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b35ee-183">下面的示例演示如何将新添加 <xref:System.Windows.Input.MouseGesture> 到 <xref:System.Windows.Input.RoutedCommand> 。</span><span class="sxs-lookup"><span data-stu-id="b35ee-183">The following example shows how to add a new <xref:System.Windows.Input.MouseGesture> to a <xref:System.Windows.Input.RoutedCommand>.</span></span>  
  
 [!code-csharp[commandlibrarysnippets#MouseBindingAddedCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#mousebindingaddedcommand)]
 [!code-vb[commandlibrarysnippets#MouseBindingAddedCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#mousebindingaddedcommand)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.InputGesture" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Windows.Input.RoutedCommand.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b35ee-184">获取命令的名称。</span><span class="sxs-lookup"><span data-stu-id="b35ee-184">Gets the name of the command.</span></span></summary>
        <value><span data-ttu-id="b35ee-185">命令的名称。</span><span class="sxs-lookup"><span data-stu-id="b35ee-185">The name of the command.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b35ee-186">当在中引用时，可以使用此属性 <xref:System.Windows.Input.RoutedCommand> [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)] 。</span><span class="sxs-lookup"><span data-stu-id="b35ee-186">This property can be used when referencing a <xref:System.Windows.Input.RoutedCommand> in [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnerType">
      <MemberSignature Language="C#" Value="public Type OwnerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type OwnerType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.OwnerType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OwnerType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ OwnerType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OwnerType : Type" Usage="System.Windows.Input.RoutedCommand.OwnerType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b35ee-187">获取使用命令注册的类型。</span><span class="sxs-lookup"><span data-stu-id="b35ee-187">Gets the type that is registered with the command.</span></span></summary>
        <value><span data-ttu-id="b35ee-188">命令所有者的类型。</span><span class="sxs-lookup"><span data-stu-id="b35ee-188">The type of the command owner.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Input.ICommand.CanExecute">
      <MemberSignature Language="C#" Value="bool ICommand.CanExecute (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Windows.Input.ICommand.CanExecute(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CanExecute (parameter As Object) As Boolean Implements ICommand.CanExecute" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Windows.Input.ICommand.CanExecute(System::Object ^ parameter) = System::Windows::Input::ICommand::CanExecute;" />
      <MemberSignature Language="F#" Value="abstract member System.Windows.Input.ICommand.CanExecute : obj -&gt; bool&#xA;override this.System.Windows.Input.ICommand.CanExecute : obj -&gt; bool" Usage="routedCommand.System.Windows.Input.ICommand.CanExecute parameter" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Input.ICommand.CanExecute(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter"><span data-ttu-id="b35ee-189">此命令使用的数据。</span><span class="sxs-lookup"><span data-stu-id="b35ee-189">Data used by the command.</span></span>  <span data-ttu-id="b35ee-190">如果此命令不需要传递数据，则该对象可以设置为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b35ee-190">If the command does not require data to be passed, this object can be set to <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="b35ee-191">有关此成员的说明，请参见 <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)" />。</span><span class="sxs-lookup"><span data-stu-id="b35ee-191">For a description of this members, see <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)" />.</span></span></summary>
        <returns><span data-ttu-id="b35ee-192">如果可执行此命令，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b35ee-192"><see langword="true" /> if this command can be executed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b35ee-193">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="b35ee-193">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b35ee-194">它只能在 <xref:System.Windows.Input.RoutedCommand> 实例被强制转换为 <xref:System.Windows.Input.ICommand> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="b35ee-194">It can be used only when the <xref:System.Windows.Input.RoutedCommand> instance is cast to an <xref:System.Windows.Input.ICommand> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" />
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Input.ICommand.Execute">
      <MemberSignature Language="C#" Value="void ICommand.Execute (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Input.ICommand.Execute(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Execute (parameter As Object) Implements ICommand.Execute" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Input.ICommand.Execute(System::Object ^ parameter) = System::Windows::Input::ICommand::Execute;" />
      <MemberSignature Language="F#" Value="abstract member System.Windows.Input.ICommand.Execute : obj -&gt; unit&#xA;override this.System.Windows.Input.ICommand.Execute : obj -&gt; unit" Usage="routedCommand.System.Windows.Input.ICommand.Execute parameter" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Input.ICommand.Execute(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter"><span data-ttu-id="b35ee-195">此命令使用的数据。</span><span class="sxs-lookup"><span data-stu-id="b35ee-195">Data used by the command.</span></span>  <span data-ttu-id="b35ee-196">如果此命令不需要传递数据，则该对象可以设置为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b35ee-196">If the command does not require data to be passed, this object can be set to <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="b35ee-197">有关此成员的说明，请参见 <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)" />。</span><span class="sxs-lookup"><span data-stu-id="b35ee-197">For a description of this members, see <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b35ee-198">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="b35ee-198">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b35ee-199">它只能在 <xref:System.Windows.Input.RoutedCommand> 实例被强制转换为 <xref:System.Windows.Input.ICommand> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="b35ee-199">It can be used only when the <xref:System.Windows.Input.RoutedCommand> instance is cast to an <xref:System.Windows.Input.ICommand> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b35ee-200">另请参阅</span><span class="sxs-lookup"><span data-stu-id="b35ee-200">See Also</span></span>  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
