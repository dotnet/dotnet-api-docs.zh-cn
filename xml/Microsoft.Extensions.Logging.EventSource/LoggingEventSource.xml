<Type Name="LoggingEventSource" FullName="Microsoft.Extensions.Logging.EventSource.LoggingEventSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="95e424a3682dda9f3aca1b994842fdf26f636c93" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89944895" /></Metadata><TypeSignature Language="C#" Value="public sealed class LoggingEventSource : System.Diagnostics.Tracing.EventSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LoggingEventSource extends System.Diagnostics.Tracing.EventSource" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Logging.EventSource.LoggingEventSource" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LoggingEventSource&#xA;Inherits EventSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class LoggingEventSource sealed : System::Diagnostics::Tracing::EventSource" />
  <TypeSignature Language="F#" Value="type LoggingEventSource = class&#xA;    inherit EventSource" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Logging.EventSource</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.Tracing.EventSource</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Diagnostics.Tracing.EventSource(Name="Microsoft-Extensions-Logging")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.Tracing.EventSource(Name="Microsoft-Extensions-Logging")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="9573b-101">LoggingEventSource 是连接所有基于 ILogger 的日志记录和 EventSource/EventListener 日志记录的桥。</span><span class="sxs-lookup"><span data-stu-id="9573b-101">The LoggingEventSource is the bridge from all ILogger based logging to EventSource/EventListener logging.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="9573b-102">启用调用的 EventSource 即可启用此日志记录 `Microsoft-Extensions-Logging` 。</span><span class="sxs-lookup"><span data-stu-id="9573b-102">You turn this logging on by enabling the EventSource called `Microsoft-Extensions-Logging`.</span></span>
            
<span data-ttu-id="9573b-103">启用 EventSource 后，你设置的 EventLevel 将以明显的方式转换为与 ILogger 关联的级别 (因此 Debug = verbose，信息性 = 信息性 .。。严重 = = 关键) </span><span class="sxs-lookup"><span data-stu-id="9573b-103">When you enabled the EventSource, the EventLevel you set is translated in the obvious way to the level associated with the ILogger (thus Debug = verbose, Informational = Informational ... Critical == Critical)</span></span>
            
<span data-ttu-id="9573b-104">这使你可以通过简单的方式按事件级别进行筛选。</span><span class="sxs-lookup"><span data-stu-id="9573b-104">This allows you to filter by event level in a straightforward way.</span></span>
            
<span data-ttu-id="9573b-105">为了更好地控制，可以指定名为的 EventSource 参数 `FilterSpecs` 。</span><span class="sxs-lookup"><span data-stu-id="9573b-105">For finer control you can specify a EventSource Argument called `FilterSpecs`.</span></span>
            
<span data-ttu-id="9573b-106">`FilterSpecs`参数是以分号分隔的规范列表。</span><span class="sxs-lookup"><span data-stu-id="9573b-106">The `FilterSpecs` argument is a semicolon separated list of specifications.</span></span> <span data-ttu-id="9573b-107">其中每个规范都为</span><span class="sxs-lookup"><span data-stu-id="9573b-107">Where each specification is</span></span>

```
SPEC =                          // empty spec, same as *
     | NAME                     // Just a name the level is the default level
     | NAME : LEVEL            // specifies level for a particular logger (can have a * suffix).
```
            
<span data-ttu-id="9573b-108">其中 Name 是 ILoggger (情况) 的名称，但名称可以包含一个作为 \* 后缀的通配符。</span><span class="sxs-lookup"><span data-stu-id="9573b-108">Where Name is the name of a ILoggger (case matters), Name can have a \* which acts as a wildcard AS A SUFFIX.</span></span> <span data-ttu-id="9573b-109">因此，Net \* 将匹配以 "Net" 开头的所有记录器。</span><span class="sxs-lookup"><span data-stu-id="9573b-109">Thus, Net\* will match any loggers that start with the 'Net'.</span></span>
            
<span data-ttu-id="9573b-110">LEVEL 为数字或 LogLevel 字符串。</span><span class="sxs-lookup"><span data-stu-id="9573b-110">The LEVEL is a number or a LogLevel string.</span></span> <span data-ttu-id="9573b-111">0 = 跟踪，1 = 调试，2 = 信息，3 = 警告，4 = 错误，严重 = 5，指定关联模式的级别。</span><span class="sxs-lookup"><span data-stu-id="9573b-111">0=Trace, 1=Debug, 2=Information, 3=Warning,  4=Error, Critical=5 This specifies the level for the associated pattern.</span></span>  <span data-ttu-id="9573b-112">如果未指定数字（规范的第一种形式），则为 EventSource 的默认级别。</span><span class="sxs-lookup"><span data-stu-id="9573b-112">If the number is not specified, (first form of the specification) it is the default level for the EventSource.</span></span>
            
<span data-ttu-id="9573b-113">如果某个特定名称与多个模式匹配，则使用第一个匹配项。</span><span class="sxs-lookup"><span data-stu-id="9573b-113">First match is used if a particular name matches more than one pattern.</span></span>
            
<span data-ttu-id="9573b-114">除了 level 和 FilterSpec 参数外，还可以设置 EventSource 关键字。</span><span class="sxs-lookup"><span data-stu-id="9573b-114">In addition to the level and FilterSpec argument, you can also set EventSource Keywords.</span></span> <span data-ttu-id="9573b-115">请参阅下面的关键字定义，但基本上你可决定是否要使用该关键字</span><span class="sxs-lookup"><span data-stu-id="9573b-115">See the Keywords definition below, but basically you get to decide if you wish to have</span></span>
            
* <span data-ttu-id="9573b-116">关键字。消息-将以分析形式显示带有数据的事件。</span><span class="sxs-lookup"><span data-stu-id="9573b-116">Keywords.Message - You get the event with the data in parsed form.</span></span>
* <span data-ttu-id="9573b-117">Keywords.JsonMessage-你使用分析窗体中的数据获取事件，但 (未通过参数 ... 的 JSON blob ) </span><span class="sxs-lookup"><span data-stu-id="9573b-117">Keywords.JsonMessage - you get an event with the data in parse form but as a JSON blob (not broken up by argument ...)</span></span>
* <span data-ttu-id="9573b-118">FormattedMessage-获取带有格式为字符串的数据的事件</span><span class="sxs-lookup"><span data-stu-id="9573b-118">Keywords.FormattedMessage - you get an event with the data formatted as a string</span></span>
            
<span data-ttu-id="9573b-119">你应该一次只启用其中一个关键字，但你可以将它们全部打开并使用三种不同的方式获得相同的数据。</span><span class="sxs-lookup"><span data-stu-id="9573b-119">It is expected that you will turn only one of these keywords on at a time, but you can turn them all on and get the same data logged three different ways.</span></span>
            
## Examples
            
<span data-ttu-id="9573b-120">下面的示例演示如何使用 EventListener 获取 ILogging 信息：</span><span class="sxs-lookup"><span data-stu-id="9573b-120">The following example shows how to use an EventListener to get ILogging information:</span></span>
            
```csharp
class MyEventListener : EventListener 
{
    protected override void OnEventSourceCreated(EventSource eventSource) 
    {
        if (eventSource.Name == "Microsoft-Extensions-Logging") 
        {
            // initialize a string, string dictionary of arguments to pass to the EventSource.
            // Turn on loggers matching App* to Information, everything else (*) is the default level (which is EventLevel.Error)
            var args = new Dictionary&lt;string, string&gt;() { { "FilterSpecs", "App*:Information;*" } };
            // Set the default level (verbosity) to Error, and only ask for the formatted messages in this case.
            EnableEvents(eventSource, EventLevel.Error, LoggingEventSource.Keywords.FormattedMessage, args);
        }
    }

    protected override void OnEventWritten(EventWrittenEventArgs eventData) 
    {
        // Look for the formatted message event, which has the following argument layout (as defined in the LoggingEventSource.
        // FormattedMessage(LogLevel Level, int FactoryID, string LoggerName, string EventId, string FormattedMessage);
        if (eventData.EventName == "FormattedMessage")
            Console.WriteLine("Logger {0}: {1}", eventData.Payload[2], eventData.Payload[4]);
    }
}
```

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="OnEventCommand">
      <MemberSignature Language="C#" Value="protected override void OnEventCommand (System.Diagnostics.Tracing.EventCommandEventArgs command);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnEventCommand(class System.Diagnostics.Tracing.EventCommandEventArgs command) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.EventSource.LoggingEventSource.OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnEventCommand (command As EventCommandEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnEventCommand(System::Diagnostics::Tracing::EventCommandEventArgs ^ command);" />
      <MemberSignature Language="F#" Value="override this.OnEventCommand : System.Diagnostics.Tracing.EventCommandEventArgs -&gt; unit" Usage="loggingEventSource.OnEventCommand command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.EventSource</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Diagnostics.Tracing.EventCommandEventArgs" />
      </Parameters>
      <Docs>
        <param name="command">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>
