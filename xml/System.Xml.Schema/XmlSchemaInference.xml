<Type Name="XmlSchemaInference" FullName="System.Xml.Schema.XmlSchemaInference">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e8c0d7e86748d1fb69f5988b77b0f0a46f9e91f0" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86691533" /></Metadata><TypeSignature Language="C#" Value="public sealed class XmlSchemaInference" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XmlSchemaInference extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Schema.XmlSchemaInference" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XmlSchemaInference" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlSchemaInference sealed" />
  <TypeSignature Language="F#" Value="type XmlSchemaInference = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Xml.ReaderWriter" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>从 XML 文档中推理出 XML 架构定义语言 (XSD) 架构。 不能继承 <see cref="T:System.Xml.Schema.XmlSchemaInference" /> 类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
> -   不要使用来自未知或不受信任的源或位置的架构。 这样做会破坏代码的安全性。  
> -   XML 架构 (包括内联架构) 在本质上容易受到拒绝服务攻击;不要在不受信任的情况下接受它们。  
> -   架构验证错误消息和异常可能会向架构文件公开有关内容模型或 URI 路径的敏感信息。 请注意不要向不受信任的调用方公开此信息。  
  
 <xref:System.Xml.Schema.XmlSchemaInference>命名空间中的类可 <xref:System.Xml.Schema?displayProperty=nameWithType> 用于从 xml 文档的结构推断 Xml 架构定义语言 (XSD) 架构。 <xref:System.Xml.Schema.XmlSchemaInference> 类输出的 XML 架构可以验证 XML 文档。  
  
 <xref:System.Xml.Schema.XmlSchemaInference>类支持 W3C XML 和 Xml 架构标准。 它可用于推断新架构或优化现有架构。  
  
   
  
## Examples  
 此示例使用 XML 文件作为输入，并生成一个可验证示例 XML 的架构。  
  
 [!code-cpp[XmlSchemaInferenceExamples#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlSchemaInferenceExamples/CPP/XmlSchemaInferenceExamples.cpp#1)]
 [!code-csharp[XmlSchemaInferenceExamples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaInferenceExamples/CS/XmlSchemaInferenceExamples.cs#1)]
 [!code-vb[XmlSchemaInferenceExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaInferenceExamples/VB/XmlSchemaInferenceExamples.vb#1)]  
  
 下面是输入 XML 文件。  
  
 [!code-xml[XmlSchemaInferenceExamples#5](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaInferenceExamples/XML/contosoBooks.xml#5)]  
  
 下面是从 XML 文档推断的架构。  
  
 [!code-xml[XmlSchemaInferenceExamples#6](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaInferenceExamples/XML/contosoBooks.xsd#6)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSchemaInference ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaInference.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSchemaInference();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaInference" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InferSchema">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>从指定的 XML 文档推理出 XML 架构定义语言 (XSD) 架构。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InferSchema">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaSet InferSchema (System.Xml.XmlReader instanceDocument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchemaSet InferSchema(class System.Xml.XmlReader instanceDocument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaInference.InferSchema(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function InferSchema (instanceDocument As XmlReader) As XmlSchemaSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchemaSet ^ InferSchema(System::Xml::XmlReader ^ instanceDocument);" />
      <MemberSignature Language="F#" Value="member this.InferSchema : System.Xml.XmlReader -&gt; System.Xml.Schema.XmlSchemaSet" Usage="xmlSchemaInference.InferSchema instanceDocument" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceDocument" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="instanceDocument"><see cref="T:System.Xml.XmlReader" /> 对象，该对象包含要从其推理出架构的 XML 文档。</param>
        <summary>从指定的 <see cref="T:System.Xml.XmlReader" /> 对象包含的 XML 文档推理出 XML 架构定义语言 (XSD) 架构。</summary>
        <returns><see cref="T:System.Xml.Schema.XmlSchemaSet" /> 对象，该对象包含推理出的架构。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Schema.XmlSchemaInference.InferSchema%2A>方法从指定的对象中包含的 XML 实例文档中推断出一个或多个 W3C XML 架构定义语言 (XSD) 架构 <xref:System.Xml.XmlReader> 。 如果 XML 文档包含多个命名空间中的元素和属性，则会生成多个架构：一个用于文档中使用的每个命名空间。 主架构是可以验证整个 XML 文档的架构，其目标命名空间与 XML 文档的文档元素的命名空间相同。  
  
 以下是使用方法时要考虑的重要注意事项 <xref:System.Xml.Schema.XmlSchemaInference.InferSchema%2A> 。  
  
-   <xref:System.Xml.Schema.XmlSchemaInference.InferSchema%2A>方法忽略 `xsi:type` XML 文档中的任何、 `xsi:schemaLocation` 或 `xsi:noNamespaceSchemaLocation` 特性。  
  
-   如果该 <xref:System.Xml.XmlReader> 对象是类型化的，则将忽略其包含的类型信息。  
  
-   如果对象所在的 <xref:System.Xml.XmlReader> 元素不是 XML 文档的根元素，则只为该元素推断架构。 如果 <xref:System.Xml.XmlReader> 对象未定位在元素上，则将 <xref:System.Xml.XmlReader.Read%2A> 在参数上调用方法， <xref:System.Xml.XmlReader> 直到遇到元素 (例如 <xref:System.Xml.XmlReader.NodeType%2A>) 时 <xref:System.Xml.XmlNodeType.Element> 。 此时，推理过程从该元素开始。 如果在文档末尾之前没有遇到元素， <xref:System.ArgumentException> 则会引发。  
  
   
  
## Examples  
 此示例使用 XML 文件作为输入，并生成一个可验证示例 XML 的架构。  
  
 [!code-cpp[XmlSchemaInferenceExamples#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlSchemaInferenceExamples/CPP/XmlSchemaInferenceExamples.cpp#1)]
 [!code-csharp[XmlSchemaInferenceExamples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaInferenceExamples/CS/XmlSchemaInferenceExamples.cs#1)]
 [!code-vb[XmlSchemaInferenceExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaInferenceExamples/VB/XmlSchemaInferenceExamples.vb#1)]  
  
 下面是输入 XML 文件。  
  
 [!code-xml[XmlSchemaInferenceExamples#5](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaInferenceExamples/XML/contosoBooks.xml#5)]  
  
 下面是从 XML 文档推断的架构。  
  
 [!code-xml[XmlSchemaInferenceExamples#6](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaInferenceExamples/XML/contosoBooks.xsd#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">XML 文档不是格式良好的文档。</exception>
        <exception cref="T:System.Xml.Schema.XmlSchemaInferenceException"><see cref="T:System.Xml.XmlReader" /> 对象不位于根节点或元素上。 架构推理过程中出现错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="InferSchema">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaSet InferSchema (System.Xml.XmlReader instanceDocument, System.Xml.Schema.XmlSchemaSet schemas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchemaSet InferSchema(class System.Xml.XmlReader instanceDocument, class System.Xml.Schema.XmlSchemaSet schemas) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaInference.InferSchema(System.Xml.XmlReader,System.Xml.Schema.XmlSchemaSet)" />
      <MemberSignature Language="VB.NET" Value="Public Function InferSchema (instanceDocument As XmlReader, schemas As XmlSchemaSet) As XmlSchemaSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchemaSet ^ InferSchema(System::Xml::XmlReader ^ instanceDocument, System::Xml::Schema::XmlSchemaSet ^ schemas);" />
      <MemberSignature Language="F#" Value="member this.InferSchema : System.Xml.XmlReader * System.Xml.Schema.XmlSchemaSet -&gt; System.Xml.Schema.XmlSchemaSet" Usage="xmlSchemaInference.InferSchema (instanceDocument, schemas)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceDocument" Type="System.Xml.XmlReader" />
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
      </Parameters>
      <Docs>
        <param name="instanceDocument"><see cref="T:System.Xml.XmlReader" /> 对象，该对象包含要从其推理出架构的 XML 文档。</param>
        <param name="schemas"><see cref="T:System.Xml.Schema.XmlSchemaSet" /> 对象，包含用于精炼推理出的架构的现有架构。</param>
        <summary>从指定的 <see cref="T:System.Xml.XmlReader" /> 对象包含的 XML 文档推理出 XML 架构定义语言 (XSD) 架构，并通过用相同目标命名空间指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 对象中的现有架构精炼已推理出的架构。</summary>
        <returns><see cref="T:System.Xml.Schema.XmlSchemaSet" /> 对象，该对象包含推理出的架构。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Schema.XmlSchemaInference.InferSchema%2A>方法从指定的对象中包含的 XML 实例文档中推断出一个或多个 W3C XML 架构定义语言 (XSD) 架构 <xref:System.Xml.XmlReader> 。 如果 XML 文档包含多个命名空间中的元素和属性，则会生成多个架构：一个用于文档中使用的每个命名空间。 主架构是可以验证整个 XML 文档的架构，其目标命名空间与 XML 文档的文档元素的命名空间相同。  
  
 以下是使用方法时要考虑的重要注意事项 <xref:System.Xml.Schema.XmlSchemaInference.InferSchema%2A> 。  
  
-   <xref:System.Xml.Schema.XmlSchemaInference.InferSchema%2A>方法忽略 `xsi:type` XML 文档中的任何、 `xsi:schemaLocation` 或 `xsi:noNamespaceSchemaLocation` 特性。  
  
-   如果该 <xref:System.Xml.XmlReader> 对象是类型化的，则将忽略其包含的类型信息。  
  
-   如果对象所在的 <xref:System.Xml.XmlReader> 元素不是 XML 文档的根元素，则只为该元素推断架构。 如果 <xref:System.Xml.XmlReader> 对象未定位在元素上，则将 <xref:System.Xml.XmlReader.Read%2A> 在参数上调用方法， <xref:System.Xml.XmlReader> 直到遇到元素 (例如 <xref:System.Xml.XmlReader.NodeType%2A>) 时 <xref:System.Xml.XmlNodeType.Element> 。 此时，推理过程从该元素开始。 如果在文档末尾之前没有遇到元素， <xref:System.ArgumentException> 则会引发。  
  
-   如果 <xref:System.Xml.Schema.XmlSchemaSet> 对象作为参数传递，并且该对象所定位到的元素 <xref:System.Xml.XmlReader> 是在的某个架构中定义的，则将 <xref:System.Xml.Schema.XmlSchemaSet> 使用推断的架构来优化 <xref:System.Xml.Schema.XmlSchemaSet> 具有相同目标命名空间的参数中的现有架构; 否则，将为该命名空间推断新的架构。  
  
   
  
## Examples  
 下面的示例代码将 XML 文档1作为输入，并生成一个可验证 XML 文档1的架构。 然后，该示例代码将使用 XML 文档2，并根据 XML 文档2中找到的更改优化从 XML 文档1生成的架构。  
  
 下面是 XML 文档1。  
  
 [!code-xml[XmlSchemaInferenceExamples#13](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaInferenceExamples/XML/item1.xml#13)]  
  
 下面是 XML document 2。  
  
 [!code-xml[XmlSchemaInferenceExamples#14](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaInferenceExamples/XML/item2.xml#14)]  
  
 下面的示例代码从中包含的第一个 XML 文档推断架构 `reader` ，然后使用中包含的第二个 xml 文档中所包含的更改来精炼推理出的架构 `reader1` 。 示例代码使用第一个重载 <xref:System.Xml.Schema.XmlSchemaInference.InferSchema%2A> 方法来推断架构，并使用第二个重载 <xref:System.Xml.Schema.XmlSchemaInference.InferSchema%2A> 方法来优化对象中的现有架构 <xref:System.Xml.Schema.XmlSchemaSet> 。  
  
 [!code-cpp[XmlSchemaInferenceExamples#4](~/samples/snippets/cpp/VS_Snippets_Data/XmlSchemaInferenceExamples/CPP/XmlSchemaInferenceExamples.cpp#4)]
 [!code-csharp[XmlSchemaInferenceExamples#4](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaInferenceExamples/CS/XmlSchemaInferenceExamples.cs#4)]
 [!code-vb[XmlSchemaInferenceExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaInferenceExamples/VB/XmlSchemaInferenceExamples.vb#4)]  
  
 以下架构是从 XML 文档1推断的架构。  
  
 [!code-xml[XmlSchemaInferenceExamples#15](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaInferenceExamples/XML/InferSchema1.xml#15)]  
  
 以下架构是基于 XML 文档2的上述架构的优化版本。  
  
 [!code-xml[XmlSchemaInferenceExamples#16](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaInferenceExamples/XML/InferSchema2.xml#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">XML 文档不是格式良好的文档。</exception>
        <exception cref="T:System.Xml.Schema.XmlSchemaInferenceException"><see cref="T:System.Xml.XmlReader" /> 对象不位于根节点或元素上。 架构推理过程中出现错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="Occurrence">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaInference.InferenceOption Occurrence { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.Schema.XmlSchemaInference/InferenceOption Occurrence" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaInference.Occurrence" />
      <MemberSignature Language="VB.NET" Value="Public Property Occurrence As XmlSchemaInference.InferenceOption" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaInference::InferenceOption Occurrence { System::Xml::Schema::XmlSchemaInference::InferenceOption get(); void set(System::Xml::Schema::XmlSchemaInference::InferenceOption value); };" />
      <MemberSignature Language="F#" Value="member this.Occurrence : System.Xml.Schema.XmlSchemaInference.InferenceOption with get, set" Usage="System.Xml.Schema.XmlSchemaInference.Occurrence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaInference+InferenceOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> 值，该值影响从 XML 文档推理出的架构匹配项声明。</summary>
        <value>一个 <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果将 <xref:System.Xml.Schema.XmlSchemaInference.Occurrence%2A> 属性设置为 <xref:System.Xml.Schema.XmlSchemaInference.InferenceOption.Restricted> ，则在 XML 文档中第一次遇到元素时，架构声明将推断为 `minOccurs="1"` 。 如果遇到属性，架构声明将推断为 `use="required"` 。  
  
 如果将 <xref:System.Xml.Schema.XmlSchemaInference.Occurrence%2A> 属性设置为，则将 <xref:System.Xml.Schema.XmlSchemaInference.InferenceOption.Relaxed> 元素架构声明推断为 `minOccurs="0"` ，并将属性架构声明推断为 `use="optional"` 。  
  
 属性的默认值 <xref:System.Xml.Schema.XmlSchemaInference.Occurrence%2A> 为 <xref:System.Xml.Schema.XmlSchemaInference.InferenceOption.Restricted> 。  
  
   
  
## Examples  
 此示例演示事件如何受到属性的影响 <xref:System.Xml.Schema.XmlSchemaInference.Occurrence%2A> 。 示例代码以两种不同的方式从 XML 文件推断出现：宽松和限制。 下面是示例 XML 文件。  
  
 [!code-xml[XmlSchemaInferenceExamples#7](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaInferenceExamples/XML/Occurrence1.xml#7)]  
  
 下面的示例代码指示 <xref:System.Xml.Schema.XmlSchemaInference> 类以宽松方式推断元素和属性的出现。  
  
 [!code-cpp[XmlSchemaInferenceExamples#2](~/samples/snippets/cpp/VS_Snippets_Data/XmlSchemaInferenceExamples/CPP/XmlSchemaInferenceExamples.cpp#2)]
 [!code-csharp[XmlSchemaInferenceExamples#2](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaInferenceExamples/CS/XmlSchemaInferenceExamples.cs#2)]
 [!code-vb[XmlSchemaInferenceExamples#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaInferenceExamples/VB/XmlSchemaInferenceExamples.vb#2)]  
  
 由于 <xref:System.Xml.Schema.XmlSchemaInference.Occurrence%2A> 属性设置为，因此 <xref:System.Xml.Schema.XmlSchemaInference.InferenceOption.Relaxed> 生成了以下架构。  
  
 [!code-xml[XmlSchemaInferenceExamples#8](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaInferenceExamples/XML/Occurrence2.xml#8)]  
  
 在上面的示例代码中，如果 <xref:System.Xml.Schema.XmlSchemaInference.Occurrence%2A> 属性未设置为 <xref:System.Xml.Schema.XmlSchemaInference.InferenceOption.Relaxed> ，则 <xref:System.Xml.Schema.XmlSchemaInference> 类将默认为， <xref:System.Xml.Schema.XmlSchemaInference.InferenceOption.Restricted> 并生成以下架构。  
  
 [!code-xml[XmlSchemaInferenceExamples#9](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaInferenceExamples/XML/Occurrence3.xml#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeInference">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaInference.InferenceOption TypeInference { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.Schema.XmlSchemaInference/InferenceOption TypeInference" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaInference.TypeInference" />
      <MemberSignature Language="VB.NET" Value="Public Property TypeInference As XmlSchemaInference.InferenceOption" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaInference::InferenceOption TypeInference { System::Xml::Schema::XmlSchemaInference::InferenceOption get(); void set(System::Xml::Schema::XmlSchemaInference::InferenceOption value); };" />
      <MemberSignature Language="F#" Value="member this.TypeInference : System.Xml.Schema.XmlSchemaInference.InferenceOption with get, set" Usage="System.Xml.Schema.XmlSchemaInference.TypeInference" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaInference+InferenceOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置影响从 XML 文档推理出的类型的 <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> 值。</summary>
        <value>一个 <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果将 <xref:System.Xml.Schema.XmlSchemaInference.TypeInference%2A> 属性设置为 <xref:System.Xml.Schema.XmlSchemaInference.InferenceOption.Relaxed> ，则始终会出现带有简单内容的 XML 文档中推断出的元素类型和属性 `xs:string` 。 如果将 <xref:System.Xml.Schema.XmlSchemaInference.TypeInference%2A> 属性设置为 <xref:System.Xml.Schema.XmlSchemaInference.InferenceOption.Restricted> ，则会推断出更具体的类型，例如 `xs:date` 、、 `xs:decimal` `xs:unsignedByte` 等。  
  
 属性的默认值 <xref:System.Xml.Schema.XmlSchemaInference.TypeInference%2A> 为 <xref:System.Xml.Schema.XmlSchemaInference.InferenceOption.Restricted> 。  
  
   
  
## Examples  
 此示例说明类型推理如何受 <xref:System.Xml.Schema.XmlSchemaInference.TypeInference%2A> 属性影响。 示例代码以两种不同的方式从 XML 文件推断类型：宽松和受限。 下面是示例 XML 文件。  
  
 [!code-xml[XmlSchemaInferenceExamples#10](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaInferenceExamples/XML/TypeInference1.xml#10)]  
  
 下面的示例代码指示 <xref:System.Xml.Schema.XmlSchemaInference> 类推断 `xs:string` 具有简单内容的元素和属性。  
  
 [!code-cpp[XmlSchemaInferenceExamples#3](~/samples/snippets/cpp/VS_Snippets_Data/XmlSchemaInferenceExamples/CPP/XmlSchemaInferenceExamples.cpp#3)]
 [!code-csharp[XmlSchemaInferenceExamples#3](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaInferenceExamples/CS/XmlSchemaInferenceExamples.cs#3)]
 [!code-vb[XmlSchemaInferenceExamples#3](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaInferenceExamples/VB/XmlSchemaInferenceExamples.vb#3)]  
  
 由于 <xref:System.Xml.Schema.XmlSchemaInference.TypeInference%2A> 属性设置为，因此 <xref:System.Xml.Schema.XmlSchemaInference.InferenceOption.Relaxed> 生成了以下架构。  
  
 [!code-xml[XmlSchemaInferenceExamples#11](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaInferenceExamples/XML/TypeInference2.xml#11)]  
  
 在上面的示例代码中，如果 <xref:System.Xml.Schema.XmlSchemaInference.TypeInference%2A> 属性未设置为 <xref:System.Xml.Schema.XmlSchemaInference.InferenceOption.Relaxed> ，则 <xref:System.Xml.Schema.XmlSchemaInference> 类将默认为， <xref:System.Xml.Schema.XmlSchemaInference.InferenceOption.Restricted> 并生成以下架构。  
  
 [!code-xml[XmlSchemaInferenceExamples#12](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaInferenceExamples/XML/TypeInference3.xml#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
