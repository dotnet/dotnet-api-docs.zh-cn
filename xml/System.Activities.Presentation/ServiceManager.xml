<Type Name="ServiceManager" FullName="System.Activities.Presentation.ServiceManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="922becc36c89a5b9e47b75351e50768682f3a772" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86836475" /></Metadata><TypeSignature Language="C#" Value="public abstract class ServiceManager : IServiceProvider, System.Collections.Generic.IEnumerable&lt;Type&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ServiceManager extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt;, class System.Collections.IEnumerable, class System.IServiceProvider" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Presentation.ServiceManager" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ServiceManager&#xA;Implements IEnumerable(Of Type), IServiceProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceManager abstract : IServiceProvider, System::Collections::Generic::IEnumerable&lt;Type ^&gt;" />
  <TypeSignature Language="F#" Value="type ServiceManager = class&#xA;    interface IServiceProvider&#xA;    interface seq&lt;Type&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Activities.Presentation</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Type&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IServiceProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="cda13-101">实现 <see cref="T:System.IServiceProvider" />，并提供对编辑上下文所提供服务的访问。</span><span class="sxs-lookup"><span data-stu-id="cda13-101">Implements <see cref="T:System.IServiceProvider" /> and provides access to services offered by the editing context.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cda13-102"><xref:System.Activities.Presentation.EditingContext.Services%2A> 表示主机提供给设计器使用的功能，或表示设计器用于使功能对编辑器内的所有设计器可用的功能。</span><span class="sxs-lookup"><span data-stu-id="cda13-102"><xref:System.Activities.Presentation.EditingContext.Services%2A> represent functionality that is either provided by the host for the designer to use or that is used by the designer to make functionality available to all designers within the editor.</span></span> <span data-ttu-id="cda13-103">它是由 <xref:System.Activities.Presentation.EditingContext> 属性从 <xref:System.Activities.Presentation.EditingContext.Services%2A> 中获取的。</span><span class="sxs-lookup"><span data-stu-id="cda13-103">It is obtained from the <xref:System.Activities.Presentation.EditingContext> by the <xref:System.Activities.Presentation.EditingContext.Services%2A> property.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ServiceManager ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ServiceManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cda13-104">初始化 <see cref="T:System.Activities.Presentation.ServiceManager" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="cda13-104">Initializes a new instance of the <see cref="T:System.Activities.Presentation.ServiceManager" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public abstract bool Contains (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Contains(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Contains (serviceType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Contains(Type ^ serviceType);" />
      <MemberSignature Language="F#" Value="abstract member Contains : Type -&gt; bool" Usage="serviceManager.Contains serviceType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType"><span data-ttu-id="cda13-105">要检查的服务类型。</span><span class="sxs-lookup"><span data-stu-id="cda13-105">The type of service to check.</span></span></param>
        <summary><span data-ttu-id="cda13-106">返回一个布尔值，该值指示服务器管理器是否包含给定类型的服务。</span><span class="sxs-lookup"><span data-stu-id="cda13-106">Returns a Boolean value that indicates whether the service manager contains a service of the given type.</span></span></summary>
        <returns><span data-ttu-id="cda13-107">如果发布了类型为 <paramref name="serviceType" /> 的服务，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="cda13-107"><see langword="true" /> if a service of type <paramref name="serviceType" /> has been published; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains&lt;TServiceType&gt;">
      <MemberSignature Language="C#" Value="public bool Contains&lt;TServiceType&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains&lt;TServiceType&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Contains``1" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains(Of TServiceType) () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TServiceType&gt;&#xA; bool Contains();" />
      <MemberSignature Language="F#" Value="member this.Contains : unit -&gt; bool" Usage="serviceManager.Contains " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TServiceType" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TServiceType"><span data-ttu-id="cda13-108">要检查的服务类型。</span><span class="sxs-lookup"><span data-stu-id="cda13-108">The type of service to check.</span></span></typeparam>
        <summary><span data-ttu-id="cda13-109">返回一个布尔值，该值指示服务器管理器是否包含给定类型的服务。</span><span class="sxs-lookup"><span data-stu-id="cda13-109">Returns a Boolean value that indicates whether the service manager contains a service of the given type.</span></span></summary>
        <returns><span data-ttu-id="cda13-110">如果发布了类型为 <paramref name="serviceType" /> 的服务，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="cda13-110"><see langword="true" /> if a service of type <paramref name="serviceType" /> has been published; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IEnumerator&lt;Type&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;class System.Type&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEnumerator () As IEnumerator(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Collections::Generic::IEnumerator&lt;Type ^&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;Type&gt;" Usage="serviceManager.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cda13-111">检索一个枚举器，该枚举器可用于枚举此服务管理器发布的所有服务。</span><span class="sxs-lookup"><span data-stu-id="cda13-111">Retrieves an enumerator that can be used to enumerate all of the services that this service manager publishes.</span></span></summary>
        <returns><span data-ttu-id="cda13-112">返回 <see cref="T:System.Collections.Generic.IEnumerator`1" />，其中包含所发布服务的枚举。</span><span class="sxs-lookup"><span data-stu-id="cda13-112">Returns <see cref="T:System.Collections.Generic.IEnumerator`1" />, which contains an enumeration of published services.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRequiredService&lt;TServiceType&gt;">
      <MemberSignature Language="C#" Value="public TServiceType GetRequiredService&lt;TServiceType&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TServiceType GetRequiredService&lt;TServiceType&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.GetRequiredService``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRequiredService(Of TServiceType) () As TServiceType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TServiceType&gt;&#xA; TServiceType GetRequiredService();" />
      <MemberSignature Language="F#" Value="member this.GetRequiredService : unit -&gt; 'ServiceType" Usage="serviceManager.GetRequiredService " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TServiceType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TServiceType" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TServiceType"><span data-ttu-id="cda13-113">要检索的服务类型。</span><span class="sxs-lookup"><span data-stu-id="cda13-113">The type of service to retrieve.</span></span></typeparam>
        <summary><span data-ttu-id="cda13-114">检索所请求的服务。</span><span class="sxs-lookup"><span data-stu-id="cda13-114">Retrieves the requested service.</span></span></summary>
        <returns><span data-ttu-id="cda13-115">作为服务实例的泛型类型。</span><span class="sxs-lookup"><span data-stu-id="cda13-115">A generic type, which is an instance of the service.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cda13-116">与 <xref:System.Activities.Presentation.ServiceManager.GetService%2A> 不同，此方法在服务不可用的情况下引发 <xref:System.NotSupportedException>。</span><span class="sxs-lookup"><span data-stu-id="cda13-116">Unlike <xref:System.Activities.Presentation.ServiceManager.GetService%2A>, this method throws a <xref:System.NotSupportedException> if the service is not available.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="cda13-117">没有给定类型的服务。</span><span class="sxs-lookup"><span data-stu-id="cda13-117">There is no service of the given type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="public abstract object GetService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetService(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.GetService(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetService (serviceType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ GetService(Type ^ serviceType);" />
      <MemberSignature Language="F#" Value="abstract member GetService : Type -&gt; obj" Usage="serviceManager.GetService serviceType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IServiceProvider.GetService(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType"><span data-ttu-id="cda13-118">要检索的服务类型。</span><span class="sxs-lookup"><span data-stu-id="cda13-118">The type of service to retrieve.</span></span></param>
        <summary><span data-ttu-id="cda13-119">检索所请求的服务。</span><span class="sxs-lookup"><span data-stu-id="cda13-119">Retrieves the requested service.</span></span>  <span data-ttu-id="cda13-120">如果找不到服务，则此方法返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="cda13-120">This method returns <see langword="null" /> if the service could not be located.</span></span></summary>
        <returns><span data-ttu-id="cda13-121">返回作为服务实例的 <see cref="T:System.Object" />；或者，如果尚未发布，则返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="cda13-121">Returns <see cref="T:System.Object" />, which is an instance of the service, or <see langword="null" /> if the service has not been published.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cda13-122"><paramref name="serviceType" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="cda13-122"><paramref name="serviceType" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetService&lt;TServiceType&gt;">
      <MemberSignature Language="C#" Value="public TServiceType GetService&lt;TServiceType&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TServiceType GetService&lt;TServiceType&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.GetService``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetService(Of TServiceType) () As TServiceType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TServiceType&gt;&#xA; TServiceType GetService();" />
      <MemberSignature Language="F#" Value="member this.GetService : unit -&gt; 'ServiceType" Usage="serviceManager.GetService " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TServiceType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TServiceType" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TServiceType"><span data-ttu-id="cda13-123">要检索的服务类型。</span><span class="sxs-lookup"><span data-stu-id="cda13-123">The type of service to retrieve.</span></span></typeparam>
        <summary><span data-ttu-id="cda13-124">检索所请求的服务。</span><span class="sxs-lookup"><span data-stu-id="cda13-124">Retrieves the requested service.</span></span> <span data-ttu-id="cda13-125">如果找不到服务，则此方法返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="cda13-125">This method returns <see langword="null" /> if the service could not be located.</span></span></summary>
        <returns><span data-ttu-id="cda13-126">作为服务实例的泛型类型，或者，如果尚未发布服务，则返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="cda13-126">A generic type, which is an instance of the service, or <see langword="null" /> if the service has not been published.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTarget">
      <MemberSignature Language="C#" Value="protected static object GetTarget (Delegate callback);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig object GetTarget(class System.Delegate callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.GetTarget(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function GetTarget (callback As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Object ^ GetTarget(Delegate ^ callback);" />
      <MemberSignature Language="F#" Value="static member GetTarget : Delegate -&gt; obj" Usage="System.Activities.Presentation.ServiceManager.GetTarget callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="cda13-127">要为其获取目标的委托。</span><span class="sxs-lookup"><span data-stu-id="cda13-127">The delegate to get the target for.</span></span></param>
        <summary><span data-ttu-id="cda13-128">一个可返回委托的目标对象的帮助器方法。</span><span class="sxs-lookup"><span data-stu-id="cda13-128">A helper method that returns the target object for a delegate.</span></span> <span data-ttu-id="cda13-129">如果创建了委托作为泛型委托的代理，则此方法将正确地返回原始对象，而不是代理。</span><span class="sxs-lookup"><span data-stu-id="cda13-129">If the delegate was created to proxy a generic delegate, this will correctly return the original object, not the proxy.</span></span></summary>
        <returns><span data-ttu-id="cda13-130">返回作为回调目标的 <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="cda13-130">Returns <see cref="T:System.Object" />, which is the callback target.</span></span> <span data-ttu-id="cda13-131">如果该回调表示一个静态对象，则此会返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="cda13-131">This can return <see langword="null" /> if the callback represents a static object.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cda13-132"><paramref name="callback" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="cda13-132"><paramref name="callback" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Publish">
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cda13-133">发布给定的服务类型，但不声明实例。</span><span class="sxs-lookup"><span data-stu-id="cda13-133">Publishes the given service type, but does not declare an instance.</span></span> <span data-ttu-id="cda13-134">在请求服务时，将调用 Publish 服务回调来创建实例。</span><span class="sxs-lookup"><span data-stu-id="cda13-134">When the service is requested, the Publish service callback will be invoked to create the instance.</span></span> <span data-ttu-id="cda13-135">只会调用该回调一次。</span><span class="sxs-lookup"><span data-stu-id="cda13-135">The callback is invoked only once.</span></span> <span data-ttu-id="cda13-136">之后，会将它返回的实例放入缓存。</span><span class="sxs-lookup"><span data-stu-id="cda13-136">After that, the instance it returned is cached.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Publish">
      <MemberSignature Language="C#" Value="public abstract void Publish (Type serviceType, System.Activities.Presentation.PublishServiceCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Publish(class System.Type serviceType, class System.Activities.Presentation.PublishServiceCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Publish(System.Type,System.Activities.Presentation.PublishServiceCallback)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Publish (serviceType As Type, callback As PublishServiceCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Publish(Type ^ serviceType, System::Activities::Presentation::PublishServiceCallback ^ callback);" />
      <MemberSignature Language="F#" Value="abstract member Publish : Type * System.Activities.Presentation.PublishServiceCallback -&gt; unit" Usage="serviceManager.Publish (serviceType, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="callback" Type="System.Activities.Presentation.PublishServiceCallback" />
      </Parameters>
      <Docs>
        <param name="serviceType"><span data-ttu-id="cda13-137">要发布的服务的类型。</span><span class="sxs-lookup"><span data-stu-id="cda13-137">The type of service to publish.</span></span></param>
        <param name="callback"><span data-ttu-id="cda13-138">将在需要服务的实例时调用回调。</span><span class="sxs-lookup"><span data-stu-id="cda13-138">A callback that will be invoked when an instance of the service is needed.</span></span></param>
        <summary><span data-ttu-id="cda13-139">发布指定的服务类型，但不声明实例。</span><span class="sxs-lookup"><span data-stu-id="cda13-139">Publishes the specified service type, but does not declare an instance.</span></span> <span data-ttu-id="cda13-140">在请求服务时，将调用 Publish 服务回调来创建实例。</span><span class="sxs-lookup"><span data-stu-id="cda13-140">When the service is requested, the Publish service callback will be invoked to create the instance.</span></span> <span data-ttu-id="cda13-141">只会调用该回调一次。</span><span class="sxs-lookup"><span data-stu-id="cda13-141">The callback is invoked only once.</span></span> <span data-ttu-id="cda13-142">之后，会将它返回的实例放入缓存。</span><span class="sxs-lookup"><span data-stu-id="cda13-142">After that, the instance it returned is cached.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cda13-143"><paramref name="serviceType" /> 或 <paramref name="callback" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="cda13-143"><paramref name="serviceType" /> or <paramref name="callback" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cda13-144"><paramref name="serviceType" /> 已发布。</span><span class="sxs-lookup"><span data-stu-id="cda13-144"><paramref name="serviceType" /> has already been published.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Publish">
      <MemberSignature Language="C#" Value="public abstract void Publish (Type serviceType, object serviceInstance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Publish(class System.Type serviceType, object serviceInstance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Publish(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Publish (serviceType As Type, serviceInstance As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Publish(Type ^ serviceType, System::Object ^ serviceInstance);" />
      <MemberSignature Language="F#" Value="abstract member Publish : Type * obj -&gt; unit" Usage="serviceManager.Publish (serviceType, serviceInstance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="serviceInstance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="serviceType"><span data-ttu-id="cda13-145">要发布的服务的类型。</span><span class="sxs-lookup"><span data-stu-id="cda13-145">The type of service to publish.</span></span></param>
        <param name="serviceInstance"><span data-ttu-id="cda13-146">服务的实例。</span><span class="sxs-lookup"><span data-stu-id="cda13-146">An instance of the service.</span></span></param>
        <summary><span data-ttu-id="cda13-147">发布给定的服务。</span><span class="sxs-lookup"><span data-stu-id="cda13-147">Publishes the given service.</span></span> <span data-ttu-id="cda13-148">服务发布之后，服务实例将保留在服务管理器中，直至释放编辑上下文为止。</span><span class="sxs-lookup"><span data-stu-id="cda13-148">After it is published, the service instance remains in the service manager until the editing context is disposed of.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cda13-149"><paramref name="serviceType" /> 或 <paramref name="serviceInstance" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="cda13-149"><paramref name="serviceType" /> or <paramref name="serviceInstance" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cda13-150"><paramref name="serviceInstance" /> 未派生自或实现 <paramref name="serviceType" />，或者 <paramref name="serviceType" /> 已发布。</span><span class="sxs-lookup"><span data-stu-id="cda13-150"><paramref name="serviceInstance" /> does not derive from or implement <paramref name="serviceType" />, or <paramref name="serviceType" /> has already been published.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Publish&lt;TServiceType&gt;">
      <MemberSignature Language="C#" Value="public void Publish&lt;TServiceType&gt; (System.Activities.Presentation.PublishServiceCallback&lt;TServiceType&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Publish&lt;TServiceType&gt;(class System.Activities.Presentation.PublishServiceCallback`1&lt;!!TServiceType&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Publish``1(System.Activities.Presentation.PublishServiceCallback{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Publish(Of TServiceType) (callback As PublishServiceCallback(Of TServiceType))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TServiceType&gt;&#xA; void Publish(System::Activities::Presentation::PublishServiceCallback&lt;TServiceType&gt; ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Publish : System.Activities.Presentation.PublishServiceCallback&lt;'ServiceType&gt; -&gt; unit" Usage="serviceManager.Publish callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TServiceType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Activities.Presentation.PublishServiceCallback&lt;TServiceType&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TServiceType"><span data-ttu-id="cda13-151">要发布的服务的类型。</span><span class="sxs-lookup"><span data-stu-id="cda13-151">The type of the service to publish.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="cda13-152">将在需要服务的实例时调用回调。</span><span class="sxs-lookup"><span data-stu-id="cda13-152">A callback that will be invoked when an instance of the service is needed.</span></span></param>
        <summary><span data-ttu-id="cda13-153">发布给定的服务类型，但尚未声明实例。</span><span class="sxs-lookup"><span data-stu-id="cda13-153">Publishes the given service type, but does not declare an instance yet.</span></span> <span data-ttu-id="cda13-154">当该服务被要求时，将调用 <see langword="PublishServiceCallback" /> 以创建该服务的实例。</span><span class="sxs-lookup"><span data-stu-id="cda13-154">When the service is requested, the <see langword="PublishServiceCallback" /> will be invoked to create the instance.</span></span> <span data-ttu-id="cda13-155">只会调用该回调一次。</span><span class="sxs-lookup"><span data-stu-id="cda13-155">The callback is invoked only once.</span></span> <span data-ttu-id="cda13-156">之后，会将它返回的实例放入缓存。</span><span class="sxs-lookup"><span data-stu-id="cda13-156">After that, the instance it returned is cached.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cda13-157"><paramref name="callback" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="cda13-157"><paramref name="callback" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Publish&lt;TServiceType&gt;">
      <MemberSignature Language="C#" Value="public void Publish&lt;TServiceType&gt; (TServiceType serviceInstance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Publish&lt;TServiceType&gt;(!!TServiceType serviceInstance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Publish``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Publish(Of TServiceType) (serviceInstance As TServiceType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TServiceType&gt;&#xA; void Publish(TServiceType serviceInstance);" />
      <MemberSignature Language="F#" Value="member this.Publish : 'ServiceType -&gt; unit" Usage="serviceManager.Publish serviceInstance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TServiceType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="serviceInstance" Type="TServiceType" />
      </Parameters>
      <Docs>
        <typeparam name="TServiceType"><span data-ttu-id="cda13-158">要发布的服务的类型。</span><span class="sxs-lookup"><span data-stu-id="cda13-158">The type of the service to publish.</span></span></typeparam>
        <param name="serviceInstance"><span data-ttu-id="cda13-159">服务的实例。</span><span class="sxs-lookup"><span data-stu-id="cda13-159">An instance of the service.</span></span></param>
        <summary><span data-ttu-id="cda13-160">发布给定的服务。</span><span class="sxs-lookup"><span data-stu-id="cda13-160">Publishes the given service.</span></span> <span data-ttu-id="cda13-161">服务发布之后，服务实例将保留在服务管理器中，直至释放编辑上下文为止。</span><span class="sxs-lookup"><span data-stu-id="cda13-161">After it is published, the service instance remains in the service manager until the editing context is disposed of.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cda13-162"><paramref name="serviceInstance" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="cda13-162"><paramref name="serviceInstance" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveCallback">
      <MemberSignature Language="C#" Value="protected static Delegate RemoveCallback (Delegate existing, Delegate toRemove);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Delegate RemoveCallback(class System.Delegate existing, class System.Delegate toRemove) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.RemoveCallback(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function RemoveCallback (existing As Delegate, toRemove As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static Delegate ^ RemoveCallback(Delegate ^ existing, Delegate ^ toRemove);" />
      <MemberSignature Language="F#" Value="static member RemoveCallback : Delegate * Delegate -&gt; Delegate" Usage="System.Activities.Presentation.ServiceManager.RemoveCallback (existing, toRemove)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="existing" Type="System.Delegate" />
        <Parameter Name="toRemove" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="existing"><span data-ttu-id="cda13-163">要从中移除回调的现有委托。</span><span class="sxs-lookup"><span data-stu-id="cda13-163">The existing delegate to remove the callback from.</span></span></param>
        <param name="toRemove"><span data-ttu-id="cda13-164">要移除的回调。</span><span class="sxs-lookup"><span data-stu-id="cda13-164">The callback to remove.</span></span></param>
        <summary><span data-ttu-id="cda13-165">一个帮助器方法，该方法执行 <see langword="Delegate.Remove" /> 操作，并对作为泛型回调代理的委托进行解包。</span><span class="sxs-lookup"><span data-stu-id="cda13-165">A helper method that performs a <see langword="Delegate.Remove" /> operation, and unwraps delegates that are proxies to generic callbacks.</span></span> <span data-ttu-id="cda13-166">您应在 <see cref="Overload:System.Activities.Presentation.ServiceManager.Unsubscribe" /> 实现中使用此方法。</span><span class="sxs-lookup"><span data-stu-id="cda13-166">You should use this method in your <see cref="Overload:System.Activities.Presentation.ServiceManager.Unsubscribe" /> implementations.</span></span></summary>
        <returns><span data-ttu-id="cda13-167">返回 <see cref="T:System.Delegate" />，它是分配给现有委托的新值。</span><span class="sxs-lookup"><span data-stu-id="cda13-167">Returns <see cref="T:System.Delegate" />, which is  a new value to assign to the existing delegate.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subscribe">
      <MemberSignature Language="C#" Value="public abstract void Subscribe (Type serviceType, System.Activities.Presentation.SubscribeServiceCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Subscribe(class System.Type serviceType, class System.Activities.Presentation.SubscribeServiceCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Subscribe(System.Type,System.Activities.Presentation.SubscribeServiceCallback)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Subscribe (serviceType As Type, callback As SubscribeServiceCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Subscribe(Type ^ serviceType, System::Activities::Presentation::SubscribeServiceCallback ^ callback);" />
      <MemberSignature Language="F#" Value="abstract member Subscribe : Type * System.Activities.Presentation.SubscribeServiceCallback -&gt; unit" Usage="serviceManager.Subscribe (serviceType, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="callback" Type="System.Activities.Presentation.SubscribeServiceCallback" />
      </Parameters>
      <Docs>
        <param name="serviceType"><span data-ttu-id="cda13-168">要订阅的服务的类型。</span><span class="sxs-lookup"><span data-stu-id="cda13-168">The type of service to subscribe to.</span></span></param>
        <param name="callback"><span data-ttu-id="cda13-169">将在服务可用时通知回调。</span><span class="sxs-lookup"><span data-stu-id="cda13-169">A callback that will be notified when the service is available.</span></span></param>
        <summary><span data-ttu-id="cda13-170">在某人发布了请求的服务时调用提供的回调。</span><span class="sxs-lookup"><span data-stu-id="cda13-170">Invokes the provided callback when someone has published the requested service.</span></span> <span data-ttu-id="cda13-171">如果服务已可用，则此方法将立即调用回调。</span><span class="sxs-lookup"><span data-stu-id="cda13-171">If the service was already available, this method invokes the callback immediately.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cda13-172"><paramref name="serviceType" /> 或 <paramref name="callback" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="cda13-172"><paramref name="serviceType" /> or <paramref name="callback" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Subscribe&lt;TServiceType&gt;">
      <MemberSignature Language="C#" Value="public void Subscribe&lt;TServiceType&gt; (System.Activities.Presentation.SubscribeServiceCallback&lt;TServiceType&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Subscribe&lt;TServiceType&gt;(class System.Activities.Presentation.SubscribeServiceCallback`1&lt;!!TServiceType&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Subscribe``1(System.Activities.Presentation.SubscribeServiceCallback{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Subscribe(Of TServiceType) (callback As SubscribeServiceCallback(Of TServiceType))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TServiceType&gt;&#xA; void Subscribe(System::Activities::Presentation::SubscribeServiceCallback&lt;TServiceType&gt; ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Subscribe : System.Activities.Presentation.SubscribeServiceCallback&lt;'ServiceType&gt; -&gt; unit" Usage="serviceManager.Subscribe callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TServiceType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Activities.Presentation.SubscribeServiceCallback&lt;TServiceType&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TServiceType"><span data-ttu-id="cda13-173">要订阅的服务的类型。</span><span class="sxs-lookup"><span data-stu-id="cda13-173">The type of the service to subscribe to.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="cda13-174">将在服务可用时通知回调。</span><span class="sxs-lookup"><span data-stu-id="cda13-174">A callback that will be notified when the service is available.</span></span></param>
        <summary><span data-ttu-id="cda13-175">在某人发布了请求的服务时调用提供的回调。</span><span class="sxs-lookup"><span data-stu-id="cda13-175">Invokes the provided callback when someone has published the requested service.</span></span> <span data-ttu-id="cda13-176">如果服务已可用，则此方法将立即调用回调。</span><span class="sxs-lookup"><span data-stu-id="cda13-176">If the service was already available, this method invokes the callback immediately.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cda13-177"><paramref name="callback" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="cda13-177"><paramref name="callback" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="serviceManager.System.Collections.IEnumerable.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cda13-178">检索一个枚举器，该枚举器可用于枚举此服务管理器发布的所有服务。</span><span class="sxs-lookup"><span data-stu-id="cda13-178">Retrieves an enumerator that can be used to enumerate all of the services that this service manager publishes.</span></span></summary>
        <returns><span data-ttu-id="cda13-179">返回 <see cref="T:System.Collections.IEnumerator" />，其中包含所发布服务的枚举。</span><span class="sxs-lookup"><span data-stu-id="cda13-179">Returns <see cref="T:System.Collections.IEnumerator" />, which contains an enumeration of published services.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unsubscribe">
      <MemberSignature Language="C#" Value="public abstract void Unsubscribe (Type serviceType, System.Activities.Presentation.SubscribeServiceCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Unsubscribe(class System.Type serviceType, class System.Activities.Presentation.SubscribeServiceCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Unsubscribe(System.Type,System.Activities.Presentation.SubscribeServiceCallback)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Unsubscribe (serviceType As Type, callback As SubscribeServiceCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Unsubscribe(Type ^ serviceType, System::Activities::Presentation::SubscribeServiceCallback ^ callback);" />
      <MemberSignature Language="F#" Value="abstract member Unsubscribe : Type * System.Activities.Presentation.SubscribeServiceCallback -&gt; unit" Usage="serviceManager.Unsubscribe (serviceType, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="callback" Type="System.Activities.Presentation.SubscribeServiceCallback" />
      </Parameters>
      <Docs>
        <param name="serviceType"><span data-ttu-id="cda13-180">要从中移除订阅的服务的类型。</span><span class="sxs-lookup"><span data-stu-id="cda13-180">The type of service to remove the subscription from.</span></span></param>
        <param name="callback"><span data-ttu-id="cda13-181">要从订阅中移除的回调对象。</span><span class="sxs-lookup"><span data-stu-id="cda13-181">The callback object to remove from the subscription.</span></span></param>
        <summary><span data-ttu-id="cda13-182">移除服务类型的订阅。</span><span class="sxs-lookup"><span data-stu-id="cda13-182">Removes a subscription for a service type.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cda13-183"><paramref name="serviceType" /> 或 <paramref name="callback" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="cda13-183"><paramref name="serviceType" /> or <paramref name="callback" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Unsubscribe&lt;TServiceType&gt;">
      <MemberSignature Language="C#" Value="public void Unsubscribe&lt;TServiceType&gt; (System.Activities.Presentation.SubscribeServiceCallback&lt;TServiceType&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Unsubscribe&lt;TServiceType&gt;(class System.Activities.Presentation.SubscribeServiceCallback`1&lt;!!TServiceType&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Unsubscribe``1(System.Activities.Presentation.SubscribeServiceCallback{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unsubscribe(Of TServiceType) (callback As SubscribeServiceCallback(Of TServiceType))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TServiceType&gt;&#xA; void Unsubscribe(System::Activities::Presentation::SubscribeServiceCallback&lt;TServiceType&gt; ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Unsubscribe : System.Activities.Presentation.SubscribeServiceCallback&lt;'ServiceType&gt; -&gt; unit" Usage="serviceManager.Unsubscribe callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TServiceType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Activities.Presentation.SubscribeServiceCallback&lt;TServiceType&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TServiceType"><span data-ttu-id="cda13-184">要从中移除订阅的服务的类型。</span><span class="sxs-lookup"><span data-stu-id="cda13-184">The type of the service to remove the subscription from.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="cda13-185">要从订阅中移除的回调对象。</span><span class="sxs-lookup"><span data-stu-id="cda13-185">The callback object to remove from the subscription.</span></span></param>
        <summary><span data-ttu-id="cda13-186">移除服务类型的订阅。</span><span class="sxs-lookup"><span data-stu-id="cda13-186">Removes a subscription for a service type.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cda13-187"><paramref name="callback" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="cda13-187"><paramref name="callback" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
