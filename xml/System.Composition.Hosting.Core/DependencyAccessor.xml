<Type Name="DependencyAccessor" FullName="System.Composition.Hosting.Core.DependencyAccessor">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9ca6736263b4ef5bfffc76817f22cef670340a9c" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89775975" /></Metadata><TypeSignature Language="C#" Value="public abstract class DependencyAccessor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DependencyAccessor extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Composition.Hosting.Core.DependencyAccessor" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DependencyAccessor" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyAccessor abstract" />
  <TypeSignature Language="F#" Value="type DependencyAccessor = class" />
  <AssemblyInfo>
    <AssemblyName>System.Composition.Hosting</AssemblyName>
    <AssemblyVersion>1.0.31.0</AssemblyVersion>
    <AssemblyVersion>1.0.32.0</AssemblyVersion>
    <AssemblyVersion>1.0.33.0</AssemblyVersion>
    <AssemblyVersion>1.0.34.0</AssemblyVersion>
    <AssemblyVersion>1.0.35.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>允许 <see cref="T:System.Composition.Hosting.Core.ExportDescriptorProvider" /> 对象定位其依赖项。</summary>
    <remarks></remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DependencyAccessor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.DependencyAccessor.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DependencyAccessor();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Hosting</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
        <AssemblyVersion>1.0.35.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Composition.Hosting.Core.DependencyAccessor" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 这是一个受保护的构造函数，只能从派生类调用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPromises">
      <MemberSignature Language="C#" Value="protected abstract System.Collections.Generic.IEnumerable&lt;System.Composition.Hosting.Core.ExportDescriptorPromise&gt; GetPromises (System.Composition.Hosting.Core.CompositionContract exportKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Composition.Hosting.Core.ExportDescriptorPromise&gt; GetPromises(class System.Composition.Hosting.Core.CompositionContract exportKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.DependencyAccessor.GetPromises(System.Composition.Hosting.Core.CompositionContract)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetPromises (exportKey As CompositionContract) As IEnumerable(Of ExportDescriptorPromise)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Collections::Generic::IEnumerable&lt;System::Composition::Hosting::Core::ExportDescriptorPromise ^&gt; ^ GetPromises(System::Composition::Hosting::Core::CompositionContract ^ exportKey);" />
      <MemberSignature Language="F#" Value="abstract member GetPromises : System.Composition.Hosting.Core.CompositionContract -&gt; seq&lt;System.Composition.Hosting.Core.ExportDescriptorPromise&gt;" Usage="dependencyAccessor.GetPromises exportKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Hosting</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
        <AssemblyVersion>1.0.35.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Composition.Hosting.Core.ExportDescriptorPromise&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exportKey" Type="System.Composition.Hosting.Core.CompositionContract" />
      </Parameters>
      <Docs>
        <param name="exportKey">承诺必须提供的导出密钥。</param>
        <summary>检索指定协定的所有承诺。</summary>
        <returns>协议承诺的集合。</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveDependencies">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Composition.Hosting.Core.CompositionDependency&gt; ResolveDependencies (object site, System.Composition.Hosting.Core.CompositionContract contract, bool isPrerequisite);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Composition.Hosting.Core.CompositionDependency&gt; ResolveDependencies(object site, class System.Composition.Hosting.Core.CompositionContract contract, bool isPrerequisite) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.DependencyAccessor.ResolveDependencies(System.Object,System.Composition.Hosting.Core.CompositionContract,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ResolveDependencies (site As Object, contract As CompositionContract, isPrerequisite As Boolean) As IEnumerable(Of CompositionDependency)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Composition::Hosting::Core::CompositionDependency ^&gt; ^ ResolveDependencies(System::Object ^ site, System::Composition::Hosting::Core::CompositionContract ^ contract, bool isPrerequisite);" />
      <MemberSignature Language="F#" Value="member this.ResolveDependencies : obj * System.Composition.Hosting.Core.CompositionContract * bool -&gt; seq&lt;System.Composition.Hosting.Core.CompositionDependency&gt;" Usage="dependencyAccessor.ResolveDependencies (site, contract, isPrerequisite)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Hosting</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
        <AssemblyVersion>1.0.35.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Composition.Hosting.Core.CompositionDependency&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="site" Type="System.Object" />
        <Parameter Name="contract" Type="System.Composition.Hosting.Core.CompositionContract" />
        <Parameter Name="isPrerequisite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="site">描述依赖项站点的标记。</param>
        <param name="contract">网站所需的协定。</param>
        <param name="isPrerequisite">如果要指示在可执行导出前必须满足依赖项，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>在协定的所有实现中解析依赖项。</summary>
        <returns>已解析的依赖项的集合。</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveRequiredDependency">
      <MemberSignature Language="C#" Value="public System.Composition.Hosting.Core.CompositionDependency ResolveRequiredDependency (object site, System.Composition.Hosting.Core.CompositionContract contract, bool isPrerequisite);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Hosting.Core.CompositionDependency ResolveRequiredDependency(object site, class System.Composition.Hosting.Core.CompositionContract contract, bool isPrerequisite) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.DependencyAccessor.ResolveRequiredDependency(System.Object,System.Composition.Hosting.Core.CompositionContract,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ResolveRequiredDependency (site As Object, contract As CompositionContract, isPrerequisite As Boolean) As CompositionDependency" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Hosting::Core::CompositionDependency ^ ResolveRequiredDependency(System::Object ^ site, System::Composition::Hosting::Core::CompositionContract ^ contract, bool isPrerequisite);" />
      <MemberSignature Language="F#" Value="member this.ResolveRequiredDependency : obj * System.Composition.Hosting.Core.CompositionContract * bool -&gt; System.Composition.Hosting.Core.CompositionDependency" Usage="dependencyAccessor.ResolveRequiredDependency (site, contract, isPrerequisite)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Hosting</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
        <AssemblyVersion>1.0.35.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Hosting.Core.CompositionDependency</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="site" Type="System.Object" />
        <Parameter Name="contract" Type="System.Composition.Hosting.Core.CompositionContract" />
        <Parameter Name="isPrerequisite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="site">描述依赖项站点的标记。</param>
        <param name="contract">网站所需的协定。</param>
        <param name="isPrerequisite">如果要指示在可执行导出前必须满足依赖项，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>在协定的某个实现中解析所需的依赖项。</summary>
        <returns>解析的依赖项。</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="TryResolveOptionalDependency">
      <MemberSignature Language="C#" Value="public bool TryResolveOptionalDependency (object site, System.Composition.Hosting.Core.CompositionContract contract, bool isPrerequisite, out System.Composition.Hosting.Core.CompositionDependency dependency);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryResolveOptionalDependency(object site, class System.Composition.Hosting.Core.CompositionContract contract, bool isPrerequisite, [out] class System.Composition.Hosting.Core.CompositionDependency&amp; dependency) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.DependencyAccessor.TryResolveOptionalDependency(System.Object,System.Composition.Hosting.Core.CompositionContract,System.Boolean,System.Composition.Hosting.Core.CompositionDependency@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryResolveOptionalDependency (site As Object, contract As CompositionContract, isPrerequisite As Boolean, ByRef dependency As CompositionDependency) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryResolveOptionalDependency(System::Object ^ site, System::Composition::Hosting::Core::CompositionContract ^ contract, bool isPrerequisite, [Runtime::InteropServices::Out] System::Composition::Hosting::Core::CompositionDependency ^ % dependency);" />
      <MemberSignature Language="F#" Value="member this.TryResolveOptionalDependency : obj * System.Composition.Hosting.Core.CompositionContract * bool * CompositionDependency -&gt; bool" Usage="dependencyAccessor.TryResolveOptionalDependency (site, contract, isPrerequisite, dependency)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Hosting</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
        <AssemblyVersion>1.0.35.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="site" Type="System.Object" />
        <Parameter Name="contract" Type="System.Composition.Hosting.Core.CompositionContract" />
        <Parameter Name="isPrerequisite" Type="System.Boolean" />
        <Parameter Name="dependency" Type="System.Composition.Hosting.Core.CompositionDependency" RefType="out" />
      </Parameters>
      <Docs>
        <param name="site">描述依赖项站点的标记。</param>
        <param name="contract">网站所需的协定。</param>
        <param name="isPrerequisite">如果要指示在可执行导出前必须满足依赖项，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <param name="dependency">此方法返回后，将包含解析的依赖项或 <see langword="null" />。</param>
        <summary>在协定的某个实现上解析某个可选的依赖项。</summary>
        <returns>如果已解析该依赖项，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks></remarks>
      </Docs>
    </Member>
  </Members>
</Type>
