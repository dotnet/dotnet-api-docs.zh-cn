<Type Name="DbDataAdapter" FullName="System.Data.Common.DbDataAdapter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1541c6e45d85931e02c88610e4cd25fd1350ed8f" /><Meta Name="ms.sourcegitcommit" Value="5484acfd78fc29edb48fc1ca6925046c4672954a" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/16/2020" /><Meta Name="ms.locfileid" Value="90692137" /></Metadata><TypeSignature Language="C#" Value="public abstract class DbDataAdapter : System.Data.Common.DataAdapter, ICloneable, System.Data.IDbDataAdapter" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DbDataAdapter extends System.Data.Common.DataAdapter implements class System.Data.IDataAdapter, class System.Data.IDbDataAdapter, class System.ICloneable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="DocId" Value="T:System.Data.Common.DbDataAdapter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DbDataAdapter&#xA;Inherits DataAdapter&#xA;Implements ICloneable, IDbDataAdapter" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class DbDataAdapter abstract : System::Data::Common::DataAdapter, ICloneable, System::Data::IDbDataAdapter" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type DbDataAdapter = class&#xA;    inherit DataAdapter&#xA;    interface IDataAdapter&#xA;    interface IDbDataAdapter&#xA;    interface ICloneable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="C#" Value="public abstract class DbDataAdapter : System.Data.Common.DataAdapter, ICloneable" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DbDataAdapter extends System.Data.Common.DataAdapter implements class System.ICloneable" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DbDataAdapter&#xA;Inherits DataAdapter&#xA;Implements ICloneable" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class DbDataAdapter abstract : System::Data::Common::DataAdapter, ICloneable" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="F#" Value="type DbDataAdapter = class&#xA;    inherit DataAdapter&#xA;    interface ICloneable" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="F#" Value="type DbDataAdapter = class&#xA;    inherit DataAdapter&#xA;    interface IDbDataAdapter&#xA;    interface IDataAdapter&#xA;    interface ICloneable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="F#" Value="type DbDataAdapter = class&#xA;    inherit DataAdapter&#xA;    interface IDbDataAdapter&#xA;    interface ICloneable&#xA;    interface IDataAdapter" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Data.Common" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Data.Common.DataAdapter</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <InterfaceName>System.Data.IDataAdapter</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <InterfaceName>System.Data.IDbDataAdapter</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>帮助实现 <see cref="T:System.Data.IDbDataAdapter" /> 接口。 <see cref="T:System.Data.Common.DbDataAdapter" /> 的继承类实现了一组功能以提供强类型，但是继承了完全实现 DataAdapter**** 所需的大部分功能。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter>类从 <xref:System.Data.Common.DataAdapter> 类继承并实现 <xref:System.Data.IDbDataAdapter> 接口。 它有助于类实现设计用于关系数据库的 **DataAdapter** 。  
  
 应用程序不会直接创建类的实例 <xref:System.Data.Common.DbDataAdapter> ，而是创建从它继承的类的实例。  
  
 继承的类 <xref:System.Data.Common.DbDataAdapter> 必须实现继承成员，并且通常定义其他成员来添加特定于提供程序的功能。 例如， <xref:System.Data.Common.DbDataAdapter> 类定义 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> 属性， <xref:System.Data.Common.DbDataAdapter> 类定义8个 <xref:System.Data.IDataAdapter.Fill%2A> 方法重载。 反过来， <xref:System.Data.OleDb.OleDbDataAdapter> 该类继承 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 方法，还定义了两个将 <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> ADO 记录集对象作为参数的重载。  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>当你从类继承时 <see cref="T:System.Data.Common.DbDataAdapter" /> ，我们建议你实现以下构造函数： 
 <list type="table"><listheader><term> 项 
 </term><description> 说明 
 </description></listheader><item><term> *Prv*DataAdapter ( # A1 
 </term><description> 初始化 *Prv*DataAdapter 类的新实例。  
  
 </description></item><item><term> *Prv*DataAdapter (*Prv*命令 *selectCommand*)  
 </term><description> 使用指定的 SQL SELECT 语句初始化 *Prv*DataAdapter 类的新实例。  
  
 </description></item><item><term> *Prv*DataAdapter (字符串 *selectCommandText*，string *selectConnectionString*)  
 </term><description> 使用 SQL SELECT 语句和连接字符串初始化 *Prv*DataAdapter 类的新实例。  
  
 </description></item><item><term> *Prv*DataAdapter (字符串 *selectCommandText*， *Prv*连接 *selectConnection*)  
 </term><description> 使用 SQL SELECT 语句和*Prv*连接对象初始化*Prv*DataAdapter 类的新实例。  
  
 </description></item></list>  

 若要提升 .NET Framework 数据提供程序之间的一致性，应将继承类命名为 *Prv*DataAdapter 格式，其中 *Prv* 是给定给特定 .NET Framework 数据提供程序命名空间中的所有类的统一前缀。 例如，"Sql" 是 <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> **SqlClient** 命名空间中类的前缀。</para></block>
    <related type="Article" href="/dotnet/framework/data/adonet/dbproviderfactories">DbProviderFactories (ADO.NET)</related>
    <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see langword="DataAdapter" /> 类的新实例。</summary>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DbDataAdapter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DbDataAdapter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 DataAdapter**** 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当你创建的实例时 <xref:System.Data.Common.DbDataAdapter> ，以下读/写属性将设置为以下初始值。  
  
|属性|初始值|  
|----------------|-------------------|  
|<xref:System.Data.IDbDataAdapter.SelectCommand%2A>|一个新的 <xref:System.Data.IDbCommand>。|  
|<xref:System.Data.IDbDataAdapter.InsertCommand%2A>|一个新的 <xref:System.Data.IDbCommand>。|  
|<xref:System.Data.IDbDataAdapter.DeleteCommand%2A>|一个新的 <xref:System.Data.IDbCommand>。|  
|<xref:System.Data.IDbDataAdapter.UpdateCommand%2A>|一个新的 <xref:System.Data.IDbCommand>。|  
|<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  
|<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|  
  
 可以通过单独调用属性来更改任何这些属性的值。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dbproviderfactories">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DbDataAdapter (System.Data.Common.DbDataAdapter adapter);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Data.Common.DbDataAdapter adapter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (adapter As DbDataAdapter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DbDataAdapter(System::Data::Common::DbDataAdapter ^ adapter);" />
      <MemberSignature Language="F#" Value="new System.Data.Common.DbDataAdapter : System.Data.Common.DbDataAdapter -&gt; System.Data.Common.DbDataAdapter" Usage="new System.Data.Common.DbDataAdapter adapter" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="adapter" Type="System.Data.Common.DbDataAdapter" />
      </Parameters>
      <Docs>
        <param name="adapter">用于创建新 <see langword="DataAdapter" /> 的 <see langword="DataAdapter" /> 对象。</param>
        <summary>从同一类型的现有对象中初始化 <see langword="DataAdapter" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 构造函数的此重载 <xref:System.Data.Common.DbDataAdapter> 旨在供 .NET Framework 数据提供程序在实现在克隆实现中使用的类似构造函数时使用。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dbproviderfactories">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="AddToBatch">
      <MemberSignature Language="C#" Value="protected virtual int AddToBatch (System.Data.IDbCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 AddToBatch(class System.Data.IDbCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function AddToBatch (command As IDbCommand) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int AddToBatch(System::Data::IDbCommand ^ command);" />
      <MemberSignature Language="F#" Value="abstract member AddToBatch : System.Data.IDbCommand -&gt; int&#xA;override this.AddToBatch : System.Data.IDbCommand -&gt; int" Usage="dbDataAdapter.AddToBatch command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.IDbCommand" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="command">要添加到批处理的 <see cref="T:System.Data.IDbCommand" />。</param>
        <summary>向当前批处理添加 <see cref="T:System.Data.IDbCommand" />。</summary>
        <returns>添加 <see cref="T:System.Data.IDbCommand" /> 之前批处理中的命令数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在中 <xref:System.Data.Common.DbDataAdapter> ，此方法将引发 <xref:System.NotSupportedException> 。 从继承的类 <xref:System.Data.Common.DbDataAdapter> 将重写此方法以提供对批的支持。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">该适配器不支持批处理。</exception>
        <block subset="none" type="overrides"><para>此方法是受保护的，由 .NET Framework 数据提供程序使用。  
  
如果从继承的类 <see cref="T:System.Data.Common.DbDataAdapter" /> 支持批处理，则该类将重写此方法，以允许用户向批处理中添加命令。</para></block>
        <related type="Article" href="/dotnet/framework/data/adonet/dbproviderfactories">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="ClearBatch">
      <MemberSignature Language="C#" Value="protected virtual void ClearBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ClearBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.ClearBatch" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ClearBatch ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ClearBatch();" />
      <MemberSignature Language="F#" Value="abstract member ClearBatch : unit -&gt; unit&#xA;override this.ClearBatch : unit -&gt; unit" Usage="dbDataAdapter.ClearBatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从批处理中移除所有 <see cref="T:System.Data.IDbCommand" /> 对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在中 <xref:System.Data.Common.DbDataAdapter> ，此方法将引发 <xref:System.NotSupportedException> 。 从继承的类 <xref:System.Data.Common.DbDataAdapter> 将重写此方法以提供对批的支持。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">该适配器不支持批处理。</exception>
        <block subset="none" type="overrides"><para>此方法是受保护的，由 .NET Framework 数据提供程序使用。  
  
如果从继承的类 <see cref="T:System.Data.Common.DbDataAdapter" /> 支持批处理，则该类将重写此方法，以允许用户从批处理中删除所有命令。</para></block>
        <related type="Article" href="/dotnet/framework/data/adonet/dbproviderfactories">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="CreateRowUpdatedEvent">
      <MemberSignature Language="C#" Value="protected virtual System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent (System.Data.DataRow dataRow, System.Data.IDbCommand? command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent(class System.Data.DataRow dataRow, class System.Data.IDbCommand command, valuetype System.Data.StatementType statementType, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateRowUpdatedEvent (dataRow As DataRow, command As IDbCommand, statementType As StatementType, tableMapping As DataTableMapping) As RowUpdatedEventArgs" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::Common::RowUpdatedEventArgs ^ CreateRowUpdatedEvent(System::Data::DataRow ^ dataRow, System::Data::IDbCommand ^ command, System::Data::StatementType statementType, System::Data::Common::DataTableMapping ^ tableMapping);" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member CreateRowUpdatedEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatedEventArgs&#xA;override this.CreateRowUpdatedEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatedEventArgs" Usage="dbDataAdapter.CreateRowUpdatedEvent (dataRow, command, statementType, tableMapping)" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="protected virtual System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="protected abstract System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function CreateRowUpdatedEvent (dataRow As DataRow, command As IDbCommand, statementType As StatementType, tableMapping As DataTableMapping) As RowUpdatedEventArgs" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Data::Common::RowUpdatedEventArgs ^ CreateRowUpdatedEvent(System::Data::DataRow ^ dataRow, System::Data::IDbCommand ^ command, System::Data::StatementType statementType, System::Data::Common::DataTableMapping ^ tableMapping);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="abstract member CreateRowUpdatedEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatedEventArgs" Usage="dbDataAdapter.CreateRowUpdatedEvent (dataRow, command, statementType, tableMapping)" FrameworkAlternate="netframework-1.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.RowUpdatedEventArgs</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRow" Type="System.Data.DataRow" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="statementType" Type="System.Data.StatementType" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRow">用于更新数据源的 <see cref="T:System.Data.DataRow" />。</param>
        <param name="command">在 <see cref="T:System.Data.IDbCommand" /> 过程中执行的 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />。</param>
        <param name="statementType">该命令是 UPDATE、INSERT、DELETE 语句还是 SELECT 语句。</param>
        <param name="tableMapping"><see cref="T:System.Data.Common.DataTableMapping" /> 对象。</param>
        <summary>初始化 <see cref="T:System.Data.Common.RowUpdatedEventArgs" /> 类的新实例。</summary>
        <returns><see cref="T:System.Data.Common.RowUpdatedEventArgs" /> 类的新实例。</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" /> 方法。</para></block>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="CreateRowUpdatingEvent">
      <MemberSignature Language="C#" Value="protected virtual System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent (System.Data.DataRow dataRow, System.Data.IDbCommand? command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent(class System.Data.DataRow dataRow, class System.Data.IDbCommand command, valuetype System.Data.StatementType statementType, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateRowUpdatingEvent (dataRow As DataRow, command As IDbCommand, statementType As StatementType, tableMapping As DataTableMapping) As RowUpdatingEventArgs" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::Common::RowUpdatingEventArgs ^ CreateRowUpdatingEvent(System::Data::DataRow ^ dataRow, System::Data::IDbCommand ^ command, System::Data::StatementType statementType, System::Data::Common::DataTableMapping ^ tableMapping);" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member CreateRowUpdatingEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatingEventArgs&#xA;override this.CreateRowUpdatingEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatingEventArgs" Usage="dbDataAdapter.CreateRowUpdatingEvent (dataRow, command, statementType, tableMapping)" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="protected virtual System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="protected abstract System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function CreateRowUpdatingEvent (dataRow As DataRow, command As IDbCommand, statementType As StatementType, tableMapping As DataTableMapping) As RowUpdatingEventArgs" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Data::Common::RowUpdatingEventArgs ^ CreateRowUpdatingEvent(System::Data::DataRow ^ dataRow, System::Data::IDbCommand ^ command, System::Data::StatementType statementType, System::Data::Common::DataTableMapping ^ tableMapping);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="abstract member CreateRowUpdatingEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatingEventArgs" Usage="dbDataAdapter.CreateRowUpdatingEvent (dataRow, command, statementType, tableMapping)" FrameworkAlternate="netframework-1.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.RowUpdatingEventArgs</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRow" Type="System.Data.DataRow" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="statementType" Type="System.Data.StatementType" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRow">更新数据源的 <see cref="T:System.Data.DataRow" />。</param>
        <param name="command">要在 <see cref="T:System.Data.IDbCommand" /> 过程中执行的 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />。</param>
        <param name="statementType">该命令是 UPDATE、INSERT、DELETE 语句还是 SELECT 语句。</param>
        <param name="tableMapping"><see cref="T:System.Data.Common.DataTableMapping" /> 对象。</param>
        <summary>初始化 <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> 类的新实例。</summary>
        <returns><see cref="T:System.Data.Common.RowUpdatingEventArgs" /> 类的新实例。</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" /> 方法。</para></block>
        <related type="Article" href="/dotnet/framework/data/adonet/dbproviderfactories">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="DefaultSourceTableName">
      <MemberSignature Language="C#" Value="public const string DefaultSourceTableName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string DefaultSourceTableName" />
      <MemberSignature Language="DocId" Value="F:System.Data.Common.DbDataAdapter.DefaultSourceTableName" />
      <MemberSignature Language="VB.NET" Value="Public Const DefaultSourceTableName As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ DefaultSourceTableName;" />
      <MemberSignature Language="F#" Value="val mutable DefaultSourceTableName : string" Usage="System.Data.Common.DbDataAdapter.DefaultSourceTableName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Data.Common.DataAdapter" /> 对象用于表映射的默认名称。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 "表" 是对象用于表映射的默认名称 <xref:System.Data.Common.DataAdapter> 。  
  
 <xref:System.Data.Common.DbDataAdapter.DefaultSourceTableName> 当应用程序添加要与一起使用的表映射 <xref:System.Data.Common.DbDataAdapter.Fill%2A> ，但未指定 <xref:System.Data.DataTable> 名称时。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dbproviderfactories">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand? DeleteCommand { get; set; }" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.DeleteCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property DeleteCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ DeleteCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DeleteCommand : System.Data.Common.DbCommand with get, set" Usage="System.Data.Common.DbDataAdapter.DeleteCommand" />
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand DeleteCommand { get; set; }" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于从数据集中删除记录的命令。</summary>
        <value><see cref="T:System.Data.IDbCommand" /> 过程中使用的 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />，它针对数据集中已删除的行删除数据源中的记录。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在过程中 <xref:System.Data.Common.DbDataAdapter.Update%2A> ，如果未设置此属性，并且主键信息存在于中 <xref:System.Data.DataSet> ，则 <xref:System.Data.IDbDataAdapter.DeleteCommand%2A> 会自动生成。  
  
   
  
## Examples  
 下面的示例创建派生类 <xref:System.Data.OleDb.OleDbDataAdapter> 并设置其一些属性。  
  
 [!code-csharp[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.DeleteCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.DeleteCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/retrieving-and-modifying-data">操作数据 (ADO.NET)</related>
        <related type="Article" href="/dotnet/framework/data/adonet/dbproviderfactories">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="dbDataAdapter.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</param>
        <summary>释放由 <see cref="T:System.Data.Common.DbDataAdapter" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dbproviderfactories">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="ExecuteBatch">
      <MemberSignature Language="C#" Value="protected virtual int ExecuteBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 ExecuteBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.ExecuteBatch" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ExecuteBatch () As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int ExecuteBatch();" />
      <MemberSignature Language="F#" Value="abstract member ExecuteBatch : unit -&gt; int&#xA;override this.ExecuteBatch : unit -&gt; int" Usage="dbDataAdapter.ExecuteBatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>执行当前批处理。</summary>
        <returns>从批处理中的最后一个命令返回的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在中 <xref:System.Data.Common.DbDataAdapter> ，此方法将引发 <xref:System.NotSupportedException> 。 从继承的类 <xref:System.Data.Common.DbDataAdapter> 将重写此方法以提供对批的支持。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>此方法是受保护的，由 .NET Framework 数据提供程序使用。  
  
如果从继承的类 <see cref="T:System.Data.Common.DbDataAdapter" /> 支持批处理，则该类将重写此方法以允许用户执行批处理。 此方法的实现将适配器中的命令合并为一个批处理，然后执行该批并返回该批的返回值。</para></block>
        <related type="Article" href="/dotnet/framework/data/adonet/retrieving-and-modifying-data">操作数据 (ADO.NET)</related>
        <related type="Article" href="/dotnet/framework/data/adonet/dbproviderfactories">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Fill">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>填充 <see cref="T:System.Data.DataSet" /> 或 <see cref="T:System.Data.DataTable" />。</summary>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public override int Fill (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Fill(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Fill (dataSet As DataSet) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Fill(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet -&gt; int" Usage="dbDataAdapter.Fill dataSet" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">M:System.Data.IDataAdapter.Fill(System.Data.DataSet)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">要用记录和架构（如果必要）填充的 <see cref="T:System.Data.DataSet" />。</param>
        <summary>在 <see cref="T:System.Data.DataSet" /> 中添加或刷新行。</summary>
        <returns>已在 <see cref="T:System.Data.DataSet" /> 中成功添加或刷新的行数。 这不包括受不返回行的语句影响的行。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A>方法使用 SELECT 语句从数据源中检索数据。 <xref:System.Data.IDbConnection>与 select 命令关联的对象必须有效，但不需要打开。 如果在 <xref:System.Data.IDbConnection> 调用之前关闭 <xref:System.Data.Common.DbDataAdapter.Fill%2A> ，则将其打开以检索数据，然后将其关闭。 如果在调用之前连接处于打开状态 <xref:System.Data.Common.DbDataAdapter.Fill%2A> ，则该连接将保持打开状态。  
  
 如果在填充数据表时出现错误或异常，则在出现错误之前添加的行将保留在数据表中。 操作的剩余部分中止。  
  
 如果命令未返回任何行，则不会向中添加任何表 <xref:System.Data.DataSet> ，也不会引发异常。  
  
 如果 <xref:System.Data.Common.DbDataAdapter> 对象在填充时遇到重复的列 <xref:System.Data.DataTable> ，则它将使用模式 "*columnname*1"、"*columnname*2"、"*columnname*3" 等生成后续列的名称。 如果传入数据包含未命名列，则这些列将 <xref:System.Data.DataSet> 按照模式 "Column1"、"Column2" 等放置在中。  
  
 当指定的查询返回多个结果时，返回查询的每个行的结果集将放在一个单独的表中。 附加的结果集通过将整数值追加到指定的表名来命名 (例如，"Table"、"Table1"、"Table2" 等) 。 由于没有为不返回行的查询创建表，因此，如果处理的是 insert 查询后跟 select 查询，则为 select 查询创建的表名为 "Table"，因为它是第一个创建的表。 使用列和表名称的应用程序应确保不会与这些命名模式发生冲突。  
  
 当用于填充的 SELECT 语句 <xref:System.Data.DataSet> 返回多个结果（如批处理 SQL 语句）时，如果其中一个结果包含错误，则会跳过所有后续结果，并且不会将其添加到中 <xref:System.Data.DataSet> 。  
  
 使用后续 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 调用来刷新的内容时 <xref:System.Data.DataSet> ，必须满足两个条件：  
  
1.  SQL 语句应匹配最初用于填充的 <xref:System.Data.DataSet> 。  
  
2.  **键**列信息必须存在。  
  
 如果主键信息存在，则会对所有重复行进行协调，并且仅在对应于的中出现一次 <xref:System.Data.DataTable> <xref:System.Data.DataSet> 。 可以通过 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 指定 <xref:System.Data.DataTable.PrimaryKey%2A> 的属性 <xref:System.Data.DataTable> 或将 <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> 属性设置为来 `AddWithKey` 设置主键信息。  
  
 如果 `SelectCommand` 返回 OUTER JOIN 的结果，则 `DataAdapter` 不会为生成的 <xref:System.Data.DataTable.PrimaryKey%2A> 设置 <xref:System.Data.DataTable>值。 必须显式定义主键，以确保正确解析重复行。 有关详细信息，请参阅 [定义主键](/dotnet/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys)。  
  
> [!NOTE]
>  当处理返回多个结果的批处理 SQL 语句时， <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> OLE DB 的 .NET Framework 数据提供程序的实现仅检索第一个结果的架构信息。 若要检索多个结果的架构信息，请使用 <xref:System.Data.Common.DbDataAdapter.Fill%2A> <xref:System.Data.MissingSchemaAction> 设置为的 `AddWithKey` 。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dbproviderfactories">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataTable dataTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(class System.Data.DataTable dataTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fill (dataTable As DataTable) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataTable ^ dataTable);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataTable -&gt; int" Usage="dbDataAdapter.Fill dataTable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="dataTable">用于表映射的 <see cref="T:System.Data.DataTable" /> 的名称。</param>
        <summary>在 <see cref="T:System.Data.DataSet" /> 的指定范围中添加或刷新行，以与使用 <see cref="T:System.Data.DataTable" /> 名称的数据源中的行匹配。</summary>
        <returns>已在 <see cref="T:System.Data.DataSet" /> 中成功添加或刷新的行数。 这不包括受不返回行的语句影响的行。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A>方法使用关联属性指定的 SELECT 语句从数据源中检索行 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> 。 与 SELECT 语句关联的连接对象必须有效，但不需要打开。 如果在调用之前连接关闭 <xref:System.Data.Common.DbDataAdapter.Fill%2A> ，则将其打开以检索数据，然后关闭。 如果在调用之前连接处于打开状态 <xref:System.Data.Common.DbDataAdapter.Fill%2A> ，则该连接将保持打开状态。  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A>然后，操作将行添加到 <xref:System.Data.DataTable> 中的目标对象 <xref:System.Data.DataSet> ，并创建 <xref:System.Data.DataTable> 对象（如果它们尚不存在）。 创建 <xref:System.Data.DataTable> 对象时，该 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 操作通常只创建列名称元数据。 但是，如果将 <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> 属性设置为 `AddWithKey` ，则还会创建相应的主键和约束。  
  
 如果在 <xref:System.Data.Common.DbDataAdapter> 填充时遇到重复的列， <xref:System.Data.DataTable> 则它将使用模式 "*columnname*1"、"*columnname*2"、"*columnname*3" 等为后续列生成名称。 如果传入数据包含未命名列，则这些列将 <xref:System.Data.DataSet> 按照模式 "Column1"、"Column2" 等放置在中。 如果将多个结果集添加到 <xref:System.Data.DataSet> 每个结果集，则会将其放在一个单独的表中。  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A>作为参数的的重载 `DataTable` 只获取第一个结果。 使用 <xref:System.Data.Common.DbDataAdapter.Fill%2A> `DataSet` 作为参数的重载以获取多个结果。  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A>方法支持 <xref:System.Data.DataSet> 包含多个对象，这些 <xref:System.Data.DataTable> 对象的名称仅区分大小写。 在这种情况下， <xref:System.Data.Common.DbDataAdapter.Fill%2A> 将执行区分大小写的比较来查找相应的表，如果不存在精确匹配，则创建新表。 下面的 c # 代码阐释了这一行为。  
  
```  
DataSet dataset = new DataSet();  
 dataset.Tables.Add("aaa");  
 dataset.Tables.Add("AAA");  
 adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
    adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 如果 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 调用，并且 <xref:System.Data.DataSet> 仅包含 <xref:System.Data.DataTable> 其名称仅大小写不同的名称， <xref:System.Data.DataTable> 则会更新。 在这种情况下，比较不区分大小写。 下面的 c # 代码阐释了这一行为。  
  
```  
DataSet dataset = new DataSet();  
 dataset.Tables.Add("aaa");  
    adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 您可以 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 在同一上多次使用该方法 <xref:System.Data.DataTable> 。 如果存在主键，则传入行与已存在的匹配行合并在一起。 如果主键不存在，则传入行将追加到 <xref:System.Data.DataTable> 。  
  
 如果 `SelectCommand` 返回 OUTER JOIN 的结果，则 `DataAdapter` 不会为生成的 <xref:System.Data.DataTable.PrimaryKey%2A> 设置 <xref:System.Data.DataTable>值。 必须显式定义主键，以确保正确解析重复行。 有关详细信息，请参阅 [定义主键](/dotnet/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys)。  
  
> [!NOTE]
>  当处理返回多个结果的批处理 SQL 语句时， <xref:System.Data.Common.DbDataAdapter.Fill%2A> <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> .NET Framework 数据提供程序的和的实现仅检索第一个结果的架构信息。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">源表无效。</exception>
        <block subset="none" type="overrides"><para>此方法的重载 <see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" /> 是受保护的，旨在供 .NET Framework 数据提供程序使用。</para></block>
        <related type="Article" href="/dotnet/framework/data/adonet/dbproviderfactories">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(class System.Data.DataSet dataSet, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fill (dataSet As DataSet, srcTable As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataSet ^ dataSet, System::String ^ srcTable);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet * string -&gt; int" Usage="dbDataAdapter.Fill (dataSet, srcTable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">要用记录和架构（如果必要）填充的 <see cref="T:System.Data.DataSet" />。</param>
        <param name="srcTable">用于表映射的源表的名称。</param>
        <summary>在 <see cref="T:System.Data.DataSet" /> 中添加或刷新行以匹配使用 <see cref="T:System.Data.DataSet" /> 和 <see cref="T:System.Data.DataTable" /> 名称的数据源中的行。</summary>
        <returns>已在 <see cref="T:System.Data.DataSet" /> 中成功添加或刷新的行数。 这不包括受不返回行的语句影响的行。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A>方法使用 SELECT 语句从数据源中检索数据。 <xref:System.Data.IDbConnection>与 select 命令关联的对象必须有效，但不需要打开。 如果在 <xref:System.Data.IDbConnection> 调用之前关闭 <xref:System.Data.Common.DbDataAdapter.Fill%2A> ，则将其打开以检索数据，然后关闭。 如果在调用之前连接处于打开状态 <xref:System.Data.Common.DbDataAdapter.Fill%2A> ，则该连接将保持打开状态。  
  
 如果命令未返回任何行，则不会向中添加任何表 <xref:System.Data.DataSet> ，也不会引发异常。  
  
 如果 <xref:System.Data.Common.DbDataAdapter> 对象在填充时遇到重复的列， <xref:System.Data.DataTable> 它将使用模式 "columnname1"、"columnname2"、"columnname3" 等，为后续列生成名称。 如果传入数据包含未命名列，则这些列将 <xref:System.Data.DataSet> 按照模式 "Column1"、"Column2" 等放置在中。  
  
 当指定的查询返回多个结果时，每个结果集将放在一个单独的表中。 附加的结果集通过将整数值追加到指定的表名来命名 (例如，"Table"、"Table1"、"Table2" 等) 。 由于没有为不返回行的查询创建表，因此，如果要处理一个 insert 查询后跟一个 select 查询，则为 select 查询创建的表将命名为 "Table"，因为它是第一个创建的表。 使用列和表名称的应用程序应确保不会与这些命名模式发生冲突。  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A>方法支持 <xref:System.Data.DataSet> 包含多个对象，这些 <xref:System.Data.DataTable> 对象的名称仅区分大小写。 在这种情况下， <xref:System.Data.Common.DbDataAdapter.Fill%2A> 将执行区分大小写的比较来查找相应的表，如果不存在精确匹配，则创建新表。 下面的 c # 代码阐释了这一行为。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 如果 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 调用，并且 <xref:System.Data.DataSet> 仅包含 <xref:System.Data.DataTable> 其名称仅大小写不同的名称， <xref:System.Data.DataTable> 则会更新。 在这种情况下，比较不区分大小写。 下面的 c # 代码阐释了这一行为。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 如果在填充数据表时出现错误或异常，则在出现错误之前添加的行将保留在数据表中。 操作的剩余部分中止。  
  
 当用于填充的 SELECT 语句 <xref:System.Data.DataSet> 返回多个结果（如批处理 SQL 语句）时，请注意以下事项：  
  
-   如果其中一个结果包含错误，则会跳过所有后续结果，并且不会将其添加到中 <xref:System.Data.DataSet> 。  
  
 使用后续 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 调用来刷新的内容时 <xref:System.Data.DataSet> ，必须满足两个条件：  
  
1.  SQL 语句应匹配最初用于填充的 <xref:System.Data.DataSet> 。  
  
2.  **键**列信息必须存在。 如果主键信息存在，则会对所有重复行进行协调，并且仅在对应于的中出现一次 <xref:System.Data.DataTable> <xref:System.Data.DataSet> 。 可以通过 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 指定 <xref:System.Data.DataTable.PrimaryKey%2A> 的属性 <xref:System.Data.DataTable> 或将 <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> 属性设置为来 `AddWithKey` 设置主键信息。  
  
 如果 `SelectCommand` 返回 OUTER JOIN 的结果，则 `DataAdapter` 不会为生成的 <xref:System.Data.DataTable.PrimaryKey%2A> 设置 <xref:System.Data.DataTable>值。 必须显式定义主键，以确保正确解析重复行。 有关详细信息，请参阅 [定义主键](/dotnet/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys)。  
  
> [!NOTE]
>  当处理返回多个结果的批处理 SQL 语句时， <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> OLE DB 的 .NET Framework 数据提供程序的实现仅检索第一个结果的架构信息。 若要检索多个结果的架构信息，请使用 <xref:System.Data.Common.DbDataAdapter.Fill%2A> <xref:System.Data.MissingSchemaAction> 设置为的 `AddWithKey` 。  
  
   
  
## Examples  
 下面的示例使用派生类， <xref:System.Data.OleDb.OleDbDataAdapter> 以便 <xref:System.Data.DataSet> 使用 "类别" 表中的行填充。 此示例假设您已创建 <xref:System.Data.OleDb.OleDbDataAdapter> 和 <xref:System.Data.DataSet> 。  
  
 [!code-csharp[Classic WebData DbDataAdapter.Fill2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Fill2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException">源表无效。</exception>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> 方法。</para></block>
        <related type="Article" href="/dotnet/framework/data/adonet/dbproviderfactories">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataTable dataTable, System.Data.IDataReader dataReader);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataTable dataTable, class System.Data.IDataReader dataReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Fill (dataTable As DataTable, dataReader As IDataReader) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataTable ^ dataTable, System::Data::IDataReader ^ dataReader);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataTable * System.Data.IDataReader -&gt; int" Usage="dbDataAdapter.Fill (dataTable, dataReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="dataReader" Type="System.Data.IDataReader" Index="1" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="dataTable">要用记录和架构（如果必要）填充的 <see cref="T:System.Data.DataTable" />。</param>
        <param name="dataReader"><see cref="T:System.Data.IDataReader" /> 的名称。</param>
        <summary>在 <see cref="T:System.Data.DataTable" /> 中添加或刷新行，以与使用指定的 <see cref="T:System.Data.DataTable" /> 和 <see cref="T:System.Data.IDataReader" /> 名称的数据源中的行匹配。</summary>
        <returns>已在 <see cref="T:System.Data.DataTable" /> 中成功添加或刷新的行数。 这不包括受不返回行的语句影响的行。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataTable dataTable, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataTable dataTable, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Fill (dataTable As DataTable, command As IDbCommand, behavior As CommandBehavior) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataTable ^ dataTable, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataTable * System.Data.IDbCommand * System.Data.CommandBehavior -&gt; int" Usage="dbDataAdapter.Fill (dataTable, command, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataTable">要用记录和架构（如果必要）填充的 <see cref="T:System.Data.DataTable" />。</param>
        <param name="command">用于从数据源中检索行的 SQL SELECT 语句。</param>
        <param name="behavior"><see cref="T:System.Data.CommandBehavior" /> 值之一。</param>
        <summary>在 <see cref="T:System.Data.DataTable" /> 中添加或刷新行，以与使用指定的 <see cref="T:System.Data.DataTable" />、<see cref="T:System.Data.IDbCommand" /> 和 <see cref="T:System.Data.CommandBehavior" /> 的数据源中的行匹配。</summary>
        <returns>已在 <see cref="T:System.Data.DataTable" /> 中成功添加或刷新的行数。 这不包括受不返回行的语句影响的行。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A>方法使用关联属性指定的 SELECT 语句从数据源中检索行 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> 。 与 SELECT 语句关联的连接对象必须有效，但不需要打开。 如果在调用前关闭连接 <xref:System.Data.Common.DbDataAdapter.Fill%2A> ，则会打开该连接，以检索数据，然后将其关闭。 如果在调用之前连接处于打开状态 <xref:System.Data.Common.DbDataAdapter.Fill%2A> ，则该连接将保持打开状态。  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A>然后，操作将行添加到中的指定目标 <xref:System.Data.DataTable> 对象 <xref:System.Data.DataSet> ，并创建对象（ <xref:System.Data.DataTable> 如果它尚不存在）。 当创建 <xref:System.Data.DataTable> 对象时， <xref:System.Data.Common.DbDataAdapter.Fill%2A> 操作通常只创建列名称元数据。 但是，如果将 <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> 属性设置为 `AddWithKey` ，则还会创建相应的主键和约束。  
  
 如果 <xref:System.Data.Common.DbDataAdapter> 对象在填充时遇到重复的列， <xref:System.Data.DataTable> 则它将使用模式 "*columnname*1"、"*columnname*2"、"*columnname*3" 等生成后续列的名称。 如果传入数据包含未命名列，则这些列将 <xref:System.Data.DataSet> 按照模式 "Column1"、"Column2" 等放置在中。  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A>作为参数的的重载 `DataTable` 只获取第一个结果。 使用 <xref:System.Data.Common.DbDataAdapter.Fill%2A> `DataSet` 作为参数的重载以获取多个结果。  
  
 您可以 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 在同一上多次使用该方法 <xref:System.Data.DataTable> 。 如果存在主键，则传入行与已存在的匹配行合并在一起。 如果主键不存在，则传入行将追加到 <xref:System.Data.DataTable> 。  
  
 如果 `SelectCommand` 返回 OUTER JOIN 的结果，则 `DataAdapter` 不会为生成的 <xref:System.Data.DataTable.PrimaryKey%2A> 设置 <xref:System.Data.DataTable>值。 必须显式定义主键，以确保正确解析重复行。 有关详细信息，请参阅 [定义主键](/dotnet/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys)。  
  
> [!NOTE]
>  当处理返回多个结果的批处理 SQL 语句时， <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> OLE DB 的 .NET Framework 数据提供程序的实现仅检索第一个结果的架构信息。 若要检索多个结果的架构信息，请使用 <xref:System.Data.Common.DbDataAdapter.Fill%2A> <xref:System.Data.MissingSchemaAction> 设置为的 `AddWithKey` 。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>此方法的重载 <see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" /> 是受保护的，旨在供 .NET Framework 数据提供程序使用。</para></block>
        <related type="Article" href="/dotnet/framework/data/adonet/dbproviderfactories">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (int startRecord, int maxRecords, params System.Data.DataTable[] dataTables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(int32 startRecord, int32 maxRecords, class System.Data.DataTable[] dataTables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Fill (startRecord As Integer, maxRecords As Integer, ParamArray dataTables As DataTable()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(int startRecord, int maxRecords, ... cli::array &lt;System::Data::DataTable ^&gt; ^ dataTables);" />
      <MemberSignature Language="F#" Value="override this.Fill : int * int * System.Data.DataTable[] -&gt; int" Usage="dbDataAdapter.Fill (startRecord, maxRecords, dataTables)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startRecord" Type="System.Int32" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="maxRecords" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="dataTables" Type="System.Data.DataTable[]" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="startRecord">从其开始的从零开始的记录号。</param>
        <param name="maxRecords">要检索的最大记录数。</param>
        <param name="dataTables">要从数据源填充的 <see cref="T:System.Data.DataTable" /> 对象。</param>
        <summary>在 <see cref="T:System.Data.DataTable" /> 中添加或刷新行，以与从指定的记录开始一直检索到指定的最大数目的记录的数据源中的行匹配。</summary>
        <returns>已在 <see cref="T:System.Data.DataTable" /> 中成功添加或刷新的行数。 此值不包括受不返回行的语句影响的行。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DataAdapter.Fill%2A>方法使用关联属性指定的 SELECT 语句从数据源中检索行 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> 。 与 SELECT 语句关联的连接对象必须有效，但不需要打开。 如果在调用前关闭连接 <xref:System.Data.Common.DataAdapter.Fill%2A> ，则会打开该连接以检索数据，然后将其关闭。 如果在调用之前连接处于打开状态 <xref:System.Data.Common.DataAdapter.Fill%2A> ，则该连接将保持打开状态。  
  
 <xref:System.Data.Common.DataAdapter.Fill%2A>然后，操作将行添加到 <xref:System.Data.DataTable> 中的目标对象 <xref:System.Data.DataSet> ，并创建 <xref:System.Data.DataTable> 对象（如果它们尚不存在）。 创建 <xref:System.Data.DataTable> 对象时，该 <xref:System.Data.Common.DataAdapter.Fill%2A> 操作通常只创建列名称元数据。 但是，如果将 <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> 属性设置为 `AddWithKey` ，则还会创建相应的主键和约束。  
  
 如果 `SelectCommand` 返回 OUTER JOIN 的结果，则 `DataAdapter` 不会为生成的 <xref:System.Data.DataTable.PrimaryKey%2A> 设置 <xref:System.Data.DataTable>值。 必须显式定义主键，以确保正确解析重复行。 有关详细信息，请参阅 [定义主键](/dotnet/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys)。  
  
 如果数据适配器在填充时遇到重复的列， <xref:System.Data.DataTable> 则它会使用 "columnname1"、"columnname2"、"columnname3" 等模式为后续列生成名称。 如果传入数据包含未命名列，则这些列将 <xref:System.Data.DataSet> 按照模式 "Column1"、"Column2" 等放置在中。 如果将多个结果集添加到 <xref:System.Data.DataSet> 中，则每个结果集都放置在一个单独的表中。 附加的结果集通过将整数值追加到指定的表名来命名 (例如，"Table"、"Table1"、"Table2" 等) 。 使用列和表名称的应用程序应确保不会与这些命名模式发生冲突。  
  
 当用于填充的 SELECT 语句 <xref:System.Data.DataSet> 返回多个结果（如批处理 SQL 语句）时，如果其中一个结果包含错误，则会跳过所有后续结果，并且不会将其添加到中 <xref:System.Data.DataSet> 。  
  
 您可以 <xref:System.Data.Common.DataAdapter.Fill%2A> 在同一上多次使用该方法 <xref:System.Data.DataTable> 。 如果存在主键，则传入行与已存在的匹配行合并在一起。 如果主键不存在，则传入行将追加到 <xref:System.Data.DataTable> 。  
  
> [!NOTE]
>  当处理返回多个结果的批处理 SQL 语句时， <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> OLE DB 的 .NET Framework 数据提供程序的实现仅检索第一个结果的架构信息。 若要检索多个结果的架构信息，请使用 <xref:System.Data.Common.DbDataAdapter.Fill%2A> <xref:System.Data.MissingSchemaAction> 设置为的 `AddWithKey` 。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dbproviderfactories">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet, int startRecord, int maxRecords, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(class System.Data.DataSet dataSet, int32 startRecord, int32 maxRecords, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fill (dataSet As DataSet, startRecord As Integer, maxRecords As Integer, srcTable As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataSet ^ dataSet, int startRecord, int maxRecords, System::String ^ srcTable);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet * int * int * string -&gt; int" Usage="dbDataAdapter.Fill (dataSet, startRecord, maxRecords, srcTable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">要用记录和架构（如果必要）填充的 <see cref="T:System.Data.DataSet" />。</param>
        <param name="startRecord">从其开始的从零开始的记录号。</param>
        <param name="maxRecords">要检索的最大记录数。</param>
        <param name="srcTable">用于表映射的源表的名称。</param>
        <summary>在 <see cref="T:System.Data.DataSet" /> 的指定范围中添加或刷新行以匹配使用 <see cref="T:System.Data.DataSet" /> 和 <see cref="T:System.Data.DataTable" /> 名称的数据源中的行。</summary>
        <returns>已在 <see cref="T:System.Data.DataSet" /> 中成功添加或刷新的行数。 这不包括受不返回行的语句影响的行。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `maxRecords`值0获取在开始记录后找到的所有记录。 如果 `maxRecords` 大于剩余行的数目，则仅返回剩余的行，并且不会发出错误。  
  
 如果相应的 select 命令是返回多个结果的语句，则 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 仅适用于 `maxRecords` 第一个结果。  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A>方法使用 SELECT 语句从数据源中检索数据。 <xref:System.Data.IDbConnection>与 SELECT 语句关联的对象必须有效，但不需要打开。 如果在 <xref:System.Data.IDbConnection> 调用之前关闭 <xref:System.Data.Common.DbDataAdapter.Fill%2A> ，则将其打开以检索数据，然后将其关闭。 如果在调用之前连接处于打开状态 <xref:System.Data.Common.DbDataAdapter.Fill%2A> ，则该连接将保持打开状态。  
  
 如果命令未返回任何行，则不会将任何表添加到 <xref:System.Data.DataSet> ，但不会引发异常。  
  
 如果 <xref:System.Data.Common.DbDataAdapter> 对象在填充时遇到重复的列， <xref:System.Data.DataTable> 则它将使用模式 "*columnname*1"、"*columnname*2"、"*columnname*3" 等生成后续列的名称。 如果传入数据包含未命名列，则这些列将 <xref:System.Data.DataSet> 按照模式 "Column1"、"Column2" 等放置在中。  
  
 当指定的查询返回多个结果时，每个结果集将放在一个单独的表中。 附加的结果集通过将整数值追加到指定的表名来命名 (例如，"Table"、"Table1"、"Table2" 等) 。 由于没有为不返回行的查询创建表，因此，如果处理的是 insert 查询后跟 select 查询，则为 select 查询创建的表名为 "Table"，因为它是第一个创建的表。 使用列和表名称的应用程序应确保不会与这些命名模式发生冲突。  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A>方法支持 <xref:System.Data.DataSet> 包含多个对象，这些 <xref:System.Data.DataTable> 对象的名称仅区分大小写。 在这种情况下， <xref:System.Data.Common.DbDataAdapter.Fill%2A> 将执行区分大小写的比较来查找相应的表，如果不存在精确匹配，则创建新表。 下面的 c # 代码阐释了这一行为。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 如果 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 调用，并且 <xref:System.Data.DataSet> 仅包含 <xref:System.Data.DataTable> 其名称仅大小写不同的名称， <xref:System.Data.DataTable> 则会更新。 在这种情况下，比较不区分大小写。 下面的 c # 代码阐释了这一行为。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 如果在填充数据表时出现错误或异常，则在出现错误之前添加的行将保留在数据表中。 操作的剩余部分中止。  
  
 当用于填充的 SELECT 语句 <xref:System.Data.DataSet> 返回多个结果（如批处理 SQL 语句）时，请注意以下事项：  
  
-   处理来自批处理 SQL 语句的多个结果时， `maxRecords` 仅适用于第一个结果。 对于包含分段结果的行也是如此 ( .NET Framework 数据提供程序仅适用于 OLE DB) 。 顶级结果受限制 `maxRecords` ，但会添加所有子行。  
  
-   如果其中一个结果包含错误，则会跳过所有后续结果，并且不会将其添加到中 <xref:System.Data.DataSet> 。  
  
 使用后续 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 调用来刷新的内容时 <xref:System.Data.DataSet> ，必须满足两个条件：  
  
1.  SQL 语句应匹配最初用于填充的 <xref:System.Data.DataSet> 。  
  
2.  **键**列信息必须存在。  
  
 如果主键信息存在，则会对所有重复行进行协调，并且仅在对应于的中出现一次 <xref:System.Data.DataTable> <xref:System.Data.DataSet> 。 可以通过 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 指定 <xref:System.Data.DataTable.PrimaryKey%2A> 的属性 <xref:System.Data.DataTable> 或将 <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> 属性设置为来 `AddWithKey` 设置主键信息。  
  
 如果 `SelectCommand` 返回 OUTER JOIN 的结果，则 `DataAdapter` 不会为生成的 <xref:System.Data.DataTable.PrimaryKey%2A> 设置 <xref:System.Data.DataTable>值。 必须显式定义主键，以确保正确解析重复行。 有关详细信息，请参阅 [定义主键](/dotnet/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys)。  
  
> [!NOTE]
>  当处理返回多个结果的批处理 SQL 语句时， <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> OLE DB 的 .NET Framework 数据提供程序的实现仅检索第一个结果的架构信息。 若要检索多个结果的架构信息，请使用 <xref:System.Data.Common.DbDataAdapter.Fill%2A> <xref:System.Data.MissingSchemaAction> 设置为的 `AddWithKey` 。  
  
> [!NOTE]
>  `DataSet`不会包含超过指示的记录数 `maxRecords` 。 但是，查询生成的整个结果集仍从服务器返回。  
  
   
  
## Examples  
 下面的示例使用派生类， <xref:System.Data.OleDb.OleDbDataAdapter> <xref:System.Data.DataSet> 从 " **类别** " 表中填充15行（从第10行开始）。 此示例假设您已创建 <xref:System.Data.OleDb.OleDbDataAdapter> 和 <xref:System.Data.DataSet> 。  
  
 [!code-csharp[Classic WebData DbDataAdapter.Fill3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Fill3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException"><see cref="T:System.Data.DataSet" /> 无效。</exception>
        <exception cref="T:System.InvalidOperationException">源表无效。  
  
 - 或 -  
  
 连接无效。</exception>
        <exception cref="T:System.InvalidCastException">未能找到连接。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="startRecord" /> 参数小于 0。  
  
- 或 - 
<paramref name="maxRecords" /> 参数小于 0。</exception>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> 方法。</para></block>
        <related type="Article" href="/dotnet/framework/data/adonet/dbproviderfactories">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataSet dataSet, string srcTable, System.Data.IDataReader dataReader, int startRecord, int maxRecords);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataSet dataSet, string srcTable, class System.Data.IDataReader dataReader, int32 startRecord, int32 maxRecords) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Fill (dataSet As DataSet, srcTable As String, dataReader As IDataReader, startRecord As Integer, maxRecords As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataSet ^ dataSet, System::String ^ srcTable, System::Data::IDataReader ^ dataReader, int startRecord, int maxRecords);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet * string * System.Data.IDataReader * int * int -&gt; int" Usage="dbDataAdapter.Fill (dataSet, srcTable, dataReader, startRecord, maxRecords)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="srcTable" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="dataReader" Type="System.Data.IDataReader" Index="2" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="startRecord" Type="System.Int32" Index="3" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="maxRecords" Type="System.Int32" Index="4" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="dataSet">要用记录和架构（如果必要）填充的 <see cref="T:System.Data.DataSet" />。</param>
        <param name="srcTable">用于表映射的 <see cref="T:System.Data.DataTable" /> 的名称。</param>
        <param name="dataReader"><see cref="T:System.Data.IDataReader" /> 的名称。</param>
        <param name="startRecord">从其开始的从零开始的记录号。</param>
        <param name="maxRecords">要检索的最大记录数。</param>
        <summary>在 <see cref="T:System.Data.DataSet" /> 的指定范围中添加或刷新行以与使用 <see cref="T:System.Data.DataSet" />、<see cref="T:System.Data.DataTable" /> 和 <see cref="T:System.Data.IDataReader" /> 名称的数据源中的行进行匹配。</summary>
        <returns>已在 <see cref="T:System.Data.DataSet" /> 中成功添加或刷新的行数。 这不包括受不返回行的语句影响的行。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataTable[] dataTables, int startRecord, int maxRecords, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataTable[] dataTables, int32 startRecord, int32 maxRecords, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Fill (dataTables As DataTable(), startRecord As Integer, maxRecords As Integer, command As IDbCommand, behavior As CommandBehavior) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(cli::array &lt;System::Data::DataTable ^&gt; ^ dataTables, int startRecord, int maxRecords, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataTable[] * int * int * System.Data.IDbCommand * System.Data.CommandBehavior -&gt; int" Usage="dbDataAdapter.Fill (dataTables, startRecord, maxRecords, command, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTables" Type="System.Data.DataTable[]" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="startRecord" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="maxRecords" Type="System.Int32" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="command" Type="System.Data.IDbCommand" Index="3" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" Index="4" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dataTables">要从数据源填充的 <see cref="T:System.Data.DataTable" /> 对象。</param>
        <param name="startRecord">从其开始的从零开始的记录号。</param>
        <param name="maxRecords">要检索的最大记录数。</param>
        <param name="command">执行以填充 <see cref="T:System.Data.IDbCommand" /> 对象的 <see cref="T:System.Data.DataTable" />。</param>
        <param name="behavior"><see cref="T:System.Data.CommandBehavior" /> 值之一。</param>
        <summary>在 <see cref="T:System.Data.DataSet" /> 的指定范围中添加或刷新行以匹配使用 <see cref="T:System.Data.DataSet" /> 和 <see cref="T:System.Data.DataTable" /> 名称的数据源中的行。</summary>
        <returns>已在数据表中添加或刷新的行数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `maxRecords`值0获取在开始记录后找到的所有记录。 如果 `maxRecords` 大于剩余行数，则只返回剩余的行，并且不会发出错误。  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A>方法使用 SELECT 语句从数据源中检索数据。 <xref:System.Data.IDbConnection>与 SELECT 语句关联的对象必须有效，但不需要打开。 如果在 <xref:System.Data.IDbConnection> 调用之前关闭 <xref:System.Data.Common.DbDataAdapter.Fill%2A> ，则将其打开以检索数据，然后关闭。 如果在调用之前连接处于打开状态 <xref:System.Data.Common.DbDataAdapter.Fill%2A> ，则该连接将保持打开状态。  
  
 如果命令未返回任何行，则不会将任何表添加到 <xref:System.Data.DataSet> ，但不会引发异常。  
  
 如果 <xref:System.Data.Common.DbDataAdapter> 对象在填充时遇到重复的列， <xref:System.Data.DataTable> 则它将使用模式 "*columnname*1"、"*columnname*2"、"*columnname*3" 等生成后续列的名称。 如果传入数据包含未命名列，则这些列将 <xref:System.Data.DataSet> 按照模式 "Column1"、"Column2" 等放置在中。  
  
 当指定的查询返回多个结果时，每个结果集将放在一个单独的表中。 附加的结果集通过将整数值追加到指定的表名来命名 (例如，"Table"、"Table1"、"Table2" 等) 。 由于没有为不返回行的查询创建表，因此，如果要处理一个 insert 查询后跟一个 select 查询，则为 select 查询创建的表将命名为 "Table"，因为它是第一个创建的表。 使用列和表名称的应用程序应确保不会与这些命名模式发生冲突。  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A>方法支持 <xref:System.Data.DataSet> 包含多个对象，这些 <xref:System.Data.DataTable> 对象的名称仅区分大小写。 在这种情况下， <xref:System.Data.Common.DbDataAdapter.Fill%2A> 将执行区分大小写的比较来查找相应的表，如果不存在精确匹配，则创建新表。 下面的 c # 代码阐释了这一行为。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 如果 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 调用，并且 <xref:System.Data.DataSet> 仅包含 <xref:System.Data.DataTable> 其名称仅大小写不同的名称， <xref:System.Data.DataTable> 则会更新。 在这种情况下，比较不区分大小写。 下面的 c # 代码阐释了这一行为。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 如果在填充数据表时出现错误或异常，则在出现错误之前添加的行将保留在数据表中。 操作的剩余部分中止。  
  
 当用于填充对象的 SELECT 语句 <xref:System.Data.DataTable> 返回多个结果（如批处理 SQL 语句）时，请注意以下事项：  
  
-   处理来自批处理 SQL 语句的多个结果时， `maxRecords` 仅适用于第一个结果。 对于包含分段结果的行也是如此 ( .NET Framework 数据提供程序仅适用于 OLE DB) 。 顶级结果受限制 `maxRecords` ，但会添加所有子行。  
  
-   如果其中一个结果包含错误，则会跳过所有后续结果。  
  
> [!NOTE]
>  `DataSet`不会包含超过指示的记录数 `maxRecords` 。 但仍从服务器返回查询生成的整个结果集。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException"><see cref="T:System.Data.DataSet" /> 无效。</exception>
        <exception cref="T:System.InvalidOperationException">源表无效。  
  
 - 或 -  
  
 连接无效。</exception>
        <exception cref="T:System.InvalidCastException">未能找到连接。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="startRecord" /> 参数小于 0。  
  
- 或 - 
<paramref name="maxRecords" /> 参数小于 0。</exception>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> 方法。</para></block>
        <related type="Article" href="/dotnet/framework/data/adonet/dbproviderfactories">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataSet dataSet, int startRecord, int maxRecords, string srcTable, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataSet dataSet, int32 startRecord, int32 maxRecords, string srcTable, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Fill (dataSet As DataSet, startRecord As Integer, maxRecords As Integer, srcTable As String, command As IDbCommand, behavior As CommandBehavior) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataSet ^ dataSet, int startRecord, int maxRecords, System::String ^ srcTable, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet * int * int * string * System.Data.IDbCommand * System.Data.CommandBehavior -&gt; int" Usage="dbDataAdapter.Fill (dataSet, startRecord, maxRecords, srcTable, command, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
        <Parameter Name="srcTable" Type="System.String" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataSet">要用记录和架构（如果必要）填充的 <see cref="T:System.Data.DataSet" />。</param>
        <param name="startRecord">从其开始的从零开始的记录号。</param>
        <param name="maxRecords">要检索的最大记录数。</param>
        <param name="srcTable">用于表映射的源表的名称。</param>
        <param name="command">用于从数据源中检索行的 SQL SELECT 语句。</param>
        <param name="behavior"><see cref="T:System.Data.CommandBehavior" /> 值之一。</param>
        <summary>使用 <see cref="T:System.Data.DataSet" /> 和源表名称、命令字符串以及命令行为，在 <see cref="T:System.Data.DataSet" /> 的指定范围中添加或刷新某些行以使它们与数据源中对应的行相一致。</summary>
        <returns>已在 <see cref="T:System.Data.DataSet" /> 中成功添加或刷新的行数。 这不包括受不返回行的语句影响的行。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A>方法使用关联属性指定的 SELECT 语句从数据源中检索行 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> 。 与 SELECT 语句关联的连接对象必须有效，但不需要打开。 如果在调用之前连接关闭 <xref:System.Data.Common.DbDataAdapter.Fill%2A> ，则将其打开以检索数据，然后关闭。 如果在调用之前连接处于打开状态 <xref:System.Data.Common.DbDataAdapter.Fill%2A> ，则该连接将保持打开状态。  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A>然后，操作将行添加到 <xref:System.Data.DataTable> 中的目标对象 <xref:System.Data.DataSet> ，并创建 <xref:System.Data.DataTable> 对象（如果它们尚不存在）。 创建 <xref:System.Data.DataTable> 对象时，该 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 操作通常只创建列名称元数据。 但是，如果将 <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> 属性设置为 `AddWithKey` ，则还会创建相应的主键和约束。  
  
 如果在 <xref:System.Data.Common.DbDataAdapter> 填充时遇到重复的列， <xref:System.Data.DataTable> 则它将使用模式 "*columnname*1"、"*columnname*2"、"*columnname*3" 等为后续列生成名称。 如果传入数据包含未命名列，则这些列将 <xref:System.Data.DataSet> 按照模式 "Column1"、"Column2" 等放置在中。 如果将多个结果集添加到 <xref:System.Data.DataSet> 每个结果集，则会将其放在一个单独的表中。 附加的结果集通过将整数值追加到指定的表名来命名 (例如，"Table"、"Table1"、"Table2" 等) 。 使用列和表名称的应用程序应确保不会与这些命名模式发生冲突。  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A>方法支持 <xref:System.Data.DataSet> 包含多个对象，这些 <xref:System.Data.DataTable> 对象的名称仅区分大小写。 在这种情况下， <xref:System.Data.Common.DbDataAdapter.Fill%2A> 将执行区分大小写的比较来查找相应的表，如果不存在精确匹配，则创建新表。 下面的 c # 代码阐释了这一行为。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 如果 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 调用，并且 <xref:System.Data.DataSet> 仅包含 <xref:System.Data.DataTable> 其名称仅大小写不同的名称， <xref:System.Data.DataTable> 则会更新。 在这种情况下，比较不区分大小写。 下面的 c # 代码阐释了这一行为。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 您可以 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 在同一上多次使用该方法 <xref:System.Data.DataTable> 。 如果存在主键，则传入行与已存在的匹配行合并在一起。 如果主键不存在，则传入行将追加到 <xref:System.Data.DataTable> 。  
  
 如果 `SelectCommand` 返回 OUTER JOIN 的结果，则 `DataAdapter` 不会为生成的 <xref:System.Data.DataTable.PrimaryKey%2A> 设置 <xref:System.Data.DataTable>值。 必须显式定义主键，以确保正确解析重复行。 有关详细信息，请参阅 [定义主键](/dotnet/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys)。  
  
> [!NOTE]
>  当处理返回多个结果的批处理 SQL 语句时， <xref:System.Data.Common.DbDataAdapter.Fill%2A> <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> .NET Framework 数据提供程序的和的实现仅检索第一个结果的架构信息。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">源表无效。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="startRecord" /> 参数小于 0。  
  
- 或 - 
<paramref name="maxRecords" /> 参数小于 0。</exception>
        <block subset="none" type="overrides"><para>此方法的重载 <see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" /> 是受保护的，旨在供 .NET Framework 数据提供程序使用。</para></block>
        <related type="Article" href="/dotnet/framework/data/adonet/dbproviderfactories">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="FillCommandBehavior">
      <MemberSignature Language="C#" Value="protected internal System.Data.CommandBehavior FillCommandBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.CommandBehavior FillCommandBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.FillCommandBehavior" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property FillCommandBehavior As CommandBehavior" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Data::CommandBehavior FillCommandBehavior { System::Data::CommandBehavior get(); void set(System::Data::CommandBehavior value); };" />
      <MemberSignature Language="F#" Value="member this.FillCommandBehavior : System.Data.CommandBehavior with get, set" Usage="System.Data.Common.DbDataAdapter.FillCommandBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.CommandBehavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于填充数据适配器的命令的行为。</summary>
        <value>用于填充数据适配器的命令的 <see cref="T:System.Data.CommandBehavior" />。</value>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dbproviderfactories">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="FillError">
      <MemberSignature Language="C#" Value="public event System.Data.FillErrorEventHandler FillError;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.FillErrorEventHandler FillError" />
      <MemberSignature Language="DocId" Value="E:System.Data.Common.DbDataAdapter.FillError" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FillError As FillErrorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::FillErrorEventHandler ^ FillError;" />
      <MemberSignature Language="F#" Value="member this.FillError : System.Data.FillErrorEventHandler " Usage="member this.FillError : System.Data.FillErrorEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.Data.DataSysDescription("DbDataAdapter_FillError")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Data.DataSysDescription("DbDataAdapter_FillError")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.FillErrorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在填充操作过程中出现错误时返回。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将 <see cref="T:System.Data.DataTable" /> 添加到 <see cref="T:System.Data.DataSet" /> 中，并配置架构以匹配数据源中的架构。</summary>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public override System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function FillSchema (dataSet As DataSet, schemaType As SchemaType) As DataTable()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataSet * System.Data.SchemaType -&gt; System.Data.DataTable[]" Usage="dbDataAdapter.FillSchema (dataSet, schemaType)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataSet">要插入架构的 <see cref="T:System.Data.DataSet" />。</param>
        <param name="schemaType"><see cref="T:System.Data.SchemaType" /> 值之一，指定如何插入架构。</param>
        <summary>将名为“Table”的 <see cref="T:System.Data.DataTable" /> 添加到指定的 <see cref="T:System.Data.DataSet" />，并根据指定的 <see cref="T:System.Data.SchemaType" /> 配置架构以匹配数据源中的架构。</summary>
        <returns>一个引用，指向添加到 <see cref="T:System.Data.DataSet" /> 的 <see cref="T:System.Data.DataTable" /> 对象的集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法使用从数据源中检索架构信息 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> 。  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>操作将添加 <xref:System.Data.DataTable> 到目标 <xref:System.Data.DataSet> 。 然后，它将列添加到的 <xref:System.Data.DataColumnCollection> <xref:System.Data.DataTable> ，并配置以下 <xref:System.Data.DataColumn> 属性（如果它们存在于数据源中）：  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. 您必须 <xref:System.Data.DataColumn.AutoIncrementStep%2A> 分别设置和 <xref:System.Data.DataColumn.AutoIncrementSeed%2A> 。  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A><xref:System.Data.DataTable.PrimaryKey%2A>根据以下规则，还可以配置和 <xref:System.Data.DataTable.Constraints%2A> 属性：  
  
-   如果返回一个或多个主键列，则将 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> 它们用作的主键列 <xref:System.Data.DataTable> 。  
  
-   如果未返回主键列但唯一列为，则当且仅当不可 null 所有唯一列时，才将唯一列用作主键。 如果任何列可为 null， <xref:System.Data.UniqueConstraint> 则会将添加到 <xref:System.Data.ConstraintCollection> ，但 <xref:System.Data.DataTable.PrimaryKey%2A> 不设置属性。  
  
-   如果为主键列和唯一列都返回，则主键列将用作的主键列 <xref:System.Data.DataTable> 。  
  
 请注意，根据前面的规则将主键和 unique 约束添加到， <xref:System.Data.ConstraintCollection> 但不会添加其他约束类型。  
  
 如果在 SQL Server 表中的一列或多列上定义了唯一聚集索引，并且在一组单独的列上定义了 primary key 约束，则将返回聚集索引中的列的名称。 若要返回主键列的名称，请使用带有指定主键索引名称的 SELECT 语句的查询提示。 有关指定查询提示的详细信息，请参阅 [ (transact-sql) 的提示](/sql/t-sql/queries/hints-transact-sql-query)。  
  
 在过程中使用主键信息 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 查找并替换其键列匹配的任何行。 如果这不是所需的行为，请使用 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 而不请求架构信息。  
  
 如果在 <xref:System.Data.IDataAdapter> 填充时遇到重复的列， <xref:System.Data.DataTable> 则它将使用模式 "*columnname*1"、"*columnname*2"、"*columnname*3" 等为后续列生成名称。 如果传入数据包含未命名列，则这些列将 <xref:System.Data.DataSet> 按照模式 "Column1"、"Column2" 等放置在中。 如果将多个结果集添加到 <xref:System.Data.DataSet> 每个结果集，则会将其放在一个单独的表中。 附加的结果集通过将整数值追加到指定的表名来命名 (例如，"Table"、"Table1"、"Table2" 等。 ) 。 使用列和表名称的应用程序应确保不会与这些命名模式发生冲突。  
  
 <xref:System.Data.IDbConnection>与 select 命令关联的对象必须有效，但不需要打开。 如果在 <xref:System.Data.IDbConnection> 调用之前关闭 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> ，则将其打开以检索数据，然后关闭。 如果在调用之前连接已打开，则将 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 其保持打开状态。  
  
> [!NOTE]
>  当处理返回多个结果的批处理 SQL 语句时， <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> OLE DB 的 .NET Framework 数据提供程序的实现仅检索第一个结果的架构信息。 若要检索多个结果的架构信息，请使用 <xref:System.Data.Common.DbDataAdapter.Fill%2A> <xref:System.Data.MissingSchemaAction> 设置为的 `AddWithKey` 。  
  
 当使用 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 时，用于 SQL Server 的 .NET Framework 数据提供程序将 FOR BROWSE 子句追加到正在执行的语句。 用户应该注意潜在的副作用，例如对 SET FMTONLY ON 语句的使用产生的干扰。 有关详细信息，请参阅 [SET FMTONLY (Transact-SQL)](/sql/t-sql/statements/set-fmtonly-transact-sql)。
  
   
  
## Examples  
 下面的示例使用派生类， <xref:System.Data.SqlClient.SqlDataAdapter> 将填充到 <xref:System.Data.DataSet> 架构，并返回 <xref:System.Data.DataSet> 。  
  
 [!code-csharp[Classic WebData DbDataAdapter.FillSchema1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.FillSchema1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dbproviderfactories">DbProviderFactories</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public System.Data.DataTable? FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTable FillSchema(class System.Data.DataTable dataTable, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)" />
      <MemberSignature Language="VB.NET" Value="Public Function FillSchema (dataTable As DataTable, schemaType As SchemaType) As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataTable ^ FillSchema(System::Data::DataTable ^ dataTable, System::Data::SchemaType schemaType);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataTable * System.Data.SchemaType -&gt; System.Data.DataTable" Usage="dbDataAdapter.FillSchema (dataTable, schemaType)" />
      <MemberSignature Language="C#" Value="public System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataTable">要用数据源中的架构填充的 <see cref="T:System.Data.DataTable" />。</param>
        <param name="schemaType"><see cref="T:System.Data.SchemaType" /> 值之一。</param>
        <summary>根据指定的 <see cref="T:System.Data.SchemaType" /> 配置指定 <see cref="T:System.Data.DataTable" /> 的架构。</summary>
        <returns>一个 <see cref="T:System.Data.DataTable" />，其中包含从数据源返回的架构信息。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>方法使用检索数据源中的架构 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> 。 与关联的连接对象 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> 必须有效，但不需要打开。 如果在调用之前连接关闭 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> ，则将其打开以检索数据，然后关闭。 如果在调用之前连接处于打开状态 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> ，则该连接将保持打开状态。  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>操作返回 <xref:System.Data.DataTable> 。 然后，它将列添加到的 <xref:System.Data.DataColumnCollection> <xref:System.Data.DataTable> ，并配置以下 <xref:System.Data.DataColumn> 属性（如果它们存在于数据源中）：  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. 您必须 <xref:System.Data.DataColumn.AutoIncrementStep%2A> 分别设置和 <xref:System.Data.DataColumn.AutoIncrementSeed%2A> 。  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A><xref:System.Data.DataTable.PrimaryKey%2A>根据以下规则，还可以配置和 <xref:System.Data.DataTable.Constraints%2A> 属性：  
  
-   如果已 <xref:System.Data.DataTable.PrimaryKey%2A> 为指定 `DataTable` ，或 `DataTable` 包含数据，则 `PrimaryKey` 不会设置属性。  
  
-   如果返回一个或多个主键列，则将 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> 它们用作的主键列 `DataTable` 。  
  
-   如果未返回主键列但唯一列为，则当且仅当不可 null 所有唯一列时，才将唯一列用作主键。 如果任何列可为 null， <xref:System.Data.UniqueConstraint> 则会将添加到 <xref:System.Data.ConstraintCollection> ，但 `PrimaryKey` 不设置属性。  
  
-   如果为主键列和唯一列都返回，则主键列将用作的主键列 `DataTable` 。  
  
 请注意，根据前面的规则将主键和 unique 约束添加到， <xref:System.Data.ConstraintCollection> 但不会添加其他约束类型。 此过程可能需要多次往返服务器。  
  
 如果在 SQL Server 表中的一列或多列上定义了唯一聚集索引，并且在一组单独的列上定义了 primary key 约束，则将返回聚集索引中的列的名称。 若要返回主键列的名称，请使用带有指定主键索引名称的 SELECT 语句的查询提示。 有关指定查询提示的详细信息，请参阅 [ (transact-sql) 的提示](/sql/t-sql/queries/hints-transact-sql-query)。  
  
 如果在 <xref:System.Data.Common.DbDataAdapter> 填充时遇到重复的列， <xref:System.Data.DataTable> 则它将使用模式 "*columnname*1"、"*columnname*2"、"*columnname*3" 等为后续列生成名称。 如果传入数据包含未命名列，则这些列将 <xref:System.Data.DataSet> 按照模式 "Column1"、"Column2" 等放置在中。 如果将多个结果集添加到 <xref:System.Data.DataSet> 每个结果集，则会将其放在一个单独的表中。 附加的结果集通过将整数值追加到指定的表名来命名 (例如，"Table"、"Table1"、"Table2" 等。 ) 。 使用列和表名称的应用程序应确保不会与这些命名模式发生冲突。  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 不返回任何行。 使用 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 方法可将行添加到 <xref:System.Data.DataTable> 。  
  
> [!NOTE]
>  当处理返回多个结果的批处理 SQL 语句时， <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> OLE DB 的 .NET Framework 数据提供程序的实现仅检索第一个结果的架构信息。 若要检索多个结果的架构信息，请使用 <xref:System.Data.Common.DbDataAdapter.Fill%2A> <xref:System.Data.MissingSchemaAction> 设置为的 `AddWithKey` 。  
  
 当使用 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 时，用于 SQL Server 的 .NET Framework 数据提供程序将 FOR BROWSE 子句追加到正在执行的语句。 用户应该注意潜在的副作用，例如对 SET FMTONLY ON 语句的使用产生的干扰。 有关详细信息，请参阅 [SET FMTONLY (Transact-SQL)](/sql/t-sql/statements/set-fmtonly-transact-sql)。
  
   
  
## Examples  
 下面的示例使用派生类， <xref:System.Data.SqlClient.SqlDataAdapter> 将填充到 <xref:System.Data.DataSet> 架构，并返回 <xref:System.Data.DataTable> 。  
  
 [!code-csharp[Classic WebData DbDataAdapter.FillSchema3#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema3/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.FillSchema3#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema3/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dbproviderfactories">DbProviderFactories</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FillSchema (dataSet As DataSet, schemaType As SchemaType, srcTable As String) As DataTable()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType, System::String ^ srcTable);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataSet * System.Data.SchemaType * string -&gt; System.Data.DataTable[]" Usage="dbDataAdapter.FillSchema (dataSet, schemaType, srcTable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">要插入架构的 <see cref="T:System.Data.DataSet" />。</param>
        <param name="schemaType"><see cref="T:System.Data.SchemaType" /> 值之一，指定如何插入架构。</param>
        <param name="srcTable">用于表映射的源表的名称。</param>
        <summary>将 <see cref="T:System.Data.DataTable" /> 添加到指定的 <see cref="T:System.Data.DataSet" /> 中，并根据指定的 <see cref="T:System.Data.SchemaType" /> 和 <see cref="T:System.Data.DataTable" /> 配置架构以匹配数据源中的架构。</summary>
        <returns>一个引用，指向添加到 <see cref="T:System.Data.DataSet" /> 的 <see cref="T:System.Data.DataTable" /> 对象的集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法使用从数据源中检索架构信息 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> 。  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>操作将添加 <xref:System.Data.DataTable> 到目标 <xref:System.Data.DataSet> 。 然后，它将列添加到的 <xref:System.Data.DataColumnCollection> <xref:System.Data.DataTable> ，并配置以下 <xref:System.Data.DataColumn> 属性（如果它们存在于数据源中）：  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. 您必须 <xref:System.Data.DataColumn.AutoIncrementStep%2A> 分别设置和 <xref:System.Data.DataColumn.AutoIncrementSeed%2A> 。  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A><xref:System.Data.DataTable.PrimaryKey%2A>根据以下规则，还可以配置和 <xref:System.Data.DataTable.Constraints%2A> 属性：  
  
-   如果返回一个或多个主键列，则将 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> 它们用作的主键列 <xref:System.Data.DataTable> 。  
  
-   如果未返回主键列但唯一列为，则当且仅当不可 null 所有唯一列时，才将唯一列用作主键。 如果任何列可为 null， <xref:System.Data.UniqueConstraint> 则会将添加到 <xref:System.Data.ConstraintCollection> ，但 <xref:System.Data.DataTable.PrimaryKey%2A> 不设置属性。  
  
-   如果为主键列和唯一列都返回，则主键列将用作的主键列 <xref:System.Data.DataTable> 。  
  
 请注意，根据前面的规则将主键和 unique 约束添加到， <xref:System.Data.ConstraintCollection> 但不会添加其他约束类型。  
  
 如果在 SQL Server 表中的一列或多列上定义了唯一聚集索引，并且在一组单独的列上定义了 primary key 约束，则将返回聚集索引中的列的名称。 若要返回主键列的名称，请使用带有指定主键索引名称的 SELECT 语句的查询提示。 有关指定查询提示的详细信息，请参阅 [ (transact-sql) 的提示](/sql/t-sql/queries/hints-transact-sql-query)。  
  
 在过程中使用主键信息 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 查找并替换其键列匹配的任何行。 如果这不是所需的行为，请使用 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 而不请求架构信息。  
  
 如果在 <xref:System.Data.Common.DbDataAdapter> 填充时遇到重复的列， <xref:System.Data.DataTable> 则它将使用模式 "*columnname*1"、"*columnname*2"、"*columnname*3" 等为后续列生成名称。 如果传入数据包含未命名列，则这些列将 <xref:System.Data.DataSet> 按照模式 "Column1"、"Column2" 等放置在中。 如果将多个结果集添加到 <xref:System.Data.DataSet> 每个结果集，则会将其放在一个单独的表中。 附加的结果集通过将整数值追加到指定的表名来命名 (例如，"Table"、"Table1"、"Table2" 等。 ) 。 使用列和表名称的应用程序应确保不会与这些命名模式发生冲突。  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>方法支持 <xref:System.Data.DataSet> 包含多个对象，这些 <xref:System.Data.DataTable> 对象的名称仅区分大小写。 在这种情况下， <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 将执行区分大小写的比较来查找相应的表，如果不存在精确匹配，则创建新表。 下面的 c # 代码阐释了这一行为。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.FillSchema(dataset, "aaa"); // Fills the schema of "aaa", which already exists in the DataSet.  
adapter.FillSchema(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 如果 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 调用，并且 <xref:System.Data.DataSet> 仅包含 <xref:System.Data.DataTable> 其名称仅大小写不同的名称， <xref:System.Data.DataTable> 则会更新。 在这种情况下，比较不区分大小写。 下面的 c # 代码阐释了这一行为。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.FillSchema(dataset, "AAA"); // Fills the schema of table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 <xref:System.Data.IDbConnection>与 select 命令关联的对象必须有效，但不需要打开。 如果在 <xref:System.Data.IDbConnection> 调用之前关闭 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> ，则将其打开以检索数据，然后关闭。 如果在调用之前连接已打开，则将 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 其保持打开状态。  
  
> [!NOTE]
>  当处理返回多个结果的批处理 SQL 语句时， <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> OLE DB 的 .NET Framework 数据提供程序的实现仅检索第一个结果的架构信息。 若要检索多个结果的架构信息，请使用 <xref:System.Data.Common.DbDataAdapter.Fill%2A> <xref:System.Data.MissingSchemaAction> 设置为的 `AddWithKey` 。  
  
 当使用 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 时，用于 SQL Server 的 .NET Framework 数据提供程序将 FOR BROWSE 子句追加到正在执行的语句。 用户应该注意潜在的副作用，例如对 SET FMTONLY ON 语句的使用产生的干扰。 有关详细信息，请参阅 [SET FMTONLY (Transact-SQL)](/sql/t-sql/statements/set-fmtonly-transact-sql)。
  
   
  
## Examples  
 下面的示例使用派生类， <xref:System.Data.SqlClient.SqlDataAdapter> 将填充到 <xref:System.Data.DataSet> 架构，并返回 <xref:System.Data.DataSet> 。  
  
 [!code-csharp[Classic WebData DbDataAdapter.FillSchema2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.FillSchema2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">找不到从中获取架构的源表。</exception>
        <related type="Article" href="/dotnet/framework/data/adonet/dbproviderfactories">DbProviderFactories</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="protected virtual System.Data.DataTable? FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.DataTable FillSchema(class System.Data.DataTable dataTable, valuetype System.Data.SchemaType schemaType, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function FillSchema (dataTable As DataTable, schemaType As SchemaType, command As IDbCommand, behavior As CommandBehavior) As DataTable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::DataTable ^ FillSchema(System::Data::DataTable ^ dataTable, System::Data::SchemaType schemaType, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataTable * System.Data.SchemaType * System.Data.IDbCommand * System.Data.CommandBehavior -&gt; System.Data.DataTable" Usage="dbDataAdapter.FillSchema (dataTable, schemaType, command, behavior)" />
      <MemberSignature Language="C#" Value="protected virtual System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataTable">要用数据源中的架构填充的 <see cref="T:System.Data.DataTable" />。</param>
        <param name="schemaType"><see cref="T:System.Data.SchemaType" /> 值之一。</param>
        <param name="command">用于从数据源中检索行的 SQL SELECT 语句。</param>
        <param name="behavior"><see cref="T:System.Data.CommandBehavior" /> 值之一。</param>
        <summary>根据指定的 <see cref="T:System.Data.DataTable" />、命令字符串以及 <see cref="T:System.Data.SchemaType" /> 值配置指定 <see cref="T:System.Data.CommandBehavior" /> 的架构。</summary>
        <returns>包含从数据源返回的架构信息的 <see cref="T:System.Data.DataTable" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>方法使用检索数据源中的架构 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> 。 与关联的连接对象 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> 必须有效，但不需要打开。 如果在调用之前连接关闭 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> ，则将其打开以检索数据，然后关闭。 如果在调用之前连接处于打开状态 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> ，则该连接将保持打开状态。  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>操作将添加 <xref:System.Data.DataTable> 到目标 <xref:System.Data.DataSet> 。 然后，它将列添加到的 <xref:System.Data.DataColumnCollection> <xref:System.Data.DataTable> ，并配置以下 <xref:System.Data.DataColumn> 属性（如果它们存在于数据源中）：  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. 您必须 <xref:System.Data.DataColumn.AutoIncrementStep%2A> 分别设置和 <xref:System.Data.DataColumn.AutoIncrementSeed%2A> 。  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A><xref:System.Data.DataTable.PrimaryKey%2A>根据以下规则，还可以配置和 <xref:System.Data.DataTable.Constraints%2A> 属性：  
  
-   如果返回一个或多个主键列，则将 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> 它们用作的主键列 <xref:System.Data.DataTable> 。  
  
-   如果未返回主键列但唯一列为，则当且仅当不可 null 所有唯一列时，才将唯一列用作主键。 如果任何列可为 null， <xref:System.Data.UniqueConstraint> 则会将添加到 <xref:System.Data.ConstraintCollection> ，但 <xref:System.Data.DataTable.PrimaryKey%2A> 不设置属性。  
  
-   如果为主键列和唯一列都返回，则主键列将用作的主键列 <xref:System.Data.DataTable> 。  
  
 请注意，根据前面的规则将主键和 unique 约束添加到， <xref:System.Data.ConstraintCollection> 但不会添加其他约束类型。  
  
 如果在 SQL Server 表中的一列或多列上定义了唯一聚集索引，并且在一组单独的列上定义了 primary key 约束，则将返回聚集索引中的列的名称。 若要返回主键列的名称，请使用带有指定主键索引名称的 SELECT 语句的查询提示。 有关指定查询提示的详细信息，请参阅 [ (transact-sql) 的提示](/sql/t-sql/queries/hints-transact-sql-query)。  
  
 如果在 <xref:System.Data.IDataAdapter> 填充时遇到重复的列， <xref:System.Data.DataTable> 则它将使用模式 "*columnname*1"、"*columnname*2"、"*columnname*3" 等为后续列生成名称。 如果传入数据包含未命名列，则这些列将 <xref:System.Data.DataSet> 按照模式 "Column1"、"Column2" 等放置在中。 如果将多个结果集添加到 <xref:System.Data.DataSet> 每个结果集，则会将其放在一个单独的表中。 附加的结果集通过将整数值追加到指定的表名来命名 (例如，"Table"、"Table1"、"Table2" 等。 ) 。 使用列和表名称的应用程序应确保不会与这些命名模式发生冲突。  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 不返回任何行。 使用 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 方法可将行添加到 <xref:System.Data.DataTable> 。  
  
> [!NOTE]
>  当处理返回多个结果的批处理 SQL 语句时， <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> OLE DB 的 .NET Framework 数据提供程序的实现仅检索第一个结果的架构信息。 若要检索多个结果的架构信息，请使用 <xref:System.Data.Common.DbDataAdapter.Fill%2A> <xref:System.Data.MissingSchemaAction> 设置为的 `AddWithKey` 。  
  
 当使用 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 时，用于 SQL Server 的 .NET Framework 数据提供程序将 FOR BROWSE 子句追加到正在执行的语句。 用户应该注意潜在的副作用，例如对 SET FMTONLY ON 语句的使用产生的干扰。 有关详细信息，请参阅 [SET FMTONLY (Transact-SQL)](/sql/t-sql/statements/set-fmtonly-transact-sql)。
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>此方法的实现 <see cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" /> 是受保护的，旨在供 .NET Framework 数据提供程序使用。</para></block>
        <related type="Article" href="/dotnet/framework/data/adonet/dbproviderfactories">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="protected virtual System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, System.Data.IDbCommand command, string srcTable, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType, class System.Data.IDbCommand command, string srcTable, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function FillSchema (dataSet As DataSet, schemaType As SchemaType, command As IDbCommand, srcTable As String, behavior As CommandBehavior) As DataTable()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType, System::Data::IDbCommand ^ command, System::String ^ srcTable, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataSet * System.Data.SchemaType * System.Data.IDbCommand * string * System.Data.CommandBehavior -&gt; System.Data.DataTable[]" Usage="dbDataAdapter.FillSchema (dataSet, schemaType, command, srcTable, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="srcTable" Type="System.String" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataSet">要用数据源中的架构填充的 <see cref="T:System.Data.DataSet" />。</param>
        <param name="schemaType"><see cref="T:System.Data.SchemaType" /> 值之一。</param>
        <param name="command">用于从数据源中检索行的 SQL SELECT 语句。</param>
        <param name="srcTable">用于表映射的源表的名称。</param>
        <param name="behavior"><see cref="T:System.Data.CommandBehavior" /> 值之一。</param>
        <summary>将 <see cref="T:System.Data.DataTable" /> 添加到指定的 <see cref="T:System.Data.DataSet" /> ，并根据指定的 <see cref="T:System.Data.SchemaType" />配置架构以匹配数据源中的架构。</summary>
        <returns><see cref="T:System.Data.DataTable" /> 对象的数组，这些对象包含从数据源返回的架构信息。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>方法使用检索数据源中的架构 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> 。 与关联的连接对象 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> 必须有效，但不需要打开。 如果在调用之前连接关闭 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> ，则将其打开以检索数据，然后关闭。 如果在调用之前连接处于打开状态 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> ，则该连接将保持打开状态。  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>操作将添加 <xref:System.Data.DataTable> 到目标 <xref:System.Data.DataSet> 。 然后，它将列添加到的 <xref:System.Data.DataColumnCollection> <xref:System.Data.DataTable> ，并配置以下 <xref:System.Data.DataColumn> 属性（如果它们存在于数据源中）：  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. 您必须 <xref:System.Data.DataColumn.AutoIncrementStep%2A> 分别设置和 <xref:System.Data.DataColumn.AutoIncrementSeed%2A> 。  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A><xref:System.Data.DataTable.PrimaryKey%2A>根据以下规则，还可以配置和 <xref:System.Data.DataTable.Constraints%2A> 属性：  
  
-   如果返回一个或多个主键列，则将 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> 它们用作的主键列 <xref:System.Data.DataTable> 。  
  
-   如果未返回主键列但唯一列为，则当且仅当不可 null 所有唯一列时，才将唯一列用作主键。 如果任何列可为 null， <xref:System.Data.UniqueConstraint> 则会将添加到 <xref:System.Data.ConstraintCollection> ，但 <xref:System.Data.DataTable.PrimaryKey%2A> 不设置属性。  
  
-   如果为主键列和唯一列都返回，则主键列将用作的主键列 <xref:System.Data.DataTable> 。  
  
 请注意，根据前面的规则将主键和 unique 约束添加到， <xref:System.Data.ConstraintCollection> 但不会添加其他约束类型。  
  
 如果在 SQL Server 表中的一列或多列上定义了唯一聚集索引，并且在一组单独的列上定义了 primary key 约束，则将返回聚集索引中的列的名称。 若要返回主键列的名称，请使用带有指定主键索引名称的 SELECT 语句的查询提示。 有关指定查询提示的详细信息，请参阅 [ (transact-sql) 的提示](/sql/t-sql/queries/hints-transact-sql-query)。  
  
 如果在 <xref:System.Data.IDataAdapter> 填充时遇到重复的列， <xref:System.Data.DataTable> 则它将使用模式 "*columnname*1"、"*columnname*2"、"*columnname*3" 等为后续列生成名称。 如果传入数据包含未命名列，则这些列将 <xref:System.Data.DataSet> 按照模式 "Column1"、"Column2" 等放置在中。 如果将多个结果集添加到 <xref:System.Data.DataSet> 每个结果集，则会将其放在一个单独的表中。 附加的结果集通过将整数值追加到指定的表名来命名 (例如，"Table"、"Table1"、"Table2" 等。 ) 。 使用列和表名称的应用程序应确保不会与这些命名模式发生冲突。  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>方法支持 <xref:System.Data.DataSet> 包含多个对象，这些 <xref:System.Data.DataTable> 对象的名称仅区分大小写。 在这种情况下， <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 将执行区分大小写的比较来查找相应的表，如果不存在精确匹配，则创建新表。 下面的 c # 代码阐释了这一行为。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.FillSchema(dataset, "aaa"); // Fills the schema of "aaa", which already exists in the DataSet.  
adapter.FillSchema(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 如果 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 调用，并且 <xref:System.Data.DataSet> 仅包含 <xref:System.Data.DataTable> 其名称仅大小写不同的名称， <xref:System.Data.DataTable> 则会更新。 在这种情况下，比较不区分大小写。 下面的 c # 代码阐释了这一行为。  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.FillSchema(dataset, "AAA"); // Fills the schema of table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 不返回任何行。 使用 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 方法可将行添加到 <xref:System.Data.DataTable> 。  
  
> [!NOTE]
>  当处理返回多个结果的批处理 SQL 语句时， <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> OLE DB 的 .NET Framework 数据提供程序的实现仅检索第一个结果的架构信息。 若要检索多个结果的架构信息，请使用 <xref:System.Data.Common.DbDataAdapter.Fill%2A> <xref:System.Data.MissingSchemaAction> 设置为的 `AddWithKey` 。  
  
 当使用 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 时，用于 SQL Server 的 .NET Framework 数据提供程序将 FOR BROWSE 子句追加到正在执行的语句。 用户应该注意潜在的副作用，例如对 SET FMTONLY ON 语句的使用产生的干扰。 有关详细信息，请参阅 [SET FMTONLY (Transact-SQL)](/sql/t-sql/statements/set-fmtonly-transact-sql)。
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>此方法的实现 <see cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" /> 是受保护的，旨在供 .NET Framework 数据提供程序使用。</para></block>
        <related type="Article" href="/dotnet/framework/data/adonet/dbproviderfactories">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="GetBatchedParameter">
      <MemberSignature Language="C#" Value="protected virtual System.Data.IDataParameter GetBatchedParameter (int commandIdentifier, int parameterIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.IDataParameter GetBatchedParameter(int32 commandIdentifier, int32 parameterIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetBatchedParameter (commandIdentifier As Integer, parameterIndex As Integer) As IDataParameter" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::IDataParameter ^ GetBatchedParameter(int commandIdentifier, int parameterIndex);" />
      <MemberSignature Language="F#" Value="abstract member GetBatchedParameter : int * int -&gt; System.Data.IDataParameter&#xA;override this.GetBatchedParameter : int * int -&gt; System.Data.IDataParameter" Usage="dbDataAdapter.GetBatchedParameter (commandIdentifier, parameterIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandIdentifier" Type="System.Int32" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="parameterIndex" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="commandIdentifier">要从中检索参数的命令的索引。</param>
        <param name="parameterIndex">命令内的参数的索引。</param>
        <summary>从当前批处理中的其中一个命令返回一个 <see cref="T:System.Data.IDataParameter" />。</summary>
        <returns>指定的 <see cref="T:System.Data.IDataParameter" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在中 <xref:System.Data.Common.DbDataAdapter> ，此方法将引发 <xref:System.NotSupportedException> 。 从继承的类 <xref:System.Data.Common.DbDataAdapter> 将重写此方法以提供对批的支持。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">该适配器不支持批处理。</exception>
        <block subset="none" type="overrides"><para>此方法是受保护的，由 .NET Framework 数据提供程序使用。  
  
如果从继承的类 <see cref="T:System.Data.Common.DbDataAdapter" /> 支持批处理，则该类将重写此方法以允许用户执行批处理。 实现使用提供的 <paramref name="commandIdentifier" /> 来定位请求的命令，然后使用提供的 <paramref name="parameterIndex" /> 来定位请求的参数。 例如，如果为 <paramref name="commandIdentifier" /> 0，并且的为0，则 <paramref name="parameterIndex" /> 返回批处理中第一个命令的第一个参数。</para></block>
        <related type="Article" href="/dotnet/framework/data/adonet/dbproviderfactories">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="GetBatchedRecordsAffected">
      <MemberSignature Language="C#" Value="protected virtual bool GetBatchedRecordsAffected (int commandIdentifier, out int recordsAffected, out Exception error);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool GetBatchedRecordsAffected(int32 commandIdentifier, [out] int32&amp; recordsAffected, [out] class System.Exception&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetBatchedRecordsAffected (commandIdentifier As Integer, ByRef recordsAffected As Integer, ByRef error As Exception) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool GetBatchedRecordsAffected(int commandIdentifier, [Runtime::InteropServices::Out] int % recordsAffected, [Runtime::InteropServices::Out] Exception ^ % error);" />
      <MemberSignature Language="F#" Value="abstract member GetBatchedRecordsAffected : int * int * Exception -&gt; bool&#xA;override this.GetBatchedRecordsAffected : int * int * Exception -&gt; bool" Usage="dbDataAdapter.GetBatchedRecordsAffected (commandIdentifier, recordsAffected, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandIdentifier" Type="System.Int32" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="recordsAffected" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="error" Type="System.Exception" RefType="out" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="commandIdentifier">该批次内单个命令的从零开始的列序号。</param>
        <param name="recordsAffected">数据存储区中受该批内的指定命令影响的行数。</param>
        <param name="error">在执行指定命令期间引发的一个 <see cref="T:System.Exception" />。 如果未引发任何异常，则返回 <see langword="null" />（在 Visual Basic 中为 <see langword="Nothing" />）。</param>
        <summary>返回与较大的批处理更新内的单次更新尝试有关的信息。</summary>
        <returns>与较大的批处理更新内的单次更新尝试有关的信息。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 支持批量更新逻辑的数据访问接口必须重写类的一系列虚方法 <xref:System.Data.Common.DbDataAdapter> 。 `GetBatchedRecordsAffected` 表示这些虚方法中的一个。 `DbDataAdapter`类依赖于 `GetBatchedRecordsAffected` 确定批次中的单个更新尝试是成功还是失败，以便它能够相应地对其进行标记 <xref:System.Data.DataRow> 。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="GetFillParameters">
      <MemberSignature Language="C#" Value="public override System.Data.IDataParameter[] GetFillParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.IDataParameter[] GetFillParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.GetFillParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetFillParameters () As IDataParameter()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Data::IDataParameter ^&gt; ^ GetFillParameters();" />
      <MemberSignature Language="F#" Value="override this.GetFillParameters : unit -&gt; System.Data.IDataParameter[]" Usage="dbDataAdapter.GetFillParameters " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">M:System.Data.IDataAdapter.GetFillParameters</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取当执行 SQL SELECT 语句时由用户设置的参数。</summary>
        <returns><see cref="T:System.Data.IDataParameter" /> 对象的数组，这些对象包含由用户设置的参数。</returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="InitializeBatching">
      <MemberSignature Language="C#" Value="protected virtual void InitializeBatching ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitializeBatching() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.InitializeBatching" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub InitializeBatching ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void InitializeBatching();" />
      <MemberSignature Language="F#" Value="abstract member InitializeBatching : unit -&gt; unit&#xA;override this.InitializeBatching : unit -&gt; unit" Usage="dbDataAdapter.InitializeBatching " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Data.Common.DbDataAdapter" /> 的批处理。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在中 <xref:System.Data.Common.DbDataAdapter> ，此方法将引发 <xref:System.NotSupportedException> 。 从继承的类 <xref:System.Data.Common.DbDataAdapter> 将重写此方法以提供对批的支持。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">该适配器不支持批处理。</exception>
        <block subset="none" type="overrides"><para>此方法是受保护的，由 .NET Framework 数据提供程序使用。  
  
如果从继承的类 <see cref="T:System.Data.Common.DbDataAdapter" /> 支持批处理，则该类将重写此方法。 此方法为类提供了初始化支持批处理所需的任何资源的机会。 例如，类可以分配数据结构来保存批处理中的命令集。</para></block>
        <related type="Article" href="/dotnet/framework/data/adonet/dbproviderfactories">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="InsertCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand? InsertCommand { get; set; }" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.InsertCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ InsertCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InsertCommand : System.Data.Common.DbCommand with get, set" Usage="System.Data.Common.DbDataAdapter.InsertCommand" />
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand InsertCommand { get; set; }" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于在数据源中插入新记录的命令。</summary>
        <value>在 <see cref="T:System.Data.IDbCommand" /> 过程中使用的 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />，它针对数据集中的新行将记录插入到数据源中。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在过程中 <xref:System.Data.Common.DbDataAdapter.Update%2A> ，如果未设置此属性，并且主键信息存在于中 <xref:System.Data.DataSet> ，则 <xref:System.Data.IDbDataAdapter.InsertCommand%2A> 将自动生成。  
  
   
  
## Examples  
 下面的示例创建派生类 <xref:System.Data.OleDb.OleDbDataAdapter> 并设置其一些属性。  
  
 [!code-csharp[Classic WebData DbDataAdapter.InsertCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.InsertCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.InsertCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.InsertCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/retrieving-and-modifying-data">操作数据 (ADO.NET)</related>
        <related type="Article" href="/dotnet/framework/data/adonet/dbproviderfactories">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="OnFillError">
      <MemberSignature Language="C#" Value="protected virtual void OnFillError (System.Data.FillErrorEventArgs value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnFillError(class System.Data.FillErrorEventArgs value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.OnFillError(System.Data.FillErrorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnFillError (value As FillErrorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnFillError(System::Data::FillErrorEventArgs ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnFillError : System.Data.FillErrorEventArgs -&gt; unit&#xA;override this.OnFillError : System.Data.FillErrorEventArgs -&gt; unit" Usage="dbDataAdapter.OnFillError value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.FillErrorEventArgs" Index="0" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="value">事件的数据。</param>
        <summary>引发 <see cref="E:System.Data.Common.DataAdapter.FillError" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRowUpdated">
      <MemberSignature Language="C#" Value="protected virtual void OnRowUpdated (System.Data.Common.RowUpdatedEventArgs value);" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowUpdated(class System.Data.Common.RowUpdatedEventArgs value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowUpdated (value As RowUpdatedEventArgs)" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowUpdated(System::Data::Common::RowUpdatedEventArgs ^ value);" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member OnRowUpdated : System.Data.Common.RowUpdatedEventArgs -&gt; unit&#xA;override this.OnRowUpdated : System.Data.Common.RowUpdatedEventArgs -&gt; unit" Usage="dbDataAdapter.OnRowUpdated value" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="protected abstract void OnRowUpdated (System.Data.Common.RowUpdatedEventArgs value);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub OnRowUpdated (value As RowUpdatedEventArgs)" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void OnRowUpdated(System::Data::Common::RowUpdatedEventArgs ^ value);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="abstract member OnRowUpdated : System.Data.Common.RowUpdatedEventArgs -&gt; unit" Usage="dbDataAdapter.OnRowUpdated value" FrameworkAlternate="netframework-1.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.Common.RowUpdatedEventArgs" />
      </Parameters>
      <Docs>
        <param name="value">包含事件数据的 <see cref="T:System.Data.Common.RowUpdatedEventArgs" />。</param>
        <summary>引发 .NET Framework 数据提供程序的 <see langword="RowUpdated" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关概述，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" /> 方法。</para></block>
        <related type="Article" href="/dotnet/framework/data/adonet/dbproviderfactories">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="OnRowUpdating">
      <MemberSignature Language="C#" Value="protected virtual void OnRowUpdating (System.Data.Common.RowUpdatingEventArgs value);" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowUpdating(class System.Data.Common.RowUpdatingEventArgs value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowUpdating (value As RowUpdatingEventArgs)" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowUpdating(System::Data::Common::RowUpdatingEventArgs ^ value);" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member OnRowUpdating : System.Data.Common.RowUpdatingEventArgs -&gt; unit&#xA;override this.OnRowUpdating : System.Data.Common.RowUpdatingEventArgs -&gt; unit" Usage="dbDataAdapter.OnRowUpdating value" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="protected abstract void OnRowUpdating (System.Data.Common.RowUpdatingEventArgs value);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub OnRowUpdating (value As RowUpdatingEventArgs)" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void OnRowUpdating(System::Data::Common::RowUpdatingEventArgs ^ value);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="abstract member OnRowUpdating : System.Data.Common.RowUpdatingEventArgs -&gt; unit" Usage="dbDataAdapter.OnRowUpdating value" FrameworkAlternate="netframework-1.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.Common.RowUpdatingEventArgs" />
      </Parameters>
      <Docs>
        <param name="value">包含事件数据的 <see cref="T:System.Data.Common.RowUpdatingEventArgs" />。</param>
        <summary>引发 .NET Framework 数据提供程序的 <see langword="RowUpdating" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关概述，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" /> 方法。</para></block>
        <related type="Article" href="/dotnet/framework/data/adonet/dbproviderfactories">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="SelectCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand? SelectCommand { get; set; }" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.SelectCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ SelectCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectCommand : System.Data.Common.DbCommand with get, set" Usage="System.Data.Common.DbDataAdapter.SelectCommand" />
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand SelectCommand { get; set; }" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于在数据源中选择记录的命令。</summary>
        <value>在 <see cref="T:System.Data.IDbCommand" /> 过程中使用的 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />，它从数据源中选择记录以便放入数据集中。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例创建派生类 <xref:System.Data.OleDb.OleDbDataAdapter> 并设置其一些属性。  
  
 [!code-csharp[Classic WebData DbDataAdapter.SelectCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.SelectCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.SelectCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.SelectCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/retrieving-and-modifying-data">操作数据 (ADO.NET)</related>
        <related type="Article" href="/dotnet/framework/data/adonet/dbproviderfactories">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.DeleteCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand? System.Data.IDbDataAdapter.DeleteCommand { get; set; }" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand" />
      <MemberSignature Language="VB.NET" Value=" Property DeleteCommand As IDbCommand Implements IDbDataAdapter.DeleteCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System::Data::IDbDataAdapter::DeleteCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.System.Data.IDbDataAdapter.DeleteCommand : System.Data.IDbCommand with get, set" Usage="System.Data.IDbDataAdapter.DeleteCommand" />
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; set; }" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.DeleteCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于从数据集中删除记录的 SQL 语句。</summary>
        <value><see cref="T:System.Data.IDbCommand" /> 过程中使用的 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />，它针对数据集中已删除的行删除数据源中的记录。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式接口成员的实现。 它只能在 <xref:System.Data.Common.DbDataAdapter> 实例被强制转换为 <xref:System.Data.IDbDataAdapter> 接口时使用。  
  
 有关详细信息，请参阅 <xref:System.Data.IDbDataAdapter.DeleteCommand%2A>。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.InsertCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand? System.Data.IDbDataAdapter.InsertCommand { get; set; }" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand" />
      <MemberSignature Language="VB.NET" Value=" Property InsertCommand As IDbCommand Implements IDbDataAdapter.InsertCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System::Data::IDbDataAdapter::InsertCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.System.Data.IDbDataAdapter.InsertCommand : System.Data.IDbCommand with get, set" Usage="System.Data.IDbDataAdapter.InsertCommand" />
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; set; }" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.InsertCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于将新记录插入到数据源中的 SQL 语句。</summary>
        <value>在 <see cref="T:System.Data.IDbCommand" /> 过程中使用的 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />，它针对数据集中的新行将记录插入到数据源。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式接口成员的实现。 它只能在 <xref:System.Data.Common.DbDataAdapter> 实例被强制转换为 <xref:System.Data.IDbDataAdapter> 接口时使用。  
  
 有关详细信息，请参阅 <xref:System.Data.IDbDataAdapter.InsertCommand%2A>。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.SelectCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand? System.Data.IDbDataAdapter.SelectCommand { get; set; }" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand" />
      <MemberSignature Language="VB.NET" Value=" Property SelectCommand As IDbCommand Implements IDbDataAdapter.SelectCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System::Data::IDbDataAdapter::SelectCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.System.Data.IDbDataAdapter.SelectCommand : System.Data.IDbCommand with get, set" Usage="System.Data.IDbDataAdapter.SelectCommand" />
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; set; }" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.SelectCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于在数据源中选择记录的 SQL 语句。</summary>
        <value>在 <see cref="T:System.Data.IDbCommand" /> 过程中使用的 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />，它从数据源中选择记录以便放入数据集中。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式接口成员的实现。 它只能在 <xref:System.Data.Common.DbDataAdapter> 实例被强制转换为 <xref:System.Data.IDbDataAdapter> 接口时使用。  
  
 有关详细信息，请参阅 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.UpdateCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand? System.Data.IDbDataAdapter.UpdateCommand { get; set; }" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand" />
      <MemberSignature Language="VB.NET" Value=" Property UpdateCommand As IDbCommand Implements IDbDataAdapter.UpdateCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System::Data::IDbDataAdapter::UpdateCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.System.Data.IDbDataAdapter.UpdateCommand : System.Data.IDbCommand with get, set" Usage="System.Data.IDbDataAdapter.UpdateCommand" />
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; set; }" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.UpdateCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于更新数据源中的记录的 SQL 语句。</summary>
        <value>在 <see cref="T:System.Data.IDbCommand" /> 过程中使用的 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />，它针对数据集中已修改的行更新数据源中的记录。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式接口成员的实现。 它只能在 <xref:System.Data.Common.DbDataAdapter> 实例被强制转换为 <xref:System.Data.IDbDataAdapter> 接口时使用。  
  
 有关详细信息，请参阅 <xref:System.Data.IDbDataAdapter.UpdateCommand%2A>。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="System.ICloneable.Clone">
      <MemberSignature Language="C#" Value="object ICloneable.Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ICloneable.Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.System#ICloneable#Clone" />
      <MemberSignature Language="VB.NET" Value="Function Clone () As Object Implements ICloneable.Clone" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.ICloneable.Clone() = ICloneable::Clone;" />
      <MemberSignature Language="F#" Value="abstract member System.ICloneable.Clone : unit -&gt; obj&#xA;override this.System.ICloneable.Clone : unit -&gt; obj" Usage="dbDataAdapter.System.ICloneable.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.Obsolete("use 'protected DbDataAdapter(DbDataAdapter)' ctor")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("use 'protected DbDataAdapter(DbDataAdapter)' ctor")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建作为当前实例副本的新对象。</summary>
        <returns>作为此实例副本的新对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式接口成员的实现。 它只能在 <xref:System.Data.Common.DbDataAdapter> 实例被强制转换为 <xref:System.ICloneable> 接口时使用。  
  
 有关详细信息，请参阅 <xref:System.ICloneable.Clone%2A?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="TerminateBatching">
      <MemberSignature Language="C#" Value="protected virtual void TerminateBatching ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void TerminateBatching() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.TerminateBatching" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub TerminateBatching ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void TerminateBatching();" />
      <MemberSignature Language="F#" Value="abstract member TerminateBatching : unit -&gt; unit&#xA;override this.TerminateBatching : unit -&gt; unit" Usage="dbDataAdapter.TerminateBatching " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>结束 <see cref="T:System.Data.Common.DbDataAdapter" /> 的批处理。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在中 <xref:System.Data.Common.DbDataAdapter> ，此方法将引发 <xref:System.NotSupportedException> 。 从继承的类 <xref:System.Data.Common.DbDataAdapter> 将重写此方法以提供对批的支持。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">该适配器不支持批处理。</exception>
        <block subset="none" type="overrides"><para>此方法是受保护的，由 .NET Framework 数据提供程序使用。  
  
如果从继承的类 <see cref="T:System.Data.Common.DbDataAdapter" /> 支持批处理，则该类将重写此方法。 此方法使类有机会释放分配给支持批处理的任何资源。 例如，类可以解除分配保存批处理中的命令的数据结构。</para></block>
        <related type="Article" href="/dotnet/framework/data/adonet/dbproviderfactories">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Update">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>通过为 <see cref="T:System.Data.DataSet" /> 中的每个已插入、已更新或已删除的行执行相应的 INSERT、UPDATE 或 DELETE 语句来更新数据库中的值。</summary>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataRow[] dataRows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Data.DataRow[] dataRows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (dataRows As DataRow()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(cli::array &lt;System::Data::DataRow ^&gt; ^ dataRows);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataRow[] -&gt; int" Usage="dbDataAdapter.Update dataRows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRows" Type="System.Data.DataRow[]" />
      </Parameters>
      <Docs>
        <param name="dataRows">用于更新数据源的 <see cref="T:System.Data.DataRow" /> 对象的数组。</param>
        <summary>通过为 <see cref="T:System.Data.DataSet" /> 中的指定数组中的每个已插入、已更新或已删除的行执行相应的 INSERT、UPDATE 或 DELETE 语句来更新数据库中的值。</summary>
        <returns><see cref="T:System.Data.DataSet" /> 中成功更新的行数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当应用程序调用 <xref:System.Data.Common.DbDataAdapter.Update%2A> 方法时，将 <xref:System.Data.Common.DbDataAdapter> 检查 <xref:System.Data.DataRow.RowState%2A> 属性，并根据中配置的索引的顺序，对每个行重复执行所需的 INSERT、UPDATE 或 DELETE 语句 <xref:System.Data.DataSet> 。 例如， <xref:System.Data.Common.DbDataAdapter.Update%2A> 可能会执行 DELETE 语句，后跟 INSERT 语句，然后执行另一 delete 语句，因为中的行的顺序 <xref:System.Data.DataTable> 。  
  
 应注意的是，这些语句不作为批处理执行;每一行都单独更新。 应用程序可以 <xref:System.Data.DataSet.GetChanges%2A> 在以下情况下调用方法：例如，必须控制语句类型的序列 (例如，在更新) 之前插入。 有关详细信息，请参阅 [用 Dataadapter 更新数据源](/dotnet/framework/data/adonet/updating-data-sources-with-dataadapters)。  
  
 如果尚未指定 INSERT、UPDATE 或 DELETE 语句，则该方法将 <xref:System.Data.Common.DbDataAdapter.Update%2A> 生成一个异常。 但是， <xref:System.Data.SqlClient.SqlCommandBuilder> <xref:System.Data.OleDb.OleDbCommandBuilder> 如果您设置了 `SelectCommand` .NET Framework 数据提供程序的属性，则可以创建或对象以自动为单表更新生成 SQL 语句。 然后， **CommandBuilder**将生成未设置的任何其他 SQL 语句。 此代逻辑要求密钥列信息存在于中 <xref:System.Data.DataSet> 。 有关详细信息，请参阅 [通过 Commandbuilder 生成命令](/dotnet/framework/data/adonet/generating-commands-with-commandbuilders)。  
  
 在 <xref:System.Data.Common.DbDataAdapter.Update%2A> 执行更新之前，方法将从第一个映射中列出的表中检索行。 <xref:System.Data.Common.DbDataAdapter.Update%2A>然后，使用属性的值刷新该行 <xref:System.Data.IDbCommand.UpdatedRowSource%2A> 。 将忽略返回的任何其他行。  
  
 在将任何数据加载回后 <xref:System.Data.DataSet> ，将 <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> 引发事件，从而允许用户检查已协调的 <xref:System.Data.DataSet> 行和该命令返回的任何输出参数。 成功更新行后，将接受对该行所做的更改。  
  
 使用时 <xref:System.Data.Common.DbDataAdapter.Update%2A> ，执行顺序如下所示：  
  
1.  中的值 <xref:System.Data.DataRow> 将被移动到参数值中。  
  
2.  引发 <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> 事件。  
  
3.  命令执行。  
  
4.  如果命令设置为，则 `FirstReturnedRecord` 返回的第一个结果位于中 <xref:System.Data.DataRow> 。  
  
5.  如果有输出参数，则将它们放在中 <xref:System.Data.DataRow> 。  
  
6.  引发 <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> 事件。  
  
7.  调用 <xref:System.Data.DataRow.AcceptChanges%2A>。  
  
 与关联的每个命令 <xref:System.Data.Common.DbDataAdapter> 通常都具有与之关联的参数集合。 通过 `SourceColumn` `SourceVersion` .NET Framework 数据提供程序的类的和属性，将参数映射到当前行 `Parameter` 。 `SourceColumn` 引用 <xref:System.Data.DataTable> <xref:System.Data.Common.DbDataAdapter> 用于获取当前行的参数值的列。  
  
 `SourceColumn` 在应用了任何表映射之前引用未映射的列名称。 如果 `SourceColumn` 引用不存在的列，则执行的操作取决于下列值之一 <xref:System.Data.MissingMappingAction> 。  
  
|枚举值|采取的操作|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|如果不存在映射，请使用中的源列名称和表名称 <xref:System.Data.DataSet> 。|  
|`MissingMappingAction.Ignore`|<xref:System.SystemException>生成。 当显式设置映射时，缺少输入参数的映射通常是由错误引起的。|  
|`MissingMappingAction.Error`|<xref:System.SystemException>生成。|  
  
 `SourceColumn`属性还可用于将输出或输入/输出参数的值映射回 `DataSet` 。 如果引用不存在的列，则会生成异常。  
  
 `SourceVersion`.NET Framework 数据提供程序的类的属性 `Parameter` 确定是使用列值的原始版本、当前版本还是建议的版本。 此功能通常用于在 UPDATE 语句的 WHERE 子句中包含原始值，以检查是否存在开放式并发冲突。  
  
> [!NOTE]
>  如果在更新行时出现错误，则会引发异常并中止执行更新。 若要在遇到错误时继续执行更新操作而不生成异常，请在 <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> 调用之前将属性设置为 `true` <xref:System.Data.Common.DbDataAdapter.Update%2A> 。 您还可以在 DataAdapter 事件内每行响应错误 `RowUpdated` 。 若要继续执行更新操作而不在事件中生成异常 `RowUpdated` ，请将 <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> 的属性设置 <xref:System.Data.Common.RowUpdatedEventArgs> 为 <xref:System.Data.UpdateStatus.Continue> 。  
  
   
  
## Examples  
 下面的示例使用派生类 <xref:System.Data.OleDb.OleDbDataAdapter> 来更新数据源。  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="T:System.Data.DataSet" /> 无效。</exception>
        <exception cref="T:System.InvalidOperationException">源表无效。</exception>
        <exception cref="T:System.SystemException">不存在要更新的 <see cref="T:System.Data.DataRow" />。  
  
- 或 - 
不存在要更新的 <see cref="T:System.Data.DataTable" />。  
  
- 或 - 
不存在要用作源的 <see cref="T:System.Data.DataSet" />。</exception>
        <exception cref="T:System.Data.DBConcurrencyException">尝试执行 INSERT、UPDATE 或 DELETE 语句，但没有记录受到影响。</exception>
        <related type="Article" href="/dotnet/framework/data/adonet/retrieving-and-modifying-data">操作数据 (ADO.NET)</related>
        <related type="Article" href="/dotnet/framework/data/adonet/dbproviderfactories">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public override int Update (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Update(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Update (dataSet As DataSet) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Update(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataSet -&gt; int" Usage="dbDataAdapter.Update dataSet" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">M:System.Data.IDataAdapter.Update(System.Data.DataSet)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">用于更新数据源的 <see cref="T:System.Data.DataSet" />。</param>
        <summary>通过为指定的 <see cref="T:System.Data.DataSet" /> 中的每个已插入、已更新或已删除的行执行相应的 INSERT、UPDATE 或 DELETE 语句来更新数据库中的值。</summary>
        <returns><see cref="T:System.Data.DataSet" /> 中成功更新的行数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当应用程序调用 <xref:System.Data.Common.DbDataAdapter.Update%2A> 方法时，将 <xref:System.Data.Common.DbDataAdapter> 检查 <xref:System.Data.DataRow.RowState%2A> 属性，并根据中配置的索引的顺序，对每个行重复执行所需的 INSERT、UPDATE 或 DELETE 语句 <xref:System.Data.DataSet> 。 例如， <xref:System.Data.Common.DbDataAdapter.Update%2A> 可能会执行 DELETE 语句，后跟 INSERT 语句，然后执行另一 delete 语句，因为中的行的顺序 <xref:System.Data.DataTable> 。  
  
 应注意的是，这些语句不作为批处理执行;每一行都单独更新。 应用程序可以 <xref:System.Data.DataSet.GetChanges%2A> 在以下情况下调用方法：例如，必须控制语句类型的序列 (例如，在更新) 之前插入。 有关详细信息，请参阅 [用 Dataadapter 更新数据源](/dotnet/framework/data/adonet/updating-data-sources-with-dataadapters)。  
  
 如果尚未指定 INSERT、UPDATE 或 DELETE 语句，则该方法将 <xref:System.Data.Common.DbDataAdapter.Update%2A> 生成一个异常。 但是， <xref:System.Data.SqlClient.SqlCommandBuilder> <xref:System.Data.OleDb.OleDbCommandBuilder> 如果您设置了 `SelectCommand` .NET Framework 数据提供程序的属性，则可以创建或对象以自动为单表更新生成 SQL 语句。 然后， **CommandBuilder**将生成未设置的任何其他 SQL 语句。 此代逻辑要求密钥列信息存在于中 <xref:System.Data.DataSet> 。 有关详细信息，请参阅 [通过 Commandbuilder 生成命令](/dotnet/framework/data/adonet/generating-commands-with-commandbuilders)。  
  
 在 <xref:System.Data.Common.DbDataAdapter.Update%2A> 执行更新之前，方法将从第一个映射中列出的表中检索行。 <xref:System.Data.Common.DbDataAdapter.Update%2A>然后，使用属性的值刷新该行 <xref:System.Data.IDbCommand.UpdatedRowSource%2A> 。 将忽略返回的任何其他行。  
  
 在将任何数据加载回后 <xref:System.Data.DataSet> ，将 <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> 引发事件，从而允许用户检查已协调的 <xref:System.Data.DataSet> 行和该命令返回的任何输出参数。 成功更新行后，将接受对该行所做的更改。  
  
 使用时 <xref:System.Data.Common.DbDataAdapter.Update%2A> ，执行顺序如下所示：  
  
1.  中的值 <xref:System.Data.DataRow> 将被移动到参数值中。  
  
2.  引发 <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> 事件。  
  
3.  命令执行。  
  
4.  如果命令设置为 `FirstReturnedRecord` ，则将第一个返回的结果放置在中 <xref:System.Data.DataRow> 。  
  
5.  如果有输出参数，则将它们放在中 <xref:System.Data.DataRow> 。  
  
6.  引发 <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> 事件。  
  
7.  调用 <xref:System.Data.DataRow.AcceptChanges%2A>。  
  
 与关联的每个命令 <xref:System.Data.Common.DbDataAdapter> 通常都具有与之关联的参数集合。 通过 `SourceColumn` `SourceVersion` .NET Framework 数据提供程序的类的和属性，将参数映射到当前行 `Parameter` 。 `SourceColumn` 引用 <xref:System.Data.DataTable> <xref:System.Data.Common.DbDataAdapter> 用于获取当前行的参数值的列。  
  
 `SourceColumn` 在应用了任何表映射之前引用未映射的列名称。 如果 `SourceColumn` 引用不存在的列，则执行的操作取决于下列值之一 <xref:System.Data.MissingMappingAction> 。  
  
|枚举值|采取的操作|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|如果不存在映射，请使用中的源列名称和表名称 <xref:System.Data.DataSet> 。|  
|`MissingMappingAction.Ignore`|<xref:System.SystemException>生成。 当显式设置映射时，缺少输入参数的映射通常是由错误引起的。|  
|`MissingMappingAction.Error`|<xref:System.SystemException>生成。|  
  
 `SourceColumn`属性还可用于将输出或输入/输出参数的值映射回 `DataSet` 。 如果引用不存在的列，则会生成异常。  
  
 `SourceVersion`.NET Framework 数据提供程序的类的属性 `Parameter` 确定是使用列值的原始版本、当前版本还是建议的版本。 此功能通常用于在 UPDATE 语句的 WHERE 子句中包含原始值，以检查是否存在开放式并发冲突。  
  
> [!NOTE]
>  如果在更新行时出现错误，则会引发异常并中止执行更新。 若要在遇到错误时继续执行更新操作而不生成异常，请在 <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> 调用之前将属性设置为 `true` <xref:System.Data.Common.DbDataAdapter.Update%2A> 。 您还可以在 DataAdapter 事件内每行响应错误 `RowUpdated` 。 若要继续执行更新操作而不在事件中生成异常 `RowUpdated` ，请将 <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> 的属性设置 <xref:System.Data.Common.RowUpdatedEventArgs> 为 <xref:System.Data.UpdateStatus.Continue> 。  
  
   
  
## Examples  
 下面的示例使用派生类 <xref:System.Data.OleDb.OleDbDataAdapter> 来更新数据源。  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">源表无效。</exception>
        <exception cref="T:System.Data.DBConcurrencyException">尝试执行 INSERT、UPDATE 或 DELETE 语句，但没有记录受到影响。</exception>
        <related type="Article" href="/dotnet/framework/data/adonet/retrieving-and-modifying-data">操作数据 (ADO.NET)</related>
        <related type="Article" href="/dotnet/framework/data/adonet/dbproviderfactories">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataTable dataTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Data.DataTable dataTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (dataTable As DataTable) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Data::DataTable ^ dataTable);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataTable -&gt; int" Usage="dbDataAdapter.Update dataTable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="dataTable">用于更新数据源的 <see cref="T:System.Data.DataTable" />。</param>
        <summary>通过为指定的 <see cref="T:System.Data.DataTable" /> 中的每个已插入、已更新或已删除的行执行相应的 INSERT、UPDATE 或 DELETE 语句来更新数据库中的值。</summary>
        <returns><see cref="T:System.Data.DataTable" /> 中成功更新的行数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当应用程序调用 <xref:System.Data.Common.DbDataAdapter.Update%2A> 方法时，将 <xref:System.Data.Common.DbDataAdapter> 检查 <xref:System.Data.DataRow.RowState%2A> 属性，并根据中配置的索引的顺序，对每个行重复执行所需的 INSERT、UPDATE 或 DELETE 语句 <xref:System.Data.DataSet> 。 例如， <xref:System.Data.Common.DbDataAdapter.Update%2A> 可能会执行 DELETE 语句，后跟 INSERT 语句，然后执行另一 delete 语句，因为中的行的顺序 <xref:System.Data.DataTable> 。  
  
 应注意的是，这些语句不作为批处理执行;每一行都单独更新。 应用程序可以 <xref:System.Data.DataSet.GetChanges%2A> 在以下情况下调用方法：例如，必须控制语句类型的序列 (例如，在更新) 之前插入。 有关详细信息，请参阅 [用 Dataadapter 更新数据源](/dotnet/framework/data/adonet/updating-data-sources-with-dataadapters)。  
  
 如果尚未指定 INSERT、UPDATE 或 DELETE 语句，则该方法将 <xref:System.Data.Common.DbDataAdapter.Update%2A> 生成一个异常。 但是， <xref:System.Data.SqlClient.SqlCommandBuilder> <xref:System.Data.OleDb.OleDbCommandBuilder> 如果您设置了 `SelectCommand` .NET Framework 数据提供程序的属性，则可以创建或对象以自动为单表更新生成 SQL 语句。 然后， **CommandBuilder**将生成未设置的任何其他 SQL 语句。 此代逻辑要求密钥列信息存在于中 <xref:System.Data.DataSet> 。 有关详细信息，请参阅 [通过 Commandbuilder 生成命令](/dotnet/framework/data/adonet/generating-commands-with-commandbuilders)。  
  
 在 <xref:System.Data.Common.DbDataAdapter.Update%2A> 执行更新之前，方法将从第一个映射中列出的表中检索行。 <xref:System.Data.Common.DbDataAdapter.Update%2A>然后，使用属性的值刷新该行 <xref:System.Data.IDbCommand.UpdatedRowSource%2A> 。 将忽略返回的任何其他行。  
  
 在将任何数据加载回后 <xref:System.Data.DataSet> ，将 <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> 引发事件，从而允许用户检查已协调的 <xref:System.Data.DataSet> 行和该命令返回的任何输出参数。 成功更新行后，将接受对该行所做的更改。  
  
 使用时 <xref:System.Data.Common.DbDataAdapter.Update%2A> ，执行顺序如下所示：  
  
1.  中的值 <xref:System.Data.DataRow> 将被移动到参数值中。  
  
2.  引发 <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> 事件。  
  
3.  命令执行。  
  
4.  如果命令设置为 `FirstReturnedRecord` ，则将第一个返回的结果放置在中 <xref:System.Data.DataRow> 。  
  
5.  如果有输出参数，则将它们放在中 <xref:System.Data.DataRow> 。  
  
6.  引发 <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> 事件。  
  
7.  调用 <xref:System.Data.DataRow.AcceptChanges%2A>。  
  
 与关联的每个命令 <xref:System.Data.Common.DbDataAdapter> 通常都具有与之关联的参数集合。 通过 `SourceColumn` `SourceVersion` .NET Framework 数据提供程序的类的和属性，将参数映射到当前行 `Parameter` 。 `SourceColumn` 引用 <xref:System.Data.DataTable> <xref:System.Data.Common.DbDataAdapter> 用于获取当前行的参数值的列。  
  
 `SourceColumn` 在应用了任何表映射之前引用未映射的列名称。 如果 `SourceColumn` 引用不存在的列，则执行的操作取决于下列值之一 <xref:System.Data.MissingMappingAction> 。  
  
|枚举值|采取的操作|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|如果不存在映射，请使用中的源列名称和表名称 <xref:System.Data.DataSet> 。|  
|`MissingMappingAction.Ignore`|<xref:System.SystemException>生成。 当显式设置映射时，缺少输入参数的映射通常是由错误引起的。|  
|`MissingMappingAction.Error`|<xref:System.SystemException>生成。|  
  
 `SourceColumn`属性还可用于将输出或输入/输出参数的值映射回 `DataSet` 。 如果引用不存在的列，则会生成异常。  
  
 `SourceVersion`.NET Framework 数据提供程序的类的属性 `Parameter` 确定是使用列值的原始版本、当前版本还是建议的版本。 此功能通常用于在 UPDATE 语句的 WHERE 子句中包含原始值，以检查是否存在开放式并发冲突。  
  
> [!NOTE]
>  如果在更新行时出现错误，则会引发异常并中止执行更新。 若要在遇到错误时继续执行更新操作而不生成异常，请在 <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> 调用之前将属性设置为 `true` <xref:System.Data.Common.DbDataAdapter.Update%2A> 。 您还可以在 DataAdapter 事件内每行响应错误 `RowUpdated` 。 若要继续执行更新操作而不在事件中生成异常 `RowUpdated` ，请将 <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> 的属性设置 <xref:System.Data.Common.RowUpdatedEventArgs> 为 <xref:System.Data.UpdateStatus.Continue> 。  
  
   
  
## Examples  
 下面的示例使用派生类 <xref:System.Data.OleDb.OleDbDataAdapter> 来更新数据源。  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="T:System.Data.DataSet" /> 无效。</exception>
        <exception cref="T:System.InvalidOperationException">源表无效。</exception>
        <exception cref="T:System.SystemException">不存在要更新的 <see cref="T:System.Data.DataRow" />。  
  
- 或 - 
不存在要更新的 <see cref="T:System.Data.DataTable" />。  
  
- 或 - 
不存在要用作源的 <see cref="T:System.Data.DataSet" />。</exception>
        <exception cref="T:System.Data.DBConcurrencyException">尝试执行 INSERT、UPDATE 或 DELETE 语句，但没有记录受到影响。</exception>
        <related type="Article" href="/dotnet/framework/data/adonet/retrieving-and-modifying-data">操作数据 (ADO.NET)</related>
        <related type="Article" href="/dotnet/framework/data/adonet/dbproviderfactories">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="protected virtual int Update (System.Data.DataRow[] dataRows, System.Data.Common.DataTableMapping tableMapping);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Update(class System.Data.DataRow[] dataRows, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Update (dataRows As DataRow(), tableMapping As DataTableMapping) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Update(cli::array &lt;System::Data::DataRow ^&gt; ^ dataRows, System::Data::Common::DataTableMapping ^ tableMapping);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataRow[] * System.Data.Common.DataTableMapping -&gt; int" Usage="dbDataAdapter.Update (dataRows, tableMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRows" Type="System.Data.DataRow[]" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRows">用于更新数据源的 <see cref="T:System.Data.DataRow" /> 对象的数组。</param>
        <param name="tableMapping">要使用的 <see cref="P:System.Data.IDataAdapter.TableMappings" /> 集合。</param>
        <summary>通过为指定的 <see cref="T:System.Data.DataSet" /> 对象数组中的每个已插入、已更新或已删除的行执行相应的 INSERT、UPDATE 或 DELETE 语句来更新数据库中的值。</summary>
        <returns><see cref="T:System.Data.DataSet" /> 中成功更新的行数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当应用程序调用 <xref:System.Data.Common.DbDataAdapter.Update%2A> 方法时，将 <xref:System.Data.Common.DbDataAdapter> 检查 <xref:System.Data.DataRow.RowState%2A> 属性，并根据中配置的索引的顺序，对每个行重复执行所需的 INSERT、UPDATE 或 DELETE 语句 <xref:System.Data.DataSet> 。 例如， <xref:System.Data.Common.DbDataAdapter.Update%2A> 可能会执行 DELETE 语句，后跟 INSERT 语句，然后执行另一 delete 语句，因为中的行的顺序 <xref:System.Data.DataTable> 。  
  
 应注意的是，这些语句不作为批处理执行;每一行都单独更新。 应用程序可以 <xref:System.Data.DataSet.GetChanges%2A> 在以下情况下调用方法：例如，必须控制语句类型的序列 (例如，在更新) 之前插入。 有关详细信息，请参阅 [用 Dataadapter 更新数据源](/dotnet/framework/data/adonet/updating-data-sources-with-dataadapters)。  
  
 如果尚未指定 INSERT、UPDATE 或 DELETE 语句，则该方法将 <xref:System.Data.Common.DbDataAdapter.Update%2A> 生成一个异常。 但是， <xref:System.Data.SqlClient.SqlCommandBuilder> <xref:System.Data.OleDb.OleDbCommandBuilder> 如果您设置了 `SelectCommand` .NET Framework 数据提供程序的属性，则可以创建或对象以自动为单表更新生成 SQL 语句。 然后， **CommandBuilder**将生成未设置的任何其他 SQL 语句。 此代逻辑要求密钥列信息存在于中 <xref:System.Data.DataSet> 。 有关详细信息，请参阅 [通过 Commandbuilder 生成命令](/dotnet/framework/data/adonet/generating-commands-with-commandbuilders)。  
  
 在 <xref:System.Data.Common.DbDataAdapter.Update%2A> 执行更新之前，方法将从第一个映射中列出的表中检索行。 <xref:System.Data.Common.DbDataAdapter.Update%2A>然后，使用属性的值刷新该行 <xref:System.Data.IDbCommand.UpdatedRowSource%2A> 。 将忽略返回的任何其他行。  
  
 在将任何数据加载回后 <xref:System.Data.DataSet> ，将 <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> 引发事件，从而允许用户检查已协调的 <xref:System.Data.DataSet> 行和该命令返回的任何输出参数。 成功更新行后，将接受对该行所做的更改。  
  
 使用时 <xref:System.Data.Common.DbDataAdapter.Update%2A> ，执行顺序如下所示：  
  
1.  中的值 <xref:System.Data.DataRow> 将被移动到参数值中。  
  
2.  引发 <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> 事件。  
  
3.  命令执行。  
  
4.  如果命令设置为 `FirstReturnedRecord` ，则将第一个返回的结果放置在中 <xref:System.Data.DataRow> 。  
  
5.  如果有输出参数，则将它们放在中 <xref:System.Data.DataRow> 。  
  
6.  引发 <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> 事件。  
  
7.  调用 <xref:System.Data.DataRow.AcceptChanges%2A>。  
  
 与关联的每个命令 <xref:System.Data.Common.DbDataAdapter> 通常都具有与之关联的参数集合。 通过 `SourceColumn` `SourceVersion` .NET Framework 数据提供程序的类的和属性，将参数映射到当前行 `Parameter` 。 `SourceColumn` 引用 <xref:System.Data.DataTable> <xref:System.Data.Common.DbDataAdapter> 用于获取当前行的参数值的列。  
  
 `SourceColumn` 在应用了任何表映射之前引用未映射的列名称。 如果 `SourceColumn` 引用不存在的列，则执行的操作取决于下列值之一 <xref:System.Data.MissingMappingAction> 。  
  
|枚举值|采取的操作|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|如果不存在映射，请使用中的源列名称和表名称 <xref:System.Data.DataSet> 。|  
|`MissingMappingAction.Ignore`|<xref:System.SystemException>生成。 当显式设置映射时，缺少输入参数的映射通常是由错误引起的。|  
|`MissingMappingAction.Error`|<xref:System.SystemException>生成。|  
  
 `SourceColumn`属性还可用于将输出或输入/输出参数的值映射回 `DataSet` 。 如果引用不存在的列，则会生成异常。  
  
 `SourceVersion`.NET Framework 数据提供程序的类的属性 `Parameter` 确定是使用列值的原始版本、当前版本还是建议的版本。 此功能通常用于在 UPDATE 语句的 WHERE 子句中包含原始值，以检查是否存在开放式并发冲突。  
  
> [!NOTE]
>  如果在更新行时出现错误，则会引发异常并中止执行更新。 若要在遇到错误时继续执行更新操作而不生成异常，请在 <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> 调用之前将属性设置为 `true` <xref:System.Data.Common.DbDataAdapter.Update%2A> 。 您还可以在 DataAdapter 事件内每行响应错误 `RowUpdated` 。 若要继续执行更新操作而不在事件中生成异常 `RowUpdated` ，请将 <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> 的属性设置 <xref:System.Data.Common.RowUpdatedEventArgs> 为 <xref:System.Data.UpdateStatus.Continue> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="T:System.Data.DataSet" /> 无效。</exception>
        <exception cref="T:System.InvalidOperationException">源表无效。</exception>
        <exception cref="T:System.SystemException">不存在要更新的 <see cref="T:System.Data.DataRow" />。  
  
- 或 - 
不存在要更新的 <see cref="T:System.Data.DataTable" />。  
  
- 或 - 
不存在要用作源的 <see cref="T:System.Data.DataSet" />。</exception>
        <exception cref="T:System.Data.DBConcurrencyException">尝试执行 INSERT、UPDATE 或 DELETE 语句，但没有记录受到影响。</exception>
        <related type="Article" href="/dotnet/framework/data/adonet/retrieving-and-modifying-data">操作数据 (ADO.NET)</related>
        <related type="Article" href="/dotnet/framework/data/adonet/dbproviderfactories">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataSet dataSet, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Data.DataSet dataSet, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (dataSet As DataSet, srcTable As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Data::DataSet ^ dataSet, System::String ^ srcTable);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataSet * string -&gt; int" Usage="dbDataAdapter.Update (dataSet, srcTable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">用于更新数据源的 <see cref="T:System.Data.DataSet" />。</param>
        <param name="srcTable">用于表映射的源表的名称。</param>
        <summary>通过为具有指定名称 <see cref="T:System.Data.DataSet" /> 的 <see cref="T:System.Data.DataTable" /> 中的每个已插入、已更新或已删除的行执行相应的 INSERT、UPDATE 或 DELETE 语句来更新数据库中的值。</summary>
        <returns><see cref="T:System.Data.DataSet" /> 中成功更新的行数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当应用程序调用 <xref:System.Data.Common.DbDataAdapter.Update%2A> 方法时，将 <xref:System.Data.Common.DbDataAdapter> 检查 <xref:System.Data.DataRow.RowState%2A> 属性，并根据中配置的索引的顺序，对每个行重复执行所需的 INSERT、UPDATE 或 DELETE 语句 <xref:System.Data.DataSet> 。 例如， <xref:System.Data.Common.DbDataAdapter.Update%2A> 可能会执行 DELETE 语句，后跟 INSERT 语句，然后执行另一 delete 语句，因为中的行的顺序 <xref:System.Data.DataTable> 。  
  
 应注意的是，这些语句不作为批处理执行;每一行都单独更新。 应用程序可以 <xref:System.Data.DataSet.GetChanges%2A> 在以下情况下调用方法：在此情况下，必须控制语句类型的序列 (例如，在 UPDATE) 之前插入。 有关详细信息，请参阅 [用 Dataadapter 更新数据源](/dotnet/framework/data/adonet/updating-data-sources-with-dataadapters)。  
  
 如果尚未指定 INSERT、UPDATE 或 DELETE 语句，则该方法将 <xref:System.Data.Common.DbDataAdapter.Update%2A> 生成一个异常。 但是， <xref:System.Data.SqlClient.SqlCommandBuilder> <xref:System.Data.OleDb.OleDbCommandBuilder> 如果您设置了 `SelectCommand` .NET Framework 数据提供程序的属性，则可以创建或对象以自动为单表更新生成 SQL 语句。 然后， **CommandBuilder**将生成未设置的任何其他 SQL 语句。 此代逻辑要求密钥列信息存在于中 <xref:System.Data.DataSet> 。 有关详细信息，请参阅 [通过 Commandbuilder 生成命令](/dotnet/framework/data/adonet/generating-commands-with-commandbuilders)。  
  
 <xref:System.Data.Common.DbDataAdapter.Update%2A>方法支持 <xref:System.Data.DataSet> 包含多个对象，这些 <xref:System.Data.DataTable> 对象的名称仅区分大小写。 如果有多个同名但大小写不同的表存在于中， `DataSet` 则 <xref:System.Data.Common.DbDataAdapter.Update%2A> 执行区分大小写的比较来查找相应的表，如果不存在精确匹配，则会生成异常。 下面的 c # 代码阐释了这一行为。  
  
```  
DataSet ds = new DataSet();  
 ds.Tables.Add("aaa");  
 ds.Tables.Add("AAA");  
 adapter.Update(ds, "aaa"); // Updates "aaa", which already exists in the DataSet.  
 adapter.Update(ds, "AAA"); // Updates "AAA", which already exists in the DataSet.  
    adapter.Update(ds, "Aaa"); // Results in an exception.  
```  
  
 如果 <xref:System.Data.Common.DbDataAdapter.Update%2A> 调用，并且 <xref:System.Data.DataSet> 仅包含 <xref:System.Data.DataTable> 其名称仅大小写不同的名称， <xref:System.Data.DataTable> 则会更新。 在这种情况下，比较不区分大小写。 下面的 c # 代码阐释了这一行为。  
  
```  
DataSet dataset = new DataSet();  
 dataset.Tables.Add("aaa");  
    adapter.Update(dataset, "AAA"); // Updates table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 在 <xref:System.Data.Common.DbDataAdapter.Update%2A> 执行更新之前，方法将从第一个映射中列出的表中检索行。 <xref:System.Data.Common.DbDataAdapter.Update%2A>然后，使用属性的值刷新该行 <xref:System.Data.IDbCommand.UpdatedRowSource%2A> 。 将忽略返回的任何其他行。  
  
 在将任何数据加载回后 <xref:System.Data.DataSet> ，将 <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> 引发事件，从而允许用户检查已协调的 <xref:System.Data.DataSet> 行和该命令返回的任何输出参数。 成功更新行后，将接受对该行所做的更改。  
  
 使用时 <xref:System.Data.Common.DbDataAdapter.Update%2A> ，执行顺序如下所示：  
  
1.  中的值 <xref:System.Data.DataRow> 将被移动到参数值中。  
  
2.  引发 <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> 事件。  
  
3.  命令执行。  
  
4.  如果命令设置为 `FirstReturnedRecord` ，则将第一个返回的结果放置在中 <xref:System.Data.DataRow> 。  
  
5.  如果有输出参数，则将它们放在中 <xref:System.Data.DataRow> 。  
  
6.  引发 <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> 事件。  
  
7.  调用 <xref:System.Data.DataRow.AcceptChanges%2A>。  
  
 与关联的每个命令 <xref:System.Data.Common.DbDataAdapter> 通常都具有与之关联的参数集合。 通过 `SourceColumn` `SourceVersion` .NET Framework 数据提供程序的类的和属性，将参数映射到当前行 `Parameter` 。 `SourceColumn` 引用 <xref:System.Data.DataTable> <xref:System.Data.Common.DbDataAdapter> 用于获取当前行的参数值的列。  
  
 `SourceColumn` 在应用了任何表映射之前引用未映射的列名称。 如果 `SourceColumn` 引用不存在的列，则执行的操作取决于下列值之一 <xref:System.Data.MissingMappingAction> 。  
  
|枚举值|采取的操作|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|如果不存在映射，请使用中的源列名称和表名称 <xref:System.Data.DataSet> 。|  
|`MissingMappingAction.Ignore`|<xref:System.SystemException>生成。 当显式设置映射时，缺少输入参数的映射通常是由错误引起的。|  
|`MissingMappingAction.Error`|<xref:System.SystemException>生成。|  
  
 `SourceColumn`属性还可用于将输出或输入/输出参数的值映射回 `DataSet` 。 如果引用不存在的列，则会生成异常。  
  
 `SourceVersion`.NET Framework 数据提供程序的类的属性 `Parameter` 确定是使用列值的原始版本、当前版本还是建议的版本。 此功能通常用于在 UPDATE 语句的 WHERE 子句中包含原始值，以检查是否存在开放式并发冲突。  
  
> [!NOTE]
>  如果在更新行时出现错误，则会引发异常并中止执行更新。 若要在遇到错误时继续执行更新操作而不生成异常，请在 <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> 调用之前将属性设置为 `true` <xref:System.Data.Common.DbDataAdapter.Update%2A> 。 您还可以在 DataAdapter 事件内每行响应错误 `RowUpdated` 。 若要继续执行更新操作而不在事件中生成异常 `RowUpdated` ，请将 <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> 的属性设置 <xref:System.Data.Common.RowUpdatedEventArgs> 为 <xref:System.Data.UpdateStatus.Continue> 。  
  
   
  
## Examples  
 下面的示例使用派生类 <xref:System.Data.OleDb.OleDbDataAdapter> 来更新数据源。  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update3#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update3/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update3#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update3/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="T:System.Data.DataSet" /> 无效。</exception>
        <exception cref="T:System.InvalidOperationException">源表无效。</exception>
        <exception cref="T:System.Data.DBConcurrencyException">尝试执行 INSERT、UPDATE 或 DELETE 语句，但没有记录受到影响。</exception>
        <related type="Article" href="/dotnet/framework/data/adonet/retrieving-and-modifying-data">操作数据 (ADO.NET)</related>
        <related type="Article" href="/dotnet/framework/data/adonet/dbproviderfactories">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="UpdateBatchSize">
      <MemberSignature Language="C#" Value="public virtual int UpdateBatchSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 UpdateBatchSize" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.UpdateBatchSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property UpdateBatchSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int UpdateBatchSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateBatchSize : int with get, set" Usage="System.Data.Common.DbDataAdapter.UpdateBatchSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值启用或禁用批处理支持，并且指定可在一次批处理中执行的命令的数量。</summary>
        <value>每个批处理要处理的行数。  
  
 <list type="table"><listheader><term> 值为 
 </term><description> 效果 
 </description></listheader><item><term> 0 
 </term><description> 批大小没有限制。  
  
 </description></item><item><term> 1 
 </term><description> 禁用批量更新。  
  
 </description></item><item><term> &gt; 2 
 </term><description> 更改是使用 <see cref="P:System.Data.Common.DbDataAdapter.UpdateBatchSize" /> 操作的批处理一次性发送的。  
  
 </description></item></list>  

 将此值设置为1以外的值时，所有与关联的命令都 <see cref="T:System.Data.Common.DbDataAdapter" /> 必须 <see cref="P:System.Data.IDbCommand.UpdatedRowSource" /> 将其属性设置为 **None** 或 **OutputParameters**。 否则，将引发异常。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Data.Common.DbDataAdapter.UpdateBatchSize%2A> 属性可使用中的更改更新数据源 <xref:System.Data.DataSet> 。 如果数据访问接口支持批处理，则这可能会减少到服务器的往返次数，从而提高应用程序的性能。 在 ADO.NET 2.0 中，SQL Server (SqlClient) 和 Oracle (System.data.oracleclient) 的 .NET 数据提供程序支持该属性。  
  
 执行极大的批处理会降低性能。 因此，在实现应用程序前应进行测试以得到最佳的批大小。  
  
 <xref:System.ArgumentOutOfRangeException>如果将值设置为小于零的数字，将引发。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/retrieving-and-modifying-data">操作数据 (ADO.NET)</related>
        <related type="Article" href="/dotnet/framework/data/adonet/dbproviderfactories">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="UpdateCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand? UpdateCommand { get; set; }" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.UpdateCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ UpdateCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateCommand : System.Data.Common.DbCommand with get, set" Usage="System.Data.Common.DbDataAdapter.UpdateCommand" />
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand UpdateCommand { get; set; }" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于更新数据源中的记录的命令。</summary>
        <value>在 <see cref="T:System.Data.IDbCommand" /> 过程中使用的 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />，它针对数据集中已修改的行更新数据源中的记录。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在过程中 <xref:System.Data.Common.DbDataAdapter.Update%2A> ，如果未设置此属性，并且主键信息存在于中 <xref:System.Data.DataSet> ，则 <xref:System.Data.IDbDataAdapter.UpdateCommand%2A> 将自动生成。  
  
   
  
## Examples  
 下面的示例创建派生类 <xref:System.Data.OleDb.OleDbDataAdapter> 并设置其一些属性。  
  
 [!code-csharp[Classic WebData DbDataAdapter.UpdateCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.UpdateCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.UpdateCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.UpdateCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/retrieving-and-modifying-data">操作数据 (ADO.NET)</related>
        <related type="Article" href="/dotnet/framework/data/adonet/dbproviderfactories">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
  </Members>
</Type>
