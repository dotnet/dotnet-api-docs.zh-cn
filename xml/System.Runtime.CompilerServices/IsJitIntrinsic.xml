<Type Name="IsJitIntrinsic" FullName="System.Runtime.CompilerServices.IsJitIntrinsic">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b89cd10d8980ce2df992e3daec9d4531aa0af87c" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89993078" /></Metadata><TypeSignature Language="C#" Value="public static class IsJitIntrinsic" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsJitIntrinsic extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsJitIntrinsic" />
  <TypeSignature Language="VB.NET" Value="Public Class IsJitIntrinsic" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsJitIntrinsic abstract sealed" />
  <TypeSignature Language="F#" Value="type IsJitIntrinsic = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime.CompilerServices.VisualC" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>指示某一修饰的方法是一个内部值，实时 (JIT) 编译器可对它执行特殊代码生成。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 编译器在元数据中发出自定义修饰符，以更改当默认行为不合适时实时 (JIT) 编译器处理值的方式。  当 JIT 编译器遇到自定义修饰符时，它将按修饰符指定的方式处理值。  编译器可以对方法、参数和返回值应用自定义修饰符。  JIT 编译器必须响应所需的修饰符，但可以忽略可选修饰符。  
  
 可以使用以下方法之一将自定义修饰符发送到元数据中：  
  
-   使用类中的方法 <xref:System.Reflection.Emit.TypeBuilder> ，例如 <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A> 、 <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A> 、 <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A> 和 <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A> 。  
  
-   生成 Microsoft 中间语言 (MSIL) 指令文件，其中包含对和的调用 `modopt` `modreq` ，并使用 [Ilasm.exe (IL 汇编程序) ](/dotnet/framework/tools/ilasm-exe-il-assembler)来汇编文件。  
  
-   使用非托管反射 API。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>
