<Type Name="IsCopyConstructed" FullName="System.Runtime.CompilerServices.IsCopyConstructed">
  <Metadata><Meta Name="ms.openlocfilehash" Value="da637d5b51bee339c71ae03f800572a644372711" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83953551" /></Metadata><TypeSignature Language="C#" Value="public static class IsCopyConstructed" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsCopyConstructed extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsCopyConstructed" />
  <TypeSignature Language="VB.NET" Value="Public Class IsCopyConstructed" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsCopyConstructed abstract sealed" />
  <TypeSignature Language="F#" Value="type IsCopyConstructed = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime.CompilerServices.VisualC" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>指示对此类型的值的任何复制操作都必须使用由该类型提供的复制构造函数。  无法继承此类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.CompilerServices.IsCopyConstructed> 类修改的任何类型都必须实现一个名为 `MarshalCopy` 的方法，该方法调用本机复制构造函数。  
  
 使用复制C++构造函数发送到元数据中的任何本机类型都需要在跨封送处理边界复制值时，封送拆收器调用这些方法。  Microsoft C++编译器修改方法参数和C++返回类型中的所有本机类型，这些类型具有此修饰符来触发封送处理代码中的此行为。  
  
 编译器在元数据中发出自定义修饰符，以更改当默认行为不合适时实时（JIT）编译器处理值的方式。  当 JIT 编译器遇到自定义修饰符时，它将按修饰符指定的方式处理值。  编译器可以对方法、参数和返回值应用自定义修饰符。  JIT 编译器必须响应所需的修饰符，但可以忽略可选修饰符。  
  
 可以使用以下方法之一将自定义修饰符发送到元数据中：  
  
-   使用 <xref:System.Reflection.Emit.TypeBuilder> 类中的方法，如 <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>、<xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>、<xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>和 <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>。  
  
-   生成 Microsoft 中间语言（MSIL）指令文件，其中包含对的调用 `modopt` 和 `modreq`，并使用[Ilasm （IL 汇编程序）](/dotnet/framework/tools/ilasm-exe-il-assembler)汇编文件。  
  
-   使用非托管反射 API。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>
