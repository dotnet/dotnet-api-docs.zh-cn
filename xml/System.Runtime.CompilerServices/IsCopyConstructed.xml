<Type Name="IsCopyConstructed" FullName="System.Runtime.CompilerServices.IsCopyConstructed">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3da8ee57e4d25f06e2c2e80f09d13c59f3553700" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86769720" /></Metadata><TypeSignature Language="C#" Value="public static class IsCopyConstructed" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsCopyConstructed extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsCopyConstructed" />
  <TypeSignature Language="VB.NET" Value="Public Class IsCopyConstructed" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsCopyConstructed abstract sealed" />
  <TypeSignature Language="F#" Value="type IsCopyConstructed = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime.CompilerServices.VisualC" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="e23d9-101">指示对此类型的值的任何复制操作都必须使用由该类型提供的复制构造函数。</span><span class="sxs-lookup"><span data-stu-id="e23d9-101">Indicates that any copying of values of this type must use the copy constructor provided by the type.</span></span>  <span data-ttu-id="e23d9-102">此类不能被继承。</span><span class="sxs-lookup"><span data-stu-id="e23d9-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e23d9-103">由类修改的任何类型 <xref:System.Runtime.CompilerServices.IsCopyConstructed> 都必须实现一个名为 `MarshalCopy` 的方法，该方法调用本机复制构造函数。</span><span class="sxs-lookup"><span data-stu-id="e23d9-103">Any type modified by the <xref:System.Runtime.CompilerServices.IsCopyConstructed> class must implement a method named `MarshalCopy` that calls the native copy constructor.</span></span>  
  
 <span data-ttu-id="e23d9-104">使用复制构造函数发送到元数据中的任何本机 c + + 类型都需要在跨封送处理边界复制值时，封送拆收器调用这些方法。</span><span class="sxs-lookup"><span data-stu-id="e23d9-104">Any native C++ type that is emitted into metadata with copy constructors needs to have those methods called by the marshaler when copying values across the marshaling boundary.</span></span>  <span data-ttu-id="e23d9-105">Microsoft c + + 编译器修改方法参数中的所有本机 c + + 类型，并返回包含此修饰符的类型以在封送处理代码中触发此行为。</span><span class="sxs-lookup"><span data-stu-id="e23d9-105">The Microsoft C++ compiler modifies all native C++ types in method parameters and return types that have this modifier to trigger this behavior in the marshaling code.</span></span>  
  
 <span data-ttu-id="e23d9-106">编译器在元数据中发出自定义修饰符，以更改当默认行为不合适时实时 (JIT) 编译器处理值的方式。</span><span class="sxs-lookup"><span data-stu-id="e23d9-106">Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</span></span>  <span data-ttu-id="e23d9-107">当 JIT 编译器遇到自定义修饰符时，它将按修饰符指定的方式处理值。</span><span class="sxs-lookup"><span data-stu-id="e23d9-107">When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</span></span>  <span data-ttu-id="e23d9-108">编译器可以对方法、参数和返回值应用自定义修饰符。</span><span class="sxs-lookup"><span data-stu-id="e23d9-108">Compilers can apply custom modifiers to methods, parameters, and return values.</span></span>  <span data-ttu-id="e23d9-109">JIT 编译器必须响应所需的修饰符，但可以忽略可选修饰符。</span><span class="sxs-lookup"><span data-stu-id="e23d9-109">The JIT compiler must respond to required modifiers but can ignore optional modifiers.</span></span>  
  
 <span data-ttu-id="e23d9-110">可以使用以下方法之一将自定义修饰符发送到元数据中：</span><span class="sxs-lookup"><span data-stu-id="e23d9-110">You can emit custom modifiers into metadata using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="e23d9-111">使用类中的方法 <xref:System.Reflection.Emit.TypeBuilder> ，例如 <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A> 、 <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A> 、 <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A> 和 <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A> 。</span><span class="sxs-lookup"><span data-stu-id="e23d9-111">Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span></span>  
  
-   <span data-ttu-id="e23d9-112">生成 Microsoft 中间语言 (MSIL) 指令文件，其中包含对和的调用 `modopt` `modreq` ，并使用 [Ilasm.exe (IL 汇编程序) ](/dotnet/framework/tools/ilasm-exe-il-assembler)来汇编文件。</span><span class="sxs-lookup"><span data-stu-id="e23d9-112">Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](/dotnet/framework/tools/ilasm-exe-il-assembler).</span></span>  
  
-   <span data-ttu-id="e23d9-113">使用非托管反射 API。</span><span class="sxs-lookup"><span data-stu-id="e23d9-113">Using the unmanaged reflection API.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>
