<Type Name="InternalsVisibleToAttribute" FullName="System.Runtime.CompilerServices.InternalsVisibleToAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="17d9d1f22339cbce14a3df4fbb68ab6e9eff1c18" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83527559" /></Metadata><TypeSignature Language="C#" Value="public sealed class InternalsVisibleToAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit InternalsVisibleToAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class InternalsVisibleToAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class InternalsVisibleToAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type InternalsVisibleToAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Assembly, AllowMultiple=true, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="0b045-101">指定通常仅在当前程序集中可见的类型对指定程序集可见。</span><span class="sxs-lookup"><span data-stu-id="0b045-101">Specifies that types that are ordinarily visible only within the current assembly are visible to a specified assembly.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b045-102">通常，具有 `internal` 或 `private protected` 范围的类型和成员（ C#在中）和 `Friend` 和 `Private Protected` 范围（在 Visual Basic 中）仅在定义它们的程序集中可见。</span><span class="sxs-lookup"><span data-stu-id="0b045-102">Ordinarily, types and members with `internal` or `private protected` scope (in C#) and `Friend` and `Private Protected` scope (in Visual Basic) are visible only in the assembly in which they are defined.</span></span> <span data-ttu-id="0b045-103"><xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> 特性使它们也对指定程序集中的类型可见，这称为友元程序集。</span><span class="sxs-lookup"><span data-stu-id="0b045-103">The <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute makes them also visible to the types in a specified assembly, which is known as a friend assembly.</span></span> <span data-ttu-id="0b045-104">这仅适用于 `internal` （VB 中的`Friend`）或 `private protected`（在 VB 中为`Private Protected`）方法，但不应用于 `private`。</span><span class="sxs-lookup"><span data-stu-id="0b045-104">This only applies to `internal` (`Friend` in VB) or `private protected`(`Private Protected` in VB) methods only, but not `private` ones.</span></span>
  
 <span data-ttu-id="0b045-105">在程序集级别应用特性。</span><span class="sxs-lookup"><span data-stu-id="0b045-105">The attribute is applied at the assembly level.</span></span> <span data-ttu-id="0b045-106">这意味着它可以包括在源代码文件的开头，也可以包含在 Visual Studio 项目的 AssemblyInfo 文件中。</span><span class="sxs-lookup"><span data-stu-id="0b045-106">This means that it can be included at the beginning of a source code file, or it can be included in the AssemblyInfo file in a Visual Studio project.</span></span> <span data-ttu-id="0b045-107">您可以使用特性来指定可访问当前程序集的内部类型和成员的单个友元程序集。</span><span class="sxs-lookup"><span data-stu-id="0b045-107">You can use the attribute to specify a single friend assembly that can access the internal types and members of the current assembly.</span></span> <span data-ttu-id="0b045-108">可以通过两种方式来定义多个友元程序集。</span><span class="sxs-lookup"><span data-stu-id="0b045-108">You can define multiple friend assemblies in two ways.</span></span> <span data-ttu-id="0b045-109">它们可以显示为单独的程序集级别特性，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="0b045-109">They can appear as individual assembly-level attributes, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/multiple1.cs#3)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/multiple1.vb#3)]  
  
 <span data-ttu-id="0b045-110">它们还可以用单独的 <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> 标记显示，但使用单个 `assembly` 关键字，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="0b045-110">They can also appear with separate <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> tags but a single `assembly` keyword, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/multiple2.cs#4)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/multiple2.vb#4)]  
  
 <span data-ttu-id="0b045-111">友元程序集由 <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> 构造函数标识。</span><span class="sxs-lookup"><span data-stu-id="0b045-111">The friend assembly is identified by the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> constructor.</span></span> <span data-ttu-id="0b045-112">当前程序集和友元程序集都必须是无符号的，或者这两个程序集都必须使用强名称进行签名。</span><span class="sxs-lookup"><span data-stu-id="0b045-112">Both the current assembly and the friend assembly must be unsigned, or both assemblies must be signed with a strong name.</span></span>  
  
 <span data-ttu-id="0b045-113">如果这两个程序集都无符号，则 `assemblyName` 参数由指定的友元程序集的名称组成，无需使用目录路径或文件扩展名。</span><span class="sxs-lookup"><span data-stu-id="0b045-113">If both assemblies are unsigned, the `assemblyName` argument consists of the name of the friend assembly, specified without a directory path or file name extension.</span></span>  
  
 <span data-ttu-id="0b045-114">如果这两个程序集都使用强名称进行签名，则 <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> 构造函数的参数必须包含程序集的名称（不包括其目录路径或文件扩展名）以及完整的公钥（而不是其公钥标记）。</span><span class="sxs-lookup"><span data-stu-id="0b045-114">If both assemblies are signed with a strong name, the argument to the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> constructor must consist of the name of the assembly without its directory path or file name extension, along with the full public key (and not its public key token).</span></span> <span data-ttu-id="0b045-115">若要获取强名称程序集的完整公钥，请参阅本文后面的[获取完整公钥](#Key)部分。</span><span class="sxs-lookup"><span data-stu-id="0b045-115">To get the full public key of a strong-named assembly, see the [Getting the full public key](#Key) section later in this article.</span></span> <span data-ttu-id="0b045-116">有关使用具有强名称的程序集的 <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> 的详细信息，请参阅 <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> 构造函数。</span><span class="sxs-lookup"><span data-stu-id="0b045-116">For more information about using <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> with strong-named assemblies, see the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> constructor.</span></span>  
  
 <span data-ttu-id="0b045-117">不要在参数中包含 <xref:System.Reflection.AssemblyName.CultureInfo%2A>、<xref:System.Reflection.AssemblyName.Version%2A>或 <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A> 字段的值;Visual Basic、 C#和C++编译器将此视为编译器错误。</span><span class="sxs-lookup"><span data-stu-id="0b045-117">Do not include values for the <xref:System.Reflection.AssemblyName.CultureInfo%2A>, <xref:System.Reflection.AssemblyName.Version%2A>, or <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A> field in the argument; the Visual Basic, C#, and C++ compilers treat this as a compiler error.</span></span> <span data-ttu-id="0b045-118">如果你使用的编译器不会将其视为错误（如[IL 汇编程序（ILAsm）](~/docs/framework/tools/ilasm-exe-il-assembler.md)）并且程序集具有强名称，则在第一次指定的友元程序集访问包含 <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> 特性的程序集时，将引发 <xref:System.MethodAccessException> 异常。</span><span class="sxs-lookup"><span data-stu-id="0b045-118">If you use a compiler that does not treat it as an error (such as the [IL Assembler (ILAsm.exe)](~/docs/framework/tools/ilasm-exe-il-assembler.md)) and the assemblies are strong-named, a <xref:System.MethodAccessException> exception is thrown the first time the specified friend assembly accesses the assembly that contains the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute.</span></span>  
  
 <span data-ttu-id="0b045-119">有关如何使用此属性的详细信息，请参阅以下主题：</span><span class="sxs-lookup"><span data-stu-id="0b045-119">For more information about how to use this attribute, see the following topics:</span></span>  
  
-   [<span data-ttu-id="0b045-120">友元程序集 (C++)</span><span class="sxs-lookup"><span data-stu-id="0b045-120">Friend Assemblies (C++)</span></span>](/cpp/dotnet/friend-assemblies-cpp)  
  
-   [<span data-ttu-id="0b045-121">友元程序集</span><span class="sxs-lookup"><span data-stu-id="0b045-121">Friend assemblies</span></span>](~/docs/standard/assembly/friend.md)  
  
<a name="Key"></a>   
## <a name="getting-the-full-public-key"></a><span data-ttu-id="0b045-122">获取完整公钥</span><span class="sxs-lookup"><span data-stu-id="0b045-122">Getting the full public key</span></span>  
 <span data-ttu-id="0b045-123">您可以使用[强名称工具（sn.exe）](~/docs/framework/tools/sn-exe-strong-name-tool.md)从强名称密钥（.snk）文件中检索完整公钥。</span><span class="sxs-lookup"><span data-stu-id="0b045-123">You can use the [Strong Name Tool (Sn.exe)](~/docs/framework/tools/sn-exe-strong-name-tool.md) to retrieve the full public key from a strong-named key (.snk) file.</span></span> <span data-ttu-id="0b045-124">为此，请执行以下步骤：</span><span class="sxs-lookup"><span data-stu-id="0b045-124">To do this, you perform the following steps:</span></span>  
  
1.  <span data-ttu-id="0b045-125">将公钥从强名称密钥文件提取到单独的文件中：</span><span class="sxs-lookup"><span data-stu-id="0b045-125">Extract the public key from the strong-named key file to a separate file:</span></span>  
  
     <span data-ttu-id="0b045-126">**Sn-p**  *snk_file* *outfile*</span><span class="sxs-lookup"><span data-stu-id="0b045-126">**Sn -p**  *snk_file* *outfile*</span></span>  
  
2.  <span data-ttu-id="0b045-127">向控制台显示完整公钥：</span><span class="sxs-lookup"><span data-stu-id="0b045-127">Display the full public key to the console:</span></span>  
  
     <span data-ttu-id="0b045-128">**Sn-tp**  *outfile*</span><span class="sxs-lookup"><span data-stu-id="0b045-128">**Sn -tp**  *outfile*</span></span>  
  
3.  <span data-ttu-id="0b045-129">将完整的公钥值复制并粘贴到源代码中。</span><span class="sxs-lookup"><span data-stu-id="0b045-129">Copy and paste the full public key value into your source code.</span></span>  
  
## <a name="compiling-the-friend-assembly-with-c"></a><span data-ttu-id="0b045-130">用编译友元程序集C#</span><span class="sxs-lookup"><span data-stu-id="0b045-130">Compiling the friend assembly with C#</span></span>  
 <span data-ttu-id="0b045-131">如果使用C#编译器编译友元程序集，则必须使用 **/out**编译器选项显式指定输出文件的名称（.exe 或 .dll）。</span><span class="sxs-lookup"><span data-stu-id="0b045-131">If you use the C# compiler to compile the friend assembly, you must explicitly specify the name of the output file (.exe or .dll) by using the **/out** compiler option.</span></span> <span data-ttu-id="0b045-132">这是必需的，因为编译器尚未为它在绑定到外部引用时而正在构建的程序集生成名称。</span><span class="sxs-lookup"><span data-stu-id="0b045-132">This is required because the compiler has not yet generated the name for the assembly it is building at the time it is binding to external references.</span></span> <span data-ttu-id="0b045-133">**/Out**编译器选项对于 Visual Basic 编译器是可选的，并且不应在使用F#编译器编译友元程序集时使用相应的**输出**或 **-o**编译器选项。</span><span class="sxs-lookup"><span data-stu-id="0b045-133">The **/out** compiler option is optional for the Visual Basic compiler, and the corresponding **-out** or **-o** compiler option should not be used when compiling friend assemblies with the F# compiler.</span></span>  
  
## <a name="compiling-the-friend-assembly-with-c"></a><span data-ttu-id="0b045-134">用编译友元程序集C++</span><span class="sxs-lookup"><span data-stu-id="0b045-134">Compiling the friend assembly with C++</span></span>  
 <span data-ttu-id="0b045-135">在C++中，若要使 <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> 属性启用的内部成员可供友元程序集访问，则必须使用C++指令中的 `as_friend` 属性。</span><span class="sxs-lookup"><span data-stu-id="0b045-135">In C++, in order to make the internal members enabled by the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute accessible to a friend assembly, you must use the `as_friend` attribute in the C++  directive.</span></span> <span data-ttu-id="0b045-136">有关详细信息，请参阅[友元C++程序集（）](/cpp/dotnet/friend-assemblies-cpp)。</span><span class="sxs-lookup"><span data-stu-id="0b045-136">For more information, see [Friend Assemblies (C++)](/cpp/dotnet/friend-assemblies-cpp).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b045-137">**签名的程序集**</span><span class="sxs-lookup"><span data-stu-id="0b045-137">**Signed assemblies**</span></span>  
  
 <span data-ttu-id="0b045-138">下面的示例使用 <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> 特性，使签名程序集中名为 `AppendDirectorySeparator` 的 `internal` 方法在另一个签名的程序集可见。</span><span class="sxs-lookup"><span data-stu-id="0b045-138">The following example uses the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute to make an `internal` method named `AppendDirectorySeparator` in a signed assembly visible to another signed assembly.</span></span> <span data-ttu-id="0b045-139">它定义了包含内部 `AppendDirectorySeparator` 方法的 `FileUtilities` 类。</span><span class="sxs-lookup"><span data-stu-id="0b045-139">It defines a `FileUtilities` class that includes an internal `AppendDirectorySeparator` method.</span></span> <span data-ttu-id="0b045-140"><xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> 特性应用于包含 `FileUtilities` 类的程序集。</span><span class="sxs-lookup"><span data-stu-id="0b045-140">The <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute is applied to the assembly that contains the `FileUtilities` class.</span></span> <span data-ttu-id="0b045-141">特性允许名为 `Friend1` 的程序集访问此内部成员。</span><span class="sxs-lookup"><span data-stu-id="0b045-141">The attribute allows an assembly named `Friend1` to access this internal member.</span></span>  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/assembly1.cs#1)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/assembly1.vb#1)]  
  
 <span data-ttu-id="0b045-142">如果下面的示例编译为名为 `Friend1`的强名称程序集，则 `Friend1` 中的 `Example.Main` 方法可成功调用 `FileUtilities.AppendDirectorySeparator` 方法，尽管该方法是 `Assembly1` 程序集的内部方法。</span><span class="sxs-lookup"><span data-stu-id="0b045-142">If the following example is compiled into a strong-named assembly named `Friend1`, the `Example.Main` method in `Friend1` can successfully call the `FileUtilities.AppendDirectorySeparator` method, although the method is internal to the `Assembly1` assembly.</span></span> <span data-ttu-id="0b045-143">请注意，如果C#从命令行进行编译，则必须使用 **/out**编译器开关，以确保当编译器绑定到外部引用时，友元程序集的名称可用。</span><span class="sxs-lookup"><span data-stu-id="0b045-143">Note that if you are compiling in C# from the command line, you must use the **/out** compiler switch to ensure that the name of the friend assembly is available when the compiler binds to external references.</span></span>  
  
 [!code-cpp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cpp/friend1.cpp#2)]
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/friend1.cs#2)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/friend1.vb#2)]  
  
 <span data-ttu-id="0b045-144">**未签名的程序集**</span><span class="sxs-lookup"><span data-stu-id="0b045-144">**Unsigned assemblies**</span></span>  
  
 <span data-ttu-id="0b045-145">下面的示例使用 <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> 特性使未签名程序集的 `internal` 成员对其他未签名的程序集可见。</span><span class="sxs-lookup"><span data-stu-id="0b045-145">The following example uses the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute to make an `internal` member of an unsigned assembly visible to another unsigned assembly.</span></span> <span data-ttu-id="0b045-146">特性可确保名为 `UtilityLib` 的程序集中的 `internal` `StringLib.IsFirstLetterUpperCase` 方法对于名为 `Friend2`的程序集中的代码可见。</span><span class="sxs-lookup"><span data-stu-id="0b045-146">The attribute ensures that the `internal` `StringLib.IsFirstLetterUpperCase` method in an assembly named `UtilityLib` is visible to the code in an assembly named `Friend2`.</span></span>  <span data-ttu-id="0b045-147">下面是 UtilityLib 的源代码：</span><span class="sxs-lookup"><span data-stu-id="0b045-147">The following is the source code for UtilityLib.dll:</span></span>  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/utilitylib.cs#5)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/utilitylib.vb#5)]  
  
 <span data-ttu-id="0b045-148">下面的示例提供了 `Friend2` 程序集的源代码。</span><span class="sxs-lookup"><span data-stu-id="0b045-148">The following example provides the source code for the `Friend2` assembly.</span></span> <span data-ttu-id="0b045-149">请注意，如果C#从命令行进行编译，则必须使用 **/out**编译器开关，以确保当编译器绑定到外部引用时，友元程序集的名称可用。</span><span class="sxs-lookup"><span data-stu-id="0b045-149">Note that if you are compiling in C# from the command line, you must use the **/out** compiler switch to ensure that the name of the friend assembly is available when the compiler binds to external references.</span></span>  
  
 [!code-cpp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cpp/friend2.cpp#6)]
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/friend2.cs#6)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/friend2.vb#6)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InternalsVisibleToAttribute (string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (assemblyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InternalsVisibleToAttribute(System::String ^ assemblyName);" />
      <MemberSignature Language="F#" Value="new System.Runtime.CompilerServices.InternalsVisibleToAttribute : string -&gt; System.Runtime.CompilerServices.InternalsVisibleToAttribute" Usage="new System.Runtime.CompilerServices.InternalsVisibleToAttribute assemblyName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="0b045-150">友元程序集的名称。</span><span class="sxs-lookup"><span data-stu-id="0b045-150">The name of a friend assembly.</span></span></param>
        <summary><span data-ttu-id="0b045-151">用指定的友元程序集的名称初始化 <see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="0b045-151">Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute" /> class with the name of the specified friend assembly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b045-152"><xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> 构造函数定义友元程序集，该程序集是有权访问当前程序集的内部和私有受保护类型和成员的程序集。</span><span class="sxs-lookup"><span data-stu-id="0b045-152">The <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> constructor defines a friend assembly, which is an assembly that has access to the internal and private protected types and members of the current assembly.</span></span>  
  
 <span data-ttu-id="0b045-153">当前程序集和友元程序集都必须是无符号的，或者两者都必须使用强名称进行签名。</span><span class="sxs-lookup"><span data-stu-id="0b045-153">Both the current assembly and the friend assembly must be unsigned, or both must be signed with a strong name.</span></span> <span data-ttu-id="0b045-154">（有关强名称程序集的详细信息，请参阅[创建和使用具有强名称的程序集](~/docs/standard/assembly/create-use-strong-named.md)。）如果两者都无符号，则 `assemblyName` 参数由指定的友元程序集的名称组成，无需使用目录路径或文件扩展名。</span><span class="sxs-lookup"><span data-stu-id="0b045-154">(For more information about strong-named assemblies, see [Create and use strong-named assemblies](~/docs/standard/assembly/create-use-strong-named.md).) If both are unsigned, the `assemblyName` argument consists of the name of the friend assembly, specified without a directory path or file extension.</span></span> <span data-ttu-id="0b045-155">如果这两个参数都有符号，则 `assemblyName` 由友元程序集的名称（不包含其目录路径或文件扩展名）以及其完整公钥（但不包含公钥标记）组成。</span><span class="sxs-lookup"><span data-stu-id="0b045-155">If both are signed, `assemblyName` consists of the name of the friend assembly without its directory path or file name extension, along with its full public key (but not its public key token).</span></span> <span data-ttu-id="0b045-156">不能在 `assemblyName` 参数中指定强名称的其他组件，如提供区域性、版本或处理器体系结构信息的组件。</span><span class="sxs-lookup"><span data-stu-id="0b045-156">The other components of a strong name, such as those that provide culture, version, or processor architecture information, cannot be specified in the `assemblyName` argument.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0b045-157">如果使用C#编译器编译友元程序集，则必须使用 **/out**编译器选项显式指定输出文件的名称（.exe 或 .dll）。</span><span class="sxs-lookup"><span data-stu-id="0b045-157">If you use the C# compiler to compile the friend assembly, you must explicitly specify the name of the output file (.exe or .dll) by using the **/out** compiler option.</span></span> <span data-ttu-id="0b045-158">这是必需的，因为编译器尚未为它在绑定到外部引用时而正在构建的程序集生成名称。</span><span class="sxs-lookup"><span data-stu-id="0b045-158">This is required because the compiler has not yet generated the name for the assembly it is building at the time it is binding to external references.</span></span> <span data-ttu-id="0b045-159">**/Out**编译器选项对于 Visual Basic 编译器是可选的，并且不应在使用F#编译器编译友元程序集时使用相应的**输出**或 **-o**编译器选项。</span><span class="sxs-lookup"><span data-stu-id="0b045-159">The **/out** compiler option is optional for the Visual Basic compiler, and the corresponding **-out** or **-o** compiler option should not be used when compiling friend assemblies with the F# compiler.</span></span>  
  
 <span data-ttu-id="0b045-160">可以使用[sn.exe （强名称工具）](~/docs/framework/tools/sn-exe-strong-name-tool.md)从强名称密钥（.snk）文件中检索完整公钥。</span><span class="sxs-lookup"><span data-stu-id="0b045-160">You can use [Sn.exe (Strong Name Tool)](~/docs/framework/tools/sn-exe-strong-name-tool.md) to retrieve the full public key from a strong-named key (.snk) file.</span></span> <span data-ttu-id="0b045-161">为此，请执行以下步骤：</span><span class="sxs-lookup"><span data-stu-id="0b045-161">To do this, you perform the following steps:</span></span>  
  
1.  <span data-ttu-id="0b045-162">将公钥从强名称密钥文件提取到单独的文件中：</span><span class="sxs-lookup"><span data-stu-id="0b045-162">Extract the public key from the strong-named key file to a separate file:</span></span>  
  
     <span data-ttu-id="0b045-163">**Sn-p**  *snk_file* *outfile*</span><span class="sxs-lookup"><span data-stu-id="0b045-163">**Sn -p**  *snk_file* *outfile*</span></span>  
  
2.  <span data-ttu-id="0b045-164">向控制台显示完整公钥：</span><span class="sxs-lookup"><span data-stu-id="0b045-164">Display the full public key to the console:</span></span>  
  
     <span data-ttu-id="0b045-165">**Sn-tp**  *outfile*</span><span class="sxs-lookup"><span data-stu-id="0b045-165">**Sn -tp**  *outfile*</span></span>  
  
3.  <span data-ttu-id="0b045-166">将完整的公钥值复制并粘贴到源代码中。</span><span class="sxs-lookup"><span data-stu-id="0b045-166">Copy and paste the full public key value into your source code.</span></span>  
  
 <span data-ttu-id="0b045-167">有关如何使用 <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> 特性的详细信息，请参阅以下主题：</span><span class="sxs-lookup"><span data-stu-id="0b045-167">For more information about how to use the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute, see the following topics:</span></span>  
  
-   [<span data-ttu-id="0b045-168">友元程序集 (C++)</span><span class="sxs-lookup"><span data-stu-id="0b045-168">Friend Assemblies (C++)</span></span>](/cpp/dotnet/friend-assemblies-cpp)  
  
-   [<span data-ttu-id="0b045-169">友元程序集</span><span class="sxs-lookup"><span data-stu-id="0b045-169">Friend assemblies</span></span>](~/docs/standard/assembly/friend.md)  
  
   
  
## Examples  
 <span data-ttu-id="0b045-170">**签名的程序集**</span><span class="sxs-lookup"><span data-stu-id="0b045-170">**Signed assemblies**</span></span>  
  
 <span data-ttu-id="0b045-171">下面的示例使用 <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> 特性，使签名程序集中名为 `AppendDirectorySeparator` 的 `internal` 方法在另一个签名的程序集可见。</span><span class="sxs-lookup"><span data-stu-id="0b045-171">The following example uses the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute to make an `internal` method named `AppendDirectorySeparator` in a signed assembly visible to another signed assembly.</span></span> <span data-ttu-id="0b045-172">它定义了包含内部 `AppendDirectorySeparator` 方法的 `FileUtilities` 类。</span><span class="sxs-lookup"><span data-stu-id="0b045-172">It defines a `FileUtilities` class that includes an internal `AppendDirectorySeparator` method.</span></span> <span data-ttu-id="0b045-173"><xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> 特性应用于包含 `FileUtilities` 类的程序集。</span><span class="sxs-lookup"><span data-stu-id="0b045-173">The <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute is applied to the assembly that contains the `FileUtilities` class.</span></span> <span data-ttu-id="0b045-174">特性允许名为 `Friend1` 的程序集访问此内部成员。</span><span class="sxs-lookup"><span data-stu-id="0b045-174">The attribute allows an assembly named `Friend1` to access this internal member.</span></span>  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/assembly1.cs#1)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/assembly1.vb#1)]  
  
 <span data-ttu-id="0b045-175">如果下面的示例编译为名为 `Friend1`的强名称程序集，则它可以成功调用 `FileUtilities.AppendDirectorySeparator` 方法，即使该方法是 `Assembly1` 程序集的内部方法。</span><span class="sxs-lookup"><span data-stu-id="0b045-175">If the following example is compiled into a strong-named assembly named `Friend1`, it can successfully call the `FileUtilities.AppendDirectorySeparator` method, even though the method is internal to the `Assembly1` assembly.</span></span> <span data-ttu-id="0b045-176">请注意，如果C#从命令行进行编译，则必须使用 **/out**编译器开关，以确保当编译器绑定到外部引用时，友元程序集的名称可用。</span><span class="sxs-lookup"><span data-stu-id="0b045-176">Note that if you are compiling in C# from the command line, you must use the **/out** compiler switch to ensure that the name of the friend assembly is available when the compiler binds to external references.</span></span>  
  
 [!code-cpp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cpp/friend1.cpp#2)]
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/friend1.cs#2)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/friend1.vb#2)]  
  
 <span data-ttu-id="0b045-177">下面的示例使用 <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> 特性使未签名程序集的 `internal` 成员对其他未签名的程序集可见。</span><span class="sxs-lookup"><span data-stu-id="0b045-177">The following example uses the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute to make an `internal` member of an unsigned assembly visible to another unsigned assembly.</span></span> <span data-ttu-id="0b045-178">特性可确保名为 `UtilityLib` 的程序集中的 `internal` `StringLib.IsFirstLetterUpperCase` 方法对于名为 `Friend2`的程序集中的代码可见。</span><span class="sxs-lookup"><span data-stu-id="0b045-178">The attribute ensures that the `internal` `StringLib.IsFirstLetterUpperCase` method in an assembly named `UtilityLib` is visible to the code in an assembly named `Friend2`.</span></span>  <span data-ttu-id="0b045-179">下面是 UtilityLib 的源代码：</span><span class="sxs-lookup"><span data-stu-id="0b045-179">The following is the source code for UtilityLib.dll:</span></span>  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/utilitylib.cs#5)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/utilitylib.vb#5)]  
  
 <span data-ttu-id="0b045-180">**未签名的程序集**</span><span class="sxs-lookup"><span data-stu-id="0b045-180">**Unsigned assemblies**</span></span>  
  
 <span data-ttu-id="0b045-181">下面的示例提供了 `Friend2` 程序集的源代码。</span><span class="sxs-lookup"><span data-stu-id="0b045-181">The following example provides the source code for the `Friend2` assembly.</span></span> <span data-ttu-id="0b045-182">请注意，如果C#从命令行进行编译，则必须使用 **/out**编译器开关，以确保当编译器绑定到外部引用时，友元程序集的名称可用。</span><span class="sxs-lookup"><span data-stu-id="0b045-182">Note that if you are compiling in C# from the command line, you must use the **/out** compiler switch to ensure that the name of the friend assembly is available when the compiler binds to external references.</span></span>  
  
 [!code-cpp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cpp/friend2.cpp#6)]
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/friend2.cs#6)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/friend2.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllInternalsVisible">
      <MemberSignature Language="C#" Value="public bool AllInternalsVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllInternalsVisible" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AllInternalsVisible" />
      <MemberSignature Language="VB.NET" Value="Public Property AllInternalsVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllInternalsVisible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllInternalsVisible : bool with get, set" Usage="System.Runtime.CompilerServices.InternalsVisibleToAttribute.AllInternalsVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b045-183">不实现此属性。</span><span class="sxs-lookup"><span data-stu-id="0b045-183">This property is not implemented.</span></span></summary>
        <value><span data-ttu-id="0b045-184">此属性不返回值。</span><span class="sxs-lookup"><span data-stu-id="0b045-184">This property does not return a value.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssemblyName">
      <MemberSignature Language="C#" Value="public string AssemblyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AssemblyName" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AssemblyName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AssemblyName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AssemblyName : string" Usage="System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b045-185">获取友元程序集的名称，采用 <see langword="internal" /> 关键字标记的所有类型和类型成员对该程序集均为可见。</span><span class="sxs-lookup"><span data-stu-id="0b045-185">Gets the name of the friend assembly to which all types and type members that are marked with the <see langword="internal" /> keyword are to be made visible.</span></span></summary>
        <value><span data-ttu-id="0b045-186">一个表示友元程序集名称的字符串。</span><span class="sxs-lookup"><span data-stu-id="0b045-186">A string that represents the name of the friend assembly.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b045-187">有关如何使用 <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> 特性的详细信息，请参阅以下主题：</span><span class="sxs-lookup"><span data-stu-id="0b045-187">For more information about how to use the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute, see the following topics:</span></span>  
  
-   [<span data-ttu-id="0b045-188">友元程序集 (C++)</span><span class="sxs-lookup"><span data-stu-id="0b045-188">Friend Assemblies (C++)</span></span>](/cpp/dotnet/friend-assemblies-cpp)  
  
-   [<span data-ttu-id="0b045-189">友元程序集</span><span class="sxs-lookup"><span data-stu-id="0b045-189">Friend assemblies</span></span>](~/docs/standard/assembly/friend.md)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
