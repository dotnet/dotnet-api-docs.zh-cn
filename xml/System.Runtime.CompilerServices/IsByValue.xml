<Type Name="IsByValue" FullName="System.Runtime.CompilerServices.IsByValue">
  <Metadata><Meta Name="ms.openlocfilehash" Value="579a98d7846098877403d9b4920344d820f9ac01" /><Meta Name="ms.sourcegitcommit" Value="9506e50ec7beb4fa30206b9840dc546b035a6600" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/23/2020" /><Meta Name="ms.locfileid" Value="83972205" /></Metadata><TypeSignature Language="C#" Value="public static class IsByValue" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsByValue extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsByValue" />
  <TypeSignature Language="VB.NET" Value="Public Class IsByValue" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsByValue abstract sealed" />
  <TypeSignature Language="F#" Value="type IsByValue = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime.CompilerServices.VisualC" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="df63b-101">指示修饰的方法参数应解释为具有按值传递对象的语义。</span><span class="sxs-lookup"><span data-stu-id="df63b-101">Indicates that a modified method argument should be interpreted as having object passed-by-value semantics.</span></span> <span data-ttu-id="df63b-102">此修饰应用于引用类型。</span><span class="sxs-lookup"><span data-stu-id="df63b-102">This modifier is applied to reference types.</span></span>  <span data-ttu-id="df63b-103">此类不能被继承。</span><span class="sxs-lookup"><span data-stu-id="df63b-103">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="df63b-104"><xref:System.Runtime.CompilerServices.IsByValue>Microsoft c + + 编译器使用类来表示方法参数和返回值，其语义遵循通过值传递的对象的 c + + 规则。</span><span class="sxs-lookup"><span data-stu-id="df63b-104">The <xref:System.Runtime.CompilerServices.IsByValue> class is used by the Microsoft C++ compiler to denote method parameters and return values whose semantics follow the C++ rules for objects passed by value.</span></span>  
  
 <span data-ttu-id="df63b-105">编译器在元数据中发出自定义修饰符，以更改当默认行为不合适时实时（JIT）编译器处理值的方式。</span><span class="sxs-lookup"><span data-stu-id="df63b-105">Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</span></span>  <span data-ttu-id="df63b-106">当 JIT 编译器遇到自定义修饰符时，它将按修饰符指定的方式处理值。</span><span class="sxs-lookup"><span data-stu-id="df63b-106">When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</span></span>  <span data-ttu-id="df63b-107">编译器可以对方法、参数和返回值应用自定义修饰符。</span><span class="sxs-lookup"><span data-stu-id="df63b-107">Compilers can apply custom modifiers to methods, parameters, and return values.</span></span>  <span data-ttu-id="df63b-108">JIT 编译器必须响应所需的修饰符，但可以忽略可选修饰符。</span><span class="sxs-lookup"><span data-stu-id="df63b-108">The JIT compiler must respond to required modifiers but can ignore optional modifiers.</span></span>  
  
 <span data-ttu-id="df63b-109">可以使用以下方法之一将自定义修饰符发送到元数据中：</span><span class="sxs-lookup"><span data-stu-id="df63b-109">You can emit custom modifiers into metadata using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="df63b-110">使用类中的方法 <xref:System.Reflection.Emit.TypeBuilder> ，例如 <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A> 、 <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A> 、 <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A> 和 <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A> 。</span><span class="sxs-lookup"><span data-stu-id="df63b-110">Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span></span>  
  
-   <span data-ttu-id="df63b-111">生成 Microsoft 中间语言（MSIL）指令文件，其中包含对和的调用 `modopt` `modreq` ，并使用[Ilasm.exe （IL 汇编程序）](/dotnet/framework/tools/ilasm-exe-il-assembler)汇编文件。</span><span class="sxs-lookup"><span data-stu-id="df63b-111">Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](/dotnet/framework/tools/ilasm-exe-il-assembler).</span></span>  
  
-   <span data-ttu-id="df63b-112">使用非托管反射 API。</span><span class="sxs-lookup"><span data-stu-id="df63b-112">Using the unmanaged reflection API.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="df63b-113">下面的示例演示如何 <xref:System.Runtime.CompilerServices.IsByValue> 使用反射将对象发送到程序集。</span><span class="sxs-lookup"><span data-stu-id="df63b-113">The following example demonstrates how to emit an <xref:System.Runtime.CompilerServices.IsByValue> object into an assembly using reflection.</span></span>  
  
 [!code-cpp[Runtime.CompilerServices.IsByValue#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.CompilerServices.IsByValue/cpp/sample.cpp#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>
