<Type Name="IsLong" FullName="System.Runtime.CompilerServices.IsLong">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3be5e141d482e2fcefcf1befa527d17d0874b395" /><Meta Name="ms.sourcegitcommit" Value="9a0316374d19cc78674994106d073aa5ef1bd5f3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="11/10/2020" /><Meta Name="ms.locfileid" Value="94458824" /></Metadata><TypeSignature Language="C#" Value="public static class IsLong" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsLong extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsLong" />
  <TypeSignature Language="VB.NET" Value="Public Class IsLong" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsLong abstract sealed" />
  <TypeSignature Language="F#" Value="type IsLong = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime.CompilerServices.VisualC" ToVersion="0.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime.CompilerServices.VisualC" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="04a0a-101">指示修饰的整数是标准 C++ <see langword="long" /> 值。</span><span class="sxs-lookup"><span data-stu-id="04a0a-101">Indicates that a modified integer is a standard C++ <see langword="long" /> value.</span></span> <span data-ttu-id="04a0a-102">此类不能被继承。</span><span class="sxs-lookup"><span data-stu-id="04a0a-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="04a0a-103">C + + 标准指示 `long` 值和整数值是不同的类型。</span><span class="sxs-lookup"><span data-stu-id="04a0a-103">The C++ standard indicates that a `long` value and an integer value are distinct types.</span></span>  <span data-ttu-id="04a0a-104">但是，它们 `ELEMENT_TYPE_I4` 在程序集中均使用表示。</span><span class="sxs-lookup"><span data-stu-id="04a0a-104">However, they are both represented using `ELEMENT_TYPE_I4` in an assembly.</span></span>  <span data-ttu-id="04a0a-105">若要 `long` 从 c + + 中的整数区分，Microsoft c + + 编译器将 <xref:System.Runtime.CompilerServices.IsLong> 修饰符添加到 `long` 实例为 emited 的任何实例。</span><span class="sxs-lookup"><span data-stu-id="04a0a-105">To distinguish a `long` from an integer in C++, the Microsoft C++ compiler adds the <xref:System.Runtime.CompilerServices.IsLong> modifier to any instance of a `long` when the instance is emited.</span></span>  <span data-ttu-id="04a0a-106">此过程对于维护语言级类型安全至关重要。</span><span class="sxs-lookup"><span data-stu-id="04a0a-106">This process is critically important for maintaining language-level type safety.</span></span>  
  
 <span data-ttu-id="04a0a-107">编译器在元数据中发出自定义修饰符，以更改当默认行为不合适时实时 (JIT) 编译器处理值的方式。</span><span class="sxs-lookup"><span data-stu-id="04a0a-107">Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</span></span>  <span data-ttu-id="04a0a-108">当 JIT 编译器遇到自定义修饰符时，它将按修饰符指定的方式处理值。</span><span class="sxs-lookup"><span data-stu-id="04a0a-108">When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</span></span>  <span data-ttu-id="04a0a-109">编译器可以对方法、参数和返回值应用自定义修饰符。</span><span class="sxs-lookup"><span data-stu-id="04a0a-109">Compilers can apply custom modifiers to methods, parameters, and return values.</span></span>  <span data-ttu-id="04a0a-110">JIT 编译器必须响应所需的修饰符，但可以忽略可选修饰符。</span><span class="sxs-lookup"><span data-stu-id="04a0a-110">The JIT compiler must respond to required modifiers but can ignore optional modifiers.</span></span>  
  
 <span data-ttu-id="04a0a-111">可以使用以下方法之一将自定义修饰符发送到元数据中：</span><span class="sxs-lookup"><span data-stu-id="04a0a-111">You can emit custom modifiers into metadata using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="04a0a-112">使用类中的方法 <xref:System.Reflection.Emit.TypeBuilder> ，例如 <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A> 、 <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A> 、 <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A> 和 <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A> 。</span><span class="sxs-lookup"><span data-stu-id="04a0a-112">Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span></span>  
  
-   <span data-ttu-id="04a0a-113">生成 Microsoft 中间语言 (MSIL) 指令文件，其中包含对和的调用 `modopt` `modreq` ，并使用 [Ilasm.exe (IL 汇编程序) ](/dotnet/framework/tools/ilasm-exe-il-assembler)来汇编文件。</span><span class="sxs-lookup"><span data-stu-id="04a0a-113">Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](/dotnet/framework/tools/ilasm-exe-il-assembler).</span></span>  
  
-   <span data-ttu-id="04a0a-114">使用非托管反射 API。</span><span class="sxs-lookup"><span data-stu-id="04a0a-114">Using the unmanaged reflection API.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="04a0a-115">下面的示例演示如何 <xref:System.Runtime.CompilerServices.IsLong> 使用反射将对象发送到程序集。</span><span class="sxs-lookup"><span data-stu-id="04a0a-115">The following example demonstrates how to emit an <xref:System.Runtime.CompilerServices.IsLong> object into an assembly using reflection.</span></span>  
  
 [!code-cpp[Runtime.CompilerServices.IsLong#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.CompilerServices.IsLong/cpp/sample.cpp#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>
