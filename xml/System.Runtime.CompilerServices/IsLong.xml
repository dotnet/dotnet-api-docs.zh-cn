<Type Name="IsLong" FullName="System.Runtime.CompilerServices.IsLong">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cd821c775d86f7752dd5acfb8dd2cb4b267e1761" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83964573" /></Metadata><TypeSignature Language="C#" Value="public static class IsLong" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsLong extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsLong" />
  <TypeSignature Language="VB.NET" Value="Public Class IsLong" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsLong abstract sealed" />
  <TypeSignature Language="F#" Value="type IsLong = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime.CompilerServices.VisualC" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>指示修饰的整数是标准 C++ <see langword="long" /> 值。 无法继承此类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C++标准指示 `long` 值和整数值是不同的类型。  但是，它们都是使用程序集中的 `ELEMENT_TYPE_I4` 表示的。  为了区分 `long` 中的整数C++，Microsoft C++编译器在 emited 实例时将 <xref:System.Runtime.CompilerServices.IsLong> 修饰符添加到 `long` 的任何实例。  此过程对于维护语言级类型安全至关重要。  
  
 编译器在元数据中发出自定义修饰符，以更改当默认行为不合适时实时（JIT）编译器处理值的方式。  当 JIT 编译器遇到自定义修饰符时，它将按修饰符指定的方式处理值。  编译器可以对方法、参数和返回值应用自定义修饰符。  JIT 编译器必须响应所需的修饰符，但可以忽略可选修饰符。  
  
 可以使用以下方法之一将自定义修饰符发送到元数据中：  
  
-   使用 <xref:System.Reflection.Emit.TypeBuilder> 类中的方法，如 <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>、<xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>、<xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>和 <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>。  
  
-   生成 Microsoft 中间语言（MSIL）指令文件，其中包含对的调用 `modopt` 和 `modreq`，并使用[Ilasm （IL 汇编程序）](/dotnet/framework/tools/ilasm-exe-il-assembler)汇编文件。  
  
-   使用非托管反射 API。  
  
   
  
## Examples  
 下面的示例演示如何使用反射将 <xref:System.Runtime.CompilerServices.IsLong> 对象发送到程序集。  
  
 [!code-cpp[Runtime.CompilerServices.IsLong#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.CompilerServices.IsLong/cpp/sample.cpp#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>
