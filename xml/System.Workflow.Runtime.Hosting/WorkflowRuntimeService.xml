<Type Name="WorkflowRuntimeService" FullName="System.Workflow.Runtime.Hosting.WorkflowRuntimeService">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f947d241a3c8bd04fa0e6a2b2c9e482f86762a6e" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89987538" /></Metadata><TypeSignature Language="C#" Value="public abstract class WorkflowRuntimeService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit WorkflowRuntimeService extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WorkflowRuntimeService" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowRuntimeService abstract" />
  <TypeSignature Language="F#" Value="type WorkflowRuntimeService = class" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.Runtime</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示从中派生工作流运行时引擎核心服务的抽象基类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 从 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> 类派生的服务可以由工作流运行时引擎启动和停止。 但是，启动或停止服务的顺序是不确定的，并且服务可能需要其他服务的支持才能在启动时正确初始化自身，反过来，也可能需要其他服务的支持才能在停止时正确地关闭。 为了解决此问题，工作流运行时引擎为启动和停止服务提供了两阶段机制。 在调用 <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> 时，工作流运行时引擎为其每个派生自 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> 类的服务调用 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> 方法。  在启动所有这些服务之后，工作流运行时引擎将引发 <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=nameWithType> 事件，这会导致为每个工作流运行时引擎服务调用 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> 方法。 您的服务可以重写 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> 方法，从而参与此两阶段过程。 同样，在调用 <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> 时，<xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> 方法、<xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=nameWithType> 事件和 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> 方法提供此两阶段机制。  State 属性包含一个 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState> 值，该值指示服务是处于启动和停止过程中，还是已完全启动或停止。  
  
 派生自 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> 类的服务在遇到导致无法处理的异常的情形时，可以通过调用 <xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled?displayProperty=nameWithType> 来引发 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent%2A> 事件。  
  
 派生自 <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService> 类、<xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> 类、<xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> 类和 <xref:System.Workflow.Runtime.Tracking.TrackingService> 类的服务最终都是从 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> 类派生的。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WorkflowRuntimeService ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WorkflowRuntimeService();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>在派生类中实现时，初始化 <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> 初始化为 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopped>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStarted">
      <MemberSignature Language="C#" Value="protected virtual void OnStarted ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStarted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStarted ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStarted();" />
      <MemberSignature Language="F#" Value="abstract member OnStarted : unit -&gt; unit&#xA;override this.OnStarted : unit -&gt; unit" Usage="workflowRuntimeService.OnStarted " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在派生类中重写时，表示将在工作流运行时引擎引发 <see cref="E:System.Workflow.Runtime.WorkflowRuntime.Started" /> 事件时调用的方法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> 类实现两阶段启动机制，这样，当工作流运行时引擎为其所有工作流运行时引擎服务调用 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> 方法之后，工作流运行时引擎服务可以执行任何依赖于其他服务的初始化。 在工作流运行时引擎调用其所有工作流运行时引擎服务的 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> 方法后，将引发 <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=nameWithType> 事件。 可以重写 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> 方法，在引发 <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=nameWithType> 事件时提供服务所需的任何最终启动功能。 <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=nameWithType> 事件的订阅和取消订阅机制在内部进行处理。  
  
> [!NOTE]
>  如果在启动工作流运行时引擎之后，通过调用 <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> 将您的服务添加到工作流运行时引擎，则工作流运行时引擎将在该服务上调用 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A>。 不过，由于在这种情况下已经发生 <xref:System.Workflow.Runtime.WorkflowRuntime.Started> 事件，因此，您的服务可能需要在 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> 方法内部执行任何通常在 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> 中执行的初始化。 可以测试 <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A>，确定工作流运行时引擎是否已启动。  
  
 在调用 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> 之前，<xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Started> 设置为 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A>。  <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> 的默认实现不执行任何操作。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStopped">
      <MemberSignature Language="C#" Value="protected virtual void OnStopped ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStopped() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStopped ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStopped();" />
      <MemberSignature Language="F#" Value="abstract member OnStopped : unit -&gt; unit&#xA;override this.OnStopped : unit -&gt; unit" Usage="workflowRuntimeService.OnStopped " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在派生类中重写时，表示将在工作流运行时引擎引发 <see cref="E:System.Workflow.Runtime.WorkflowRuntime.Stopped" /> 事件时调用的方法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> 类实现两阶段停止机制，这样，当工作流运行时引擎调用服务的 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> 方法之后，工作流运行时引擎服务仍可以保留部分功能，以便支持其他服务的关闭操作（如有必要）。 在工作流运行时引擎调用其所有工作流运行时引擎服务的 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> 方法后，将引发 <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=nameWithType> 事件。 可以重写 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> 方法，在引发 <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=nameWithType> 事件时提供服务所需的任何最终关闭功能。 <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=nameWithType> 事件的订阅和取消订阅机制在内部进行处理。  
  
> [!NOTE]
>  当工作流运行时引擎正在运行时，如果通过调用 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> 从工作流运行时引擎中移除了 <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A>，则工作流运行时引擎将在服务上调用 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A>。 不过，在这种情况下，不会为服务调用 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> 方法。 因此，您的服务可能需要在 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> 方法内部执行任何通常在 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> 中执行的最终关闭。 可以测试 <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A>，确定工作流运行时引擎是否正在运行。  
  
 在调用 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> 之前，<xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopped> 设置为 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A>。  <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> 的默认实现不执行任何操作。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseServicesExceptionNotHandledEvent">
      <MemberSignature Language="C#" Value="protected void RaiseServicesExceptionNotHandledEvent (Exception exception, Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseServicesExceptionNotHandledEvent(class System.Exception exception, valuetype System.Guid instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent(System.Exception,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RaiseServicesExceptionNotHandledEvent (exception As Exception, instanceId As Guid)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RaiseServicesExceptionNotHandledEvent(Exception ^ exception, Guid instanceId);" />
      <MemberSignature Language="F#" Value="member this.RaiseServicesExceptionNotHandledEvent : Exception * Guid -&gt; unit" Usage="workflowRuntimeService.RaiseServicesExceptionNotHandledEvent (exception, instanceId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="exception">无法处理的异常。</param>
        <param name="instanceId">与未经处理的异常关联的工作流实例的 <see cref="T:System.Guid" />。</param>
        <summary>引发 <see cref="E:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当服务在其执行期间遇到无法处理的异常时，可以调用 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent%2A> 来引发 <xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled?displayProperty=nameWithType> 事件。 应传递与未处理异常关联的工作流实例的 <xref:System.Guid>。 例如，计时器服务可能会传递与发生异常的计时器关联的 <xref:System.Guid>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Runtime">
      <MemberSignature Language="C#" Value="protected System.Workflow.Runtime.WorkflowRuntime Runtime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Workflow.Runtime.WorkflowRuntime Runtime" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Runtime As WorkflowRuntime" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Workflow::Runtime::WorkflowRuntime ^ Runtime { System::Workflow::Runtime::WorkflowRuntime ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Runtime : System.Workflow.Runtime.WorkflowRuntime" Usage="System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowRuntime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取此服务的 <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />。</summary>
        <value><see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在服务上调用 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> 之前，工作流运行时引擎将设置此属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="protected internal virtual void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void Start();" />
      <MemberSignature Language="F#" Value="abstract member Start : unit -&gt; unit&#xA;override this.Start : unit -&gt; unit" Usage="workflowRuntimeService.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在派生类中重写时，启动服务并将 <see cref="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State" /> 更改为 <see cref="F:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Starting" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在调用 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> 时，工作流运行时引擎在其所有派生自 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> 类的服务上调用 <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A>。  
  
 在工作流运行时引擎启动之后，通过调用 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> 将某个工作流运行时引擎服务添加到工作流运行时引擎时，工作流运行时引擎也会调用 <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A>。 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> 的默认实现跟踪服务是否已启动；如果在服务已运行的情况下启动该服务，则使用此信息引发适当的异常。  
  
 通过重写此方法，可以提供由工作流运行时引擎启动服务时所需的附加功能。 当工作流运行时引擎在服务上调用 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> 时，不能确保哪些服务正在运行（如果有）。 因此，在 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> 方法中，只应执行任何不依赖于由其他服务提供的功能的初始化。 这包括由核心服务（如计划程序服务）提供的功能。 在工作流运行时引擎调用其所有工作流运行时引擎服务的 <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=nameWithType> 方法后，将引发 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> 事件。 如果在启动所有工作流运行时引擎服务之后，服务需要其他初始化，则可以重写 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> 方法，在引发 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> 事件时执行此初始化。  
  
> [!NOTE]
>  如果在启动工作流运行时引擎之后，通过调用 <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> 将您的服务添加到工作流运行时引擎，则工作流运行时引擎将在该服务上调用 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A>。 不过，由于在这种情况下已经发生 <xref:System.Workflow.Runtime.WorkflowRuntime.Started> 事件，因此，您的服务可能需要在 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> 方法内部执行任何通常在 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> 中执行的初始化。 可以测试 <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A>，确定工作流运行时引擎是否已启动。  
  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> 只应由工作流运行时引擎调用。  
  
   
  
## Examples  
 下面的示例演示如何在从 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> 派生的对象 TerminationTrackingService 上调用 Start 方法。  此示例摘自“终止跟踪服务”SDK 示例。  有关详细信息，请参阅 [终止跟踪服务示例](https://msdn.microsoft.com/library/29b7c0d7-cece-4bb9-96d0-c5b6c6e14439)。  
  
 [!code-csharp[WF_Samples#112](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#112)]
 [!code-vb[WF_Samples#112](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#112)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime" /> 为空引用（在 Visual Basic 中为 <see langword="Nothing" />） 
- 或 - 
服务已启动。</exception>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="protected System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState State" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property State As WorkflowRuntimeServiceState" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Workflow::Runtime::Hosting::WorkflowRuntimeServiceState State { System::Workflow::Runtime::Hosting::WorkflowRuntimeServiceState get(); };" />
      <MemberSignature Language="F#" Value="member this.State : System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState" Usage="System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" /> 的状态。</summary>
        <value><see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> 类为启动和停止工作流运行时引擎服务实现两阶段机制。 启动机制的第一阶段在工作流运行时引擎调用服务的 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> 方法的实现时开始。 此方法应调用 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> 的基实现，该实现将 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> 设置为 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Starting>。 当工作流运行时引擎启动了其所有工作流运行时引擎服务之后，在引发 <xref:System.Workflow.Runtime.WorkflowRuntime.Started> 事件时，发生第二阶段。 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> 在内部管理对此事件的订阅，并且其处理程序会将 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> 设置为 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Started>。  
  
 当工作流运行时引擎调用服务的 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> 方法的实现时，用于停止工作流运行时引擎服务的两阶段机制开始。 此方法应调用 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> 的基实现，该实现将 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> 设置为 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopping>。 在工作流运行时引擎停止其所有工作流运行时引擎服务后，将引发 <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped> 事件。 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> 在内部管理对此事件的订阅，并且其处理程序会将 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> 设置为 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopped>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="protected internal virtual void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void Stop();" />
      <MemberSignature Language="F#" Value="abstract member Stop : unit -&gt; unit&#xA;override this.Stop : unit -&gt; unit" Usage="workflowRuntimeService.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在派生类中重写时，停止服务并将 <see cref="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State" /> 更改为 <see cref="F:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopping" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在调用 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> 时，工作流运行时引擎在其所有派生自 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> 类的服务上调用 <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A>。  在通过调用 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> 从工作流运行时引擎中移除工作流运行时引擎服务时，工作流运行时引擎也会调用 <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A>。 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> 的默认实现跟踪服务是否已启动，如果在尚未启动服务的情况下停止该服务，则使用此信息引发适当的异常。  
  
 通过重写此方法，可以提供由工作流运行时引擎停止服务时所需的附加功能。 在服务上调用 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> 时，不能确保将要停止或正在运行哪些服务（如果有）。 在工作流运行时引擎调用其所有工作流运行时引擎服务的 <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=nameWithType> 方法后，将引发 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> 事件。 您的服务可能需要保留部分剩余功能以便支持其他服务，直到由工作流运行时引擎对所有工作流运行时引擎服务调用了各自的 Stop 方法。 如果您的服务必须保留此类功能，则可以重写 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> 方法，在引发 <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=nameWithType> 事件时执行完成停止服务所需的任何附加操作。  
  
> [!NOTE]
>  当工作流运行时引擎正在运行时，如果通过调用 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> 从工作流运行时引擎中移除了 <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A>，则工作流运行时引擎将在服务上调用 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A>。 不过，在这种情况下，不会为服务调用 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> 方法。 因此，您的服务可能需要在 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> 方法内部执行任何通常在 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> 中执行的附加关闭功能。 可以测试 <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A>，确定工作流运行时引擎是否正在运行。  
  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> 只应由工作流运行时引擎调用。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime" /> 为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。  
  
- 或 - 
服务尚未启动。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
