<Type Name="WorkflowPersistenceService" FullName="System.Workflow.Runtime.Hosting.WorkflowPersistenceService">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3b73829f4e3c006fd018dc4324b1e3f7e3dcea89" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86714270" /></Metadata><TypeSignature Language="C#" Value="public abstract class WorkflowPersistenceService : System.Workflow.Runtime.Hosting.WorkflowRuntimeService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit WorkflowPersistenceService extends System.Workflow.Runtime.Hosting.WorkflowRuntimeService" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Runtime.Hosting.WorkflowPersistenceService" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WorkflowPersistenceService&#xA;Inherits WorkflowRuntimeService" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowPersistenceService abstract : System::Workflow::Runtime::Hosting::WorkflowRuntimeService" />
  <TypeSignature Language="F#" Value="type WorkflowPersistenceService = class&#xA;    inherit WorkflowRuntimeService" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.Runtime</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Workflow.Runtime.Hosting.WorkflowRuntimeService</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="40b9a-101">从中派生所有持久性服务的抽象基类。</span><span class="sxs-lookup"><span data-stu-id="40b9a-101">The abstract base class from which all persistence services are derived.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 <span data-ttu-id="40b9a-102">在工作流运行过程中发生特定情况时，工作流运行时引擎将保留有关工作流实例的状态信息。</span><span class="sxs-lookup"><span data-stu-id="40b9a-102">When certain conditions occur while the workflow is running, the workflow runtime engine persists state information about the workflow instance.</span></span> <span data-ttu-id="40b9a-103">例如，在原子事务完成时、工作流实例进入空闲状态时、主机对工作流实例调用 <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A?displayProperty=nameWithType> 时或工作流实例终止或完成时，会执行保留操作。</span><span class="sxs-lookup"><span data-stu-id="40b9a-103">Persistence can occur, for example, when an atomic transaction finishes, when the workflow instance becomes idle, when the host calls <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A?displayProperty=nameWithType> on the workflow instance, or when a workflow instance is terminated or finishes.</span></span> <span data-ttu-id="40b9a-104">当工作流运行时引擎语义指示应执行保留操作时，工作流运行时引擎将调用由持久性服务提供的方法，保存有关工作流实例的状态信息。</span><span class="sxs-lookup"><span data-stu-id="40b9a-104">When the workflow runtime engine semantics dictate that persistence should occur, the workflow runtime engine calls methods that are supplied by a persistence service to save state information about the workflow instance.</span></span> <span data-ttu-id="40b9a-105">同样，当工作流运行时引擎需要还原以前保留的工作流实例时，会调用由持久性服务提供的方法来加载此状态信息。</span><span class="sxs-lookup"><span data-stu-id="40b9a-105">Likewise, when the workflow runtime engine needs to restore a previously persisted workflow instance, it calls methods that are supplied by the persistence service to load this state information.</span></span> <span data-ttu-id="40b9a-106">工作流运行时引擎处理所有关于何时执行保留操作的语义。</span><span class="sxs-lookup"><span data-stu-id="40b9a-106">The workflow runtime engine handles all the semantics regarding when to perform persistence.</span></span> <span data-ttu-id="40b9a-107">持久性服务处理将工作流状态信息实际保存到数据存储区中以及从数据存储区中实际加载该信息的操作。</span><span class="sxs-lookup"><span data-stu-id="40b9a-107">The persistence service handles actually saving and loading the workflow state information to or from a data store.</span></span>  
  
 <span data-ttu-id="40b9a-108">可以通过从 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> 类派生一个类来创建持久性服务。</span><span class="sxs-lookup"><span data-stu-id="40b9a-108">You can create a persistence service by deriving a class from the <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> class.</span></span>  <span data-ttu-id="40b9a-109">通过调用 <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> 或在应用程序配置文件中添加合适的项，可以将持久性服务添加到工作流运行时引擎。</span><span class="sxs-lookup"><span data-stu-id="40b9a-109">You can add your persistence service to the workflow runtime engine by calling <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> or by making an appropriate entry in the application configuration file.</span></span> <span data-ttu-id="40b9a-110"><xref:System.Workflow.Runtime.WorkflowRuntime> 应只包含一个持久性服务。</span><span class="sxs-lookup"><span data-stu-id="40b9a-110">The <xref:System.Workflow.Runtime.WorkflowRuntime> should only contain one persistence service.</span></span> <span data-ttu-id="40b9a-111">Windows Workflow Foundation 提供了 <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> 类，这是一种全新的持久性服务，可以按原样使用或对其进行扩展。</span><span class="sxs-lookup"><span data-stu-id="40b9a-111">Windows Workflow Foundation provides the <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> class, an out-of-box persistence service, which you can use as is or extend.</span></span>  
  
 <span data-ttu-id="40b9a-112">工作流运行时引擎具有锁定工作流状态信息的语义，当其他进程上运行的持久性服务有权访问单个数据存储区时，可以使用该语义。</span><span class="sxs-lookup"><span data-stu-id="40b9a-112">The workflow runtime engine has semantics for locking workflow state information for use in environments where persistence services that run in different processes might have access to a single data store.</span></span> <span data-ttu-id="40b9a-113">通过为 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> 提供指定是否应在数据存储区中解锁工作流实例状态信息的参数，并提供将先前锁定的工作流状态信息解锁的方法 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A>，<xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState%2A> 类提供了支持此工作流运行时引擎功能的能力。</span><span class="sxs-lookup"><span data-stu-id="40b9a-113">The <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> class provides the capability to support this functionality of the workflow runtime engine by providing a parameter to <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> that specifies whether the state information of a workflow instance should be unlocked in the data store, and by providing a method <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState%2A> to unlock previously locked workflow state information.</span></span> <span data-ttu-id="40b9a-114">在实现锁定的持久性服务中，对 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A> 的调用将锁定工作流实例的状态信息。</span><span class="sxs-lookup"><span data-stu-id="40b9a-114">In a persistence service that implements locking, a call to <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A> should lock the state information for a workflow instance.</span></span>  
  
 <span data-ttu-id="40b9a-115">如果持久性服务无法将状态信息保存到其数据存储区，或者无法从其数据存储区加载状态信息，则应引发 <xref:System.Workflow.Runtime.Hosting.PersistenceException>。</span><span class="sxs-lookup"><span data-stu-id="40b9a-115">Your persistence service should throw a <xref:System.Workflow.Runtime.Hosting.PersistenceException> if it fails to save state information to its data store or load state information from its data store.</span></span> <span data-ttu-id="40b9a-116">工作流运行时引擎需要此行为。</span><span class="sxs-lookup"><span data-stu-id="40b9a-116">The workflow runtime engine expects this behavior.</span></span>  
  
 <span data-ttu-id="40b9a-117">为使用持久性存储区来保存工作流状态信息的服务提供了批处理机制。</span><span class="sxs-lookup"><span data-stu-id="40b9a-117">A batching mechanism is provided for services that use a durable store to save workflow state information.</span></span> <span data-ttu-id="40b9a-118">在这种情况下，在持久性服务使用的持久性存储区与工作流运行时引擎内部状态之间保持一致十分重要。</span><span class="sxs-lookup"><span data-stu-id="40b9a-118">It is important in these cases to maintain consistency between the durable store that is used by the persistence service and the internal state of the workflow runtime engine.</span></span> <span data-ttu-id="40b9a-119">可以将 <xref:System.Workflow.Runtime.IPendingWork> 接口定义的功能添加到服务中，然后通过将对数据存储区的更改作为工作项添加到 <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> 中，来参与 <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A> 提供的工作流事务批处理。</span><span class="sxs-lookup"><span data-stu-id="40b9a-119">You can add functionality defined by the <xref:System.Workflow.Runtime.IPendingWork> interface to your service, and then participate in workflow transaction batching provided by the <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> by adding changes to your data store as work items to the <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A>.</span></span> <span data-ttu-id="40b9a-120">持久存储区自身应实现 <xref:System.Transactions.IEnlistmentNotification> 接口，以便在事务回滚时正确保留工作流信息。</span><span class="sxs-lookup"><span data-stu-id="40b9a-120">The durable store itself should implement the <xref:System.Transactions.IEnlistmentNotification> interface, so that workflow information is not persisted incorrectly in the event of a transaction rollback.</span></span> <span data-ttu-id="40b9a-121">有关详细信息，请参阅<xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity%2A>或<xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A>。</span><span class="sxs-lookup"><span data-stu-id="40b9a-121">For more information, see <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity%2A> or <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A>.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WorkflowPersistenceService ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WorkflowPersistenceService();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="40b9a-122">在派生类中实现时，初始化 <see cref="T:System.Workflow.Runtime.Hosting.WorkflowPersistenceService" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="40b9a-122">When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.WorkflowPersistenceService" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="40b9a-123">下面的代码演示如何创建 `SqlWorkflowPersistenceService` 类（派生自 `WorkflowPersistenceService`）的实例。</span><span class="sxs-lookup"><span data-stu-id="40b9a-123">The following example demonstrates creating an instance of the `SqlWorkflowPersistenceService` class (derived from `WorkflowPersistenceService`).</span></span> <span data-ttu-id="40b9a-124">此示例摘自 Program.cs 类文件中的“嵌套异常处理程序 SDK”示例。</span><span class="sxs-lookup"><span data-stu-id="40b9a-124">This example is from the Nested Exception Handlers SDK sample, from the Program.cs class.</span></span>  <span data-ttu-id="40b9a-125">有关详细信息，请参阅 [嵌套异常处理程序示例](https://msdn.microsoft.com/library/d1da0209-842b-41c8-9b7c-0cbaa1034265)。</span><span class="sxs-lookup"><span data-stu-id="40b9a-125">For more information, see the [Nested Exception Handlers Sample](https://msdn.microsoft.com/library/d1da0209-842b-41c8-9b7c-0cbaa1034265).</span></span>  
  
 [!code-csharp[WF_Samples#161](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets11.cs#161)]
 [!code-vb[WF_Samples#161](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets11.vb#161)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultSerializedForm">
      <MemberSignature Language="C#" Value="protected static byte[] GetDefaultSerializedForm (System.Workflow.ComponentModel.Activity activity);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig unsigned int8[] GetDefaultSerializedForm(class System.Workflow.ComponentModel.Activity activity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetDefaultSerializedForm(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function GetDefaultSerializedForm (activity As Activity) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static cli::array &lt;System::Byte&gt; ^ GetDefaultSerializedForm(System::Workflow::ComponentModel::Activity ^ activity);" />
      <MemberSignature Language="F#" Value="static member GetDefaultSerializedForm : System.Workflow.ComponentModel.Activity -&gt; byte[]" Usage="System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetDefaultSerializedForm activity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="activity"><span data-ttu-id="40b9a-126">请求其序列化的窗体的 <see cref="T:System.Workflow.ComponentModel.Activity" />。</span><span class="sxs-lookup"><span data-stu-id="40b9a-126">The <see cref="T:System.Workflow.ComponentModel.Activity" /> whose serialized form is requested.</span></span></param>
        <summary><span data-ttu-id="40b9a-127">检索 <see cref="T:System.Workflow.ComponentModel.Activity" /> 的序列化的默认窗体。</span><span class="sxs-lookup"><span data-stu-id="40b9a-127">Retrieves the serialized default form of the <see cref="T:System.Workflow.ComponentModel.Activity" />.</span></span></summary>
        <returns><span data-ttu-id="40b9a-128"><see cref="T:System.Workflow.ComponentModel.Activity" /> 的序列化的默认窗体。</span><span class="sxs-lookup"><span data-stu-id="40b9a-128">The serialized default form of the <see cref="T:System.Workflow.ComponentModel.Activity" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIsBlocked">
      <MemberSignature Language="C#" Value="protected internal static bool GetIsBlocked (System.Workflow.ComponentModel.Activity rootActivity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblystatic hidebysig bool GetIsBlocked(class System.Workflow.ComponentModel.Activity rootActivity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetIsBlocked(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Shared Function GetIsBlocked (rootActivity As Activity) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; static bool GetIsBlocked(System::Workflow::ComponentModel::Activity ^ rootActivity);" />
      <MemberSignature Language="F#" Value="static member GetIsBlocked : System.Workflow.ComponentModel.Activity -&gt; bool" Usage="System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetIsBlocked rootActivity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootActivity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="rootActivity"><span data-ttu-id="40b9a-129">工作流实例的根活动。</span><span class="sxs-lookup"><span data-stu-id="40b9a-129">The root activity of the workflow instance.</span></span></param>
        <summary><span data-ttu-id="40b9a-130">指示是否阻止给定的活动。</span><span class="sxs-lookup"><span data-stu-id="40b9a-130">Indicates whether the given activity is blocked.</span></span></summary>
        <returns><span data-ttu-id="40b9a-131">如果阻止给定的活动，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="40b9a-131"><see langword="true" /> if the given activity is blocked; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSuspendOrTerminateInfo">
      <MemberSignature Language="C#" Value="protected internal static string GetSuspendOrTerminateInfo (System.Workflow.ComponentModel.Activity rootActivity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblystatic hidebysig string GetSuspendOrTerminateInfo(class System.Workflow.ComponentModel.Activity rootActivity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetSuspendOrTerminateInfo(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Shared Function GetSuspendOrTerminateInfo (rootActivity As Activity) As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; static System::String ^ GetSuspendOrTerminateInfo(System::Workflow::ComponentModel::Activity ^ rootActivity);" />
      <MemberSignature Language="F#" Value="static member GetSuspendOrTerminateInfo : System.Workflow.ComponentModel.Activity -&gt; string" Usage="System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetSuspendOrTerminateInfo rootActivity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootActivity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="rootActivity"><span data-ttu-id="40b9a-132">工作流实例的根活动。</span><span class="sxs-lookup"><span data-stu-id="40b9a-132">The root activity of the workflow instance.</span></span></param>
        <summary><span data-ttu-id="40b9a-133">检索给定活动的终止或挂起信息。</span><span class="sxs-lookup"><span data-stu-id="40b9a-133">Retrieves the termination or suspend information of the given activity.</span></span></summary>
        <returns><span data-ttu-id="40b9a-134">包含终止或挂起信息的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="40b9a-134">A <see cref="T:System.String" /> that contains the termination or suspend information.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflowStatus">
      <MemberSignature Language="C#" Value="protected internal static System.Workflow.Runtime.WorkflowStatus GetWorkflowStatus (System.Workflow.ComponentModel.Activity rootActivity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblystatic hidebysig valuetype System.Workflow.Runtime.WorkflowStatus GetWorkflowStatus(class System.Workflow.ComponentModel.Activity rootActivity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Shared Function GetWorkflowStatus (rootActivity As Activity) As WorkflowStatus" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; static System::Workflow::Runtime::WorkflowStatus GetWorkflowStatus(System::Workflow::ComponentModel::Activity ^ rootActivity);" />
      <MemberSignature Language="F#" Value="static member GetWorkflowStatus : System.Workflow.ComponentModel.Activity -&gt; System.Workflow.Runtime.WorkflowStatus" Usage="System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus rootActivity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootActivity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="rootActivity"><span data-ttu-id="40b9a-135">工作流实例的根活动。</span><span class="sxs-lookup"><span data-stu-id="40b9a-135">The root activity of the workflow instance.</span></span></param>
        <summary><span data-ttu-id="40b9a-136">检索工作流的状态。</span><span class="sxs-lookup"><span data-stu-id="40b9a-136">Retrieves the status of the workflow.</span></span></summary>
        <returns><span data-ttu-id="40b9a-137">一个 <see cref="T:System.Workflow.Runtime.WorkflowStatus" /> 枚举值，表示工作流的状态。</span><span class="sxs-lookup"><span data-stu-id="40b9a-137">A <see cref="T:System.Workflow.Runtime.WorkflowStatus" /> enumeration value that denotes the status of the workflow.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCompletedContextActivity">
      <MemberSignature Language="C#" Value="protected internal abstract System.Workflow.ComponentModel.Activity LoadCompletedContextActivity (Guid scopeId, System.Workflow.ComponentModel.Activity outerActivity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Workflow.ComponentModel.Activity LoadCompletedContextActivity(valuetype System.Guid scopeId, class System.Workflow.ComponentModel.Activity outerActivity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity(System.Guid,System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Function LoadCompletedContextActivity (scopeId As Guid, outerActivity As Activity) As Activity" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract System::Workflow::ComponentModel::Activity ^ LoadCompletedContextActivity(Guid scopeId, System::Workflow::ComponentModel::Activity ^ outerActivity);" />
      <MemberSignature Language="F#" Value="abstract member LoadCompletedContextActivity : Guid * System.Workflow.ComponentModel.Activity -&gt; System.Workflow.ComponentModel.Activity" Usage="workflowPersistenceService.LoadCompletedContextActivity (scopeId, outerActivity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopeId" Type="System.Guid" />
        <Parameter Name="outerActivity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="scopeId"><span data-ttu-id="40b9a-138">已完成作用域的 <see cref="T:System.Guid" />。</span><span class="sxs-lookup"><span data-stu-id="40b9a-138">The <see cref="T:System.Guid" /> of the completed scope.</span></span></param>
        <param name="outerActivity"><span data-ttu-id="40b9a-139">一个 <see cref="T:System.Workflow.ComponentModel.Activity" />，表示涵盖已完成作用域的活动。</span><span class="sxs-lookup"><span data-stu-id="40b9a-139">An <see cref="T:System.Workflow.ComponentModel.Activity" /> that represents the activity that encloses the completed scope.</span></span></param>
        <summary><span data-ttu-id="40b9a-140">在派生类中实现时，将指定的已完成作用域加载回内存。</span><span class="sxs-lookup"><span data-stu-id="40b9a-140">When implemented in a derived class, loads the specified completed scope back into memory.</span></span></summary>
        <returns><span data-ttu-id="40b9a-141">表示已完成范围的 <see cref="T:System.Workflow.ComponentModel.Activity" />。</span><span class="sxs-lookup"><span data-stu-id="40b9a-141">An <see cref="T:System.Workflow.ComponentModel.Activity" /> that represents the completed scope.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="40b9a-142">工作流运行时引擎使用 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A> 实现补偿。</span><span class="sxs-lookup"><span data-stu-id="40b9a-142">The workflow runtime engine uses <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A> to implement compensation.</span></span> <span data-ttu-id="40b9a-143">必须还原已完成作用域的相同副本。</span><span class="sxs-lookup"><span data-stu-id="40b9a-143">You must restore an identical copy of the completed scope.</span></span> <span data-ttu-id="40b9a-144">为此，必须从数据存储区中已完成作用域的表示形式中还原有效的 <xref:System.IO.Stream>。</span><span class="sxs-lookup"><span data-stu-id="40b9a-144">To do this, you must restore a valid <xref:System.IO.Stream> from your representation of the completed scope in the data store.</span></span> <span data-ttu-id="40b9a-145">然后，必须将此 <xref:System.IO.Stream> 传递到重载的 <xref:System.Workflow.ComponentModel.Activity.Load%2A> 方法之一，用于执行作用域的反序列化。</span><span class="sxs-lookup"><span data-stu-id="40b9a-145">Then you must pass this <xref:System.IO.Stream> to one of the overloaded methods of <xref:System.Workflow.ComponentModel.Activity.Load%2A> to perform deserialization of the scope.</span></span>  
  
 <span data-ttu-id="40b9a-146">如果持久性服务无法从其数据存储区加载已完成作用域，则它应引发 <xref:System.Workflow.Runtime.Hosting.PersistenceException> 并显示相应的消息。</span><span class="sxs-lookup"><span data-stu-id="40b9a-146">If your persistence service cannot load the completed scope from its data store, it should throw a <xref:System.Workflow.Runtime.Hosting.PersistenceException> with an appropriate message.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="40b9a-147">下面的示例演示 `LoadCompletedContextActivity` 方法的实现。</span><span class="sxs-lookup"><span data-stu-id="40b9a-147">The following example demonstrates an implementation of the `LoadCompletedContextActivity` method.</span></span> <span data-ttu-id="40b9a-148">此示例摘自 FilePersistenceService.cs 文件中的“自定义持久性服务”示例。</span><span class="sxs-lookup"><span data-stu-id="40b9a-148">This example is from the Custom Persistence Service sample, from the FilePersistenceService.cs file.</span></span> <span data-ttu-id="40b9a-149">有关详细信息，请参阅 [自定义持久性服务示例](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d)。</span><span class="sxs-lookup"><span data-stu-id="40b9a-149">For more information, see [Custom Persistence Service Sample](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d).</span></span>  
  
 [!code-csharp[WF_Samples#269](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#269)]
 [!code-vb[WF_Samples#269](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#269)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadWorkflowInstanceState">
      <MemberSignature Language="C#" Value="protected internal abstract System.Workflow.ComponentModel.Activity LoadWorkflowInstanceState (Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Workflow.ComponentModel.Activity LoadWorkflowInstanceState(valuetype System.Guid instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Function LoadWorkflowInstanceState (instanceId As Guid) As Activity" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract System::Workflow::ComponentModel::Activity ^ LoadWorkflowInstanceState(Guid instanceId);" />
      <MemberSignature Language="F#" Value="abstract member LoadWorkflowInstanceState : Guid -&gt; System.Workflow.ComponentModel.Activity" Usage="workflowPersistenceService.LoadWorkflowInstanceState instanceId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="instanceId"><span data-ttu-id="40b9a-150">工作流实例的根活动的 <see cref="T:System.Guid" />。</span><span class="sxs-lookup"><span data-stu-id="40b9a-150">The <see cref="T:System.Guid" /> of the root activity of the workflow instance.</span></span></param>
        <summary><span data-ttu-id="40b9a-151">在派生类中实现时，将工作流实例的指定状态加载回内存。</span><span class="sxs-lookup"><span data-stu-id="40b9a-151">When implemented in a derived class, loads the specified state of the workflow instance back into memory.</span></span></summary>
        <returns><span data-ttu-id="40b9a-152">一个 <see cref="T:System.Workflow.ComponentModel.Activity" />，表示工作流实例的根活动。</span><span class="sxs-lookup"><span data-stu-id="40b9a-152">An <see cref="T:System.Workflow.ComponentModel.Activity" /> that represents the root activity of the workflow instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="40b9a-153">必须还原活动的相同副本。</span><span class="sxs-lookup"><span data-stu-id="40b9a-153">You must restore an identical copy of the activity.</span></span> <span data-ttu-id="40b9a-154">为此，必须从数据存储区中工作流实例的表示形式中还原有效的 <xref:System.IO.Stream>；然后，必须将此 <xref:System.IO.Stream> 传递到重载的 <xref:System.Workflow.ComponentModel.Activity.Load%2A> 方法之一，用于反序列化工作流实例。</span><span class="sxs-lookup"><span data-stu-id="40b9a-154">To do this, you must restore a valid <xref:System.IO.Stream> from your representation of the workflow instance in the data store; then you must pass this <xref:System.IO.Stream> to one of the overloaded <xref:System.Workflow.ComponentModel.Activity.Load%2A> methods to deserialize the workflow instance state.</span></span> <span data-ttu-id="40b9a-155">如果持久性服务无法从其数据存储区加载工作流实例状态，则它应引发带有适当消息的 <xref:System.Workflow.Runtime.Hosting.PersistenceException>。</span><span class="sxs-lookup"><span data-stu-id="40b9a-155">If your persistence service cannot load the workflow instance state from its data store, it should throw a <xref:System.Workflow.Runtime.Hosting.PersistenceException> with an appropriate message.</span></span>  
  
 <span data-ttu-id="40b9a-156">工作流运行时引擎实现锁定语义，限制对保存在数据存储区中的工作流实例状态的访问。</span><span class="sxs-lookup"><span data-stu-id="40b9a-156">The workflow runtime engine implements locking semantics to restrict access to a workflow instance state that is saved in a data store.</span></span> <span data-ttu-id="40b9a-157">这可以通过在多个进程中运行的持久性服务进行访问。</span><span class="sxs-lookup"><span data-stu-id="40b9a-157">This can be accessed by persistence services that run in multiple processes.</span></span> <span data-ttu-id="40b9a-158">锁定语义旨在防止运行在两个不同的进程中的持久性服务同时将相同的工作流实例加载到内存中。</span><span class="sxs-lookup"><span data-stu-id="40b9a-158">The locking semantics are designed to prevent persistence services that run in two different processes from loading the same workflow instance into memory at the same time.</span></span> <span data-ttu-id="40b9a-159">根据持久性服务所支持的环境类型，可以选择是否支持此功能。</span><span class="sxs-lookup"><span data-stu-id="40b9a-159">Depending on the type of environment that your persistence service is designed to support, you may choose whether to support this functionality.</span></span> <span data-ttu-id="40b9a-160">如果选择支持运行时锁定语义，并且如果此工作流实例状态先前已经由其他进程锁定，则应引发 <xref:System.Workflow.Runtime.WorkflowOwnershipException>。</span><span class="sxs-lookup"><span data-stu-id="40b9a-160">If you choose to support the runtime locking semantics, and if this workflow instance state has been previously locked by another process, then you should throw a <xref:System.Workflow.Runtime.WorkflowOwnershipException>.</span></span> <span data-ttu-id="40b9a-161">否则，应锁定对数据存储区中工作流实例状态的访问。</span><span class="sxs-lookup"><span data-stu-id="40b9a-161">Otherwise, you should lock access to the workflow instance state in your data store.</span></span> <span data-ttu-id="40b9a-162">通过调用 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState%2A>，或调用 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> 并将解锁参数设置为 `true`，可以对工作流实例状态进行解锁。</span><span class="sxs-lookup"><span data-stu-id="40b9a-162">The workflow instance state can be unlocked by a call to <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState%2A> or a call to <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> with the unlock parameter set to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="40b9a-163">下面的示例演示 `LoadWorkflowInstanceState` 方法的实现。</span><span class="sxs-lookup"><span data-stu-id="40b9a-163">The following example demonstrates an implementation of the `LoadWorkflowInstanceState` method.</span></span> <span data-ttu-id="40b9a-164">此示例摘自 FilePersistenceService.cs 文件中的“自定义持久性服务”示例。</span><span class="sxs-lookup"><span data-stu-id="40b9a-164">This example is from the Custom Persistence Service sample, from the FilePersistenceService.cs file.</span></span> <span data-ttu-id="40b9a-165">有关详细信息，请参阅 [自定义持久性服务示例](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d)。</span><span class="sxs-lookup"><span data-stu-id="40b9a-165">For more information, see [Custom Persistence Service Sample](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d).</span></span>  
  
 [!code-csharp[WF_Samples#266](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#266)]
 [!code-vb[WF_Samples#266](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#266)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RestoreFromDefaultSerializedForm">
      <MemberSignature Language="C#" Value="protected static System.Workflow.ComponentModel.Activity RestoreFromDefaultSerializedForm (byte[] activityBytes, System.Workflow.ComponentModel.Activity outerActivity);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Workflow.ComponentModel.Activity RestoreFromDefaultSerializedForm(unsigned int8[] activityBytes, class System.Workflow.ComponentModel.Activity outerActivity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.RestoreFromDefaultSerializedForm(System.Byte[],System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function RestoreFromDefaultSerializedForm (activityBytes As Byte(), outerActivity As Activity) As Activity" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Workflow::ComponentModel::Activity ^ RestoreFromDefaultSerializedForm(cli::array &lt;System::Byte&gt; ^ activityBytes, System::Workflow::ComponentModel::Activity ^ outerActivity);" />
      <MemberSignature Language="F#" Value="static member RestoreFromDefaultSerializedForm : byte[] * System.Workflow.ComponentModel.Activity -&gt; System.Workflow.ComponentModel.Activity" Usage="System.Workflow.Runtime.Hosting.WorkflowPersistenceService.RestoreFromDefaultSerializedForm (activityBytes, outerActivity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activityBytes" Type="System.Byte[]" />
        <Parameter Name="outerActivity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="activityBytes"><span data-ttu-id="40b9a-166"><see cref="T:System.Workflow.ComponentModel.Activity" /> 的序列化的窗体。</span><span class="sxs-lookup"><span data-stu-id="40b9a-166">The serialized form of <see cref="T:System.Workflow.ComponentModel.Activity" />.</span></span></param>
        <param name="outerActivity"><span data-ttu-id="40b9a-167">外部 <see cref="T:System.Workflow.ComponentModel.Activity" />，其中包含要还原的 <see cref="T:System.Workflow.ComponentModel.Activity" />。</span><span class="sxs-lookup"><span data-stu-id="40b9a-167">The outer <see cref="T:System.Workflow.ComponentModel.Activity" />, containing the <see cref="T:System.Workflow.ComponentModel.Activity" /> to restore.</span></span></param>
        <summary><span data-ttu-id="40b9a-168">从其序列化的窗体中还原 <see cref="T:System.Workflow.ComponentModel.Activity" />。</span><span class="sxs-lookup"><span data-stu-id="40b9a-168">Restores the <see cref="T:System.Workflow.ComponentModel.Activity" /> from its serialized form.</span></span></summary>
        <returns><span data-ttu-id="40b9a-169">已还原的 <see cref="T:System.Workflow.ComponentModel.Activity" />。</span><span class="sxs-lookup"><span data-stu-id="40b9a-169">The restored <see cref="T:System.Workflow.ComponentModel.Activity" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="40b9a-170">下面的示例演示 `RestoreFromDefaultSerializedForm` 方法的实现。</span><span class="sxs-lookup"><span data-stu-id="40b9a-170">The following example demonstrates an implementation of the `RestoreFromDefaultSerializedForm` method.</span></span> <span data-ttu-id="40b9a-171">此示例摘自 FilePersistenceService.cs 文件中的“自定义持久性服务”示例。</span><span class="sxs-lookup"><span data-stu-id="40b9a-171">This example is from the Custom Persistence Service sample, from the FilePersistenceService.cs file.</span></span> <span data-ttu-id="40b9a-172">有关详细信息，请参阅 [自定义持久性服务示例](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d)。</span><span class="sxs-lookup"><span data-stu-id="40b9a-172">For more information, see [Custom Persistence Service Sample](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d).</span></span>  
  
 [!code-csharp[WF_Samples#269](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#269)]
 [!code-vb[WF_Samples#269](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#269)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveCompletedContextActivity">
      <MemberSignature Language="C#" Value="protected internal abstract void SaveCompletedContextActivity (System.Workflow.ComponentModel.Activity activity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void SaveCompletedContextActivity(class System.Workflow.ComponentModel.Activity activity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Sub SaveCompletedContextActivity (activity As Activity)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract void SaveCompletedContextActivity(System::Workflow::ComponentModel::Activity ^ activity);" />
      <MemberSignature Language="F#" Value="abstract member SaveCompletedContextActivity : System.Workflow.ComponentModel.Activity -&gt; unit" Usage="workflowPersistenceService.SaveCompletedContextActivity activity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="activity"><span data-ttu-id="40b9a-173">表示已完成范围的 <see cref="T:System.Workflow.ComponentModel.Activity" />。</span><span class="sxs-lookup"><span data-stu-id="40b9a-173">An <see cref="T:System.Workflow.ComponentModel.Activity" /> that represents the completed scope.</span></span></param>
        <summary><span data-ttu-id="40b9a-174">在派生类中实现时，将指定的已完成作用域保存到数据存储区。</span><span class="sxs-lookup"><span data-stu-id="40b9a-174">When implemented in a derived class, saves the specified completed scope to a data store.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="40b9a-175">工作流运行时引擎保存已完成作用域活动的状态，以便实现补偿。</span><span class="sxs-lookup"><span data-stu-id="40b9a-175">The workflow runtime engine saves the state of completed scope activities in order to implement compensation.</span></span> <span data-ttu-id="40b9a-176">必须调用重载的 <xref:System.Workflow.ComponentModel.Activity.Save%2A> 方法之一，将 `activity` 序列化到 <xref:System.IO.Stream> 中；然后可以选择在将 <xref:System.IO.Stream> 写入到数据存储区之前，对其执行其他处理。</span><span class="sxs-lookup"><span data-stu-id="40b9a-176">You must call one of the overloaded <xref:System.Workflow.ComponentModel.Activity.Save%2A> methods to serialize `activity` into a <xref:System.IO.Stream>; you may then choose to additionally process the <xref:System.IO.Stream> before writing it to your data store.</span></span> <span data-ttu-id="40b9a-177">但是，在工作流运行时引擎调用 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A> 时，必须还原活动的相同副本。</span><span class="sxs-lookup"><span data-stu-id="40b9a-177">However, when the workflow runtime engine calls <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A>, you must restore an identical copy of the activity.</span></span>  
  
 <span data-ttu-id="40b9a-178">必须能够将已完成作用域与其涵盖的工作流实例关联，以便在工作流实例完成或终止时，在数据存储区中将作用域标记为不需要的作用域。</span><span class="sxs-lookup"><span data-stu-id="40b9a-178">You must be able to associate the completed scope with its enclosing workflow instance to mark the scope as unneeded in your data store when the workflow instance finishes or is terminated.</span></span> <span data-ttu-id="40b9a-179">因此，还应该保存与已完成作用域关联的工作流实例的 <xref:System.Guid>；这可以从与 <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> 关联的 <xref:System.Workflow.Runtime.WorkflowInstance> 的 `activity` 属性中获取。</span><span class="sxs-lookup"><span data-stu-id="40b9a-179">Therefore, you should also save the <xref:System.Guid> of the workflow instance that is associated with the completed scope; this can be obtained from the <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> property of the <xref:System.Workflow.Runtime.WorkflowInstance> associated with `activity`.</span></span>  
  
 <span data-ttu-id="40b9a-180"><xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A> 将已完成作用域的 <xref:System.Guid> 用作参数。</span><span class="sxs-lookup"><span data-stu-id="40b9a-180"><xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A> takes the <xref:System.Guid> of the completed scope as a parameter.</span></span> <span data-ttu-id="40b9a-181">因此，还必须保存与 <xref:System.Workflow.ComponentModel.ActivityExecutionContext.ContextGuid%2A> 关联的 `activity` 属性。</span><span class="sxs-lookup"><span data-stu-id="40b9a-181">Therefore, you must also save the <xref:System.Workflow.ComponentModel.ActivityExecutionContext.ContextGuid%2A> property associated with `activity`.</span></span> <span data-ttu-id="40b9a-182">此属性可以通过 <xref:System.Workflow.ComponentModel.Activity.ActivityContextGuidProperty> 的 `activity` 字段引用。</span><span class="sxs-lookup"><span data-stu-id="40b9a-182">This property can be referenced through the <xref:System.Workflow.ComponentModel.Activity.ActivityContextGuidProperty> field of `activity`.</span></span>  
  
 <span data-ttu-id="40b9a-183">如果实现使用持久存储区的持久性服务，则为了保持与工作流运行时引擎的内部状态的一致性，你应该参与工作流事务批处理，以便将实际写入持久存储区的操作延迟到提交工作流时。</span><span class="sxs-lookup"><span data-stu-id="40b9a-183">If you are implementing a persistence service that uses a durable store, to maintain consistency with the internal state of the workflow runtime engine, you should participate in workflow transaction batching to defer the actual write to your durable store until a workflow commit point.</span></span> <span data-ttu-id="40b9a-184">若要参与批处理，可将工作项添加到表示对数据库的挂起更改的 <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A> 属性，并在持久性服务中实现 <xref:System.Workflow.Runtime.IPendingWork> 接口。</span><span class="sxs-lookup"><span data-stu-id="40b9a-184">To participate in batching, add a work item to the <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A> property that represents the pending changes to the database, and implement the <xref:System.Workflow.Runtime.IPendingWork> interface in your persistence service.</span></span>  
  
 <span data-ttu-id="40b9a-185">如果无法将已完成作用域保存到数据存储区，则应引发带有适当错误消息的 <xref:System.Workflow.Runtime.Hosting.PersistenceException>。</span><span class="sxs-lookup"><span data-stu-id="40b9a-185">If you cannot save the completed scope to your data store, you should throw a <xref:System.Workflow.Runtime.Hosting.PersistenceException> with an appropriate error message.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="40b9a-186">下面的示例演示 `SaveCompletedContextActivity` 方法的实现。</span><span class="sxs-lookup"><span data-stu-id="40b9a-186">The following example demonstrates an implementation of the `SaveCompletedContextActivity` method.</span></span> <span data-ttu-id="40b9a-187">此示例摘自 FilePersistenceService.cs 文件中的“自定义持久性服务”示例。</span><span class="sxs-lookup"><span data-stu-id="40b9a-187">This example is from the Custom Persistence Service sample, from the FilePersistenceService.cs file.</span></span> <span data-ttu-id="40b9a-188">有关详细信息，请参阅 [自定义持久性服务示例](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d)。</span><span class="sxs-lookup"><span data-stu-id="40b9a-188">For more information, see [Custom Persistence Service Sample](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d).</span></span>  
  
 [!code-csharp[WF_Samples#268](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#268)]
 [!code-vb[WF_Samples#268](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#268)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveWorkflowInstanceState">
      <MemberSignature Language="C#" Value="protected internal abstract void SaveWorkflowInstanceState (System.Workflow.ComponentModel.Activity rootActivity, bool unlock);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void SaveWorkflowInstanceState(class System.Workflow.ComponentModel.Activity rootActivity, bool unlock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState(System.Workflow.ComponentModel.Activity,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Sub SaveWorkflowInstanceState (rootActivity As Activity, unlock As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract void SaveWorkflowInstanceState(System::Workflow::ComponentModel::Activity ^ rootActivity, bool unlock);" />
      <MemberSignature Language="F#" Value="abstract member SaveWorkflowInstanceState : System.Workflow.ComponentModel.Activity * bool -&gt; unit" Usage="workflowPersistenceService.SaveWorkflowInstanceState (rootActivity, unlock)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootActivity" Type="System.Workflow.ComponentModel.Activity" />
        <Parameter Name="unlock" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rootActivity"><span data-ttu-id="40b9a-189">工作流实例的根活动。</span><span class="sxs-lookup"><span data-stu-id="40b9a-189">The root activity of the workflow instance.</span></span></param>
        <param name="unlock"><span data-ttu-id="40b9a-190">如果工作流实例不应锁定，则为 <see langword="true" />；如果工作流实例应该锁定，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="40b9a-190"><see langword="true" /> if the workflow instance should not be locked; <see langword="false" /> if the workflow instance should be locked.</span></span></param>
        <summary><span data-ttu-id="40b9a-191">在派生类中实现时，将工作流实例状态保存到数据存储区。</span><span class="sxs-lookup"><span data-stu-id="40b9a-191">When implemented in a derived class, saves the workflow instance state to a data store.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="40b9a-192">必须调用重载的 <xref:System.Workflow.ComponentModel.Activity.Save%2A> 方法之一，将 `rootActivity` 序列化到 <xref:System.IO.Stream> 中。</span><span class="sxs-lookup"><span data-stu-id="40b9a-192">You must call one of the overloaded <xref:System.Workflow.ComponentModel.Activity.Save%2A> methods to serialize `rootActivity` into a <xref:System.IO.Stream>.</span></span> <span data-ttu-id="40b9a-193">然后，可以选择在将 <xref:System.IO.Stream> 写入到数据存储区之前，对其执行其他处理。</span><span class="sxs-lookup"><span data-stu-id="40b9a-193">You can then choose to additionally process the <xref:System.IO.Stream> before writing it to your data store.</span></span> <span data-ttu-id="40b9a-194">但是，在工作流运行时引擎调用 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A> 时，必须还原根活动的相同副本。</span><span class="sxs-lookup"><span data-stu-id="40b9a-194">However, when the workflow runtime engine calls <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A>, you must restore an identical copy of the root activity.</span></span> <span data-ttu-id="40b9a-195">如果无法将工作流实例状态保存到数据存储区，则应引发带有适当错误消息的 <xref:System.Workflow.Runtime.Hosting.PersistenceException>。</span><span class="sxs-lookup"><span data-stu-id="40b9a-195">If you cannot save the workflow instance state to your data store, you should throw a <xref:System.Workflow.Runtime.Hosting.PersistenceException> with an appropriate error message.</span></span>  
  
 <span data-ttu-id="40b9a-196">工作流运行时引擎提供锁定语义，限制对保存在数据存储区中的工作流实例状态的访问。</span><span class="sxs-lookup"><span data-stu-id="40b9a-196">The workflow runtime engine provides locking semantics to restrict access to a workflow instance state that is saved in the data store.</span></span> <span data-ttu-id="40b9a-197">这可以通过在多个宿主中运行并指向相同数据存储区的持久性服务进行访问。</span><span class="sxs-lookup"><span data-stu-id="40b9a-197">This can be accessed by the persistence services running in multiple hosts and pointing to the same data store.</span></span> <span data-ttu-id="40b9a-198">锁定语义旨在防止运行在两个不同的工作流运行时中的持久性服务同时将相同的工作流实例加载到内存中。</span><span class="sxs-lookup"><span data-stu-id="40b9a-198">The locking semantics are designed to prevent persistence services that run in two different workflow runtimes from loading the same workflow instance into memory at the same time.</span></span> <span data-ttu-id="40b9a-199">根据持久性服务所支持的环境类型，可以选择是否支持此功能。</span><span class="sxs-lookup"><span data-stu-id="40b9a-199">Depending on the type of environment your persistence service is designed to support, you can choose whether to support this functionality.</span></span> <span data-ttu-id="40b9a-200">如果选择支持运行时锁定语义，则在持久性服务试图保存先前已由其他持久性服务锁定的工作流实例状态的情况下，应引发 <xref:System.Workflow.Runtime.WorkflowOwnershipException>。</span><span class="sxs-lookup"><span data-stu-id="40b9a-200">If you choose to support the runtime locking semantics, then, if a persistence service tries to save a workflow instance state that has been previously locked by another persistence service, you should throw a <xref:System.Workflow.Runtime.WorkflowOwnershipException>.</span></span> <span data-ttu-id="40b9a-201">如果 `unlock` 为 `true`，则应在保存工作流实例状态后解除对其访问的锁定。</span><span class="sxs-lookup"><span data-stu-id="40b9a-201">If `unlock` is `true`, you should unlock access to the workflow instance state after you save it.</span></span>  
  
 <span data-ttu-id="40b9a-202"><xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A> 将工作流实例的 <xref:System.Guid> 用作参数。</span><span class="sxs-lookup"><span data-stu-id="40b9a-202"><xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A> takes the <xref:System.Guid> of the workflow instance as a parameter.</span></span> <span data-ttu-id="40b9a-203">因此，应该保存此 <xref:System.Guid>。</span><span class="sxs-lookup"><span data-stu-id="40b9a-203">Therefore, you should save this <xref:System.Guid>.</span></span> <span data-ttu-id="40b9a-204">还可以使用此 <xref:System.Guid>，将工作流实例与其已完成作用域的保存的状态关联。</span><span class="sxs-lookup"><span data-stu-id="40b9a-204">You can also use this <xref:System.Guid> to associate the workflow instance with the saved states of its completed scopes.</span></span> <span data-ttu-id="40b9a-205">必须执行此操作，因为在工作流实例完成后，必须能够将这些已完成作用域标记为不需要的作用域。</span><span class="sxs-lookup"><span data-stu-id="40b9a-205">You must do this because you must be able to mark these completed scopes as unneeded when the workflow instance completes.</span></span>  
  
 <span data-ttu-id="40b9a-206">当工作流实例完成或终止时，工作流运行时引擎最后一次调用 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A>。</span><span class="sxs-lookup"><span data-stu-id="40b9a-206">The workflow runtime engine calls <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> a final time when the workflow instance is completed or terminated.</span></span> <span data-ttu-id="40b9a-207">因此，如果 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus%2A> 等于 <xref:System.Workflow.Runtime.WorkflowStatus.Completed> 或 <xref:System.Workflow.Runtime.WorkflowStatus.Terminated>，则可以从数据存储区中安全地删除工作流实例及其所有关联的已完成作用域。</span><span class="sxs-lookup"><span data-stu-id="40b9a-207">Therefore, if <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus%2A> is equal to <xref:System.Workflow.Runtime.WorkflowStatus.Completed> or <xref:System.Workflow.Runtime.WorkflowStatus.Terminated>, you can safely delete the workflow instance and all its associated completed scopes from your data store.</span></span> <span data-ttu-id="40b9a-208">此外，可以订阅 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted> 或 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated> 事件，确定何时可以安全地删除与工作流实例关联的记录。</span><span class="sxs-lookup"><span data-stu-id="40b9a-208">Alternatively, you can subscribe to the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted> or <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated> events to determine when it is safe to delete records associated with the workflow instance.</span></span> <span data-ttu-id="40b9a-209">是否确实从数据存储区中删除记录取决于您的实现。</span><span class="sxs-lookup"><span data-stu-id="40b9a-209">Whether you actually delete the records from your data store depends on your implementation.</span></span>  
  
 <span data-ttu-id="40b9a-210">如果实现使用持久存储区的持久性服务，则为了保持与工作流运行时引擎的内部状态的一致性，您应该参与工作流事务批处理，以便将实际写入持久存储区的操作延迟到提交工作流时。</span><span class="sxs-lookup"><span data-stu-id="40b9a-210">If you implement a persistence service that uses a durable store, then, to maintain consistency with the internal state of the workflow runtime engine, you should participate in workflow transaction batching to defer the actual write to your durable store until a workflow commit point.</span></span> <span data-ttu-id="40b9a-211">若要参与批处理，可将表示对持久存储区的挂起更改的工作项添加到 <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A> 属性，并在持久性服务中实现 <xref:System.Workflow.Runtime.IPendingWork> 接口。</span><span class="sxs-lookup"><span data-stu-id="40b9a-211">To participate in batching, add a work item that represents the pending changes to your durable store to the <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A> property, and implement the <xref:System.Workflow.Runtime.IPendingWork> interface in your persistence service.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="40b9a-212">下面的示例演示 `SaveWorkflowInstanceState` 方法的实现。</span><span class="sxs-lookup"><span data-stu-id="40b9a-212">The following example demonstrates an implementation of the `SaveWorkflowInstanceState` method.</span></span> <span data-ttu-id="40b9a-213">此示例摘自 FilePersistenceService.cs 文件中的“自定义持久性服务”示例。</span><span class="sxs-lookup"><span data-stu-id="40b9a-213">This example is from the Custom Persistence Service sample, from the FilePersistenceService.cs file.</span></span> <span data-ttu-id="40b9a-214">有关详细信息，请参阅 [自定义持久性服务示例](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d)。</span><span class="sxs-lookup"><span data-stu-id="40b9a-214">For more information, see [Custom Persistence Service Sample](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d).</span></span>  
  
 [!code-csharp[WF_Samples#264](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#264)]
 [!code-vb[WF_Samples#264](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#264)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnloadOnIdle">
      <MemberSignature Language="C#" Value="protected internal abstract bool UnloadOnIdle (System.Workflow.ComponentModel.Activity activity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool UnloadOnIdle(class System.Workflow.ComponentModel.Activity activity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnloadOnIdle(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Function UnloadOnIdle (activity As Activity) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract bool UnloadOnIdle(System::Workflow::ComponentModel::Activity ^ activity);" />
      <MemberSignature Language="F#" Value="abstract member UnloadOnIdle : System.Workflow.ComponentModel.Activity -&gt; bool" Usage="workflowPersistenceService.UnloadOnIdle activity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="activity"><span data-ttu-id="40b9a-215">表示已完成范围的 <see cref="T:System.Workflow.ComponentModel.Activity" />。</span><span class="sxs-lookup"><span data-stu-id="40b9a-215">An <see cref="T:System.Workflow.ComponentModel.Activity" /> that represents the completed scope.</span></span></param>
        <summary><span data-ttu-id="40b9a-216">确定在工作流空闲时是否将其卸载。</span><span class="sxs-lookup"><span data-stu-id="40b9a-216">Determines whether a workflow should be unloaded when idle.</span></span></summary>
        <returns><span data-ttu-id="40b9a-217">如果为 <see langword="true" />，则工作流运行时引擎将在指定的工作流空闲时将其卸载。</span><span class="sxs-lookup"><span data-stu-id="40b9a-217">If <see langword="true" />, the workflow runtime engine unloads the specified workflow when it becomes idle.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="40b9a-218">下面的示例演示 `UnloadOnIdle` 方法的实现。</span><span class="sxs-lookup"><span data-stu-id="40b9a-218">The following example demonstrates an implementation of the `UnloadOnIdle` method.</span></span> <span data-ttu-id="40b9a-219">此示例摘自 FilePersistenceService.cs 文件中的“自定义持久性服务”示例。</span><span class="sxs-lookup"><span data-stu-id="40b9a-219">This example is from the Custom Persistence Service sample, from the FilePersistenceService.cs file.</span></span> <span data-ttu-id="40b9a-220">有关详细信息，请参阅 [自定义持久性服务示例](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d)。</span><span class="sxs-lookup"><span data-stu-id="40b9a-220">For more information, see [Custom Persistence Service Sample](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d).</span></span>  
  
 [!code-csharp[WF_Samples#270](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#270)]
 [!code-vb[WF_Samples#270](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#270)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnlockWorkflowInstanceState">
      <MemberSignature Language="C#" Value="protected internal abstract void UnlockWorkflowInstanceState (System.Workflow.ComponentModel.Activity rootActivity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void UnlockWorkflowInstanceState(class System.Workflow.ComponentModel.Activity rootActivity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Sub UnlockWorkflowInstanceState (rootActivity As Activity)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract void UnlockWorkflowInstanceState(System::Workflow::ComponentModel::Activity ^ rootActivity);" />
      <MemberSignature Language="F#" Value="abstract member UnlockWorkflowInstanceState : System.Workflow.ComponentModel.Activity -&gt; unit" Usage="workflowPersistenceService.UnlockWorkflowInstanceState rootActivity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootActivity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="rootActivity"><span data-ttu-id="40b9a-221">工作流实例的根活动。</span><span class="sxs-lookup"><span data-stu-id="40b9a-221">The root activity of the workflow instance.</span></span></param>
        <summary><span data-ttu-id="40b9a-222">在派生类中重写时，解除对工作流实例状态的锁定。</span><span class="sxs-lookup"><span data-stu-id="40b9a-222">When overridden in a derived class, unlocks the workflow instance state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="40b9a-223">此方法是抽象的，因此它不包含对锁定和解锁的默认实现。</span><span class="sxs-lookup"><span data-stu-id="40b9a-223">This method is abstract, so it does not contain a default implementation on locking and unlocking.</span></span>  
  
 <span data-ttu-id="40b9a-224">实现自定义持久性服务时，如果要实现锁定方案，则需要重写此方法，并在 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> 方法中提供根据解锁参数的值进行锁定-解锁的机制。</span><span class="sxs-lookup"><span data-stu-id="40b9a-224">While implementing a custom persistence service, if you want to implement a locking scheme you will need to override this method and provide a locking-unlocking mechanism in the <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> method based on the value of the unlock parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="40b9a-225">下面的示例演示 `UnlockWorkflowInstanceState` 方法的实现。</span><span class="sxs-lookup"><span data-stu-id="40b9a-225">The following example demonstrates an implementation of the `UnlockWorkflowInstanceState` method.</span></span> <span data-ttu-id="40b9a-226">此示例摘自 FilePersistenceService.cs 文件中的“自定义持久性服务”示例。</span><span class="sxs-lookup"><span data-stu-id="40b9a-226">This example is from the Custom Persistence Service sample, from the FilePersistenceService.cs file.</span></span> <span data-ttu-id="40b9a-227">有关详细信息，请参阅 [自定义持久性服务示例](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d)。</span><span class="sxs-lookup"><span data-stu-id="40b9a-227">For more information, see [Custom Persistence Service Sample](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d).</span></span>  
  
 [!code-csharp[WF_Samples#267](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#267)]
 [!code-vb[WF_Samples#267](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#267)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
