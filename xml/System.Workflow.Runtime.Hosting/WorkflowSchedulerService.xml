<Type Name="WorkflowSchedulerService" FullName="System.Workflow.Runtime.Hosting.WorkflowSchedulerService">
  <Metadata><Meta Name="ms.openlocfilehash" Value="dd194e58ac5961862217d375283eb17efbffcd10" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86636504" /></Metadata><TypeSignature Language="C#" Value="public abstract class WorkflowSchedulerService : System.Workflow.Runtime.Hosting.WorkflowRuntimeService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit WorkflowSchedulerService extends System.Workflow.Runtime.Hosting.WorkflowRuntimeService" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Runtime.Hosting.WorkflowSchedulerService" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WorkflowSchedulerService&#xA;Inherits WorkflowRuntimeService" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowSchedulerService abstract : System::Workflow::Runtime::Hosting::WorkflowRuntimeService" />
  <TypeSignature Language="F#" Value="type WorkflowSchedulerService = class&#xA;    inherit WorkflowRuntimeService" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.Runtime</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Workflow.Runtime.Hosting.WorkflowRuntimeService</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供一种机制，通过该机制可实现您自己的线程池，从而执行工作流并管理内存中计时器注册和事件。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 对于创建在工作流运行时引擎宿主上运行工作流实例的线程的类，<xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService> 是所有这些类的基类。 包括 <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService> 和 <xref:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService>。  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>当从 <see cref="T:System.Workflow.Runtime.Hosting.WorkflowSchedulerService" /> 继承时，必须重写以下成员：<see cref="M:System.Workflow.Runtime.Hosting.WorkflowSchedulerService.Cancel(System.Guid)" />、<see cref="M:System.Workflow.Runtime.Hosting.WorkflowSchedulerService.Schedule(System.Threading.WaitCallback,System.Guid)" /> 和 <see cref="M:System.Workflow.Runtime.Hosting.WorkflowSchedulerService.Schedule(System.Threading.WaitCallback,System.Guid,System.DateTime,System.Guid)" />。</para></block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WorkflowSchedulerService ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowSchedulerService.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WorkflowSchedulerService();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>在派生类中实现时，初始化 <see cref="T:System.Workflow.Runtime.Hosting.WorkflowSchedulerService" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示如何创建 <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> 对象（继承自 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService>）的实例并将其添加到运行时。 此示例摘自 Program.cs 文件中的“嵌套异常处理程序 SDK”示例。 有关详细信息，请参阅 [嵌套异常处理程序示例](https://msdn.microsoft.com/library/d1da0209-842b-41c8-9b7c-0cbaa1034265)。  
  
 [!code-csharp[WF_Samples#161](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets11.cs#161)]
 [!code-vb[WF_Samples#161](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets11.vb#161)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="protected internal abstract void Cancel (Guid timerId);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void Cancel(valuetype System.Guid timerId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowSchedulerService.Cancel(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Sub Cancel (timerId As Guid)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract void Cancel(Guid timerId);" />
      <MemberSignature Language="F#" Value="abstract member Cancel : Guid -&gt; unit" Usage="workflowSchedulerService.Cancel timerId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timerId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="timerId">与要取消的现有计划线程关联的 <see cref="T:System.Guid" />。</param>
        <summary>在派生类中重写时，取消具有给定 <paramref name="timerId" /> 的计划工作项。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService.Cancel%2A> 从挂起工作项队列中移除先前用于计划工作流实例的请求。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Schedule">
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>由运行时调用，用于请求新的线程来运行工作流实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Schedule">
      <MemberSignature Language="C#" Value="protected internal abstract void Schedule (System.Threading.WaitCallback callback, Guid workflowInstanceId);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void Schedule(class System.Threading.WaitCallback callback, valuetype System.Guid workflowInstanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowSchedulerService.Schedule(System.Threading.WaitCallback,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Sub Schedule (callback As WaitCallback, workflowInstanceId As Guid)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract void Schedule(System::Threading::WaitCallback ^ callback, Guid workflowInstanceId);" />
      <MemberSignature Language="F#" Value="abstract member Schedule : System.Threading.WaitCallback * Guid -&gt; unit" Usage="workflowSchedulerService.Schedule (callback, workflowInstanceId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.WaitCallback" />
        <Parameter Name="workflowInstanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="callback">一个 <see cref="T:System.Threading.WaitCallback" /> 多路广播委托，表示要运行的方法。</param>
        <param name="workflowInstanceId">表示工作流实例的 <see cref="T:System.Guid" />。</param>
        <summary>在派生类中重写时，此方法由运行时调用，用于计划特定实例 ID 的工作项（回调）。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Threading.WaitCallback> 构造函数创建在新线程中运行的委托方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Schedule">
      <MemberSignature Language="C#" Value="protected internal abstract void Schedule (System.Threading.WaitCallback callback, Guid workflowInstanceId, DateTime whenUtc, Guid timerId);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void Schedule(class System.Threading.WaitCallback callback, valuetype System.Guid workflowInstanceId, valuetype System.DateTime whenUtc, valuetype System.Guid timerId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowSchedulerService.Schedule(System.Threading.WaitCallback,System.Guid,System.DateTime,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Sub Schedule (callback As WaitCallback, workflowInstanceId As Guid, whenUtc As DateTime, timerId As Guid)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract void Schedule(System::Threading::WaitCallback ^ callback, Guid workflowInstanceId, DateTime whenUtc, Guid timerId);" />
      <MemberSignature Language="F#" Value="abstract member Schedule : System.Threading.WaitCallback * Guid * DateTime * Guid -&gt; unit" Usage="workflowSchedulerService.Schedule (callback, workflowInstanceId, whenUtc, timerId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.WaitCallback" />
        <Parameter Name="workflowInstanceId" Type="System.Guid" />
        <Parameter Name="whenUtc" Type="System.DateTime" />
        <Parameter Name="timerId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="callback">一个 <see cref="T:System.Threading.WaitCallback" /> 多路广播委托，表示要运行的方法。</param>
        <param name="workflowInstanceId">一个 <see cref="T:System.Guid" />，表示要添加的工作流实例。</param>
        <param name="whenUtc">开始运行工作流项时的 <see cref="T:System.DateTime" />。</param>
        <param name="timerId">表示计划计时器的 <see cref="T:System.Guid" />。</param>
        <summary>在派生类中重写时，此方法由运行时调用，用于计划在给定时间 (<see cref="T:System.DateTime" />) 执行的特定工作流实例的工作项（回调）。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
