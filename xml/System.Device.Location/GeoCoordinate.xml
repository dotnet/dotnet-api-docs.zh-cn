<Type Name="GeoCoordinate" FullName="System.Device.Location.GeoCoordinate">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8d81ede18c8a93f5297e76254529eca0a6f0cbaf" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89681913" /></Metadata><TypeSignature Language="C#" Value="public class GeoCoordinate : IEquatable&lt;System.Device.Location.GeoCoordinate&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit GeoCoordinate extends System.Object implements class System.IEquatable`1&lt;class System.Device.Location.GeoCoordinate&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Device.Location.GeoCoordinate" />
  <TypeSignature Language="VB.NET" Value="Public Class GeoCoordinate&#xA;Implements IEquatable(Of GeoCoordinate)" />
  <TypeSignature Language="C++ CLI" Value="public ref class GeoCoordinate : IEquatable&lt;System::Device::Location::GeoCoordinate ^&gt;" />
  <TypeSignature Language="F#" Value="type GeoCoordinate = class&#xA;    interface IEquatable&lt;GeoCoordinate&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Device</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Device.Location.GeoCoordinate&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>表示由纬度和经度坐标确定的地理位置。 也可以包括海拔高度、精度、速度和航向信息。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Device</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Device.Location.GeoCoordinate" /> 的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GeoCoordinate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Device.Location.GeoCoordinate.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GeoCoordinate();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Device</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Device.Location.GeoCoordinate" /> 的新实例，不设置数据字段。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所有数据字段均设置为 <xref:System.Double.NaN> 。  的新实例 <xref:System.Device.Location.GeoCoordinate> 等效于 <xref:System.Device.Location.GeoCoordinate.Unknown> 。  
  
 此构造函数应用于序列化。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GeoCoordinate (double latitude, double longitude);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 latitude, float64 longitude) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Device.Location.GeoCoordinate.#ctor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (latitude As Double, longitude As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GeoCoordinate(double latitude, double longitude);" />
      <MemberSignature Language="F#" Value="new System.Device.Location.GeoCoordinate : double * double -&gt; System.Device.Location.GeoCoordinate" Usage="new System.Device.Location.GeoCoordinate (latitude, longitude)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Device</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="latitude" Type="System.Double" />
        <Parameter Name="longitude" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="latitude">位置所在的纬度。 范围可以是从 -90.0 到 90.0。</param>
        <param name="longitude">位置所在的经度。 范围可以是从 -180.0 到 180.0。</param>
        <summary>从纬度和经度数据初始化 <see cref="T:System.Device.Location.GeoCoordinate" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 纬度和经度值必须对应于地球上的实际位置。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">纬度或经度超出范围。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GeoCoordinate (double latitude, double longitude, double altitude);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 latitude, float64 longitude, float64 altitude) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Device.Location.GeoCoordinate.#ctor(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (latitude As Double, longitude As Double, altitude As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GeoCoordinate(double latitude, double longitude, double altitude);" />
      <MemberSignature Language="F#" Value="new System.Device.Location.GeoCoordinate : double * double * double -&gt; System.Device.Location.GeoCoordinate" Usage="new System.Device.Location.GeoCoordinate (latitude, longitude, altitude)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Device</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="latitude" Type="System.Double" />
        <Parameter Name="longitude" Type="System.Double" />
        <Parameter Name="altitude" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="latitude">纬度。 范围可以是从 -90.0 到 90.0。</param>
        <param name="longitude">经度。 范围可以是从 -180.0 到 180.0。</param>
        <param name="altitude">海拔高度（以米为单位）。 可以是负值、0、正值；如果未知，则为 <see cref="F:System.Double.NaN" />。</param>
        <summary>从纬度、经度和海拔高度数据初始化 <see cref="T:System.Device.Location.GeoCoordinate" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 纬度和经度值必须对应于地球上的实际位置。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="latitude" />、<paramref name="longitude" /> 或 <paramref name="altitude" /> 超出范围。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GeoCoordinate (double latitude, double longitude, double altitude, double horizontalAccuracy, double verticalAccuracy, double speed, double course);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 latitude, float64 longitude, float64 altitude, float64 horizontalAccuracy, float64 verticalAccuracy, float64 speed, float64 course) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Device.Location.GeoCoordinate.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (latitude As Double, longitude As Double, altitude As Double, horizontalAccuracy As Double, verticalAccuracy As Double, speed As Double, course As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GeoCoordinate(double latitude, double longitude, double altitude, double horizontalAccuracy, double verticalAccuracy, double speed, double course);" />
      <MemberSignature Language="F#" Value="new System.Device.Location.GeoCoordinate : double * double * double * double * double * double * double -&gt; System.Device.Location.GeoCoordinate" Usage="new System.Device.Location.GeoCoordinate (latitude, longitude, altitude, horizontalAccuracy, verticalAccuracy, speed, course)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Device</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="latitude" Type="System.Double" />
        <Parameter Name="longitude" Type="System.Double" />
        <Parameter Name="altitude" Type="System.Double" />
        <Parameter Name="horizontalAccuracy" Type="System.Double" />
        <Parameter Name="verticalAccuracy" Type="System.Double" />
        <Parameter Name="speed" Type="System.Double" />
        <Parameter Name="course" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="latitude">位置所在的纬度。 范围可以是从 -90.0 到 90.0。</param>
        <param name="longitude">位置所在的经度。 范围可以是从 -180.0 到 180.0。</param>
        <param name="altitude">海拔高度（以米为单位）。 可以是负值、0、正值；如果未知，则为 <see cref="F:System.Double.NaN" />。</param>
        <param name="horizontalAccuracy">纬度和经度坐标的精度（以米为单位）。 必须高于或等于 0。 如果为此构造函数提供值 0，则 <see cref="P:System.Device.Location.GeoCoordinate.HorizontalAccuracy" /> 属性将设置为 <see cref="F:System.Double.NaN" />。</param>
        <param name="verticalAccuracy">海拔高度的精度（以米为单位）。 必须高于或等于 0。 如果为此构造函数提供值 0，则 <see cref="P:System.Device.Location.GeoCoordinate.VerticalAccuracy" /> 属性将设置为 <see cref="F:System.Double.NaN" />。</param>
        <param name="speed">速度以米/秒为单位进行测量。 可以是负值、0、正值；如果未知，则为 <see cref="F:System.Double.NaN" />。  负的速度可以指示反向移动。</param>
        <param name="course">移动的方向而不是方位。 此参数以相对于真北的度数为单位进行测量。 范围必须是从 0 到 360.0，或者为 <see cref="F:System.Double.NaN" />。</param>
        <summary>根据纬度、经度、海拔高度、水平精度、垂直经度、速度和航向初始化 <see cref="T:System.Device.Location.GeoCoordinate" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="latitude" />、<paramref name="longitude" />、<paramref name="horizontalAccuracy" />、 <paramref name="verticalAccuracy," /> 或 <paramref name="course" /> 超出范围。</exception>
      </Docs>
    </Member>
    <Member MemberName="Altitude">
      <MemberSignature Language="C#" Value="public double Altitude { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Altitude" />
      <MemberSignature Language="DocId" Value="P:System.Device.Location.GeoCoordinate.Altitude" />
      <MemberSignature Language="VB.NET" Value="Public Property Altitude As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Altitude { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Altitude : double with get, set" Usage="System.Device.Location.GeoCoordinate.Altitude" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Device</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Device.Location.GeoCoordinate" /> 的海拔高度（以米为单位）。</summary>
        <value>海拔高度（以米为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 海拔高度是相对于海平面的优先级。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Course">
      <MemberSignature Language="C#" Value="public double Course { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Course" />
      <MemberSignature Language="DocId" Value="P:System.Device.Location.GeoCoordinate.Course" />
      <MemberSignature Language="VB.NET" Value="Public Property Course As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Course { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Course : double with get, set" Usage="System.Device.Location.GeoCoordinate.Course" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Device</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置行进方向（以相对于真北的度数为单位）。</summary>
        <value>行进方向（以相对于真北的度数为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有效范围包含0.0 到360.0 之间的值， `Double.NaN` 如果未定义标题，则为。  
  
   
  
## Examples  
 下面的示例输出 <xref:System.Device.Location.GeoCoordinate.Course%2A> <xref:System.Device.Location.GeoCoordinate.Speed%2A> 当前位置的的和属性 <xref:System.Device.Location.GeoCoordinate> 。  
  
 [!code-csharp[System.Device.Location.CourseAndSpeed#2](~/samples/snippets/csharp/VS_Snippets_Misc/system.device.location.courseandspeed/cs/courseandspeed.cs#2)]
 [!code-vb[System.Device.Location.CourseAndSpeed#2](~/samples/snippets/visualbasic/VS_Snippets_Misc/system.device.location.courseandspeed/vb/courseandspeed.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">对 <see cref="P:System.Device.Location.GeoCoordinate.Course" /> 的设定超出了有效范围。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Device</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>纯粹基于纬度和经度确定两个 <see cref="T:System.Device.Location.GeoCoordinate" /> 对象是否等效。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Device.Location.GeoCoordinate other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.Device.Location.GeoCoordinate other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Device.Location.GeoCoordinate.Equals(System.Device.Location.GeoCoordinate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As GeoCoordinate) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Device::Location::GeoCoordinate ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Device.Location.GeoCoordinate -&gt; bool" Usage="geoCoordinate.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Device</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Device.Location.GeoCoordinate" />
      </Parameters>
      <Docs>
        <param name="other">要与调用对象进行比较的 <see cref="T:System.Device.Location.GeoCoordinate" /> 对象。</param>
        <summary>完全基于纬度和经度确定 <see cref="T:System.Device.Location.GeoCoordinate" /> 对象是否与参数等效。</summary>
        <returns>如果 <see cref="T:System.Device.Location.GeoCoordinate" /> 对象相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 等效 <xref:System.Device.Location.GeoCoordinate> 对象具有相同的 <xref:System.Device.Location.GeoCoordinate.Latitude%2A> 和 <xref:System.Device.Location.GeoCoordinate.Longitude%2A> 属性。 <xref:System.Device.Location.GeoCoordinate.Altitude%2A>、 <xref:System.Device.Location.GeoCoordinate.HorizontalAccuracy%2A> 和 <xref:System.Device.Location.GeoCoordinate.VerticalAccuracy%2A> 属性不用于确定等效性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Device.Location.GeoCoordinate.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="geoCoordinate.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Device</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">要与 <see cref="T:System.Device.Location.GeoCoordinate" /> 进行比较的对象。</param>
        <summary>纯粹基于纬度和经度确定指定的 <see cref="T:System.Device.Location.GeoCoordinate" /> 是否等于当前 <see cref="T:System.Device.Location.GeoCoordinate" />。</summary>
        <returns>如果 <see cref="T:System.Device.Location.GeoCoordinate" /> 对象相等，则为 <see langword="true" />，否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 等效 <xref:System.Device.Location.GeoCoordinate> 对象具有相同的 <xref:System.Device.Location.GeoCoordinate.Latitude%2A> 和 <xref:System.Device.Location.GeoCoordinate.Longitude%2A> 属性。 <xref:System.Device.Location.GeoCoordinate.Altitude%2A>、 <xref:System.Device.Location.GeoCoordinate.HorizontalAccuracy%2A> 和 <xref:System.Device.Location.GeoCoordinate.VerticalAccuracy%2A> 属性不用于确定等效性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDistanceTo">
      <MemberSignature Language="C#" Value="public double GetDistanceTo (System.Device.Location.GeoCoordinate other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 GetDistanceTo(class System.Device.Location.GeoCoordinate other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Device.Location.GeoCoordinate.GetDistanceTo(System.Device.Location.GeoCoordinate)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDistanceTo (other As GeoCoordinate) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GetDistanceTo(System::Device::Location::GeoCoordinate ^ other);" />
      <MemberSignature Language="F#" Value="member this.GetDistanceTo : System.Device.Location.GeoCoordinate -&gt; double" Usage="geoCoordinate.GetDistanceTo other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Device</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Device.Location.GeoCoordinate" />
      </Parameters>
      <Docs>
        <param name="other">要计算到其距离的位置的 <see cref="T:System.Device.Location.GeoCoordinate" />。</param>
        <summary>返回由此 <see cref="T:System.Device.Location.GeoCoordinate" /> 和另一个指定 <see cref="T:System.Device.Location.GeoCoordinate" /> 指定的纬度和精度坐标之间的距离。</summary>
        <returns>两个坐标之间的距离（以米为单位）。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 半正矢公式用于计算距离。  半正矢公式是地球曲率的一种，但采用球形地球而不是椭圆体。 对于长距离，半正矢公式引入了小于0.1% 的错误。  
  
 海拔不用于计算距离。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Device.Location.GeoCoordinate.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="geoCoordinate.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Device</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>作为 <see cref="T:System.Device.Location.GeoCoordinate" /> 的哈希函数。</summary>
        <returns>当前 <see cref="T:System.Device.Location.GeoCoordinate" /> 的哈希代码。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Device.Location.GeoCoordinate> 等效对象具有相同的哈希代码。 等效 <xref:System.Device.Location.GeoCoordinate> 对象具有相同的 <xref:System.Device.Location.GeoCoordinate.Latitude%2A> 和 <xref:System.Device.Location.GeoCoordinate.Longitude%2A> 属性。 <xref:System.Device.Location.GeoCoordinate.Altitude%2A>、 <xref:System.Device.Location.GeoCoordinate.HorizontalAccuracy%2A> 和 <xref:System.Device.Location.GeoCoordinate.VerticalAccuracy%2A> 属性不用于确定等效性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HorizontalAccuracy">
      <MemberSignature Language="C#" Value="public double HorizontalAccuracy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 HorizontalAccuracy" />
      <MemberSignature Language="DocId" Value="P:System.Device.Location.GeoCoordinate.HorizontalAccuracy" />
      <MemberSignature Language="VB.NET" Value="Public Property HorizontalAccuracy As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double HorizontalAccuracy { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.HorizontalAccuracy : double with get, set" Usage="System.Device.Location.GeoCoordinate.HorizontalAccuracy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Device</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置由 <see cref="T:System.Device.Location.GeoCoordinate" /> 给定的纬度和经度的精度（以米为单位）。</summary>
        <value>纬度和经度的精度（以米为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 准确性可以视为纬度和经度数据的确定性半径。  一个圆区，其准确性为半径，纬度和经度坐标作为中心包含实际位置。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">对 <see cref="P:System.Device.Location.GeoCoordinate.HorizontalAccuracy" /> 的设定超出了有效范围。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsUnknown">
      <MemberSignature Language="C#" Value="public bool IsUnknown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUnknown" />
      <MemberSignature Language="DocId" Value="P:System.Device.Location.GeoCoordinate.IsUnknown" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUnknown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUnknown { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsUnknown : bool" Usage="System.Device.Location.GeoCoordinate.IsUnknown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Device</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 <see cref="T:System.Device.Location.GeoCoordinate" /> 是否未包含纬度或经度数据。</summary>
        <value>如果 <see cref="T:System.Device.Location.GeoCoordinate" /> 未包含纬度或经度数据，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Device.Location.GeoCoordinate>不包含纬度或经度数据的不等于 <xref:System.Device.Location.GeoCoordinate.Unknown> 。  
  
   
  
## Examples  
 下面的代码示例验证是否在 <xref:System.Device.Location.GeoCoordinate> <xref:System.Device.Location.GeoCoordinate.Unknown> 打印出其纬度和经度之前与位置对应的。  
  
 [!code-csharp[System.Device.Location.GetLocationDataSyncHandleUnknown#1](~/samples/snippets/csharp/VS_Snippets_Misc/system.device.location.getlocationdatasynchandleunknown/cs/getlocationdatasynchandleunknown.cs#1)]
 [!code-vb[System.Device.Location.GetLocationDataSyncHandleUnknown#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/system.device.location.getlocationdatasynchandleunknown/vb/GetLocationDataSyncHandleUnknown.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Latitude">
      <MemberSignature Language="C#" Value="public double Latitude { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Latitude" />
      <MemberSignature Language="DocId" Value="P:System.Device.Location.GeoCoordinate.Latitude" />
      <MemberSignature Language="VB.NET" Value="Public Property Latitude As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Latitude { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Latitude : double with get, set" Usage="System.Device.Location.GeoCoordinate.Latitude" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Device</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Device.Location.GeoCoordinate" /> 的纬度。</summary>
        <value>位置的纬度。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 纬度范围可以是从-90.0 到90.0 的范围。 纬度从赤道中按北或南部计量。 正值是赤道的北，负值是赤道的南部。  
  
   
  
## Examples  
 下面的示例打印从获取的纬度和经度值 <xref:System.Device.Location.GeoCoordinate> 。  
  
 [!code-csharp[System.Device.Location.LocationEvent1#1](~/samples/snippets/csharp/VS_Snippets_Misc/system.device.location.locationevent1/cs/locationevent.cs#1)]
 [!code-vb[System.Device.Location.LocationEvent1#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/system.device.location.locationevent1/vb/locationevent.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">对 <see cref="P:System.Device.Location.GeoCoordinate.Latitude" /> 的设定超出了有效范围。</exception>
      </Docs>
    </Member>
    <Member MemberName="Longitude">
      <MemberSignature Language="C#" Value="public double Longitude { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Longitude" />
      <MemberSignature Language="DocId" Value="P:System.Device.Location.GeoCoordinate.Longitude" />
      <MemberSignature Language="VB.NET" Value="Public Property Longitude As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Longitude { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Longitude : double with get, set" Usage="System.Device.Location.GeoCoordinate.Longitude" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Device</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Device.Location.GeoCoordinate" /> 的经度。</summary>
        <value>经度。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 该经度的范围为-180.0 到180.0。 经度的单位为东或经线为质数。 负值为质数经线的西部，正值为质数经线的 east。  
  
   
  
## Examples  
 下面的示例打印从获取的纬度和经度值 <xref:System.Device.Location.GeoCoordinate> 。  
  
 [!code-csharp[System.Device.Location.LocationEvent1#1](~/samples/snippets/csharp/VS_Snippets_Misc/system.device.location.locationevent1/cs/locationevent.cs#1)]
 [!code-vb[System.Device.Location.LocationEvent1#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/system.device.location.locationevent1/vb/locationevent.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">对 <see cref="P:System.Device.Location.GeoCoordinate.Longitude" /> 的设定超出了有效范围。</exception>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Device.Location.GeoCoordinate left, System.Device.Location.GeoCoordinate right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Device.Location.GeoCoordinate left, class System.Device.Location.GeoCoordinate right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Device.Location.GeoCoordinate.op_Equality(System.Device.Location.GeoCoordinate,System.Device.Location.GeoCoordinate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As GeoCoordinate, right As GeoCoordinate) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Device::Location::GeoCoordinate ^ left, System::Device::Location::GeoCoordinate ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Device.Location.GeoCoordinate * System.Device.Location.GeoCoordinate -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Device</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Device.Location.GeoCoordinate" />
        <Parameter Name="right" Type="System.Device.Location.GeoCoordinate" />
      </Parameters>
      <Docs>
        <param name="left">要比较的第一个 <see cref="T:System.Device.Location.GeoCoordinate" />。</param>
        <param name="right">要比较的第二个 <see cref="T:System.Device.Location.GeoCoordinate" />。</param>
        <summary>确定两个 <see cref="T:System.Device.Location.GeoCoordinate" /> 对象是否指向相同的位置。</summary>
        <returns>如果确定两个 <see cref="T:System.Device.Location.GeoCoordinate" /> 对象相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 等效 <xref:System.Device.Location.GeoCoordinate> 对象具有相同的 <xref:System.Device.Location.GeoCoordinate.Latitude%2A> 和 <xref:System.Device.Location.GeoCoordinate.Longitude%2A> 属性。 <xref:System.Device.Location.GeoCoordinate.Altitude%2A>、 <xref:System.Device.Location.GeoCoordinate.HorizontalAccuracy%2A> 和 <xref:System.Device.Location.GeoCoordinate.VerticalAccuracy%2A> 属性不用于确定等效性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Device.Location.GeoCoordinate left, System.Device.Location.GeoCoordinate right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Device.Location.GeoCoordinate left, class System.Device.Location.GeoCoordinate right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Device.Location.GeoCoordinate.op_Inequality(System.Device.Location.GeoCoordinate,System.Device.Location.GeoCoordinate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As GeoCoordinate, right As GeoCoordinate) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Device::Location::GeoCoordinate ^ left, System::Device::Location::GeoCoordinate ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Device.Location.GeoCoordinate * System.Device.Location.GeoCoordinate -&gt; bool" Usage="System.Device.Location.GeoCoordinate.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Device</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Device.Location.GeoCoordinate" />
        <Parameter Name="right" Type="System.Device.Location.GeoCoordinate" />
      </Parameters>
      <Docs>
        <param name="left">要比较的第一个 <see cref="T:System.Device.Location.GeoCoordinate" />。</param>
        <param name="right">要比较的第二个 <see cref="T:System.Device.Location.GeoCoordinate" />。</param>
        <summary>确定两个 <see cref="T:System.Device.Location.GeoCoordinate" /> 对象是否对应于不同的位置。</summary>
        <returns>如果确定两个 <see cref="T:System.Device.Location.GeoCoordinate" /> 对象不相同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 等效 <xref:System.Device.Location.GeoCoordinate> 对象具有相同的 <xref:System.Device.Location.GeoCoordinate.Latitude%2A> 和 <xref:System.Device.Location.GeoCoordinate.Longitude%2A> 属性。 <xref:System.Device.Location.GeoCoordinate.Altitude%2A>、 <xref:System.Device.Location.GeoCoordinate.HorizontalAccuracy%2A> 和 <xref:System.Device.Location.GeoCoordinate.VerticalAccuracy%2A> 属性不用于确定等效性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Speed">
      <MemberSignature Language="C#" Value="public double Speed { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Speed" />
      <MemberSignature Language="DocId" Value="P:System.Device.Location.GeoCoordinate.Speed" />
      <MemberSignature Language="VB.NET" Value="Public Property Speed As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Speed { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Speed : double with get, set" Usage="System.Device.Location.GeoCoordinate.Speed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Device</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置以米/秒为单位的速度。</summary>
        <value>以米/秒为单位的速度。 速度必须大于或等于零，或为 <see cref="F:System.Double.NaN" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例输出 <xref:System.Device.Location.GeoCoordinate.Course%2A> <xref:System.Device.Location.GeoCoordinate.Speed%2A> 当前位置的的和属性 <xref:System.Device.Location.GeoCoordinate> 。  
  
 [!code-csharp[System.Device.Location.CourseAndSpeed#2](~/samples/snippets/csharp/VS_Snippets_Misc/system.device.location.courseandspeed/cs/courseandspeed.cs#2)]
 [!code-vb[System.Device.Location.CourseAndSpeed#2](~/samples/snippets/visualbasic/VS_Snippets_Misc/system.device.location.courseandspeed/vb/courseandspeed.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">对 <see cref="P:System.Device.Location.GeoCoordinate.Speed" /> 的设定超出了有效范围。</exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Device.Location.GeoCoordinate.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="geoCoordinate.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Device</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回一个包含纬度和经度的字符串。</summary>
        <returns>一个包含纬度和经度（用逗号分隔）的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法返回的字符串表示形式仅用于调试。 此方法不会为纬度和经度返回任何区域设置特定格式。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unknown">
      <MemberSignature Language="C#" Value="public static readonly System.Device.Location.GeoCoordinate Unknown;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Device.Location.GeoCoordinate Unknown" />
      <MemberSignature Language="DocId" Value="F:System.Device.Location.GeoCoordinate.Unknown" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Unknown As GeoCoordinate " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Device::Location::GeoCoordinate ^ Unknown;" />
      <MemberSignature Language="F#" Value=" staticval mutable Unknown : System.Device.Location.GeoCoordinate" Usage="System.Device.Location.GeoCoordinate.Unknown" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Device</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Device.Location.GeoCoordinate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示含有未知纬度和经度字段的 <see cref="T:System.Device.Location.GeoCoordinate" /> 对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Device.Location.GeoCoordinate.IsUnknown%2A>属性可用于验证是否 <xref:System.Device.Location.GeoCoordinate> 不包含任何数据。  
  
   
  
## Examples  
 下面的代码示例验证是否在 <xref:System.Device.Location.GeoCoordinate> <xref:System.Device.Location.GeoCoordinate.Unknown> 打印出其纬度和经度之前与位置对应的。  
  
 [!code-csharp[System.Device.Location.GetLocationDataSyncHandleUnknown#1](~/samples/snippets/csharp/VS_Snippets_Misc/system.device.location.getlocationdatasynchandleunknown/cs/getlocationdatasynchandleunknown.cs#1)]
 [!code-vb[System.Device.Location.GetLocationDataSyncHandleUnknown#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/system.device.location.getlocationdatasynchandleunknown/vb/GetLocationDataSyncHandleUnknown.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VerticalAccuracy">
      <MemberSignature Language="C#" Value="public double VerticalAccuracy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 VerticalAccuracy" />
      <MemberSignature Language="DocId" Value="P:System.Device.Location.GeoCoordinate.VerticalAccuracy" />
      <MemberSignature Language="VB.NET" Value="Public Property VerticalAccuracy As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double VerticalAccuracy { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.VerticalAccuracy : double with get, set" Usage="System.Device.Location.GeoCoordinate.VerticalAccuracy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Device</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置由 <see cref="T:System.Device.Location.GeoCoordinate" /> 给定的海拔高度的精度（以米为单位）。</summary>
        <value>海拔高度的精度（以米为单位）。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">对 <see cref="P:System.Device.Location.GeoCoordinate.VerticalAccuracy" /> 的设定超出了有效范围。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
