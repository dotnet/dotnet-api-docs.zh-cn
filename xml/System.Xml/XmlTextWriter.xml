<Type Name="XmlTextWriter" FullName="System.Xml.XmlTextWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1a4bd18960ea278fd3436229dbe62b10b876c8d3" /><Meta Name="ms.sourcegitcommit" Value="943c8cdbe5b47c6c296a6f4b73038bbd43da0dd2" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="02/12/2021" /><Meta Name="ms.locfileid" Value="100307829" /></Metadata><TypeSignature Language="C#" Value="public class XmlTextWriter : System.Xml.XmlWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlTextWriter extends System.Xml.XmlWriter" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlTextWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlTextWriter&#xA;Inherits XmlWriter" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlTextWriter : System::Xml::XmlWriter" />
  <TypeSignature Language="F#" Value="type XmlTextWriter = class&#xA;    inherit XmlWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Xml.ReaderWriter" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Xml.XmlWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="a4fbb-101">表示提供快速、非缓存、只进方法的写入器，该方法生成包含 XML 数据（这些数据符合 W3C 可扩展标记语言 (XML) 1.0 和“XML 命名空间”建议）的流或文件。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-101">Represents a writer that provides a fast, non-cached, forward-only way of generating streams or files containing XML data that conforms to the W3C Extensible Markup Language (XML) 1.0 and the Namespaces in XML recommendations.</span></span>  
  
<span data-ttu-id="a4fbb-102">从 .NET Framework 2.0 开始，建议改用 <see cref="T:System.Xml.XmlWriter" /> 类。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-102">Starting with the .NET Framework 2.0, we recommend that you use the <see cref="T:System.Xml.XmlWriter" /> class instead.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a4fbb-103">此类实现 <xref:System.Xml.XmlWriter> 类。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-103">This class implements the <xref:System.Xml.XmlWriter> class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a4fbb-104">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlWriter> 使用 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 方法和类创建实例， <xref:System.Xml.XmlWriterSettings> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-104">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="a4fbb-105">`XmlTextWriter` 维护与当前元素堆栈中定义的所有命名空间对应的命名空间堆栈。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-105">`XmlTextWriter` maintains a namespace stack corresponding to all the namespaces defined in the current element stack.</span></span> <span data-ttu-id="a4fbb-106">使用 `XmlTextWriter` 可以手动声明命名空间。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-106">Using `XmlTextWriter` you can declare namespaces manually.</span></span>  
  
```csharp  
w.WriteStartElement("root");  
w.WriteAttributeString("xmlns", "x", null, "urn:1");  
w.WriteStartElement("item","urn:1");  
w.WriteEndElement();  
w.WriteStartElement("item","urn:1");  
w.WriteEndElement();  
w.WriteEndElement();  
```  
  
 <span data-ttu-id="a4fbb-107">上述 c # 代码生成以下输出。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-107">The above C# code produces the following output.</span></span> <span data-ttu-id="a4fbb-108">`XmlTextWriter` 将命名空间声明提升为根元素，以避免它在两个子元素上重复。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-108">`XmlTextWriter` promotes the namespace declaration to the root element to avoid having it duplicated on the two child elements.</span></span> <span data-ttu-id="a4fbb-109">子元素从命名空间声明中选取前缀。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-109">The child elements pick up the prefix from the namespace declaration.</span></span>  
  
```xml  
<root xmlns:x="urn:1">  
 <x:item/>  
 <x:item/>  
</x:root>  
```  
  
 <span data-ttu-id="a4fbb-110">`XmlTextWriter` 还允许重写当前命名空间声明。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-110">`XmlTextWriter` also allows you to override the current namespace declaration.</span></span> <span data-ttu-id="a4fbb-111">在下面的示例中，命名空间 URI "123" 被 "abc" 重写以生成 XML 元素 `<x:node xmlns:x="abc"/>` 。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-111">In the following example, the namespace URI "123" is overridden by "abc" to produce the XML element `<x:node xmlns:x="abc"/>`.</span></span>  
  
```csharp  
w.WriteStartElement("x","node","123");  
w.WriteAttributeString("xmlns","x",null,"abc");  
```  
  
 <span data-ttu-id="a4fbb-112">通过使用采用前缀作为参数的写入方法，还可以指定要使用的前缀。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-112">By using the write methods that take a prefix as an argument you can also specify which prefix to use.</span></span> <span data-ttu-id="a4fbb-113">在下面的示例中，两个不同的前缀映射到相同的命名空间 URI 以生成 XML 文本 `<x:root xmlns:x="urn:1"><y:item xmlns:y="urn:1"/></x:root>` 。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-113">In the following example, two different prefixes are mapped to the same namespace URI to produce the XML text `<x:root xmlns:x="urn:1"><y:item xmlns:y="urn:1"/></x:root>`.</span></span>  
  
```csharp  
XmlTextWriter w = new XmlTextWriter(Console.Out);  
w.WriteStartElement("x","root","urn:1");  
 w.WriteStartElement("y","item","urn:1");  
 w.WriteEndElement();  
w.WriteEndElement();  
w.Close();  
```  
  
 <span data-ttu-id="a4fbb-114">如果有多个命名空间声明将不同的前缀映射到相同的命名空间 URI，则 `XmlTextWriter` 向后遍历命名空间声明堆栈，并选取最接近的一个。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-114">If there are multiple namespace declarations mapping different prefixes to the same namespace URI, `XmlTextWriter` walks the stack of namespace declarations backwards and picks the closest one.</span></span>  
  
```csharp  
XmlTextWriter w = new XmlTextWriter(Console.Out);  
w.Formatting = Formatting.Indented;  
w.WriteStartElement("x","root","urn:1");  
w.WriteStartElement("y","item","urn:1");  
w.WriteAttributeString("attr","urn:1","123");  
w.WriteEndElement();  
w.WriteEndElement();  
w.Close();  
```  
  
 <span data-ttu-id="a4fbb-115">在上面的 c # 示例中，由于 `WriteAttributeString` 调用未指定前缀，编写器使用推送到命名空间堆栈上的最后一个前缀，并生成以下 XML：</span><span class="sxs-lookup"><span data-stu-id="a4fbb-115">In the above C# example, because the `WriteAttributeString` call does not specify a prefix, the writer uses the last prefix pushed onto the namespace stack, and produces the following XML:</span></span>  
  
```xml  
<x:root xmlns:x="urn:1">  
 <y:item y:attr="123" xmlns:y="urn:1" />  
</x:root>  
```  
  
 <span data-ttu-id="a4fbb-116">如果发生命名空间冲突，则 `XmlTextWriter` 通过生成备用前缀来解决冲突。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-116">If namespace conflicts occur, `XmlTextWriter` resolves them by generating alternate prefixes.</span></span> <span data-ttu-id="a4fbb-117">例如，如果特性和元素具有相同的前缀，但命名空间不同，则会 `XmlWriter` 为特性生成备用前缀。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-117">For example, if an attribute and element have the same prefix but different namespaces, `XmlWriter` generates an alternate prefix for the attribute.</span></span> <span data-ttu-id="a4fbb-118">生成的前缀名为 `n{i}` ，其中 `i` 是从1开始的数字。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-118">The generated prefixes are named `n{i}` where `i` is a number beginning at 1.</span></span> <span data-ttu-id="a4fbb-119">对于每个元素，数值将重置为1。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-119">The number is reset to 1 for each element.</span></span>  
  
 <span data-ttu-id="a4fbb-120">与命名空间 URI 关联的属性必须具有前缀 (默认命名空间不适用于) 的属性。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-120">Attributes which are associated with a namespace URI must have a prefix (default namespaces do not apply to attributes).</span></span> <span data-ttu-id="a4fbb-121">这与 "XML 中的 W3C 命名空间" 建议的第5.2 节一致。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-121">This conforms to section 5.2 of the W3C Namespaces in XML recommendation.</span></span> <span data-ttu-id="a4fbb-122">如果特性引用命名空间 URI，但未指定前缀，则写入器会为该特性生成前缀。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-122">If an attribute references a namespace URI, but does not specify a prefix, the writer generates a prefix for the attribute.</span></span>  
  
 <span data-ttu-id="a4fbb-123">在写入空元素时，将在标记名称和结束标记之间添加额外的空格，例如 `<item />` 。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-123">When writing an empty element, an additional space is added between tag name and the closing tag, for example `<item />`.</span></span> <span data-ttu-id="a4fbb-124">这将提供与旧版浏览器的兼容性。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-124">This provides compatibility with older browsers.</span></span>  
  
 <span data-ttu-id="a4fbb-125">当 `String` 用作方法参数时， `null` 和 `String.Empty` 等效。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-125">When a `String` is used as method parameter, `null` and `String.Empty` are equivalent.</span></span> <span data-ttu-id="a4fbb-126">`String.Empty` 遵循 W3C 规则。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-126">`String.Empty` follows the W3C rules.</span></span>  
  
 <span data-ttu-id="a4fbb-127">若要编写强类型的数据，请使用 <xref:System.Xml.XmlConvert> 类将数据类型转换为字符串。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-127">To write strongly typed data, use the <xref:System.Xml.XmlConvert> class to convert data types to string.</span></span> <span data-ttu-id="a4fbb-128">例如，下面的 c # 代码将数据从转换 `Double` 到 `String` 并写入元素 `<price>19.95</price>` 。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-128">For example, the following C# code converts the data from `Double` to `String` and writes the element `<price>19.95</price>`.</span></span>  
  
```csharp  
Double price = 19.95;  
writer.WriteElementString("price", XmlConvert.ToString(price));  
```  
  
 <span data-ttu-id="a4fbb-129">`XmlTextWriter` 不检查以下内容：</span><span class="sxs-lookup"><span data-stu-id="a4fbb-129">`XmlTextWriter` does not check for the following:</span></span>  
  
-   <span data-ttu-id="a4fbb-130">特性和元素名称中的字符无效。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-130">Invalid characters in attribute and element names.</span></span>  
  
-   <span data-ttu-id="a4fbb-131">不符合指定编码的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-131">Unicode characters that do not fit the specified encoding.</span></span> <span data-ttu-id="a4fbb-132">如果 Unicode 字符不符合指定的编码，则不 `XmlTextWriter` 会将 unicode 字符转义为字符实体。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-132">If the Unicode characters do not fit the specified encoding, the `XmlTextWriter` does not escape the Unicode characters into character entities.</span></span>  
  
-   <span data-ttu-id="a4fbb-133">属性重复。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-133">Duplicate attributes.</span></span>  
  
-   <span data-ttu-id="a4fbb-134">DOCTYPE 公共标识符或系统标识符中的字符。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-134">Characters in the DOCTYPE public identifier or system identifier.</span></span>  
  
## <a name="security-considerations"></a><span data-ttu-id="a4fbb-135">安全注意事项</span><span class="sxs-lookup"><span data-stu-id="a4fbb-135">Security Considerations</span></span>  
 <span data-ttu-id="a4fbb-136">使用类时，应注意以下事项 <xref:System.Xml.XmlTextWriter> 。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-136">The following items are things to consider when working with the <xref:System.Xml.XmlTextWriter> class.</span></span>  
  
-   <span data-ttu-id="a4fbb-137">引发的异常 <xref:System.Xml.XmlTextWriter> 可能会泄露您不希望冒泡到应用程序的路径信息。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-137">Exceptions thrown by the <xref:System.Xml.XmlTextWriter> can disclose path information that you do not want bubbled up to the application.</span></span> <span data-ttu-id="a4fbb-138">应用程序必须捕获异常并进行相应的处理。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-138">Your applications must catch exceptions and process them appropriately.</span></span>  
  
-   <span data-ttu-id="a4fbb-139">在将 <xref:System.Xml.XmlTextWriter> 传递给另一个应用程序时，基础流会公开给该应用程序。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-139">When you pass the <xref:System.Xml.XmlTextWriter> to another application the underlying stream is exposed to that application.</span></span> <span data-ttu-id="a4fbb-140">如果需要将 <xref:System.Xml.XmlTextWriter> 传递给不完全可信的应用程序，应使用通过 <xref:System.Xml.XmlWriter> 方法创建的 <xref:System.Xml.XmlWriter.Create%2A> 对象。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-140">If you need to pass the <xref:System.Xml.XmlTextWriter> to a semi-trusted application, you should use an <xref:System.Xml.XmlWriter> object created by the <xref:System.Xml.XmlWriter.Create%2A> method instead.</span></span>  
  
-   <span data-ttu-id="a4fbb-141">不 <xref:System.Xml.XmlTextWriter> 会验证传递给或方法的任何数据 <xref:System.Xml.XmlTextWriter.WriteDocType%2A> <xref:System.Xml.XmlTextWriter.WriteRaw%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-141">The <xref:System.Xml.XmlTextWriter> does not validate any data that is passed to the <xref:System.Xml.XmlTextWriter.WriteDocType%2A> or <xref:System.Xml.XmlTextWriter.WriteRaw%2A> methods.</span></span> <span data-ttu-id="a4fbb-142">不应将任意数据传递给这些方法。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-142">You should not pass arbitrary data to these methods.</span></span>  
  
-   <span data-ttu-id="a4fbb-143">如果更改了默认设置，则不能保证生成的输出是格式正确的 XML 数据。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-143">If the default settings are changed, there is no guarantee that the generated output is well-formed XML data.</span></span>  
  
-   <span data-ttu-id="a4fbb-144">不要接受 <xref:System.Text.Encoding> 来自不受信任源的支持组件，例如对象。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-144">Do not accept supporting components, such as an <xref:System.Text.Encoding> object, from an untrusted source.</span></span>  
  
 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/standard/data/xml/"><span data-ttu-id="a4fbb-145">XML 文档和数据</span><span class="sxs-lookup"><span data-stu-id="a4fbb-145">XML Documents and Data</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a4fbb-146">创建 <see langword="XmlTextWriter" /> 类的实例。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-146">Creates an instance of the <see langword="XmlTextWriter" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a4fbb-147">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlWriter> 使用 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 方法和类创建实例， <xref:System.Xml.XmlWriterSettings> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-147">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextWriter (System.IO.TextWriter w);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter w) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (w As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextWriter(System::IO::TextWriter ^ w);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextWriter : System.IO.TextWriter -&gt; System.Xml.XmlTextWriter" Usage="new System.Xml.XmlTextWriter w" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="w" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="w"><span data-ttu-id="a4fbb-148">要向其中进行写入的 <see langword="TextWriter" />。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-148">The <see langword="TextWriter" /> to write to.</span></span> <span data-ttu-id="a4fbb-149">假定 <see langword="TextWriter" /> 已设置为正确的编码方式。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-149">It is assumed that the <see langword="TextWriter" /> is already set to the correct encoding.</span></span></param>
        <summary><span data-ttu-id="a4fbb-150">使用指定的 <see cref="T:System.IO.TextWriter" /> 创建 <see langword="XmlTextWriter" /> 类的实例。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-150">Creates an instance of the <see langword="XmlTextWriter" /> class using the specified <see cref="T:System.IO.TextWriter" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a4fbb-151">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlWriter> 使用 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 方法和类创建实例， <xref:System.Xml.XmlWriterSettings> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-151">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextWriter (System.IO.Stream w, System.Text.Encoding? encoding);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream w, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.#ctor(System.IO.Stream,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (w As Stream, encoding As Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextWriter(System::IO::Stream ^ w, System::Text::Encoding ^ encoding);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextWriter : System.IO.Stream * System.Text.Encoding -&gt; System.Xml.XmlTextWriter" Usage="new System.Xml.XmlTextWriter (w, encoding)" />
      <MemberSignature Language="C#" Value="public XmlTextWriter (System.IO.Stream w, System.Text.Encoding encoding);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="w" Type="System.IO.Stream" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="w"><span data-ttu-id="a4fbb-152">要对其写入的流。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-152">The stream to which you want to write.</span></span></param>
        <param name="encoding"><span data-ttu-id="a4fbb-153">要生成的编码。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-153">The encoding to generate.</span></span> <span data-ttu-id="a4fbb-154">如果编码方式为 <see langword="null" />，则它以 UTF-8 的形式写出流并忽略 <see langword="ProcessingInstruction" /> 中的编码特性。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-154">If encoding is <see langword="null" /> it writes out the stream as UTF-8 and omits the encoding attribute from the <see langword="ProcessingInstruction" />.</span></span></param>
        <summary><span data-ttu-id="a4fbb-155">使用指定的流和编码方式创建 <see langword="XmlTextWriter" /> 类的实例。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-155">Creates an instance of the <see langword="XmlTextWriter" /> class using the specified stream and encoding.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a4fbb-156">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlWriter> 使用 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 方法和类创建实例， <xref:System.Xml.XmlWriterSettings> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-156">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a4fbb-157">该编码方式不受支持或无法写入流。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-157">The encoding is not supported or the stream cannot be written to.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a4fbb-158"><paramref name="w" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-158"><paramref name="w" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextWriter (string filename, System.Text.Encoding? encoding);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filename As String, encoding As Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextWriter(System::String ^ filename, System::Text::Encoding ^ encoding);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextWriter : string * System.Text.Encoding -&gt; System.Xml.XmlTextWriter" Usage="new System.Xml.XmlTextWriter (filename, encoding)" />
      <MemberSignature Language="C#" Value="public XmlTextWriter (string filename, System.Text.Encoding encoding);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="filename"><span data-ttu-id="a4fbb-159">要写入的文件名。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-159">The filename to write to.</span></span> <span data-ttu-id="a4fbb-160">如果该文件存在，它将截断该文件并用新内容将其覆盖。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-160">If the file exists, it truncates it and overwrites it with the new content.</span></span></param>
        <param name="encoding"><span data-ttu-id="a4fbb-161">要生成的编码。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-161">The encoding to generate.</span></span> <span data-ttu-id="a4fbb-162">如果编码方式为 <see langword="null" />，它将以 UTF-8 的形式写出该文件，并忽略 <see langword="ProcessingInstruction" /> 中的编码特性。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-162">If encoding is <see langword="null" /> it writes the file out as UTF-8, and omits the encoding attribute from the <see langword="ProcessingInstruction" />.</span></span></param>
        <summary><span data-ttu-id="a4fbb-163">使用指定的文件创建 <see cref="T:System.Xml.XmlTextWriter" /> 类的实例。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-163">Creates an instance of the <see cref="T:System.Xml.XmlTextWriter" /> class using the specified file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a4fbb-164">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlWriter> 使用 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 方法和类创建实例， <xref:System.Xml.XmlWriterSettings> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-164">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a4fbb-165">编码方式不受支持；文件名为空；仅包含空格，或者包含一个或多个无效字符。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-165">The encoding is not supported; the filename is empty, contains only white space, or contains one or more invalid characters.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="a4fbb-166">访问被拒绝。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-166">Access is denied.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a4fbb-167">文件名为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-167">The filename is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><span data-ttu-id="a4fbb-168">未找到要写入的目录。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-168">The directory to write to is not found.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="a4fbb-169">文件名中包含不正确或无效的文件名、目录名或卷标语法。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-169">The filename includes an incorrect or invalid syntax for file name, directory name, or volume label syntax.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="a4fbb-170">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-170">The caller does not have the required permission.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BaseStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream? BaseStream { get; }" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Stream BaseStream" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextWriter.BaseStream" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseStream As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Stream ^ BaseStream { System::IO::Stream ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseStream : System.IO.Stream" Usage="System.Xml.XmlTextWriter.BaseStream" />
      <MemberSignature Language="C#" Value="public System.IO.Stream BaseStream { get; }" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a4fbb-171">获取基础流对象。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-171">Gets the underlying stream object.</span></span></summary>
        <value><span data-ttu-id="a4fbb-172"><see langword="XmlTextWriter" /> 正在向其写入的流；如果 <see langword="null" /> 是使用不从 <see cref="T:System.IO.TextWriter" /> 类继承的 <see cref="T:System.IO.StreamWriter" /> 构造的，则为 <see langword="XmlTextWriter" />。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-172">The stream to which the <see langword="XmlTextWriter" /> is writing or <see langword="null" /> if the <see langword="XmlTextWriter" /> was constructed using a <see cref="T:System.IO.TextWriter" /> that does not inherit from the <see cref="T:System.IO.StreamWriter" /> class.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a4fbb-173">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlWriter> 使用 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 方法和类创建实例， <xref:System.Xml.XmlWriterSettings> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-173">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="a4fbb-174">如果编写器是使用 `TextWriter` 派生自类的的构造的 `StreamWriter` ，则此属性等效于 <xref:System.IO.StreamWriter.BaseStream%2A?displayProperty=nameWithType> 属性。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-174">If the writer was constructed using a `TextWriter` that is derived from the `StreamWriter` class, this property is equivalent to the <xref:System.IO.StreamWriter.BaseStream%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="a4fbb-175">如果编写器是使用构造的 <xref:System.IO.Stream> ，则此属性返回 `Stream` 传递给构造函数的。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-175">If the writer was constructed using a <xref:System.IO.Stream>, this property returns the `Stream` passed to the constructor.</span></span> <span data-ttu-id="a4fbb-176">如果编写器是使用文件名构造的，则此属性返回 `Stream` 表示该文件的。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-176">If the writer was constructed using a file name, this property returns the `Stream` representing the file.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="xmlTextWriter.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a4fbb-177">关闭此流和基础流。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-177">Closes this stream and the underlying stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a4fbb-178">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlWriter> 使用 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 方法和类创建实例， <xref:System.Xml.XmlWriterSettings> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-178">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="a4fbb-179">任何保持打开状态的元素或属性都将自动关闭。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-179">Any elements or attributes left open are automatically closed.</span></span>  
  
 <span data-ttu-id="a4fbb-180">此方法不会引发任何异常。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-180">This method does not throw any exceptions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a4fbb-181">下面的示例写入 XML 片段。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-181">The following example writes an XML fragment.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.Formatting Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.Formatting Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.Formatting Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.Formatting Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.Formatting Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.Formatting Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="F#" Value="override this.Flush : unit -&gt; unit" Usage="xmlTextWriter.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a4fbb-182">将缓冲区中的所有内容刷新到基础流，并同时刷新基础流。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-182">Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a4fbb-183">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlWriter> 使用 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 方法和类创建实例， <xref:System.Xml.XmlWriterSettings> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-183">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="a4fbb-184"><xref:System.Xml.XmlTextWriter.Close%2A>如果希望将更多的内容写入基础流，而不会丢失仍在缓冲区中的内容，则会调用。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-184">This is called instead of <xref:System.Xml.XmlTextWriter.Close%2A> when you want to write more to the underlying stream without losing what is still in the buffer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a4fbb-185">下面的示例写出两个 XML 片段。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-185">The following example writes out two XML fragments.</span></span>  
  
 [!code-cpp[XmlTextWriter.Flush#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextWriter.Flush/CPP/write2docs.cpp#1)]
 [!code-csharp[XmlTextWriter.Flush#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextWriter.Flush/CS/write2docs.cs#1)]
 [!code-vb[XmlTextWriter.Flush#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextWriter.Flush/VB/write2docs.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Formatting">
      <MemberSignature Language="C#" Value="public System.Xml.Formatting Formatting { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.Formatting Formatting" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextWriter.Formatting" />
      <MemberSignature Language="VB.NET" Value="Public Property Formatting As Formatting" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Formatting Formatting { System::Xml::Formatting get(); void set(System::Xml::Formatting value); };" />
      <MemberSignature Language="F#" Value="member this.Formatting : System.Xml.Formatting with get, set" Usage="System.Xml.XmlTextWriter.Formatting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Formatting</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a4fbb-186">指示如何对输出进行格式设置。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-186">Indicates how the output is formatted.</span></span></summary>
        <value><span data-ttu-id="a4fbb-187"><see cref="T:System.Xml.Formatting" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-187">One of the <see cref="T:System.Xml.Formatting" /> values.</span></span> <span data-ttu-id="a4fbb-188">默认值为 <see langword="Formatting.None" />（无特殊格式）。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-188">The default is <see langword="Formatting.None" /> (no special formatting).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a4fbb-189">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlWriter> 使用 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 方法和类创建实例， <xref:System.Xml.XmlWriterSettings> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-189">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="a4fbb-190">如果 `Indented` 设置了选项，则使用和属性缩进子 <xref:System.Xml.XmlTextWriter.Indentation%2A> 元素 <xref:System.Xml.XmlTextWriter.IndentChar%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-190">If the `Indented` option is set, child elements are indented using the <xref:System.Xml.XmlTextWriter.Indentation%2A> and <xref:System.Xml.XmlTextWriter.IndentChar%2A> properties.</span></span> <span data-ttu-id="a4fbb-191">仅缩进元素内容。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-191">Only element content is indented.</span></span> <span data-ttu-id="a4fbb-192">下面的 c # 代码写出 HTML 元素，包括混合内容：</span><span class="sxs-lookup"><span data-stu-id="a4fbb-192">The following C# code writes out HTML elements including mixed content:</span></span>  
  
```csharp  
XmlTextWriter w = new XmlTextWriter(Console.Out);   
 w.Formatting = Formatting.Indented;   
 w.WriteStartElement("ol");   
 w.WriteStartElement("li");   
 w.WriteString("The big "); // This means "li" now has a mixed content model.  
 w.WriteElementString("b", "E");   
 w.WriteElementString("i", "lephant");   
 w.WriteString(" walks slowly.");   
 w.WriteEndElement();   
 w.WriteEndElement();  
```  
  
 <span data-ttu-id="a4fbb-193">上面的代码生成以下输出：</span><span class="sxs-lookup"><span data-stu-id="a4fbb-193">The above code produces the following output:</span></span>  
  
```xml  
<ol>   
  <li>The big <b>E</b><i>lephant</i> walks slowly.</li>   
</ol>  
```  
  
 <span data-ttu-id="a4fbb-194">在 HTML 中查看此内容时，粗体和斜体元素之间不会出现空格。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-194">When this is viewed in HTML no white space appears between the bold and italic elements.</span></span> <span data-ttu-id="a4fbb-195">事实上，在此示例中，如果在这些元素之间添加缩进，则 "大象" 一词将会错误地损坏。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-195">In fact, in this example, if indenting was added between these elements the word "Elephant" would be incorrectly broken.</span></span>  
  
> [!NOTE]
> <span data-ttu-id="a4fbb-196">写入任何文本内容，不包括将 `String.Empty` 该元素放入混合内容模式。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-196">Writing any text content, excluding `String.Empty` puts that element into mixed content mode.</span></span> <span data-ttu-id="a4fbb-197">子元素不会继承此 "混合" 模式状态。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-197">Child elements do not inherit this "mixed" mode status.</span></span> <span data-ttu-id="a4fbb-198">"Mixed" 元素的子元素会缩进，除非它还包含 "混合" 内容。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-198">A child element of a "mixed" element does indenting, unless it is also contains "mixed" content.</span></span> <span data-ttu-id="a4fbb-199">根据这些术语的 XML 1.0 定义定义[元素内容](https://www.w3.org/TR/1998/REC-xml-19980210#sec-element-content)和[混合内容](https://www.w3.org/TR/1998/REC-xml-19980210#sec-mixed-content)。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-199">[Element content](https://www.w3.org/TR/1998/REC-xml-19980210#sec-element-content) and [mixed content](https://www.w3.org/TR/1998/REC-xml-19980210#sec-mixed-content) are defined according to the XML 1.0 definitions of these terms.</span></span>  
  
## Examples  
 <span data-ttu-id="a4fbb-200">下面的示例写入 XML 片段。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-200">The following example writes an XML fragment.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.Formatting Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.Formatting Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.Formatting Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.Formatting Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.Formatting Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.Formatting Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Formatting" />
      </Docs>
    </Member>
    <Member MemberName="Indentation">
      <MemberSignature Language="C#" Value="public int Indentation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Indentation" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextWriter.Indentation" />
      <MemberSignature Language="VB.NET" Value="Public Property Indentation As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Indentation { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Indentation : int with get, set" Usage="System.Xml.XmlTextWriter.Indentation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a4fbb-201">获取或设置当 <see cref="P:System.Xml.XmlTextWriter.Formatting" /> 设置为 <see langword="Formatting.Indented" /> 时将为层次结构中的每个级别编写多少 IndentChar。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-201">Gets or sets how many IndentChars to write for each level in the hierarchy when <see cref="P:System.Xml.XmlTextWriter.Formatting" /> is set to <see langword="Formatting.Indented" />.</span></span></summary>
        <value><span data-ttu-id="a4fbb-202">每个级别的 <see langword="IndentChars" /> 的数目。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-202">Number of <see langword="IndentChars" /> for each level.</span></span> <span data-ttu-id="a4fbb-203">默认值为 2。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-203">The default is 2.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a4fbb-204">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlWriter> 使用 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 方法和类创建实例， <xref:System.Xml.XmlWriterSettings> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-204">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="a4fbb-205">对以下节点类型执行缩进： `DocumentType` 、、、 `Element` `Comment` `ProcessingInstruction` 和 `CDATASection` 。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-205">Indentation is performed on following node types: `DocumentType`, `Element`, `Comment`, `ProcessingInstruction`, and `CDATASection`.</span></span> <span data-ttu-id="a4fbb-206">所有其他节点类型都不受影响。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-206">All other node types are not affected.</span></span> <span data-ttu-id="a4fbb-207">不 `XmlTextWriter` 会缩进内部 DTD 子集。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-207">The `XmlTextWriter` does not indent the internal DTD subset.</span></span> <span data-ttu-id="a4fbb-208">但是，您可以执行以下操作来将格式设置应用于内部 DTD 子集。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-208">However, you could do the following to apply formatting to the internal DTD subset.</span></span>  
  
```csharp  
String name = "Employees";  
String pubid = null;  
String sysid = null;  
String subset =  
@"  
    <!ELEMENT Employees (Employee)+>  
    <!ELEMENT Employee EMPTY>  
    <!ATTLIST Employee firstname CDATA #REQUIRED>  
    <!ENTITY Company 'Microsoft'>]>  
";  
XmlTextWriter tw = new XmlTextWriter(Console.Out);  
tw.WriteDocType(name, pubid, sysid, subset);  
```  
  
   
  
## Examples  
 <span data-ttu-id="a4fbb-209">下面的示例写入 XML 片段。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-209">The following example writes an XML fragment.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.Formatting Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.Formatting Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.Formatting Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.Formatting Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.Formatting Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.Formatting Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a4fbb-210">将该属性设置为负值。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-210">Setting this property to a negative value.</span></span></exception>
        <altmember cref="P:System.Xml.XmlTextWriter.IndentChar" />
        <altmember cref="T:System.Xml.Formatting" />
      </Docs>
    </Member>
    <Member MemberName="IndentChar">
      <MemberSignature Language="C#" Value="public char IndentChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char IndentChar" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextWriter.IndentChar" />
      <MemberSignature Language="VB.NET" Value="Public Property IndentChar As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char IndentChar { char get(); void set(char value); };" />
      <MemberSignature Language="F#" Value="member this.IndentChar : char with get, set" Usage="System.Xml.XmlTextWriter.IndentChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a4fbb-211">获取或设置当 <see cref="P:System.Xml.XmlTextWriter.Formatting" /> 设置为 <see langword="Formatting.Indented" /> 时哪个字符用于缩进。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-211">Gets or sets which character to use for indenting when <see cref="P:System.Xml.XmlTextWriter.Formatting" /> is set to <see langword="Formatting.Indented" />.</span></span></summary>
        <value><span data-ttu-id="a4fbb-212">用于缩进的字符。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-212">The character to use for indenting.</span></span> <span data-ttu-id="a4fbb-213">默认为空格。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-213">The default is space.</span></span>  
  
 <block subset="none" type="note"><para>  
 <span data-ttu-id="a4fbb-214"><see langword="XmlTextWriter" /> 允许您将该属性设置为任意字符。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-214">The <see langword="XmlTextWriter" /> allows you to set this property to any character.</span></span> <span data-ttu-id="a4fbb-215">为了确保 XML 有效，你必须指定有效的空格字符 0x9、0x10、0x13 或 0x20。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-215">To ensure valid XML, you must specify a valid white space character, 0x9, 0x10, 0x13 or 0x20.</span></span>  
  
</para></block></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a4fbb-216">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlWriter> 使用 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 方法和类创建实例， <xref:System.Xml.XmlWriterSettings> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-216">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.XmlTextWriter.Indentation" />
        <altmember cref="T:System.Xml.Formatting" />
      </Docs>
    </Member>
    <Member MemberName="LookupPrefix">
      <MemberSignature Language="C#" Value="public override string? LookupPrefix (string ns);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string LookupPrefix(string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.LookupPrefix(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function LookupPrefix (ns As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ LookupPrefix(System::String ^ ns);" />
      <MemberSignature Language="F#" Value="override this.LookupPrefix : string -&gt; string" Usage="xmlTextWriter.LookupPrefix ns" />
      <MemberSignature Language="C#" Value="public override string LookupPrefix (string ns);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ns"><span data-ttu-id="a4fbb-217">要查找其前缀的命名空间 URI。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-217">Namespace URI whose prefix you want to find.</span></span></param>
        <summary><span data-ttu-id="a4fbb-218">返回在当前命名空间范围中为该命名空间 URI 定义的最近的前缀。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-218">Returns the closest prefix defined in the current namespace scope for the namespace URI.</span></span></summary>
        <returns><span data-ttu-id="a4fbb-219">匹配的前缀。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-219">The matching prefix.</span></span> <span data-ttu-id="a4fbb-220">如果当前范围内未找到匹配的命名空间 URI，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-220">Or <see langword="null" /> if no matching namespace URI is found in the current scope.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a4fbb-221">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlWriter> 使用 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 方法和类创建实例， <xref:System.Xml.XmlWriterSettings> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-221">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a4fbb-222">以下示例写出书籍。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-222">The following example writes out a book.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a4fbb-223"><paramref name="ns" /> 为 <see langword="null" /> 或 <see langword="String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-223"><paramref name="ns" /> is either <see langword="null" /> or <see langword="String.Empty" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Namespaces">
      <MemberSignature Language="C#" Value="public bool Namespaces { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Namespaces" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextWriter.Namespaces" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespaces As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Namespaces { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Namespaces : bool with get, set" Usage="System.Xml.XmlTextWriter.Namespaces" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a4fbb-224">获取或设置一个值，该值指示是否进行命名空间支持。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-224">Gets or sets a value indicating whether to do namespace support.</span></span></summary>
        <value><span data-ttu-id="a4fbb-225">如果支持命名空间，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-225"><see langword="true" /> to support namespaces; otherwise, <see langword="false" />.</span></span>  
  
<span data-ttu-id="a4fbb-226">默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-226">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a4fbb-227">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlWriter> 使用 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 方法和类创建实例， <xref:System.Xml.XmlWriterSettings> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-227">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="a4fbb-228">此属性确定编写器是否支持 [XML 中的 W3C 命名空间](https://www.w3.org/TR/REC-xml-names) 的建议。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-228">This property determines whether the writer supports the W3C [Namespaces in XML](https://www.w3.org/TR/REC-xml-names) recommendation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a4fbb-229">只能在处于 <see langword="WriteState.Start" /> 状态时更改此属性。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-229">You can only change this property when in the <see langword="WriteState.Start" /> state.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="QuoteChar">
      <MemberSignature Language="C#" Value="public char QuoteChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char QuoteChar" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextWriter.QuoteChar" />
      <MemberSignature Language="VB.NET" Value="Public Property QuoteChar As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char QuoteChar { char get(); void set(char value); };" />
      <MemberSignature Language="F#" Value="member this.QuoteChar : char with get, set" Usage="System.Xml.XmlTextWriter.QuoteChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a4fbb-230">获取或设置要用于引用属性值的字符。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-230">Gets or sets which character to use to quote attribute values.</span></span></summary>
        <value><span data-ttu-id="a4fbb-231">用于引用属性值的字符。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-231">The character to use to quote attribute values.</span></span> <span data-ttu-id="a4fbb-232">这必须是单引号 (&amp; #39; ) 或双引号 (&amp; #34; ) 。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-232">This must be a single quote (&amp;#39;) or a double quote (&amp;#34;).</span></span> <span data-ttu-id="a4fbb-233">默认为双引号。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-233">The default is a double quote.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a4fbb-234">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlWriter> 使用 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 方法和类创建实例， <xref:System.Xml.XmlWriterSettings> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-234">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a4fbb-235">将该属性设置为非单引号，也非双引号。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-235">Setting this property to something other than either a single or double quote.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64">
      <MemberSignature Language="C#" Value="public override void WriteBase64 (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteBase64(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteBase64 (buffer As Byte(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteBase64(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.WriteBase64 : byte[] * int * int -&gt; unit" Usage="xmlTextWriter.WriteBase64 (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="a4fbb-236">要进行编码的字节数组。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-236">Byte array to encode.</span></span></param>
        <param name="index"><span data-ttu-id="a4fbb-237">缓冲区中的位置，指示要写入的字节的起始位置。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-237">The position within the buffer indicating the start of the bytes to write.</span></span></param>
        <param name="count"><span data-ttu-id="a4fbb-238">要写入的字节数。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-238">The number of bytes to write.</span></span></param>
        <summary><span data-ttu-id="a4fbb-239">将指定的二进制字节编码为 Base64 并写出结果文本。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-239">Encodes the specified binary bytes as base64 and writes out the resulting text.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a4fbb-240">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlWriter> 使用 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 方法和类创建实例， <xref:System.Xml.XmlWriterSettings> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-240">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a4fbb-241">下面的示例使用对输入文件 `WriteBase64` 进行编码，并生成一个临时 XML 文件。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-241">The following example encodes an input file using `WriteBase64` and generates a temporary XML file.</span></span> <span data-ttu-id="a4fbb-242">使用方法对临时 XML 文件进行解码 <xref:System.Xml.XmlTextReader.ReadBase64%2A> ，并将其与原始文件进行比较。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-242">The temporary XML file is decoded using the <xref:System.Xml.XmlTextReader.ReadBase64%2A> method and compared to the original file.</span></span>  
  
 [!code-cpp[XmlWriter.WriteBase64#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteBase64/CPP/writebase64.cpp#1)]
 [!code-csharp[XmlWriter.WriteBase64#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteBase64/CS/writebase64.cs#1)]
 [!code-vb[XmlWriter.WriteBase64#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteBase64/VB/writebase64.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a4fbb-243"><paramref name="buffer" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-243"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a4fbb-244">缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-244">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="a4fbb-245"><paramref name="index" /> 或 <paramref name="count" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-245"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a4fbb-246"><see cref="P:System.Xml.XmlTextWriter.WriteState" /> 为 <see langword="Closed" />。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-246">The <see cref="P:System.Xml.XmlTextWriter.WriteState" /> is <see langword="Closed" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBinHex">
      <MemberSignature Language="C#" Value="public override void WriteBinHex (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteBinHex(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteBinHex (buffer As Byte(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteBinHex(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.WriteBinHex : byte[] * int * int -&gt; unit" Usage="xmlTextWriter.WriteBinHex (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="a4fbb-247">要进行编码的字节数组。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-247">Byte array to encode.</span></span></param>
        <param name="index"><span data-ttu-id="a4fbb-248">缓冲区中指示要写入字节的起始位置的位置。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-248">The position in the buffer indicating the start of the bytes to write.</span></span></param>
        <param name="count"><span data-ttu-id="a4fbb-249">要写入的字节数。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-249">The number of bytes to write.</span></span></param>
        <summary><span data-ttu-id="a4fbb-250">将指定的二进制字节编码为 BinHex 并写出结果文本。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-250">Encodes the specified binary bytes as binhex and writes out the resulting text.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a4fbb-251">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlWriter> 使用 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 方法和类创建实例， <xref:System.Xml.XmlWriterSettings> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-251">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a4fbb-252"><paramref name="buffer" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-252"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a4fbb-253">缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-253">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="a4fbb-254"><paramref name="index" /> 或 <paramref name="count" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-254"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a4fbb-255"><see cref="P:System.Xml.XmlTextWriter.WriteState" /> 为 Closed。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-255">The <see cref="P:System.Xml.XmlTextWriter.WriteState" /> is Closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCData">
      <MemberSignature Language="C#" Value="public override void WriteCData (string? text);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteCData(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteCData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteCData (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteCData(System::String ^ text);" />
      <MemberSignature Language="F#" Value="override this.WriteCData : string -&gt; unit" Usage="xmlTextWriter.WriteCData text" />
      <MemberSignature Language="C#" Value="public override void WriteCData (string text);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="a4fbb-256">要放置在 CDATA 块中的文本。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-256">Text to place inside the CDATA block.</span></span></param>
        <summary><span data-ttu-id="a4fbb-257">写出包含指定文本的 &lt;![CDATA[...]]&gt; 块。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-257">Writes out a &lt;![CDATA[...]]&gt; block containing the specified text.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a4fbb-258">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlWriter> 使用 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 方法和类创建实例， <xref:System.Xml.XmlWriterSettings> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-258">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="a4fbb-259">如果 `text` 是 `null` 或 `String.Empty` ，则此方法会写入一个空 CDATA 块，例如 \< ！ [CDATA []</span><span class="sxs-lookup"><span data-stu-id="a4fbb-259">If `text` is either `null` or `String.Empty`, this method writes an empty CDATA block, for example \<![CDATA[]</span></span>]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a4fbb-260">该文本将导致格式不正确的 XML 文档。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-260">The text would result in a non-well formed XML document.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a4fbb-261"><see cref="P:System.Xml.XmlTextWriter.WriteState" /> 为 <see langword="Closed" />。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-261">The <see cref="P:System.Xml.XmlTextWriter.WriteState" /> is <see langword="Closed" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCharEntity">
      <MemberSignature Language="C#" Value="public override void WriteCharEntity (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteCharEntity(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteCharEntity(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteCharEntity (ch As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteCharEntity(char ch);" />
      <MemberSignature Language="F#" Value="override this.WriteCharEntity : char -&gt; unit" Usage="xmlTextWriter.WriteCharEntity ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch"><span data-ttu-id="a4fbb-262">为其生成字符实体的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-262">Unicode character for which to generate a character entity.</span></span></param>
        <summary><span data-ttu-id="a4fbb-263">为指定的 Unicode 字符值强制生成字符实体。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-263">Forces the generation of a character entity for the specified Unicode character value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a4fbb-264">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlWriter> 使用 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 方法和类创建实例， <xref:System.Xml.XmlWriterSettings> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-264">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="a4fbb-265">此方法写入十六进制字符实体引用格式的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-265">This method writes the Unicode character in hexadecimal character entity reference format.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a4fbb-266">下面的示例使用 `WriteCharEntity` 方法来编写电子邮件地址。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-266">The following example uses the `WriteCharEntity` method to write an email address.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteTimeSpan Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteTimeSpan Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteTimeSpan Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteTimeSpan Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteTimeSpan Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteTimeSpan Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a4fbb-267">该字符应处于代理项对字符范围 <see langword="0xd800" /> - <see langword="0xdfff" /> 内；否则该文本将导致格式不正确的 XML 文档。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-267">The character is in the surrogate pair character range, <see langword="0xd800" /> - <see langword="0xdfff" />; or the text would result in a non-well formed XML document.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a4fbb-268"><see cref="P:System.Xml.XmlTextWriter.WriteState" /> 为 <see langword="Closed" />。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-268">The <see cref="P:System.Xml.XmlTextWriter.WriteState" /> is <see langword="Closed" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteChars">
      <MemberSignature Language="C#" Value="public override void WriteChars (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteChars(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteChars (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteChars(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.WriteChars : char[] * int * int -&gt; unit" Usage="xmlTextWriter.WriteChars (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="a4fbb-269">包含要写入的文本的字符数组。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-269">Character array containing the text to write.</span></span></param>
        <param name="index"><span data-ttu-id="a4fbb-270">缓冲区中指示要写入文本的起始位置的位置。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-270">The position in the buffer indicating the start of the text to write.</span></span></param>
        <param name="count"><span data-ttu-id="a4fbb-271">要写入的字符数。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-271">The number of characters to write.</span></span></param>
        <summary><span data-ttu-id="a4fbb-272">以每次一个缓冲区的方式写入文本。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-272">Writes text one buffer at a time.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a4fbb-273">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlWriter> 使用 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 方法和类创建实例， <xref:System.Xml.XmlWriterSettings> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-273">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="a4fbb-274">此方法可用于一次写入一个缓冲区的大量文本。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-274">This method can be used to write large amounts of text one buffer at a time.</span></span>  
  
 <span data-ttu-id="a4fbb-275">必须执行特殊处理才能确保方法不 `WriteChars` 会跨多个缓冲区写入拆分代理项对字符。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-275">Special handling must be done to ensure the `WriteChars` method does not split surrogate pair characters across multiple buffer writes.</span></span> <span data-ttu-id="a4fbb-276">XML 规范定义代理项对的有效范围。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-276">The XML specification defines the valid ranges for surrogate pairs.</span></span>  
  
 <span data-ttu-id="a4fbb-277">如果编写了代理项对字符，导致在缓冲区中拆分代理项对字符，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-277">An exception is thrown if surrogate pair characters are written that would result in the surrogate pair characters being split in the buffer.</span></span>  
  
   
  
## Examples  
 [!code-csharp[XmlTextWriter.WriteChars#1](~/samples/snippets/csharp/VS_Snippets_Data/xmltextwriter.writechars/cs/xmlwriterwritecharsexample.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a4fbb-278"><paramref name="buffer" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-278"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="a4fbb-279"><paramref name="index" /> 或 <paramref name="count" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-279"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="a4fbb-280">- 或 -</span><span class="sxs-lookup"><span data-stu-id="a4fbb-280">-or-</span></span> 
<span data-ttu-id="a4fbb-281">缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />；此调用导致代理项对字符被拆分或写入无效的代理项对。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-281">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />; the call results in surrogate pair characters being split or an invalid surrogate pair being written.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a4fbb-282"><see cref="P:System.Xml.XmlTextWriter.WriteState" /> 为 Closed。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-282">The <see cref="P:System.Xml.XmlTextWriter.WriteState" /> is Closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteComment">
      <MemberSignature Language="C#" Value="public override void WriteComment (string? text);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteComment(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteComment(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteComment (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteComment(System::String ^ text);" />
      <MemberSignature Language="F#" Value="override this.WriteComment : string -&gt; unit" Usage="xmlTextWriter.WriteComment text" />
      <MemberSignature Language="C#" Value="public override void WriteComment (string text);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="a4fbb-283">要放在注释内的文本。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-283">Text to place inside the comment.</span></span></param>
        <summary><span data-ttu-id="a4fbb-284">写出包含指定文本的注释 &lt;!--...--&gt;。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-284">Writes out a comment &lt;!--...--&gt; containing the specified text.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a4fbb-285">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlWriter> 使用 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 方法和类创建实例， <xref:System.Xml.XmlWriterSettings> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-285">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="a4fbb-286">如果 `text` 为 `null` 或 `String.Empty` ，则此方法将写入， `Comment` 不包含任何数据内容，例如 \<!----> 。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-286">If `text` is either `null` or `String.Empty`, this method writes a `Comment` with no data content, for example \<!---->.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a4fbb-287">下面的示例编写一个表示书的 XML 文件。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-287">The following example writes an XML file representing a book.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a4fbb-288">该文本将导致格式不正确的 XML 文档。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-288">The text would result in a non-well formed XML document</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a4fbb-289"><see cref="P:System.Xml.XmlTextWriter.WriteState" /> 为 <see langword="Closed" />。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-289">The <see cref="P:System.Xml.XmlTextWriter.WriteState" /> is <see langword="Closed" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteDocType">
      <MemberSignature Language="C#" Value="public override void WriteDocType (string name, string? pubid, string? sysid, string? subset);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteDocType(string name, string pubid, string sysid, string subset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteDocType (name As String, pubid As String, sysid As String, subset As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteDocType(System::String ^ name, System::String ^ pubid, System::String ^ sysid, System::String ^ subset);" />
      <MemberSignature Language="F#" Value="override this.WriteDocType : string * string * string * string -&gt; unit" Usage="xmlTextWriter.WriteDocType (name, pubid, sysid, subset)" />
      <MemberSignature Language="C#" Value="public override void WriteDocType (string name, string pubid, string sysid, string subset);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="pubid" Type="System.String" />
        <Parameter Name="sysid" Type="System.String" />
        <Parameter Name="subset" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="a4fbb-290">DOCTYPE 的名称。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-290">The name of the DOCTYPE.</span></span> <span data-ttu-id="a4fbb-291">它必须是非空的。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-291">This must be non-empty.</span></span></param>
        <param name="pubid"><span data-ttu-id="a4fbb-292">如果非 null，则它还编写 PUBLIC "pubid" "sysid"，这里的 <paramref name="pubid" /> 和 <paramref name="sysid" /> 用给定参数的值替换。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-292">If non-null it also writes PUBLIC "pubid" "sysid" where <paramref name="pubid" /> and <paramref name="sysid" /> are replaced with the value of the given arguments.</span></span></param>
        <param name="sysid"><span data-ttu-id="a4fbb-293">如果 <paramref name="pubid" /> 为 null 而 <paramref name="sysid" /> 非 null，则它编写 SYSTEM "sysid"，这里的 <paramref name="sysid" /> 用此参数的值替换。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-293">If <paramref name="pubid" /> is null and <paramref name="sysid" /> is non-null it writes SYSTEM "sysid" where <paramref name="sysid" /> is replaced with the value of this argument.</span></span></param>
        <param name="subset"><span data-ttu-id="a4fbb-294">如果非 null，则它写入 [subset]，其中 subset 替换为此参数的值。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-294">If non-null it writes [subset] where subset is replaced with the value of this argument.</span></span></param>
        <summary><span data-ttu-id="a4fbb-295">写出具有指定名称和可选属性的 DOCTYPE 声明。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-295">Writes the DOCTYPE declaration with the specified name and optional attributes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a4fbb-296">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlWriter> 使用 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 方法和类创建实例， <xref:System.Xml.XmlWriterSettings> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-296">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="a4fbb-297">此方法不检查或中的无效字符 `pubid` `sysid` `subset` 。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-297">This method does not check for invalid characters in `pubid`, `sysid` or `subset`.</span></span> <span data-ttu-id="a4fbb-298">它也不会检查内部子集的格式是否正确。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-298">It also does not check that the internal subset is well-formed.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a4fbb-299">不 <xref:System.Xml.XmlTextWriter> 会验证传递给方法的任何数据 <xref:System.Xml.XmlTextWriter.WriteDocType%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-299">The <xref:System.Xml.XmlTextWriter> does not validate any data that is passed to the <xref:System.Xml.XmlTextWriter.WriteDocType%2A> method.</span></span> <span data-ttu-id="a4fbb-300">不应向此方法传递任意数据。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-300">You should not pass arbitrary data to this method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a4fbb-301">下面的示例编写一个表示书的 XML 文件。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-301">The following example writes an XML file representing a book.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a4fbb-302">在序言码外部（根元素之后）调用了此方法。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-302">This method was called outside the prolog (after the root element).</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a4fbb-303"><paramref name="name" /> 为 <see langword="null" /> 或 <see langword="String.Empty" /></span><span class="sxs-lookup"><span data-stu-id="a4fbb-303"><paramref name="name" /> is <see langword="null" /> or <see langword="String.Empty" /></span></span>  
  
<span data-ttu-id="a4fbb-304">- 或 -</span><span class="sxs-lookup"><span data-stu-id="a4fbb-304">-or-</span></span> 
<span data-ttu-id="a4fbb-305"><paramref name="name" /> 的值将导致无效的 XML。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-305">the value for <paramref name="name" /> would result in invalid XML.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndAttribute">
      <MemberSignature Language="C#" Value="public override void WriteEndAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteEndAttribute() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteEndAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteEndAttribute ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteEndAttribute();" />
      <MemberSignature Language="F#" Value="override this.WriteEndAttribute : unit -&gt; unit" Usage="xmlTextWriter.WriteEndAttribute " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a4fbb-306">关闭上一个 <see cref="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)" /> 调用。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-306">Closes the previous <see cref="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)" /> call.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a4fbb-307">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlWriter> 使用 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 方法和类创建实例， <xref:System.Xml.XmlWriterSettings> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-307">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="a4fbb-308">如果调用 `WriteStartAttribute` ，则可以通过此方法关闭属性。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-308">If you call `WriteStartAttribute`, you can close the attribute with this method.</span></span>  
  
 <span data-ttu-id="a4fbb-309">还可以通过 `WriteStartAttribute` 再次调用、调用或调用来关闭该属性 <xref:System.Xml.XmlWriter.WriteAttributeString%2A> <xref:System.Xml.XmlTextWriter.WriteEndElement%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-309">You can also close the attribute by calling `WriteStartAttribute` again, calling <xref:System.Xml.XmlWriter.WriteAttributeString%2A>, or calling <xref:System.Xml.XmlTextWriter.WriteEndElement%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a4fbb-310">以下示例写出书籍。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-310">The following example writes out a book.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteEndDocument">
      <MemberSignature Language="C#" Value="public override void WriteEndDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteEndDocument() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteEndDocument" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteEndDocument ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteEndDocument();" />
      <MemberSignature Language="F#" Value="override this.WriteEndDocument : unit -&gt; unit" Usage="xmlTextWriter.WriteEndDocument " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a4fbb-311">关闭任何打开的元素或特性并将写入器重新设置为起始状态。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-311">Closes any open elements or attributes and puts the writer back in the Start state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a4fbb-312">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlWriter> 使用 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 方法和类创建实例， <xref:System.Xml.XmlWriterSettings> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-312">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a4fbb-313">下面的示例编写一个表示书的 XML 文件。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-313">The following example writes an XML file representing a book.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a4fbb-314">XML 文档无效。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-314">The XML document is invalid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndElement">
      <MemberSignature Language="C#" Value="public override void WriteEndElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteEndElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteEndElement" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteEndElement ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteEndElement();" />
      <MemberSignature Language="F#" Value="override this.WriteEndElement : unit -&gt; unit" Usage="xmlTextWriter.WriteEndElement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a4fbb-315">关闭一个元素并弹出相应的命名空间范围。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-315">Closes one element and pops the corresponding namespace scope.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a4fbb-316">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlWriter> 使用 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 方法和类创建实例， <xref:System.Xml.XmlWriterSettings> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-316">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="a4fbb-317">如果元素不包含任何内容，则会写入简短的结束标记 "/>";否则，将写入完整的结束标记。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-317">If the element contains no content a short end tag "/>" is written; otherwise a full end tag is written.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a4fbb-318">下面的示例编写一个表示书的 XML 文件。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-318">The following example writes an XML file representing a book.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteEndElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteEndElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteEndElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteEndElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteEndElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteEndElement Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteEntityRef">
      <MemberSignature Language="C#" Value="public override void WriteEntityRef (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteEntityRef(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteEntityRef(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteEntityRef (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteEntityRef(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.WriteEntityRef : string -&gt; unit" Usage="xmlTextWriter.WriteEntityRef name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="a4fbb-319">实体引用的名称。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-319">Name of the entity reference.</span></span></param>
        <summary><span data-ttu-id="a4fbb-320">按 <see langword="&amp;name;" /> 写出实体引用。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-320">Writes out an entity reference as <see langword="&amp;name;" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a4fbb-321">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlWriter> 使用 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 方法和类创建实例， <xref:System.Xml.XmlWriterSettings> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-321">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a4fbb-322">下面的示例编写一个表示书的 XML 文件。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-322">The following example writes an XML file representing a book.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a4fbb-323">该文本将导致格式不正确的 XML 文档；或者 <paramref name="name" /> 为 <see langword="null" /> 或 <see langword="String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-323">The text would result in a non-well formed XML document or <paramref name="name" /> is either <see langword="null" /> or <see langword="String.Empty" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteFullEndElement">
      <MemberSignature Language="C#" Value="public override void WriteFullEndElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteFullEndElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteFullEndElement" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteFullEndElement ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteFullEndElement();" />
      <MemberSignature Language="F#" Value="override this.WriteFullEndElement : unit -&gt; unit" Usage="xmlTextWriter.WriteFullEndElement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a4fbb-324">关闭一个元素并弹出相应的命名空间范围。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-324">Closes one element and pops the corresponding namespace scope.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a4fbb-325">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlWriter> 使用 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 方法和类创建实例， <xref:System.Xml.XmlWriterSettings> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-325">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="a4fbb-326">此方法始终写入完整的结束标记。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-326">This method always writes the full end tag.</span></span> <span data-ttu-id="a4fbb-327">当处理必须包含完整结束标记的元素时，这非常有用。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-327">This is useful when dealing with elements that must include a full end tag.</span></span> <span data-ttu-id="a4fbb-328">例如，浏览器需要用 "" 关闭 HTML 脚本块 \</script> 。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-328">For example, browsers expect HTML script blocks to be closed with "\</script>".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a4fbb-329">下面的示例写出不包含任何内容的元素。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-329">The following example writes out an element with no content.</span></span> <span data-ttu-id="a4fbb-330">它使用 WriteFullEndElement 来写入完整的结束元素标记。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-330">It uses WriteFullEndElement to write the full end element tag.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteFullEndElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteFullEndElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteFullEndElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteFullEndElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteFullEndElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteFullEndElement Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteName">
      <MemberSignature Language="C#" Value="public override void WriteName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteName (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.WriteName : string -&gt; unit" Usage="xmlTextWriter.WriteName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="a4fbb-331">要写出的名称。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-331">Name to write.</span></span></param>
        <summary><span data-ttu-id="a4fbb-332">写出指定的名称，确保它是符合 <see href="https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name">W3C XML 1.0 建议</see>的有效名称。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-332">Writes out the specified name, ensuring it is a valid name according to the <see href="https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name">W3C XML 1.0 recommendation</see>.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a4fbb-333">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlWriter> 使用 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 方法和类创建实例， <xref:System.Xml.XmlWriterSettings> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-333">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="a4fbb-334">如果 <xref:System.Xml.XmlTextWriter.Namespaces%2A> 设置为 `true` ， `WriteName` 还会根据 XML 中的 W3C 命名空间建议检查该名称是否有效。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-334">If <xref:System.Xml.XmlTextWriter.Namespaces%2A> is set to `true`, `WriteName` also checks that the name is also valid according to the W3C Namespaces in XML recommendation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a4fbb-335"><paramref name="name" /> 不是有效的 XML 名称，或者 <paramref name="name" /> 为 <see langword="null" /> 或 <see langword="String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-335"><paramref name="name" /> is not a valid XML name; or <paramref name="name" /> is either <see langword="null" /> or <see langword="String.Empty" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNmToken">
      <MemberSignature Language="C#" Value="public override void WriteNmToken (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteNmToken(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteNmToken(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteNmToken (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteNmToken(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.WriteNmToken : string -&gt; unit" Usage="xmlTextWriter.WriteNmToken name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="a4fbb-336">要写出的名称。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-336">Name to write.</span></span></param>
        <summary><span data-ttu-id="a4fbb-337">写出指定的名称，确保它是符合 <see href="https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name">W3C XML 1.0 建议</see>的有效 <see langword="NmToken" />。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-337">Writes out the specified name, ensuring it is a valid <see langword="NmToken" /> according to the <see href="https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name">W3C XML 1.0 recommendation</see>.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a4fbb-338">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlWriter> 使用 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 方法和类创建实例， <xref:System.Xml.XmlWriterSettings> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-338">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a4fbb-339"><paramref name="name" /> 不是有效的 <see langword="NmToken" />；或者 <paramref name="name" /> 为 <see langword="null" /> 或 <see langword="String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-339"><paramref name="name" /> is not a valid <see langword="NmToken" />; or <paramref name="name" /> is either <see langword="null" /> or <see langword="String.Empty" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteProcessingInstruction">
      <MemberSignature Language="C#" Value="public override void WriteProcessingInstruction (string name, string? text);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteProcessingInstruction(string name, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteProcessingInstruction (name As String, text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteProcessingInstruction(System::String ^ name, System::String ^ text);" />
      <MemberSignature Language="F#" Value="override this.WriteProcessingInstruction : string * string -&gt; unit" Usage="xmlTextWriter.WriteProcessingInstruction (name, text)" />
      <MemberSignature Language="C#" Value="public override void WriteProcessingInstruction (string name, string text);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="a4fbb-340">处理指令的名称。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-340">Name of the processing instruction.</span></span></param>
        <param name="text"><span data-ttu-id="a4fbb-341">要包括在处理指令中的文本。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-341">Text to include in the processing instruction.</span></span></param>
        <summary><span data-ttu-id="a4fbb-342">写出在名称和文本之间有空格的处理指令，如下所示：&lt;?name text?&gt;。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-342">Writes out a processing instruction with a space between the name and text as follows: &lt;?name text?&gt;.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a4fbb-343">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlWriter> 使用 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 方法和类创建实例， <xref:System.Xml.XmlWriterSettings> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-343">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="a4fbb-344">如果 `text` 为 `null` 或 `String.Empty` ，则此方法将写入， `ProcessingInstruction` 不包含任何数据内容，例如 \<?name?> 。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-344">If `text` is either `null` or `String.Empty`, this method writes a `ProcessingInstruction` with no data content, for example \<?name?>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a4fbb-345">下面的示例编写一个表示书的 XML 文件。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-345">The following example writes an XML file representing a book.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a4fbb-346">该文本将导致格式不正确的 XML 文档。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-346">The text would result in a non-well formed XML document.</span></span>  
  
 <span data-ttu-id="a4fbb-347"><paramref name="name" /> 为 <see langword="null" /> 或 <see langword="String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-347"><paramref name="name" /> is either <see langword="null" /> or <see langword="String.Empty" />.</span></span>  
  
<span data-ttu-id="a4fbb-348">调用了 <see cref="M:System.Xml.XmlTextWriter.WriteStartDocument" /> 后，使用此方法创建 XML 声明。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-348">This method is being used to create an XML declaration after <see cref="M:System.Xml.XmlTextWriter.WriteStartDocument" /> has already been called.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteQualifiedName">
      <MemberSignature Language="C#" Value="public override void WriteQualifiedName (string localName, string? ns);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteQualifiedName(string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteQualifiedName (localName As String, ns As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteQualifiedName(System::String ^ localName, System::String ^ ns);" />
      <MemberSignature Language="F#" Value="override this.WriteQualifiedName : string * string -&gt; unit" Usage="xmlTextWriter.WriteQualifiedName (localName, ns)" />
      <MemberSignature Language="C#" Value="public override void WriteQualifiedName (string localName, string ns);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName"><span data-ttu-id="a4fbb-349">要写入的本地名称。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-349">The local name to write.</span></span></param>
        <param name="ns"><span data-ttu-id="a4fbb-350">与该名称关联的命名空间 URI。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-350">The namespace URI to associate with the name.</span></span></param>
        <summary><span data-ttu-id="a4fbb-351">写出命名空间限定的名称。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-351">Writes out the namespace-qualified name.</span></span> <span data-ttu-id="a4fbb-352">此方法查找位于给定命名空间范围内的前缀。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-352">This method looks up the prefix that is in scope for the given namespace.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a4fbb-353">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlWriter> 使用 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 方法和类创建实例， <xref:System.Xml.XmlWriterSettings> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-353">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="a4fbb-354">例如，以下 Microsoft Visual c # 代码：</span><span class="sxs-lookup"><span data-stu-id="a4fbb-354">For example, the following Microsoft Visual C# code:</span></span>  
  
```csharp  
writer.Formatting = Formatting.Indented;  
writer.WriteStartElement("root");  
 writer.WriteAttributeString("xmlns","x",null,"urn:abc");  
 writer.WriteStartElement("item");  
 writer.WriteStartAttribute("href",null);  
 writer.WriteString("#");  
 writer.WriteQualifiedName("test","urn:abc");  
 writer.WriteEndAttribute();  
 writer.WriteEndElement();  
 writer.WriteEndElement();  
 writer.Close();  
```  
  
 <span data-ttu-id="a4fbb-355">生成以下输出：</span><span class="sxs-lookup"><span data-stu-id="a4fbb-355">Generates the following output:</span></span>  
  
```xml  
<root xmlns:x="urn:abc">  
 <item href="#x:test"/>  
 </root>  
```  
  
 <span data-ttu-id="a4fbb-356">如果 `ns` 映射到当前的默认命名空间，则不生成前缀。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-356">If `ns` maps to the current default namespace, no prefix is generated.</span></span>  
  
 <span data-ttu-id="a4fbb-357">写入属性值时，如果未找到，此方法将生成前缀 `ns` 。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-357">When writing attribute values, this method generates a prefix if `ns` is not found.</span></span> <span data-ttu-id="a4fbb-358">在写入元素内容时，如果找不到，则会引发异常 `ns` 。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-358">When writing element content, it throws an exception if `ns` is not found.</span></span>  
  
 <span data-ttu-id="a4fbb-359">如果此编写器支持 (<xref:System.Xml.XmlTextWriter.Namespaces%2A> 设置为) 的命名空间 `true` ，则此方法还会根据 " [XML 中的 W3C 命名空间" 建议](https://www.w3.org/TR/REC-xml-names)检查该名称是否有效。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-359">If this writer supports namespaces (<xref:System.Xml.XmlTextWriter.Namespaces%2A> is set to `true`), this method also checks that the name is valid according to the [W3C Namespaces in XML recommendation](https://www.w3.org/TR/REC-xml-names).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a4fbb-360">以下示例写出 XSD 架构的一部分。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-360">The following example writes out a portion of a XSD schema.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteQualifiedName Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteQualifiedName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteQualifiedName Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteQualifiedName Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteQualifiedName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteQualifiedName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a4fbb-361"><paramref name="localName" /> 为 <see langword="null" /> 或 <see langword="String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-361"><paramref name="localName" /> is either <see langword="null" /> or <see langword="String.Empty" />.</span></span>  
  
 <span data-ttu-id="a4fbb-362">根据 W3C 命名空间规范，<paramref name="localName" /> 不是有效的名称。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-362"><paramref name="localName" /> is not a valid name according to the W3C Namespaces spec.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteRaw">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a4fbb-363">手动写入原始标记。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-363">Writes raw markup manually.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a4fbb-364">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlWriter> 使用 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 方法和类创建实例， <xref:System.Xml.XmlWriterSettings> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-364">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteRaw">
      <MemberSignature Language="C#" Value="public override void WriteRaw (string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteRaw(string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteRaw(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteRaw (data As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteRaw(System::String ^ data);" />
      <MemberSignature Language="F#" Value="override this.WriteRaw : string -&gt; unit" Usage="xmlTextWriter.WriteRaw data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="a4fbb-365">包含要写入的文本的字符串。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-365">String containing the text to write.</span></span></param>
        <summary><span data-ttu-id="a4fbb-366">从字符串手动写入原始标记。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-366">Writes raw markup manually from a string.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a4fbb-367">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlWriter> 使用 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 方法和类创建实例， <xref:System.Xml.XmlWriterSettings> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-367">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="a4fbb-368">此方法不会对特殊字符进行转义。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-368">This method does not escape special characters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a4fbb-369">不 <xref:System.Xml.XmlTextWriter> 会验证传递给方法的任何数据 <xref:System.Xml.XmlTextWriter.WriteRaw%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-369">The <xref:System.Xml.XmlTextWriter> does not validate any data that is passed to the <xref:System.Xml.XmlTextWriter.WriteRaw%2A> method.</span></span> <span data-ttu-id="a4fbb-370">不应向此方法传递任意数据。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-370">You should not pass arbitrary data to this method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a4fbb-371">下面的示例使用方法写入字符串 `WriteRaw` 。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-371">The following example writes a string using the `WriteRaw` method.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteRaw1 Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteRaw1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteRaw1 Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteRaw1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteRaw1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteRaw1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteRaw">
      <MemberSignature Language="C#" Value="public override void WriteRaw (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteRaw(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteRaw (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteRaw(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.WriteRaw : char[] * int * int -&gt; unit" Usage="xmlTextWriter.WriteRaw (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="a4fbb-372">包含要写入的文本的字符数组。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-372">Character array containing the text to write.</span></span></param>
        <param name="index"><span data-ttu-id="a4fbb-373">缓冲区中的位置，指示要写入文本的起始位置。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-373">The position within the buffer indicating the start of the text to write.</span></span></param>
        <param name="count"><span data-ttu-id="a4fbb-374">要写入的字符数。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-374">The number of characters to write.</span></span></param>
        <summary><span data-ttu-id="a4fbb-375">从字符缓冲区手动写入原始标记。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-375">Writes raw markup manually from a character buffer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a4fbb-376">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlWriter> 使用 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 方法和类创建实例， <xref:System.Xml.XmlWriterSettings> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-376">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="a4fbb-377">此方法不会对特殊字符进行转义。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-377">This method does not escape special characters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a4fbb-378">不 <xref:System.Xml.XmlTextWriter> 会验证传递给方法的任何数据 <xref:System.Xml.XmlTextWriter.WriteRaw%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-378">The <xref:System.Xml.XmlTextWriter> does not validate any data that is passed to the <xref:System.Xml.XmlTextWriter.WriteRaw%2A> method.</span></span> <span data-ttu-id="a4fbb-379">不应向此方法传递任意数据。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-379">You should not pass arbitrary data to this method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a4fbb-380"><paramref name="buffer" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-380"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="a4fbb-381"><paramref name="index" /> 或 <paramref name="count" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-381"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="a4fbb-382">- 或 -</span><span class="sxs-lookup"><span data-stu-id="a4fbb-382">-or-</span></span> 
<span data-ttu-id="a4fbb-383">缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-383">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartAttribute">
      <MemberSignature Language="C#" Value="public override void WriteStartAttribute (string? prefix, string localName, string? ns);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteStartAttribute(string prefix, string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteStartAttribute (prefix As String, localName As String, ns As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteStartAttribute(System::String ^ prefix, System::String ^ localName, System::String ^ ns);" />
      <MemberSignature Language="F#" Value="override this.WriteStartAttribute : string * string * string -&gt; unit" Usage="xmlTextWriter.WriteStartAttribute (prefix, localName, ns)" />
      <MemberSignature Language="C#" Value="public override void WriteStartAttribute (string prefix, string localName, string ns);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix"><span data-ttu-id="a4fbb-384">特性的 <see langword="Namespace" /> 前缀。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-384"><see langword="Namespace" /> prefix of the attribute.</span></span></param>
        <param name="localName"><span data-ttu-id="a4fbb-385">特性的 <see langword="LocalName" />。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-385"><see langword="LocalName" /> of the attribute.</span></span></param>
        <param name="ns"><span data-ttu-id="a4fbb-386">特性的 <see langword="NamespaceURI" /></span><span class="sxs-lookup"><span data-stu-id="a4fbb-386"><see langword="NamespaceURI" /> of the attribute</span></span></param>
        <summary><span data-ttu-id="a4fbb-387">写入属性的开头。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-387">Writes the start of an attribute.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a4fbb-388">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlWriter> 使用 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 方法和类创建实例， <xref:System.Xml.XmlWriterSettings> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-388">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="a4fbb-389">这是的更高级版本 <xref:System.Xml.XmlWriter.WriteAttributeString%2A> ，它使你可以使用多种写入方法（如）编写属性值 <xref:System.Xml.XmlTextWriter.WriteString%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-389">This is a more advanced version of <xref:System.Xml.XmlWriter.WriteAttributeString%2A> that allows you to write an attribute value using multiple write methods, such as <xref:System.Xml.XmlTextWriter.WriteString%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a4fbb-390">以下示例写出书籍。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-390">The following example writes out a book.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a4fbb-391"><paramref name="localName" /> 为 <see langword="null" /> 或 <see langword="String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-391"><paramref name="localName" /> is either <see langword="null" /> or <see langword="String.Empty" />.</span></span></exception>
        <altmember cref="M:System.Xml.XmlTextWriter.WriteEndAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteStartDocument">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a4fbb-392">写入版本为“1.0”的 XML 声明。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-392">Writes the XML declaration with the version "1.0".</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a4fbb-393">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlWriter> 使用 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 方法和类创建实例， <xref:System.Xml.XmlWriterSettings> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-393">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteStartDocument">
      <MemberSignature Language="C#" Value="public override void WriteStartDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteStartDocument() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteStartDocument" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteStartDocument ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteStartDocument();" />
      <MemberSignature Language="F#" Value="override this.WriteStartDocument : unit -&gt; unit" Usage="xmlTextWriter.WriteStartDocument " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a4fbb-394">写入版本为“1.0”的 XML 声明。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-394">Writes the XML declaration with the version "1.0".</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a4fbb-395">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlWriter> 使用 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 方法和类创建实例， <xref:System.Xml.XmlWriterSettings> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-395">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="a4fbb-396">文档的编码级别由编写器的实现方式决定。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-396">The encoding level of the document is determined by how the writer is implemented.</span></span> <span data-ttu-id="a4fbb-397">例如，如果 <xref:System.Text.Encoding> 在构造函数中指定了对象 `XmlTextWriter` ，这将确定 encoding 特性的值。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-397">For example, if an <xref:System.Text.Encoding> object is specified in the `XmlTextWriter` constructor, this determines the value of the encoding attribute.</span></span> <span data-ttu-id="a4fbb-398">此方法不创建独立属性。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-398">This method does not create a standalone attribute.</span></span>  
  
 <span data-ttu-id="a4fbb-399">当 `WriteStartDocument` 调用时，编写器验证你编写的内容是否是格式正确的 XML 文档。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-399">When `WriteStartDocument` is called the writer validates that what you are writing is a well-formed XML document.</span></span> <span data-ttu-id="a4fbb-400">例如，它将检查 XML 声明是否为第一个节点，该节点只存在一个根级别的元素，依此类推。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-400">For example, it checks that the XML declaration is the first node, that one and only one root-level element exists and so on.</span></span> <span data-ttu-id="a4fbb-401">如果未调用此方法，编写器将假设正在编写 XML 片段，并且不应用根级别规则。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-401">If this method is not called, the writer assumes an XML fragment is being written and applies no root level rules.</span></span>  
  
 <span data-ttu-id="a4fbb-402">如果已 `WriteStartDocument` 调用，然后 <xref:System.Xml.XmlTextWriter.WriteProcessingInstruction%2A> 使用方法创建另一个 XML 声明，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-402">If `WriteStartDocument` has been called and then the <xref:System.Xml.XmlTextWriter.WriteProcessingInstruction%2A> method is used to create another XML declaration, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a4fbb-403">下面的示例编写一个表示书的 XML 文件。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-403">The following example writes an XML file representing a book.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a4fbb-404">这不是在构造函数后调用的第一个写方法。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-404">This is not the first write method called after the constructor.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartDocument">
      <MemberSignature Language="C#" Value="public override void WriteStartDocument (bool standalone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteStartDocument(bool standalone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteStartDocument (standalone As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteStartDocument(bool standalone);" />
      <MemberSignature Language="F#" Value="override this.WriteStartDocument : bool -&gt; unit" Usage="xmlTextWriter.WriteStartDocument standalone" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="standalone" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="standalone"><span data-ttu-id="a4fbb-405">如果为 <see langword="true" />，则它将写入"standalone=yes"；如果为 <see langword="false" />，则它将写入"standalone=no"。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-405">If <see langword="true" />, it writes "standalone=yes"; if <see langword="false" />, it writes "standalone=no".</span></span></param>
        <summary><span data-ttu-id="a4fbb-406">写入版本为“1.0”的 XML 声明和独立的属性。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-406">Writes the XML declaration with the version "1.0" and the standalone attribute.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a4fbb-407">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlWriter> 使用 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 方法和类创建实例， <xref:System.Xml.XmlWriterSettings> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-407">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="a4fbb-408">文档的编码级别由编写器的实现方式决定。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-408">The encoding level of the document is determined by how the writer is implemented.</span></span> <span data-ttu-id="a4fbb-409">例如，如果 <xref:System.Text.Encoding> 在构造函数中指定了对象 `XmlTextWriter` ，这将确定 encoding 特性的值。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-409">For example, if an <xref:System.Text.Encoding> object is specified in the `XmlTextWriter` constructor, this determines the value of the encoding attribute.</span></span>  
  
 <span data-ttu-id="a4fbb-410">当 `WriteStartDocument` 调用时，编写器验证你编写的内容是否是格式正确的 XML 文档。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-410">When `WriteStartDocument` is called the writer validates that what you are writing is a well-formed XML document.</span></span> <span data-ttu-id="a4fbb-411">例如，它将检查 XML 声明是否为第一个节点，该节点只存在一个根级别的元素，依此类推。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-411">For example, it checks that the XML declaration is the first node, that one and only one root-level element exists and so on.</span></span> <span data-ttu-id="a4fbb-412">如果未调用此方法，编写器将假设正在编写 XML 片段，并且不应用根级别规则。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-412">If this method is not called, the writer assumes an XML fragment is being written and applies no root level rules.</span></span>  
  
 <span data-ttu-id="a4fbb-413">如果已 `WriteStartDocument` 调用，然后 <xref:System.Xml.XmlTextWriter.WriteProcessingInstruction%2A> 使用方法创建另一个 XML 声明，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-413">If `WriteStartDocument` has been called and then the <xref:System.Xml.XmlTextWriter.WriteProcessingInstruction%2A> method is used to create another XML declaration, an exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a4fbb-414">这不是在构造函数后调用的第一个写方法。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-414">This is not the first write method called after the constructor.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartElement">
      <MemberSignature Language="C#" Value="public override void WriteStartElement (string? prefix, string localName, string? ns);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteStartElement(string prefix, string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteStartElement (prefix As String, localName As String, ns As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteStartElement(System::String ^ prefix, System::String ^ localName, System::String ^ ns);" />
      <MemberSignature Language="F#" Value="override this.WriteStartElement : string * string * string -&gt; unit" Usage="xmlTextWriter.WriteStartElement (prefix, localName, ns)" />
      <MemberSignature Language="C#" Value="public override void WriteStartElement (string prefix, string localName, string ns);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix"><span data-ttu-id="a4fbb-415">元素的命名空间前缀。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-415">The namespace prefix of the element.</span></span></param>
        <param name="localName"><span data-ttu-id="a4fbb-416">元素的本地名称。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-416">The local name of the element.</span></span></param>
        <param name="ns"><span data-ttu-id="a4fbb-417">与元素关联的命名空间 URI。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-417">The namespace URI to associate with the element.</span></span> <span data-ttu-id="a4fbb-418">如果此命名空间已在范围中并具有关联的前缀，则写入器还自动写入该前缀。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-418">If this namespace is already in scope and has an associated prefix then the writer automatically writes that prefix also.</span></span></param>
        <summary><span data-ttu-id="a4fbb-419">写入指定的开始标记并将其与给定的命名空间和前缀关联起来。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-419">Writes the specified start tag and associates it with the given namespace and prefix.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a4fbb-420">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlWriter> 使用 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 方法和类创建实例， <xref:System.Xml.XmlWriterSettings> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-420">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="a4fbb-421">调用此方法后，可以使用 <xref:System.Xml.XmlTextWriter.WriteComment%2A> 、 <xref:System.Xml.XmlTextWriter.WriteString%2A> 或子元素编写特性或创建内容 <xref:System.Xml.XmlTextWriter.WriteStartElement%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-421">After calling this method you can either write attributes or create content using <xref:System.Xml.XmlTextWriter.WriteComment%2A>, <xref:System.Xml.XmlTextWriter.WriteString%2A>, or <xref:System.Xml.XmlTextWriter.WriteStartElement%2A> for child elements.</span></span> <span data-ttu-id="a4fbb-422">可以关闭元素，此时将 <xref:System.Xml.XmlTextWriter.WriteEndElement%2A> 结束标记写出。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-422">You can close the element with <xref:System.Xml.XmlTextWriter.WriteEndElement%2A> at which time an end tag is written out.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a4fbb-423">以下示例写出书籍。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-423">The following example writes out a book.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a4fbb-424">编写器已关闭。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-424">The writer is closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteState">
      <MemberSignature Language="C#" Value="public override System.Xml.WriteState WriteState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.WriteState WriteState" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextWriter.WriteState" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property WriteState As WriteState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::WriteState WriteState { System::Xml::WriteState get(); };" />
      <MemberSignature Language="F#" Value="member this.WriteState : System.Xml.WriteState" Usage="System.Xml.XmlTextWriter.WriteState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.WriteState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a4fbb-425">获取写入器的状态。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-425">Gets the state of the writer.</span></span></summary>
        <value><span data-ttu-id="a4fbb-426"><see cref="T:System.Xml.WriteState" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-426">One of the <see cref="T:System.Xml.WriteState" /> values.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a4fbb-427">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlWriter> 使用 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 方法和类创建实例， <xref:System.Xml.XmlWriterSettings> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-427">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public override void WriteString (string? text);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteString(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteString (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteString(System::String ^ text);" />
      <MemberSignature Language="F#" Value="override this.WriteString : string -&gt; unit" Usage="xmlTextWriter.WriteString text" />
      <MemberSignature Language="C#" Value="public override void WriteString (string text);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="a4fbb-428">要写入的文本。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-428">Text to write.</span></span></param>
        <summary><span data-ttu-id="a4fbb-429">写入给定的文本内容。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-429">Writes the given text content.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a4fbb-430">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlWriter> 使用 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 方法和类创建实例， <xref:System.Xml.XmlWriterSettings> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-430">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="a4fbb-431">`WriteString` 执行以下</span><span class="sxs-lookup"><span data-stu-id="a4fbb-431">`WriteString` does the following</span></span>  
  
-   <span data-ttu-id="a4fbb-432">字符 `&` 、 `<` 和 `>` 分别替换为 `&amp;` 、 `&lt;` 和 `&gt;` 。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-432">The characters `&`, `<`, and `>` are replaced with `&amp;`, `&lt;`, and `&gt;`, respectively.</span></span>  
  
-   <span data-ttu-id="a4fbb-433">介于 0x-0x1F (范围内的字符值不包括空格字符0x9、0xA 和 0xD) 将替换为 (通过) 的数字字符实体 `&#0;` `&#0x1F` 。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-433">Character values in the range 0x-0x1F (excluding white space characters 0x9, 0xA, and 0xD) are replaced with numeric character entities (`&#0;` through `&#0x1F`).</span></span>  
  
-   <span data-ttu-id="a4fbb-434">如果 `WriteString` 在属性值的上下文中调用，则双引号分别替换为 `&quot;` 和 `&apos;` 。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-434">If `WriteString` is called in the context of an attribute value, double and single quotes are replaced with `&quot;` and `&apos;` respectively.</span></span>  
  
 <span data-ttu-id="a4fbb-435">例如，将此输入字符串 `test<item>test` 编写为</span><span class="sxs-lookup"><span data-stu-id="a4fbb-435">For example, this input string `test<item>test` is written as</span></span>  
  
```  
test&lt;item&gt;test  
```  
  
 <span data-ttu-id="a4fbb-436">如果 `text` 是 `null` 或 `String.Empty` ，则此方法会写入没有数据内容的文本节点。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-436">If `text` is either `null` or `String.Empty`, this method writes a text node with no data content.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a4fbb-437">下面的示例写入 XML 片段。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-437">The following example writes an XML fragment.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.Formatting Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.Formatting Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.Formatting Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.Formatting Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.Formatting Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.Formatting Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a4fbb-438">文本字符串包含无效的代理项对。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-438">The text string contains an invalid surrogate pair.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteSurrogateCharEntity">
      <MemberSignature Language="C#" Value="public override void WriteSurrogateCharEntity (char lowChar, char highChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteSurrogateCharEntity(char lowChar, char highChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteSurrogateCharEntity (lowChar As Char, highChar As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteSurrogateCharEntity(char lowChar, char highChar);" />
      <MemberSignature Language="F#" Value="override this.WriteSurrogateCharEntity : char * char -&gt; unit" Usage="xmlTextWriter.WriteSurrogateCharEntity (lowChar, highChar)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lowChar" Type="System.Char" />
        <Parameter Name="highChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="lowChar"><span data-ttu-id="a4fbb-439">低代理项。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-439">The low surrogate.</span></span> <span data-ttu-id="a4fbb-440">它必须是介于 <see langword="0xDC00" /> 和 <see langword="0xDFFF" /> 之间的值。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-440">This must be a value between <see langword="0xDC00" /> and <see langword="0xDFFF" />.</span></span></param>
        <param name="highChar"><span data-ttu-id="a4fbb-441">高代理项。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-441">The high surrogate.</span></span> <span data-ttu-id="a4fbb-442">它必须是介于 <see langword="0xD800" /> 和 <see langword="0xDBFF" /> 之间的值。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-442">This must be a value between <see langword="0xD800" /> and <see langword="0xDBFF" />.</span></span></param>
        <summary><span data-ttu-id="a4fbb-443">为代理项字符对生成并写入代理项字符实体。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-443">Generates and writes the surrogate character entity for the surrogate character pair.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a4fbb-444">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlWriter> 使用 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 方法和类创建实例， <xref:System.Xml.XmlWriterSettings> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-444">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="a4fbb-445">此方法仅适用于使用 UTF-16 编码的系统。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-445">This method is only applicable on systems that use UTF-16 encoding.</span></span>  
  
 <span data-ttu-id="a4fbb-446">代理项字符实体是以十六进制格式编写的。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-446">The surrogate character entity is written in hexadecimal format.</span></span> <span data-ttu-id="a4fbb-447">代理项字符的范围为 `#x10000` `#x10FFFF` 。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-447">The range for surrogate characters is `#x10000` to `#x10FFFF`.</span></span> <span data-ttu-id="a4fbb-448">以下公式用于生成代理项字符实体： (`highChar`  -  `0xD800`) \* `0x400` + (`lowChar`  -  `0xDC00`) + `0x10000` 。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-448">The following formula is used to generate the surrogate character entity: (`highChar` - `0xD800`) \* `0x400` + (`lowChar` - `0xDC00`) + `0x10000`.</span></span>  
  
 <span data-ttu-id="a4fbb-449">对于 HTML 和 XML，文档字符集 (，因此) 的数字字符引用的表示法基于 UCS [ISO-10646]。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-449">For both HTML and XML, the document character set (and therefore the notation of numeric character references) is based on UCS [ISO-10646].</span></span> <span data-ttu-id="a4fbb-450">因此，在某些情况下，源文档中的单个数字字符引用可以与字符串中的 2 16 位单元相对应 (高代理项和低代理项) 。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-450">A single numeric character reference in a source document may therefore in some cases correspond to two 16-bit units in a string (a high surrogate and a low surrogate).</span></span> <span data-ttu-id="a4fbb-451">这些16位单元称为代理项对。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-451">These 16-bit units are referred to as a surrogate pair.</span></span>  
  
 <span data-ttu-id="a4fbb-452">有关代理项或字符的详细信息，请参阅 [Unicode 3.0/unicode 2.0 标准](https://www.unicode.org)的3.7 节或 [W3C XML 1.0 建议的第2.2 部分](https://www.w3.org/TR/REC-xml#charsets)。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-452">For more information regarding surrogates or characters, refer to section 3.7 of the [Unicode 3.0/Unicode 2.0 standard](https://www.unicode.org), or [section 2.2 of the W3C XML 1.0 Recommendation](https://www.w3.org/TR/REC-xml#charsets).</span></span>
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception"><span data-ttu-id="a4fbb-453">传递了无效的代理项字符对。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-453">An invalid surrogate character pair was passed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteWhitespace">
      <MemberSignature Language="C#" Value="public override void WriteWhitespace (string? ws);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteWhitespace(string ws) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteWhitespace(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteWhitespace (ws As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteWhitespace(System::String ^ ws);" />
      <MemberSignature Language="F#" Value="override this.WriteWhitespace : string -&gt; unit" Usage="xmlTextWriter.WriteWhitespace ws" />
      <MemberSignature Language="C#" Value="public override void WriteWhitespace (string ws);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ws" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ws"><span data-ttu-id="a4fbb-454">空格字符的字符串。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-454">The string of white space characters.</span></span></param>
        <summary><span data-ttu-id="a4fbb-455">写出给定的空白区域。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-455">Writes out the given white space.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a4fbb-456">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlWriter> 使用 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 方法和类创建实例， <xref:System.Xml.XmlWriterSettings> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-456">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="a4fbb-457">此方法用于手动设置文档格式。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-457">This method is used to manually format your document.</span></span> <span data-ttu-id="a4fbb-458">使用 <xref:System.Xml.XmlTextWriter.Formatting%2A> 属性使编写器自动设置输出格式。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-458">Use the <xref:System.Xml.XmlTextWriter.Formatting%2A> property to have the writer format the output automatically.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a4fbb-459">下面的示例使用 `WriteWhitespace` 方法来控制文件的格式设置。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-459">The following example uses the `WriteWhitespace` method to control how the file is formatted.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.XmlSpace Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.XmlSpace Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.XmlSpace Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.XmlSpace Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.XmlSpace Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.XmlSpace Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a4fbb-460">字符串包含非空白字符。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-460">The string contains non-white space characters.</span></span></exception>
        <altmember cref="P:System.Xml.XmlTextWriter.Formatting" />
      </Docs>
    </Member>
    <Member MemberName="XmlLang">
      <MemberSignature Language="C#" Value="public override string? XmlLang { get; }" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance string XmlLang" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextWriter.XmlLang" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property XmlLang As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ XmlLang { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.XmlLang : string" Usage="System.Xml.XmlTextWriter.XmlLang" />
      <MemberSignature Language="C#" Value="public override string XmlLang { get; }" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a4fbb-461">获取当前 <see langword="xml:lang" /> 范围。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-461">Gets the current <see langword="xml:lang" /> scope.</span></span></summary>
        <value><span data-ttu-id="a4fbb-462">当前 <see langword="xml:lang" />；或者如果当前范围中没有 <see langword="null" />，则为 <see langword="xml:lang" />。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-462">The current <see langword="xml:lang" /> or <see langword="null" /> if there is no <see langword="xml:lang" /> in the current scope.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a4fbb-463">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlWriter> 使用 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 方法和类创建实例， <xref:System.Xml.XmlWriterSettings> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-463">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="a4fbb-464">此属性允许一个组件确定另一个组件将编写器留给编写器的状态。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-464">This property allows one component to find out what state another component has left the writer in.</span></span> <span data-ttu-id="a4fbb-465">例如，可能有一个组件要告诉另一个要生成的语言帮助文本。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-465">For example, perhaps one component wants to tell another which language help text to generate.</span></span> <span data-ttu-id="a4fbb-466">语言信息通过编写属性进行传达 `xml:lang` 。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-466">The language information is communicated by writing an `xml:lang` attribute.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlSpace">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlSpace XmlSpace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlSpace XmlSpace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextWriter.XmlSpace" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property XmlSpace As XmlSpace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlSpace XmlSpace { System::Xml::XmlSpace get(); };" />
      <MemberSignature Language="F#" Value="member this.XmlSpace : System.Xml.XmlSpace" Usage="System.Xml.XmlTextWriter.XmlSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlSpace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a4fbb-467">获取表示当前 <see langword="xml:space" /> 范围的 <see cref="T:System.Xml.XmlSpace" />。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-467">Gets an <see cref="T:System.Xml.XmlSpace" /> representing the current <see langword="xml:space" /> scope.</span></span></summary>
        <value><span data-ttu-id="a4fbb-468">一个表示当前 <see langword="XmlSpace" /> 范围的 <see langword="xml:space" />。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-468">An <see langword="XmlSpace" /> representing the current <see langword="xml:space" /> scope.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="a4fbb-469">值</span><span class="sxs-lookup"><span data-stu-id="a4fbb-469">Value</span></span> 
 </term><description> <span data-ttu-id="a4fbb-470">含义</span><span class="sxs-lookup"><span data-stu-id="a4fbb-470">Meaning</span></span> 
 </description></listheader><item><term> <span data-ttu-id="a4fbb-471">无</span><span class="sxs-lookup"><span data-stu-id="a4fbb-471">None</span></span> 
 </term><description> <span data-ttu-id="a4fbb-472">如果不存在 <see langword="xml:space" /> 范围，则此为默认值。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-472">This is the default if no <see langword="xml:space" /> scope exists.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="a4fbb-473">默认</span><span class="sxs-lookup"><span data-stu-id="a4fbb-473">Default</span></span> 
 </term><description> <span data-ttu-id="a4fbb-474">当前范围为 <see langword="xml:space" />="default"。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-474">The current scope is <see langword="xml:space" />="default".</span></span>  
  
 </description></item><item><term> <span data-ttu-id="a4fbb-475">保留</span><span class="sxs-lookup"><span data-stu-id="a4fbb-475">Preserve</span></span> 
 </term><description> <span data-ttu-id="a4fbb-476">当前范围为 <see langword="xml:space" />="preserve"。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-476">The current scope is <see langword="xml:space" />="preserve".</span></span>  
  
 </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a4fbb-477">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlWriter> 使用 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 方法和类创建实例， <xref:System.Xml.XmlWriterSettings> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-477">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="a4fbb-478">此属性允许一个组件确定另一个组件离开写入器的状态。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-478">This property allows one component to find out in what state another component has left the writer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a4fbb-479">下面的示例使用 `WriteWhitespace` 方法来控制文件的格式设置。</span><span class="sxs-lookup"><span data-stu-id="a4fbb-479">The following example uses the `WriteWhitespace` method to control how the file is formatted.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.XmlSpace Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.XmlSpace Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.XmlSpace Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.XmlSpace Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.XmlSpace Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.XmlSpace Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
