<Type Name="XmlTextReader" FullName="System.Xml.XmlTextReader">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fb04938474445e2b4818ce1bd9aae345ec2dfe38" /><Meta Name="ms.sourcegitcommit" Value="5484acfd78fc29edb48fc1ca6925046c4672954a" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/16/2020" /><Meta Name="ms.locfileid" Value="90704111" /></Metadata><TypeSignature Language="C#" Value="public class XmlTextReader : System.Xml.XmlReader, System.Xml.IXmlLineInfo, System.Xml.IXmlNamespaceResolver" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlTextReader extends System.Xml.XmlReader implements class System.Xml.IXmlLineInfo, class System.Xml.IXmlNamespaceResolver" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlTextReader" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlTextReader&#xA;Inherits XmlReader&#xA;Implements IXmlLineInfo, IXmlNamespaceResolver" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlTextReader : System::Xml::XmlReader, System::Xml::IXmlLineInfo, System::Xml::IXmlNamespaceResolver" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type XmlTextReader = class&#xA;    inherit XmlReader&#xA;    interface IXmlLineInfo&#xA;    interface IXmlNamespaceResolver" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C#" Value="public class XmlTextReader : System.Xml.XmlReader, System.Xml.IXmlLineInfo" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlTextReader extends System.Xml.XmlReader implements class System.Xml.IXmlLineInfo" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlTextReader&#xA;Inherits XmlReader&#xA;Implements IXmlLineInfo" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlTextReader : System::Xml::XmlReader, System::Xml::IXmlLineInfo" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="F#" Value="type XmlTextReader = class&#xA;    inherit XmlReader&#xA;    interface IXmlLineInfo" FrameworkAlternate="netframework-1.1" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Xml.ReaderWriter" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Xml.XmlReader</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Xml.IXmlLineInfo</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <InterfaceName>System.Xml.IXmlNamespaceResolver</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="61e99-101">表示提供对 XML 数据进行快速、非缓存、只进访问的读取器。</span><span class="sxs-lookup"><span data-stu-id="61e99-101">Represents a reader that provides fast, non-cached, forward-only access to XML data.</span></span>  
  
<span data-ttu-id="61e99-102">从 .NET Framework 2.0 开始，建议改用 <see cref="T:System.Xml.XmlReader" /> 类。</span><span class="sxs-lookup"><span data-stu-id="61e99-102">Starting with the .NET Framework 2.0, we recommend that you use the <see cref="T:System.Xml.XmlReader" /> class instead.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-103">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-103">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-104"><xref:System.Xml.XmlTextReader> 提供对 XML 数据流的只进只读访问。</span><span class="sxs-lookup"><span data-stu-id="61e99-104"><xref:System.Xml.XmlTextReader> provides forward-only, read-only access to a stream of XML data.</span></span> <span data-ttu-id="61e99-105">当前节点指读取器所处的节点。</span><span class="sxs-lookup"><span data-stu-id="61e99-105">The current node refers to the node on which the reader is positioned.</span></span> <span data-ttu-id="61e99-106">读取器是高级的，使用任何读取方法，属性反映当前节点的值。</span><span class="sxs-lookup"><span data-stu-id="61e99-106">The reader is advanced using any of the read methods and properties reflect the value of the current node.</span></span>  
  
 <span data-ttu-id="61e99-107">此类实现 <xref:System.Xml.XmlReader> 并符合 W3C 可扩展标记语言 (xml) 1.0 和 xml 中的命名空间的建议。</span><span class="sxs-lookup"><span data-stu-id="61e99-107">This class implements <xref:System.Xml.XmlReader> and conforms to the W3C Extensible Markup Language (XML) 1.0 and the Namespaces in XML recommendations.</span></span> <span data-ttu-id="61e99-108">`XmlTextReader` 提供以下功能：</span><span class="sxs-lookup"><span data-stu-id="61e99-108">`XmlTextReader` provides the following functionality:</span></span>  
  
-   <span data-ttu-id="61e99-109">强制执行格式正确的 XML 的规则。</span><span class="sxs-lookup"><span data-stu-id="61e99-109">Enforces the rules of well-formed XML.</span></span>  
  
-   <span data-ttu-id="61e99-110">`XmlTextReader` 不提供数据验证。</span><span class="sxs-lookup"><span data-stu-id="61e99-110">`XmlTextReader` does not provide data validation.</span></span>  
  
-   <span data-ttu-id="61e99-111">检查 `DocumentType` 节点的格式是否正确。</span><span class="sxs-lookup"><span data-stu-id="61e99-111">Checks that `DocumentType` nodes are well-formed.</span></span> <span data-ttu-id="61e99-112">`XmlTextReader` 检查 DTD 的格式是否正确，但不使用 DTD 进行验证。</span><span class="sxs-lookup"><span data-stu-id="61e99-112">`XmlTextReader` checks the DTD for well-formedness, but does not validate using the DTD.</span></span>  
  
-   <span data-ttu-id="61e99-113">对于的节点 <xref:System.Xml.XmlTextReader.NodeType%2A> 为 `XmlNodeType.EntityReference` ，将返回一个空 `EntityReference` 节点 (即， <xref:System.Xml.XmlTextReader.Value%2A> 属性为 `String.Empty`) 。</span><span class="sxs-lookup"><span data-stu-id="61e99-113">For nodes where <xref:System.Xml.XmlTextReader.NodeType%2A> is `XmlNodeType.EntityReference`, a single empty `EntityReference` node is returned (that is, the <xref:System.Xml.XmlTextReader.Value%2A> property is `String.Empty`).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="61e99-114">DTD 中实体的实际声明称为 `Entity` 节点。</span><span class="sxs-lookup"><span data-stu-id="61e99-114">The actual declarations of entities in the DTD are called `Entity` nodes.</span></span> <span data-ttu-id="61e99-115">当你在数据中引用这些节点时，它们称为 `EntityReference` 节点。</span><span class="sxs-lookup"><span data-stu-id="61e99-115">When you refer to these nodes in your data, they are called `EntityReference` nodes.</span></span>  
  
-   <span data-ttu-id="61e99-116">不扩展默认属性。</span><span class="sxs-lookup"><span data-stu-id="61e99-116">Does not expand default attributes.</span></span>  
  
 <span data-ttu-id="61e99-117">由于 `XmlTextReader` 不会执行数据验证所需的额外检查，因此它提供了快速格式正确的分析器。</span><span class="sxs-lookup"><span data-stu-id="61e99-117">Because the `XmlTextReader` does not perform the extra checks required for data validation, it provides a fast well-formedness parser.</span></span>  
  
 <span data-ttu-id="61e99-118">若要执行数据验证，请使用验证 <xref:System.Xml.XmlReader> 。</span><span class="sxs-lookup"><span data-stu-id="61e99-118">To perform data validation, use a validating <xref:System.Xml.XmlReader>.</span></span>  
  
 <span data-ttu-id="61e99-119">若要从读取 XML 数据 <xref:System.Xml.XmlDocument> ，请使用 <xref:System.Xml.XmlNodeReader> 。</span><span class="sxs-lookup"><span data-stu-id="61e99-119">To read XML data from an <xref:System.Xml.XmlDocument>, use <xref:System.Xml.XmlNodeReader>.</span></span>  
  
 <span data-ttu-id="61e99-120">`XmlTextReader` 引发 <xref:System.Xml.XmlException> ON XML 分析错误。</span><span class="sxs-lookup"><span data-stu-id="61e99-120">`XmlTextReader` throws an <xref:System.Xml.XmlException> on XML parse errors.</span></span> <span data-ttu-id="61e99-121">引发异常后，读取器的状态不可预测。</span><span class="sxs-lookup"><span data-stu-id="61e99-121">After an exception is thrown the state of the reader is not predictable.</span></span> <span data-ttu-id="61e99-122">例如，报告的节点类型可能不同于当前节点的实际节点类型。</span><span class="sxs-lookup"><span data-stu-id="61e99-122">For example, the reported node type may be different than the actual node type of the current node.</span></span> <span data-ttu-id="61e99-123">使用 <xref:System.Xml.XmlTextReader.ReadState%2A> 属性检查读取器是否处于错误状态。</span><span class="sxs-lookup"><span data-stu-id="61e99-123">Use the <xref:System.Xml.XmlTextReader.ReadState%2A> property to check whether a reader is in error state.</span></span>  
  
## <a name="security-considerations"></a><span data-ttu-id="61e99-124">安全注意事项</span><span class="sxs-lookup"><span data-stu-id="61e99-124">Security Considerations</span></span>  
 <span data-ttu-id="61e99-125">下面是使用类时要考虑的事项 <xref:System.Xml.XmlTextReader> 。</span><span class="sxs-lookup"><span data-stu-id="61e99-125">The following are things to consider when using the <xref:System.Xml.XmlTextReader> class.</span></span>  
  
-   <span data-ttu-id="61e99-126">引发的异常 <xref:System.Xml.XmlTextReader> 可能会泄露您不希望冒泡到应用程序的路径信息。</span><span class="sxs-lookup"><span data-stu-id="61e99-126">Exceptions thrown the <xref:System.Xml.XmlTextReader> can disclose path information that you do not want bubbled up to the application.</span></span> <span data-ttu-id="61e99-127">应用程序必须捕获异常并进行相应的处理。</span><span class="sxs-lookup"><span data-stu-id="61e99-127">Your applications must catch exceptions and process them appropriately.</span></span>  
  
-   <span data-ttu-id="61e99-128">默认情况下启用 DTD 处理。</span><span class="sxs-lookup"><span data-stu-id="61e99-128">DTD processing is enabled by default.</span></span> <span data-ttu-id="61e99-129">如果你担心拒绝服务问题，或者如果你正在处理不受信任的源，请禁用 DTD 处理。</span><span class="sxs-lookup"><span data-stu-id="61e99-129">Disable DTD processing if you are concerned about Denial of Service issues or if you are dealing with untrusted sources.</span></span> <span data-ttu-id="61e99-130">将 <xref:System.Xml.XmlTextReader.DtdProcessing%2A> 属性设置为以 <xref:System.Xml.DtdProcessing.Prohibit> 禁用 DTD 处理。</span><span class="sxs-lookup"><span data-stu-id="61e99-130">Set the <xref:System.Xml.XmlTextReader.DtdProcessing%2A> property to <xref:System.Xml.DtdProcessing.Prohibit> to disable DTD processing.</span></span>  
  
     <span data-ttu-id="61e99-131">如果启用了 DTD 处理，可以使用 <xref:System.Xml.XmlSecureResolver> 限制 <xref:System.Xml.XmlTextReader> 可以访问的资源。</span><span class="sxs-lookup"><span data-stu-id="61e99-131">If you have DTD processing enabled, you can use the <xref:System.Xml.XmlSecureResolver> to restrict the resources that the <xref:System.Xml.XmlTextReader> can access.</span></span> <span data-ttu-id="61e99-132">还可以设计应用程序以使 XML 处理受内存和时间的约束。</span><span class="sxs-lookup"><span data-stu-id="61e99-132">You can also design your application so that the XML processing is memory and time constrained.</span></span> <span data-ttu-id="61e99-133">例如，在 ASP.NET 应用程序中配置超时限制。</span><span class="sxs-lookup"><span data-stu-id="61e99-133">For example, configure time-out limits in your ASP.NET application.</span></span>  
  
-   <span data-ttu-id="61e99-134">XML 数据可以包含对外部资源（如 DTD 文件）的引用。</span><span class="sxs-lookup"><span data-stu-id="61e99-134">XML data can include references to external resources such as a DTD file.</span></span> <span data-ttu-id="61e99-135">默认情况下，外部资源使用没有用户凭据的 <xref:System.Xml.XmlUrlResolver> 对象进行解析。</span><span class="sxs-lookup"><span data-stu-id="61e99-135">By default external resources are resolved using an <xref:System.Xml.XmlUrlResolver> object with no user credentials.</span></span> <span data-ttu-id="61e99-136">通过执行下列操作之一，可以使此操作更加安全：</span><span class="sxs-lookup"><span data-stu-id="61e99-136">You can secure this further by doing one of the following:</span></span>  
  
    -   <span data-ttu-id="61e99-137">通过将 <xref:System.Xml.XmlTextReader> 属性设置为 <xref:System.Xml.XmlTextReader.XmlResolver%2A> 对象限制 <xref:System.Xml.XmlSecureResolver> 可访问的资源。</span><span class="sxs-lookup"><span data-stu-id="61e99-137">Restrict the resources that the <xref:System.Xml.XmlTextReader> can access by setting the <xref:System.Xml.XmlTextReader.XmlResolver%2A> property to an <xref:System.Xml.XmlSecureResolver> object.</span></span>  
  
    -   <span data-ttu-id="61e99-138">通过将 <xref:System.Xml.XmlReader> 属性设置为 <xref:System.Xml.XmlTextReader.XmlResolver%2A>，不允许 `null` 打开任何外部资源。</span><span class="sxs-lookup"><span data-stu-id="61e99-138">Do not allow the <xref:System.Xml.XmlReader> to open any external resources by setting the <xref:System.Xml.XmlTextReader.XmlResolver%2A> property to `null`.</span></span>  
  
-   <span data-ttu-id="61e99-139">XML 数据可以包含大量属性、命名空间声明、嵌套元素等，需要大量的时间来处理。</span><span class="sxs-lookup"><span data-stu-id="61e99-139">XML data can contain a large number of attributes, namespace declarations, nested elements and so on that require a substantial amount of time to process.</span></span> <span data-ttu-id="61e99-140">若要限制发送到的输入的大小 <xref:System.Xml.XmlTextReader> ，请创建一个自定义的 IStream 实现，并为其提供 <xref:System.Xml.XmlTextReader> 。</span><span class="sxs-lookup"><span data-stu-id="61e99-140">To limit the size of the input that is sent to the <xref:System.Xml.XmlTextReader>, create a custom IStream implementation and supply it the <xref:System.Xml.XmlTextReader>.</span></span>  
  
-   <span data-ttu-id="61e99-141"><xref:System.Xml.XmlReader.ReadValueChunk%2A>方法可用于处理大型数据流。</span><span class="sxs-lookup"><span data-stu-id="61e99-141">The <xref:System.Xml.XmlReader.ReadValueChunk%2A> method can be used to handle large streams of data.</span></span> <span data-ttu-id="61e99-142">此方法一次读取少量的字符，而不是为整个值分配单个字符串。</span><span class="sxs-lookup"><span data-stu-id="61e99-142">This method reads a small number of characters at a time instead of allocating a single string for the whole value.</span></span>  
  
-   <span data-ttu-id="61e99-143">默认情况下不展开常规实体。</span><span class="sxs-lookup"><span data-stu-id="61e99-143">By default general entities are not expanded.</span></span> <span data-ttu-id="61e99-144">常规实体在调用 <xref:System.Xml.XmlTextReader.ResolveEntity%2A> 方法时展开。</span><span class="sxs-lookup"><span data-stu-id="61e99-144">General entities are expanded when you call the <xref:System.Xml.XmlTextReader.ResolveEntity%2A> method.</span></span>  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="61e99-145">此类具有继承要求。</span><span class="sxs-lookup"><span data-stu-id="61e99-145">This class has an inheritance demand.</span></span> <span data-ttu-id="61e99-146">需要完全信任才能从继承 <see langword="XmlTextReader" /> 。</span><span class="sxs-lookup"><span data-stu-id="61e99-146">Full trust is required to inherit from <see langword="XmlTextReader" />.</span></span></para></block>
    <related type="Article" href="/dotnet/standard/data/xml/"><span data-ttu-id="61e99-147">XML 文档和数据</span><span class="sxs-lookup"><span data-stu-id="61e99-147">XML Documents and Data</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="61e99-148">初始化 <see cref="T:System.Xml.XmlTextReader" /> 的新实例。</span><span class="sxs-lookup"><span data-stu-id="61e99-148">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-149">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-149">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XmlTextReader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XmlTextReader();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="61e99-150">初始化 <see langword="XmlTextReader" /> 的新实例。</span><span class="sxs-lookup"><span data-stu-id="61e99-150">Initializes a new instance of the <see langword="XmlTextReader" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (System.IO.Stream input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (input As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::IO::Stream ^ input);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : System.IO.Stream -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader input" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="input" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="61e99-151">包含要读取的 XML 数据的流。</span><span class="sxs-lookup"><span data-stu-id="61e99-151">The stream containing the XML data to read.</span></span></param>
        <summary><span data-ttu-id="61e99-152">使用指定的流初始化 <see cref="T:System.Xml.XmlTextReader" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="61e99-152">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-153">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-153">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-154"><xref:System.Xml.XmlTextReader>使用对流进行解码 <xref:System.Text.Encoding?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="61e99-154">The <xref:System.Xml.XmlTextReader> decodes the stream using <xref:System.Text.Encoding?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="61e99-155"><paramref name="input" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-155"><paramref name="input" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (System.IO.TextReader input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextReader input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (input As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::IO::TextReader ^ input);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : System.IO.TextReader -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader input" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="input" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="61e99-156">包含要读取的 XML 数据的 <see langword="TextReader" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-156">The <see langword="TextReader" /> containing the XML data to read.</span></span></param>
        <summary><span data-ttu-id="61e99-157">使用指定的 <see cref="T:System.Xml.XmlTextReader" /> 初始化 <see cref="T:System.IO.TextReader" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="61e99-157">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified <see cref="T:System.IO.TextReader" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-158">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-158">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-159">假定 `TextReader` 已设置为正确的编码方式。</span><span class="sxs-lookup"><span data-stu-id="61e99-159">It is assumed that the `TextReader` is already set to the correct encoding.</span></span> <span data-ttu-id="61e99-160">此方法由已从多部分 MIME 方案中的流读取某些东西的客户端使用。</span><span class="sxs-lookup"><span data-stu-id="61e99-160">This is used by clients that have already read some things from the stream in a multi-part MIME scenario.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61e99-161">下面的示例使用类将 XML 字符串加载到 `XmlTextReader` 对象 <xref:System.IO.StringReader> 。</span><span class="sxs-lookup"><span data-stu-id="61e99-161">The following example loads an XML string into the `XmlTextReader` object using the <xref:System.IO.StringReader> class.</span></span>  
  
 [!code-cpp[XmlTextReader.cctor1#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.cctor1/CPP/rdrcctor1.cpp#1)]
 [!code-csharp[XmlTextReader.cctor1#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.cctor1/CS/rdrcctor1.cs#1)]
 [!code-vb[XmlTextReader.cctor1#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.cctor1/VB/rdrcctor1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (url As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::String ^ url);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : string -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader url" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url"><span data-ttu-id="61e99-162">包含 XML 数据的文件的 URL。</span><span class="sxs-lookup"><span data-stu-id="61e99-162">The URL for the file containing the XML data.</span></span> <span data-ttu-id="61e99-163"><see cref="P:System.Xml.XmlTextReader.BaseURI" /> 设置为此值。</span><span class="sxs-lookup"><span data-stu-id="61e99-163">The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value.</span></span></param>
        <summary><span data-ttu-id="61e99-164">用指定的文件初始化 <see cref="T:System.Xml.XmlTextReader" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="61e99-164">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-165">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-165">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-166">如果文件位于需要访问凭据的资源上，请使用 <xref:System.Xml.XmlTextReader.XmlResolver%2A> 属性指定必要的凭据。</span><span class="sxs-lookup"><span data-stu-id="61e99-166">If the file is located on a resource that requires access credentials, use the <xref:System.Xml.XmlTextReader.XmlResolver%2A> property to specify the necessary credentials.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="61e99-167">在版本1.1 中 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] ，部分受信任的代码不能设置 `XmlResolver` 属性。</span><span class="sxs-lookup"><span data-stu-id="61e99-167">In version 1.1 of the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], partially trusted code cannot set the `XmlResolver` property.</span></span> <span data-ttu-id="61e99-168">解决方法是使用 <xref:System.Xml.XmlUrlResolver> 所需的凭据创建，并将 URI 传递给 <xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=nameWithType> 方法，然后 `XmlTextReader` 使用生成的 <xref:System.IO.Stream> 对象构造。</span><span class="sxs-lookup"><span data-stu-id="61e99-168">The workaround is to create an <xref:System.Xml.XmlUrlResolver> with the necessary credentials, pass the URI to the <xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=nameWithType> method, and then construct the `XmlTextReader` using the resulting <xref:System.IO.Stream> object.</span></span> <span data-ttu-id="61e99-169">下面的 c # 代码对此进行了说明。</span><span class="sxs-lookup"><span data-stu-id="61e99-169">The workaround is described in the following C# code.</span></span>  
  
```csharp  
// Create a resolver with the necessary credentials.  
XmlUrlResolver resolver = new XmlUrlResolver();  
NetworkCredential nc = new NetworkCredential(SecurelyStoredUserName, SecurelyStoredPassword, SecurelyStoredDomain);  
resolver.Credentials = nc;   
// Get a Stream object containing the XML file.  
Uri myUri = new Uri ("http://myServer/data/books.xml");  
Stream s=(Stream)resolver.GetEntity(myUri, null, typeof(Stream));  
// Construct a reader using the Stream object.  
XmlTextReader reader = new XmlTextReader(s);  
```  
  
   
  
## Examples  
 <span data-ttu-id="61e99-170">下面的示例读取 XML 文件并显示每个节点。</span><span class="sxs-lookup"><span data-stu-id="61e99-170">The following example reads an XML file and displays each of the nodes.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/VB/source.vb#1)]  
  
 <span data-ttu-id="61e99-171">该示例使用文件 `items.xml` 作为输入。</span><span class="sxs-lookup"><span data-stu-id="61e99-171">The example uses the file, `items.xml`, as input.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.Name Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="61e99-172">无法找到指定的文件。</span><span class="sxs-lookup"><span data-stu-id="61e99-172">The specified file cannot be found.</span></span></exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><span data-ttu-id="61e99-173">无法找到部分文件名或目录。</span><span class="sxs-lookup"><span data-stu-id="61e99-173">Part of the filename or directory cannot be found.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="61e99-174"><paramref name="url" /> 是一个空字符串。</span><span class="sxs-lookup"><span data-stu-id="61e99-174"><paramref name="url" /> is an empty string.</span></span></exception>
        <exception cref="T:System.Net.WebException"><span data-ttu-id="61e99-175">无法解析远程文件名。</span><span class="sxs-lookup"><span data-stu-id="61e99-175">The remote filename cannot be resolved.</span></span>  
  
 <span data-ttu-id="61e99-176">- 或 -</span><span class="sxs-lookup"><span data-stu-id="61e99-176">-or-</span></span>  
  
 <span data-ttu-id="61e99-177">处理请求时出错。</span><span class="sxs-lookup"><span data-stu-id="61e99-177">An error occurred while processing the request.</span></span></exception>
        <exception cref="T:System.UriFormatException"><span data-ttu-id="61e99-178"><paramref name="url" /> 不是有效的 URI。</span><span class="sxs-lookup"><span data-stu-id="61e99-178"><paramref name="url" /> is not a valid URI.</span></span></exception>
        <altmember cref="P:System.Xml.XmlTextReader.XmlResolver" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XmlTextReader (System.Xml.XmlNameTable nt);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlNameTable nt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.Xml.XmlNameTable)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (nt As XmlNameTable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XmlTextReader(System::Xml::XmlNameTable ^ nt);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : System.Xml.XmlNameTable -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader nt" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="nt" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="nt"><span data-ttu-id="61e99-179">要使用的 <see langword="XmlNameTable" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-179">The <see langword="XmlNameTable" /> to use.</span></span></param>
        <summary><span data-ttu-id="61e99-180">使用指定的 <see cref="T:System.Xml.XmlTextReader" /> 初始化 <see cref="T:System.Xml.XmlNameTable" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="61e99-180">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified <see cref="T:System.Xml.XmlNameTable" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-181">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-181">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (System.IO.Stream input, System.Xml.XmlNameTable nt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream input, class System.Xml.XmlNameTable nt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNameTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (input As Stream, nt As XmlNameTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::IO::Stream ^ input, System::Xml::XmlNameTable ^ nt);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : System.IO.Stream * System.Xml.XmlNameTable -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader (input, nt)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="input" Type="System.IO.Stream" />
        <Parameter Name="nt" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="61e99-182">包含要读取的 XML 数据的流。</span><span class="sxs-lookup"><span data-stu-id="61e99-182">The stream containing the XML data to read.</span></span></param>
        <param name="nt"><span data-ttu-id="61e99-183">要使用的 <see langword="XmlNameTable" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-183">The <see langword="XmlNameTable" /> to use.</span></span></param>
        <summary><span data-ttu-id="61e99-184">用指定的流和 <see cref="T:System.Xml.XmlNameTable" /> 初始化 <see cref="T:System.Xml.XmlTextReader" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="61e99-184">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified stream and <see cref="T:System.Xml.XmlNameTable" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-185">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-185">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-186"><xref:System.Xml.XmlTextReader>使用对流进行解码 <xref:System.Text.Encoding?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="61e99-186">The <xref:System.Xml.XmlTextReader> decodes the stream using <xref:System.Text.Encoding?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="61e99-187">如果指定名称表，此构造函数将使用该表中已定义的名称。</span><span class="sxs-lookup"><span data-stu-id="61e99-187">If you specify a name table, this constructor uses the names defined already in that table.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="61e99-188"><paramref name="input" /> 或 <paramref name="nt" /> 值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-188">The <paramref name="input" /> or <paramref name="nt" /> value is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (System.IO.TextReader input, System.Xml.XmlNameTable nt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextReader input, class System.Xml.XmlNameTable nt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader,System.Xml.XmlNameTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (input As TextReader, nt As XmlNameTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::IO::TextReader ^ input, System::Xml::XmlNameTable ^ nt);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : System.IO.TextReader * System.Xml.XmlNameTable -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader (input, nt)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="input" Type="System.IO.TextReader" />
        <Parameter Name="nt" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="61e99-189">包含要读取的 XML 数据的 <see langword="TextReader" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-189">The <see langword="TextReader" /> containing the XML data to read.</span></span></param>
        <param name="nt"><span data-ttu-id="61e99-190">要使用的 <see langword="XmlNameTable" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-190">The <see langword="XmlNameTable" /> to use.</span></span></param>
        <summary><span data-ttu-id="61e99-191">使用指定的 <see cref="T:System.Xml.XmlTextReader" /> 和 <see cref="T:System.IO.TextReader" /> 初始化 <see cref="T:System.Xml.XmlNameTable" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="61e99-191">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified <see cref="T:System.IO.TextReader" /> and <see cref="T:System.Xml.XmlNameTable" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-192">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-192">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-193">假定 `TextReader` 已设置为正确的编码方式。</span><span class="sxs-lookup"><span data-stu-id="61e99-193">It is assumed that the `TextReader` is already set to the correct encoding.</span></span> <span data-ttu-id="61e99-194">此方法由已从多部分 MIME 方案中的流读取某些东西的客户端使用。</span><span class="sxs-lookup"><span data-stu-id="61e99-194">This is used by clients that have already read some things from the stream in a multi-part MIME scenario.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="61e99-195"><paramref name="nt" /> 值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-195">The <paramref name="nt" /> value is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (string url, System.IO.Stream input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string url, class System.IO.Stream input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (url As String, input As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::String ^ url, System::IO::Stream ^ input);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : string * System.IO.Stream -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader (url, input)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="input" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="url"><span data-ttu-id="61e99-196">用于解析外部资源的 URL。</span><span class="sxs-lookup"><span data-stu-id="61e99-196">The URL to use for resolving external resources.</span></span> <span data-ttu-id="61e99-197"><see cref="P:System.Xml.XmlTextReader.BaseURI" /> 设置为此值。</span><span class="sxs-lookup"><span data-stu-id="61e99-197">The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value.</span></span></param>
        <param name="input"><span data-ttu-id="61e99-198">包含要读取的 XML 数据的流。</span><span class="sxs-lookup"><span data-stu-id="61e99-198">The stream containing the XML data to read.</span></span></param>
        <summary><span data-ttu-id="61e99-199">使用指定的 URL 和流初始化 <see cref="T:System.Xml.XmlTextReader" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="61e99-199">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified URL and stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-200">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-200">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="61e99-201"><paramref name="input" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-201"><paramref name="input" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (string url, System.IO.TextReader input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string url, class System.IO.TextReader input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (url As String, input As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::String ^ url, System::IO::TextReader ^ input);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : string * System.IO.TextReader -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader (url, input)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="input" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="url"><span data-ttu-id="61e99-202">用于解析外部资源的 URL。</span><span class="sxs-lookup"><span data-stu-id="61e99-202">The URL to use for resolving external resources.</span></span> <span data-ttu-id="61e99-203"><see cref="P:System.Xml.XmlTextReader.BaseURI" /> 设置为此值。</span><span class="sxs-lookup"><span data-stu-id="61e99-203">The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value.</span></span></param>
        <param name="input"><span data-ttu-id="61e99-204">包含要读取的 XML 数据的 <see langword="TextReader" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-204">The <see langword="TextReader" /> containing the XML data to read.</span></span></param>
        <summary><span data-ttu-id="61e99-205">使用指定的 URL 和 <see cref="T:System.IO.TextReader" /> 初始化 <see cref="T:System.Xml.XmlTextReader" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="61e99-205">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified URL and <see cref="T:System.IO.TextReader" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-206">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-206">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-207">假定 `TextReader` 已设置为正确的编码方式。</span><span class="sxs-lookup"><span data-stu-id="61e99-207">It is assumed that the `TextReader` is already set to the correct encoding.</span></span> <span data-ttu-id="61e99-208">此方法由已从多部分 MIME 方案中的流读取某些东西的客户端使用。</span><span class="sxs-lookup"><span data-stu-id="61e99-208">This is used by clients that have already read some things from the stream in a multi-part MIME scenario.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (string url, System.Xml.XmlNameTable nt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string url, class System.Xml.XmlNameTable nt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNameTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (url As String, nt As XmlNameTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::String ^ url, System::Xml::XmlNameTable ^ nt);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : string * System.Xml.XmlNameTable -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader (url, nt)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="nt" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="url"><span data-ttu-id="61e99-209">包含要读取的 XML 数据的文件的 URL。</span><span class="sxs-lookup"><span data-stu-id="61e99-209">The URL for the file containing the XML data to read.</span></span></param>
        <param name="nt"><span data-ttu-id="61e99-210">要使用的 <see langword="XmlNameTable" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-210">The <see langword="XmlNameTable" /> to use.</span></span></param>
        <summary><span data-ttu-id="61e99-211">使用指定的文件和 <see cref="T:System.Xml.XmlNameTable" /> 初始化 <see cref="T:System.Xml.XmlTextReader" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="61e99-211">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified file and <see cref="T:System.Xml.XmlNameTable" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-212">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-212">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="61e99-213"><paramref name="nt" /> 值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-213">The <paramref name="nt" /> value is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="61e99-214">无法找到指定的文件。</span><span class="sxs-lookup"><span data-stu-id="61e99-214">The specified file cannot be found.</span></span></exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><span data-ttu-id="61e99-215">无法找到部分文件名或目录。</span><span class="sxs-lookup"><span data-stu-id="61e99-215">Part of the filename or directory cannot be found.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="61e99-216"><paramref name="url" /> 是一个空字符串。</span><span class="sxs-lookup"><span data-stu-id="61e99-216"><paramref name="url" /> is an empty string.</span></span></exception>
        <exception cref="T:System.Net.WebException"><span data-ttu-id="61e99-217">无法解析远程文件名。</span><span class="sxs-lookup"><span data-stu-id="61e99-217">The remote filename cannot be resolved.</span></span>  
  
 <span data-ttu-id="61e99-218">- 或 -</span><span class="sxs-lookup"><span data-stu-id="61e99-218">-or-</span></span>  
  
 <span data-ttu-id="61e99-219">处理请求时出错。</span><span class="sxs-lookup"><span data-stu-id="61e99-219">An error occurred while processing the request.</span></span></exception>
        <exception cref="T:System.UriFormatException"><span data-ttu-id="61e99-220"><paramref name="url" /> 不是有效的 URI。</span><span class="sxs-lookup"><span data-stu-id="61e99-220"><paramref name="url" /> is not a valid URI.</span></span></exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (System.IO.Stream xmlFragment, System.Xml.XmlNodeType fragType, System.Xml.XmlParserContext? context);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream xmlFragment, valuetype System.Xml.XmlNodeType fragType, class System.Xml.XmlParserContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (xmlFragment As Stream, fragType As XmlNodeType, context As XmlParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::IO::Stream ^ xmlFragment, System::Xml::XmlNodeType fragType, System::Xml::XmlParserContext ^ context);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : System.IO.Stream * System.Xml.XmlNodeType * System.Xml.XmlParserContext -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader (xmlFragment, fragType, context)" />
      <MemberSignature Language="C#" Value="public XmlTextReader (System.IO.Stream xmlFragment, System.Xml.XmlNodeType fragType, System.Xml.XmlParserContext context);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="xmlFragment" Type="System.IO.Stream" />
        <Parameter Name="fragType" Type="System.Xml.XmlNodeType" />
        <Parameter Name="context" Type="System.Xml.XmlParserContext" />
      </Parameters>
      <Docs>
        <param name="xmlFragment"><span data-ttu-id="61e99-221">包含要分析的 XML 片段的流。</span><span class="sxs-lookup"><span data-stu-id="61e99-221">The stream containing the XML fragment to parse.</span></span></param>
        <param name="fragType"><span data-ttu-id="61e99-222">XML 片段的 <see cref="T:System.Xml.XmlNodeType" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-222">The <see cref="T:System.Xml.XmlNodeType" /> of the XML fragment.</span></span> <span data-ttu-id="61e99-223">这也确定了片段可以包含的内容。</span><span class="sxs-lookup"><span data-stu-id="61e99-223">This also determines what the fragment can contain.</span></span> <span data-ttu-id="61e99-224">（请参见下表。）</span><span class="sxs-lookup"><span data-stu-id="61e99-224">(See table below.)</span></span></param>
        <param name="context"><span data-ttu-id="61e99-225">分析 <paramref name="xmlFragment" /> 所用的 <see cref="T:System.Xml.XmlParserContext" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-225">The <see cref="T:System.Xml.XmlParserContext" /> in which the <paramref name="xmlFragment" /> is to be parsed.</span></span> <span data-ttu-id="61e99-226">这包括要使用的 <see cref="T:System.Xml.XmlNameTable" />、编码、命名空间范围、当前 <c>xml:lang</c> 和 <c>xml:space</c> 范围。</span><span class="sxs-lookup"><span data-stu-id="61e99-226">This includes the <see cref="T:System.Xml.XmlNameTable" /> to use, encoding, namespace scope, the current <c>xml:lang</c>, and the <c>xml:space</c> scope.</span></span></param>
        <summary><span data-ttu-id="61e99-227">用指定的流、<see cref="T:System.Xml.XmlNodeType" /> 和 <see cref="T:System.Xml.XmlParserContext" /> 初始化 <see cref="T:System.Xml.XmlTextReader" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="61e99-227">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified stream, <see cref="T:System.Xml.XmlNodeType" />, and <see cref="T:System.Xml.XmlParserContext" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-228">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-228">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-229">此构造函数将给定字符串分析为 XML 片段。</span><span class="sxs-lookup"><span data-stu-id="61e99-229">This constructor parses the given string as a fragment of XML.</span></span> <span data-ttu-id="61e99-230">如果 XML 片段是元素或属性，则可以绕过格式正确的 XML 文档的根级别规则。</span><span class="sxs-lookup"><span data-stu-id="61e99-230">If the XML fragment is an element or attribute, you can bypass the root level rules for well-formed XML documents.</span></span>  
  
 <span data-ttu-id="61e99-231">下表列出了的有效值 `fragType` 。</span><span class="sxs-lookup"><span data-stu-id="61e99-231">The following table lists valid values for `fragType`.</span></span>  
  
|<span data-ttu-id="61e99-232">XmlNodeType</span><span class="sxs-lookup"><span data-stu-id="61e99-232">XmlNodeType</span></span>|<span data-ttu-id="61e99-233">片段可能包含</span><span class="sxs-lookup"><span data-stu-id="61e99-233">Fragment May Contain</span></span>|  
|-----------------|--------------------------|  
|`Element`|<span data-ttu-id="61e99-234">任何有效的元素内容 (例如，元素、注释、处理指令、CDATA 节、文本和实体引用的任意组合) 。</span><span class="sxs-lookup"><span data-stu-id="61e99-234">Any valid element content (for example, any combination of elements, comments, processing instructions, CDATA sections, text, and entity references).</span></span><br /><br /> <span data-ttu-id="61e99-235">还可以提供 XML 声明。</span><span class="sxs-lookup"><span data-stu-id="61e99-235">An XML declaration can also be supplied.</span></span> <span data-ttu-id="61e99-236">这允许您为 XML 片段指定编码，而不必在对象上进行设置 <xref:System.Xml.XmlParserContext> 。</span><span class="sxs-lookup"><span data-stu-id="61e99-236">This allows you to specify the encoding for the XML fragment, rather than having to set it on the <xref:System.Xml.XmlParserContext> object.</span></span>|  
|`Attribute`|<span data-ttu-id="61e99-237">特性的值 (引号内的部分) 。</span><span class="sxs-lookup"><span data-stu-id="61e99-237">The value of an attribute (the part inside the quotes).</span></span>|  
|`Document`|<span data-ttu-id="61e99-238">整个 XML 文档的内容。</span><span class="sxs-lookup"><span data-stu-id="61e99-238">The contents of an entire XML document.</span></span> <span data-ttu-id="61e99-239">这会强制文档级别规则。</span><span class="sxs-lookup"><span data-stu-id="61e99-239">This enforces document level rules.</span></span>|  
  
 <span data-ttu-id="61e99-240">读取器使用以下项来确定流的编码。</span><span class="sxs-lookup"><span data-stu-id="61e99-240">The reader uses the following to determine the encoding of the stream.</span></span>  
  
1.  <span data-ttu-id="61e99-241">检查 <xref:System.Xml.XmlParserContext.Encoding%2A?displayProperty=nameWithType> 属性以确定编码。</span><span class="sxs-lookup"><span data-stu-id="61e99-241">Checks the <xref:System.Xml.XmlParserContext.Encoding%2A?displayProperty=nameWithType> property to determine the encoding.</span></span>  
  
2.  <span data-ttu-id="61e99-242">如果 `Encoding` 属性为 `null` ，则读取器将检查流开头的字节顺序标记。</span><span class="sxs-lookup"><span data-stu-id="61e99-242">If the `Encoding` property is `null`, the reader checks for a byte-order mark at the beginning of the stream.</span></span>  
  
3.  <span data-ttu-id="61e99-243">如果 `Encoding` 属性为 `null` ，并且未找到字节顺序标记，则读取器假定流采用 utf-8 编码。</span><span class="sxs-lookup"><span data-stu-id="61e99-243">If the `Encoding` property is `null`, and no byte-order mark is found, the reader assumes the stream is encoded in UTF-8.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException"><span data-ttu-id="61e99-244"><paramref name="fragType" /> 不是 Element、Attribute 或 Document <see langword="XmlNodeType" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-244"><paramref name="fragType" /> is not an Element, Attribute, or Document <see langword="XmlNodeType" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="61e99-245"><paramref name="xmlFragment" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-245"><paramref name="xmlFragment" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (string url, System.IO.Stream input, System.Xml.XmlNameTable nt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string url, class System.IO.Stream input, class System.Xml.XmlNameTable nt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream,System.Xml.XmlNameTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (url As String, input As Stream, nt As XmlNameTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::String ^ url, System::IO::Stream ^ input, System::Xml::XmlNameTable ^ nt);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : string * System.IO.Stream * System.Xml.XmlNameTable -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader (url, input, nt)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="input" Type="System.IO.Stream" />
        <Parameter Name="nt" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="url"><span data-ttu-id="61e99-246">用于解析外部资源的 URL。</span><span class="sxs-lookup"><span data-stu-id="61e99-246">The URL to use for resolving external resources.</span></span> <span data-ttu-id="61e99-247"><see cref="P:System.Xml.XmlTextReader.BaseURI" /> 设置为此值。</span><span class="sxs-lookup"><span data-stu-id="61e99-247">The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value.</span></span> <span data-ttu-id="61e99-248">如果 <paramref name="url" /> 为 <see langword="null" />，则 <see langword="BaseURI" /> 设置为 <see langword="String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-248">If <paramref name="url" /> is <see langword="null" />, <see langword="BaseURI" /> is set to <see langword="String.Empty" />.</span></span></param>
        <param name="input"><span data-ttu-id="61e99-249">包含要读取的 XML 数据的流。</span><span class="sxs-lookup"><span data-stu-id="61e99-249">The stream containing the XML data to read.</span></span></param>
        <param name="nt"><span data-ttu-id="61e99-250">要使用的 <see langword="XmlNameTable" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-250">The <see langword="XmlNameTable" /> to use.</span></span></param>
        <summary><span data-ttu-id="61e99-251">使用指定的 URL、流和 <see cref="T:System.Xml.XmlNameTable" /> 初始化 <see cref="T:System.Xml.XmlTextReader" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="61e99-251">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified URL, stream and <see cref="T:System.Xml.XmlNameTable" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-252">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-252">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="61e99-253"><paramref name="input" /> 或 <paramref name="nt" /> 值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-253">The <paramref name="input" /> or <paramref name="nt" /> value is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (string url, System.IO.TextReader input, System.Xml.XmlNameTable nt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string url, class System.IO.TextReader input, class System.Xml.XmlNameTable nt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader,System.Xml.XmlNameTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (url As String, input As TextReader, nt As XmlNameTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::String ^ url, System::IO::TextReader ^ input, System::Xml::XmlNameTable ^ nt);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : string * System.IO.TextReader * System.Xml.XmlNameTable -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader (url, input, nt)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="input" Type="System.IO.TextReader" />
        <Parameter Name="nt" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="url"><span data-ttu-id="61e99-254">用于解析外部资源的 URL。</span><span class="sxs-lookup"><span data-stu-id="61e99-254">The URL to use for resolving external resources.</span></span> <span data-ttu-id="61e99-255"><see cref="P:System.Xml.XmlTextReader.BaseURI" /> 设置为此值。</span><span class="sxs-lookup"><span data-stu-id="61e99-255">The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value.</span></span> <span data-ttu-id="61e99-256">如果 <paramref name="url" /> 为 <see langword="null" />，则 <see langword="BaseURI" /> 设置为 <see langword="String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-256">If <paramref name="url" /> is <see langword="null" />, <see langword="BaseURI" /> is set to <see langword="String.Empty" />.</span></span></param>
        <param name="input"><span data-ttu-id="61e99-257">包含要读取的 XML 数据的 <see langword="TextReader" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-257">The <see langword="TextReader" /> containing the XML data to read.</span></span></param>
        <param name="nt"><span data-ttu-id="61e99-258">要使用的 <see langword="XmlNameTable" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-258">The <see langword="XmlNameTable" /> to use.</span></span></param>
        <summary><span data-ttu-id="61e99-259">使用指定的 URL、<see cref="T:System.IO.TextReader" /> 和 <see cref="T:System.Xml.XmlNameTable" /> 初始化 <see cref="T:System.Xml.XmlTextReader" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="61e99-259">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified URL, <see cref="T:System.IO.TextReader" /> and <see cref="T:System.Xml.XmlNameTable" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-260">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-260">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-261">假定 `TextReader` 已设置为正确的编码方式。</span><span class="sxs-lookup"><span data-stu-id="61e99-261">It is assumed that the `TextReader` is already set to the correct encoding.</span></span> <span data-ttu-id="61e99-262">此方法由已从多部分 MIME 方案中的流读取某些东西的客户端使用。</span><span class="sxs-lookup"><span data-stu-id="61e99-262">This is used by clients that have already read some things from the stream in a multi-part MIME scenario.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="61e99-263"><paramref name="nt" /> 值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-263">The <paramref name="nt" /> value is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (string xmlFragment, System.Xml.XmlNodeType fragType, System.Xml.XmlParserContext? context);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string xmlFragment, valuetype System.Xml.XmlNodeType fragType, class System.Xml.XmlParserContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (xmlFragment As String, fragType As XmlNodeType, context As XmlParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::String ^ xmlFragment, System::Xml::XmlNodeType fragType, System::Xml::XmlParserContext ^ context);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : string * System.Xml.XmlNodeType * System.Xml.XmlParserContext -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader (xmlFragment, fragType, context)" />
      <MemberSignature Language="C#" Value="public XmlTextReader (string xmlFragment, System.Xml.XmlNodeType fragType, System.Xml.XmlParserContext context);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="xmlFragment" Type="System.String" />
        <Parameter Name="fragType" Type="System.Xml.XmlNodeType" />
        <Parameter Name="context" Type="System.Xml.XmlParserContext" />
      </Parameters>
      <Docs>
        <param name="xmlFragment"><span data-ttu-id="61e99-264">包含要分析的 XML 片段的字符串。</span><span class="sxs-lookup"><span data-stu-id="61e99-264">The string containing the XML fragment to parse.</span></span></param>
        <param name="fragType"><span data-ttu-id="61e99-265">XML 片段的 <see cref="T:System.Xml.XmlNodeType" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-265">The <see cref="T:System.Xml.XmlNodeType" /> of the XML fragment.</span></span> <span data-ttu-id="61e99-266">这也确定了片段字符串可以包含的内容。</span><span class="sxs-lookup"><span data-stu-id="61e99-266">This also determines what the fragment string can contain.</span></span> <span data-ttu-id="61e99-267">（请参见下表。）</span><span class="sxs-lookup"><span data-stu-id="61e99-267">(See table below.)</span></span></param>
        <param name="context"><span data-ttu-id="61e99-268">分析 <paramref name="xmlFragment" /> 所用的 <see cref="T:System.Xml.XmlParserContext" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-268">The <see cref="T:System.Xml.XmlParserContext" /> in which the <paramref name="xmlFragment" /> is to be parsed.</span></span> <span data-ttu-id="61e99-269">这包括要使用的 <see cref="T:System.Xml.XmlNameTable" />、编码、命名空间范围、当前 <c>xml:lang</c> 和 <c>xml:space</c> 范围。</span><span class="sxs-lookup"><span data-stu-id="61e99-269">This includes the <see cref="T:System.Xml.XmlNameTable" /> to use, encoding, namespace scope, the current <c>xml:lang</c>, and the <c>xml:space</c> scope.</span></span></param>
        <summary><span data-ttu-id="61e99-270">使用指定的字符串、<see cref="T:System.Xml.XmlNodeType" /> 和 <see cref="T:System.Xml.XmlParserContext" /> 初始化 <see cref="T:System.Xml.XmlTextReader" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="61e99-270">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified string, <see cref="T:System.Xml.XmlNodeType" />, and <see cref="T:System.Xml.XmlParserContext" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-271">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-271">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-272">此构造函数将给定字符串分析为 XML 片段。</span><span class="sxs-lookup"><span data-stu-id="61e99-272">This constructor parses the given string as a fragment of XML.</span></span> <span data-ttu-id="61e99-273">如果 XML 片段是元素或属性，则可以绕过格式正确的 XML 文档的根级别规则。</span><span class="sxs-lookup"><span data-stu-id="61e99-273">If the XML fragment is an element or attribute, you can bypass the root level rules for well-formed XML documents.</span></span> <span data-ttu-id="61e99-274">此构造函数可处理从返回的字符串 <xref:System.Xml.XmlReader.ReadInnerXml%2A> 。</span><span class="sxs-lookup"><span data-stu-id="61e99-274">This constructor can handle strings returned from <xref:System.Xml.XmlReader.ReadInnerXml%2A>.</span></span>  
  
 <span data-ttu-id="61e99-275">下表列出了的有效值 `fragType` 以及读取器如何分析每个不同的节点类型。</span><span class="sxs-lookup"><span data-stu-id="61e99-275">The following table lists valid values for `fragType` and how the reader parses each of the different node types.</span></span>  
  
|<span data-ttu-id="61e99-276">XmlNodeType</span><span class="sxs-lookup"><span data-stu-id="61e99-276">XmlNodeType</span></span>|<span data-ttu-id="61e99-277">片段可能包含</span><span class="sxs-lookup"><span data-stu-id="61e99-277">Fragment May Contain</span></span>|  
|-----------------|--------------------------|  
|<span data-ttu-id="61e99-278">元素</span><span class="sxs-lookup"><span data-stu-id="61e99-278">Element</span></span>|<span data-ttu-id="61e99-279">任何有效的元素内容 (例如，元素、注释、处理指令、CDATA 节、文本和实体引用的任意组合) 。</span><span class="sxs-lookup"><span data-stu-id="61e99-279">Any valid element content (for example, any combination of elements, comments, processing instructions, CDATA sections, text, and entity references).</span></span><br /><br /> <span data-ttu-id="61e99-280">还可以提供 XML 声明。</span><span class="sxs-lookup"><span data-stu-id="61e99-280">An XML declaration can also be supplied.</span></span> <span data-ttu-id="61e99-281">这允许您为 XML 片段指定编码，而不必在对象上进行设置 <xref:System.Xml.XmlParserContext> 。</span><span class="sxs-lookup"><span data-stu-id="61e99-281">This allows you to specify the encoding for the XML fragment, rather than having to set it on the <xref:System.Xml.XmlParserContext> object.</span></span>|  
|<span data-ttu-id="61e99-282">特性</span><span class="sxs-lookup"><span data-stu-id="61e99-282">Attribute</span></span>|<span data-ttu-id="61e99-283">特性的值 (引号内的部分) 。</span><span class="sxs-lookup"><span data-stu-id="61e99-283">The value of an attribute (the part inside the quotes).</span></span>|  
|<span data-ttu-id="61e99-284">Document</span><span class="sxs-lookup"><span data-stu-id="61e99-284">Document</span></span>|<span data-ttu-id="61e99-285">整个 XML 文档的内容。</span><span class="sxs-lookup"><span data-stu-id="61e99-285">The contents of an entire XML document.</span></span> <span data-ttu-id="61e99-286">这会强制文档级别规则。</span><span class="sxs-lookup"><span data-stu-id="61e99-286">This enforces document level rules.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="61e99-287">下面的示例分析 XML 片段。</span><span class="sxs-lookup"><span data-stu-id="61e99-287">The following example parses an XML fragment.</span></span> <span data-ttu-id="61e99-288">它使用 `XmlParserContext` 和 <xref:System.Xml.XmlNamespaceManager> 来处理命名空间解析。</span><span class="sxs-lookup"><span data-stu-id="61e99-288">It uses the `XmlParserContext` and its <xref:System.Xml.XmlNamespaceManager> to handle namespace resolution.</span></span>  
  
 [!code-cpp[XmlTextReader.Cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.Cctor/CPP/readfrag.cpp#1)]
 [!code-csharp[XmlTextReader.Cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.Cctor/CS/readfrag.cs#1)]
 [!code-vb[XmlTextReader.Cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.Cctor/VB/readfrag.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException"><span data-ttu-id="61e99-289"><paramref name="fragType" /> 不是 <see langword="Element" /><see langword="Attribute" />或 <see langword="Document" /><see langword="XmlNodeType" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-289"><paramref name="fragType" /> is not an <see langword="Element" />, <see langword="Attribute" />, or <see langword="Document" /><see langword="XmlNodeType" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="61e99-290"><paramref name="xmlFragment" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-290"><paramref name="xmlFragment" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Xml.XmlParserContext" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="AttributeCount">
      <MemberSignature Language="C#" Value="public override int AttributeCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AttributeCount" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.AttributeCount" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AttributeCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int AttributeCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.AttributeCount : int" Usage="System.Xml.XmlTextReader.AttributeCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="61e99-291">获取当前节点上的属性数目。</span><span class="sxs-lookup"><span data-stu-id="61e99-291">Gets the number of attributes on the current node.</span></span></summary>
        <value><span data-ttu-id="61e99-292">当前节点上的属性数目。</span><span class="sxs-lookup"><span data-stu-id="61e99-292">The number of attributes on the current node.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-293">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-293">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-294">此属性 `Element` `DocumentType` 仅与和节点相关 `XmlDeclaration` 。</span><span class="sxs-lookup"><span data-stu-id="61e99-294">This property is relevant to `Element`, `DocumentType` and `XmlDeclaration` nodes only.</span></span> <span data-ttu-id="61e99-295"> (其他节点类型不具有属性。 ) </span><span class="sxs-lookup"><span data-stu-id="61e99-295">(Other node types do not have attributes.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61e99-296">下面的示例显示当前节点上的所有属性。</span><span class="sxs-lookup"><span data-stu-id="61e99-296">The following example displays all attributes on the current node.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.MoveToElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.MoveToElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.MoveToElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="BaseURI">
      <MemberSignature Language="C#" Value="public override string? BaseURI { get; }" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseURI" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.BaseURI" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property BaseURI As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ BaseURI { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseURI : string" Usage="System.Xml.XmlTextReader.BaseURI" />
      <MemberSignature Language="C#" Value="public override string BaseURI { get; }" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="61e99-297">获取当前节点的基 URI。</span><span class="sxs-lookup"><span data-stu-id="61e99-297">Gets the base URI of the current node.</span></span></summary>
        <value><span data-ttu-id="61e99-298">当前节点的基 URI。</span><span class="sxs-lookup"><span data-stu-id="61e99-298">The base URI of the current node.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-299">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-299">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-300">联网的 XML 文档包含使用各种 W3C 标准包含机制聚合的数据块，因此包含来自不同位置的节点。</span><span class="sxs-lookup"><span data-stu-id="61e99-300">A networked XML document is comprised of chunks of data aggregated using various W3C standard inclusion mechanisms and therefore contains nodes that come from different places.</span></span> <span data-ttu-id="61e99-301">DTD 实体就是这样一个例子，但这并不局限于 Dtd。</span><span class="sxs-lookup"><span data-stu-id="61e99-301">DTD entities are an example of this, but this is not limited to DTDs.</span></span> <span data-ttu-id="61e99-302">基本 URI 告诉您这些节点的来源。</span><span class="sxs-lookup"><span data-stu-id="61e99-302">The base URI tells you where these nodes came from.</span></span> <span data-ttu-id="61e99-303">如果返回的节点没有基 URI (例如，则从内存中的字符串) 中对其 `String.Empty` 进行分析。</span><span class="sxs-lookup"><span data-stu-id="61e99-303">If there is no base URI for the nodes being returned (for example, they were parsed from an in-memory string), `String.Empty` is returned.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61e99-304">下面的示例显示每个节点的基 URI。</span><span class="sxs-lookup"><span data-stu-id="61e99-304">The following example displays the base URI for each of the nodes.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.BaseURI Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.BaseURI Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.BaseURI Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.BaseURI Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.BaseURI Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.BaseURI Example/VB/source.vb#1)]  
  
 <span data-ttu-id="61e99-305">该示例使用文件 `baseuri.xml` 作为输入。</span><span class="sxs-lookup"><span data-stu-id="61e99-305">The example uses the file, `baseuri.xml`, as input.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.BaseURI Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.BaseURI Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="CanReadBinaryContent">
      <MemberSignature Language="C#" Value="public override bool CanReadBinaryContent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReadBinaryContent" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.CanReadBinaryContent" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanReadBinaryContent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanReadBinaryContent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanReadBinaryContent : bool" Usage="System.Xml.XmlTextReader.CanReadBinaryContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="61e99-306">获取一个值，该值指示 <see cref="T:System.Xml.XmlTextReader" /> 是否实现二进制内容读取方法。</span><span class="sxs-lookup"><span data-stu-id="61e99-306">Gets a value indicating whether the <see cref="T:System.Xml.XmlTextReader" /> implements the binary content read methods.</span></span></summary>
        <value><span data-ttu-id="61e99-307">如果实现了二进制内容读取方法，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-307"><see langword="true" /> if the binary content read methods are implemented; otherwise <see langword="false" />.</span></span> <span data-ttu-id="61e99-308"><see cref="T:System.Xml.XmlTextReader" /> 类始终返回 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-308">The <see cref="T:System.Xml.XmlTextReader" /> class always returns <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-309">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-309">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-310">二进制内容读取方法包括 <xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A> 、 <xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A> 、 <xref:System.Xml.XmlTextReader.ReadElementContentAsBase64%2A> 和 <xref:System.Xml.XmlTextReader.ReadElementContentAsBinHex%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="61e99-310">The binary content read methods include the <xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A>, <xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A>, <xref:System.Xml.XmlTextReader.ReadElementContentAsBase64%2A>, and <xref:System.Xml.XmlTextReader.ReadElementContentAsBinHex%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="CanReadValueChunk">
      <MemberSignature Language="C#" Value="public override bool CanReadValueChunk { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReadValueChunk" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.CanReadValueChunk" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanReadValueChunk As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanReadValueChunk { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanReadValueChunk : bool" Usage="System.Xml.XmlTextReader.CanReadValueChunk" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="61e99-311">获取一个值，该值指示 <see cref="T:System.Xml.XmlTextReader" /> 是否实现 <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="61e99-311">Gets a value indicating whether the <see cref="T:System.Xml.XmlTextReader" /> implements the <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> method.</span></span></summary>
        <value><span data-ttu-id="61e99-312">如果 <see cref="T:System.Xml.XmlTextReader" /> 实现 <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> 方法，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-312"><see langword="true" /> if the <see cref="T:System.Xml.XmlTextReader" /> implements the <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> method; otherwise <see langword="false" />.</span></span> <span data-ttu-id="61e99-313"><see cref="T:System.Xml.XmlTextReader" /> 类始终返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-313">The <see cref="T:System.Xml.XmlTextReader" /> class always returns <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-314">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-314">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-315"><xref:System.Xml.XmlTextReader> <xref:System.NotSupportedException> 如果调用方法，将引发 <xref:System.Xml.XmlReader.ReadValueChunk%2A> 。</span><span class="sxs-lookup"><span data-stu-id="61e99-315">The <xref:System.Xml.XmlTextReader> throws a <xref:System.NotSupportedException> if the <xref:System.Xml.XmlReader.ReadValueChunk%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="CanResolveEntity">
      <MemberSignature Language="C#" Value="public override bool CanResolveEntity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanResolveEntity" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.CanResolveEntity" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanResolveEntity As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanResolveEntity { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanResolveEntity : bool" Usage="System.Xml.XmlTextReader.CanResolveEntity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="61e99-316">获取一个值，该值指示此读取器是否可以分析和解析实体。</span><span class="sxs-lookup"><span data-stu-id="61e99-316">Gets a value indicating whether this reader can parse and resolve entities.</span></span></summary>
        <value><span data-ttu-id="61e99-317">如果此读取器可以分析和解析实体，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-317"><see langword="true" /> if the reader can parse and resolve entities; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="61e99-318"><see langword="XmlTextReader" /> 类始终返回 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-318">The <see langword="XmlTextReader" /> class always returns <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-319">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-319">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-320">这是发布的一项更改 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)] 。</span><span class="sxs-lookup"><span data-stu-id="61e99-320">This is a change in the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)] release.</span></span> <span data-ttu-id="61e99-321">在以前的版本中， `XmlTextReader` 类无法解析实体并 `CanResolveEntity` 始终返回 `false` 。</span><span class="sxs-lookup"><span data-stu-id="61e99-321">In previous versions, the `XmlTextReader` class could not resolve entities and `CanResolveEntity` always returned `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="xmlTextReader.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="61e99-322">将 <see cref="P:System.Xml.XmlReader.ReadState" /> 改为 <see langword="Closed" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-322">Changes the <see cref="P:System.Xml.XmlReader.ReadState" /> to <see langword="Closed" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-323">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-323">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-324">此方法还释放读取时保存的任何资源。</span><span class="sxs-lookup"><span data-stu-id="61e99-324">This method also releases any resources held while reading.</span></span> <span data-ttu-id="61e99-325">如果此读取器是使用流构造的，则此方法也会对 `Close` 基础流调用。</span><span class="sxs-lookup"><span data-stu-id="61e99-325">If this reader was constructed using a stream, this method also calls `Close` on the underlying stream.</span></span>  
  
 <span data-ttu-id="61e99-326">如果已 `Close` 调用，则不执行任何操作。</span><span class="sxs-lookup"><span data-stu-id="61e99-326">If `Close` has already been called, no action is performed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Depth">
      <MemberSignature Language="C#" Value="public override int Depth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Depth" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Depth" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Depth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Depth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Depth : int" Usage="System.Xml.XmlTextReader.Depth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="61e99-327">获取 XML 文档中当前节点的深度。</span><span class="sxs-lookup"><span data-stu-id="61e99-327">Gets the depth of the current node in the XML document.</span></span></summary>
        <value><span data-ttu-id="61e99-328">XML 文档中当前节点的深度。</span><span class="sxs-lookup"><span data-stu-id="61e99-328">The depth of the current node in the XML document.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-329">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-329">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61e99-330">下面的示例显示每个节点，包括其深度、行号和行位置。</span><span class="sxs-lookup"><span data-stu-id="61e99-330">The following example displays each node including its depth, line number, and line position.</span></span>  
  
 [!code-cpp[XmlTextReader.LineNum#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.LineNum/CPP/readlinenum.cpp#1)]
 [!code-csharp[XmlTextReader.LineNum#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.LineNum/CS/readlinenum.cs#1)]
 [!code-vb[XmlTextReader.LineNum#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.LineNum/VB/readlinenum.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="DtdProcessing">
      <MemberSignature Language="C#" Value="public System.Xml.DtdProcessing DtdProcessing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.DtdProcessing DtdProcessing" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.DtdProcessing" />
      <MemberSignature Language="VB.NET" Value="Public Property DtdProcessing As DtdProcessing" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::DtdProcessing DtdProcessing { System::Xml::DtdProcessing get(); void set(System::Xml::DtdProcessing value); };" />
      <MemberSignature Language="F#" Value="member this.DtdProcessing : System.Xml.DtdProcessing with get, set" Usage="System.Xml.XmlTextReader.DtdProcessing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.DtdProcessing</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="61e99-331">获取或设置 <see cref="T:System.Xml.DtdProcessing" /> 枚举。</span><span class="sxs-lookup"><span data-stu-id="61e99-331">Gets or sets the <see cref="T:System.Xml.DtdProcessing" /> enumeration.</span></span></summary>
        <value><span data-ttu-id="61e99-332"><see cref="T:System.Xml.DtdProcessing" /> 枚举。</span><span class="sxs-lookup"><span data-stu-id="61e99-332">The <see cref="T:System.Xml.DtdProcessing" /> enumeration.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61e99-333"><xref:System.Xml.DtdProcessing>枚举包含 <xref:System.Xml.DtdProcessing.Prohibit> 、 <xref:System.Xml.DtdProcessing.Ignore> 和 <xref:System.Xml.DtdProcessing.Parse> 枚举器。</span><span class="sxs-lookup"><span data-stu-id="61e99-333">The <xref:System.Xml.DtdProcessing> enumeration contains the <xref:System.Xml.DtdProcessing.Prohibit>, <xref:System.Xml.DtdProcessing.Ignore>, and <xref:System.Xml.DtdProcessing.Parse> enumerators.</span></span> <span data-ttu-id="61e99-334"><xref:System.Xml.DtdProcessing.Parse> 为默认行为。</span><span class="sxs-lookup"><span data-stu-id="61e99-334"><xref:System.Xml.DtdProcessing.Parse> is the default behavior.</span></span> <span data-ttu-id="61e99-335"><xref:System.Xml.XmlTextReader.DtdProcessing%2A>属性替换 `ProhibitDTD` 属性并添加忽略 DOCTYPE 元素的功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-335">The <xref:System.Xml.XmlTextReader.DtdProcessing%2A> property replaces the `ProhibitDTD` property and adds the ability to ignore the DOCTYPE element.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="61e99-336">如果将 <xref:System.Xml.XmlTextReader.DtdProcessing%2A> 属性设置为 <xref:System.Xml.DtdProcessing.Ignore?displayProperty=nameWithType> ，则 <xref:System.Xml.XmlTextReader> 不会报告 dtd。</span><span class="sxs-lookup"><span data-stu-id="61e99-336">If the <xref:System.Xml.XmlTextReader.DtdProcessing%2A> property is set to <xref:System.Xml.DtdProcessing.Ignore?displayProperty=nameWithType>, the <xref:System.Xml.XmlTextReader> will not report the DTDs.</span></span> <span data-ttu-id="61e99-337">这意味着，DTD/DOCTYPE 将在输出时丢失。</span><span class="sxs-lookup"><span data-stu-id="61e99-337">This means that the DTD/DOCTYPE will be lost on output.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding? Encoding { get; }" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Encoding : System.Text.Encoding" Usage="System.Xml.XmlTextReader.Encoding" />
      <MemberSignature Language="C#" Value="public System.Text.Encoding Encoding { get; }" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="61e99-338">获取文档的编码。</span><span class="sxs-lookup"><span data-stu-id="61e99-338">Gets the encoding of the document.</span></span></summary>
        <value><span data-ttu-id="61e99-339">编码值。</span><span class="sxs-lookup"><span data-stu-id="61e99-339">The encoding value.</span></span> <span data-ttu-id="61e99-340">如果不存在任何编码属性且不存在字节顺序标记，则这将默认为 UTF-8。</span><span class="sxs-lookup"><span data-stu-id="61e99-340">If no encoding attribute exists, and there is no byte-order mark, this defaults to UTF-8.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-341">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-341">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-342">由于 <xref:System.Xml.XmlTextReader> 使用 <xref:System.Text.Encoding?displayProperty=nameWithType> 类，因此 `XmlTextReader` 还支持该类支持的所有编码。</span><span class="sxs-lookup"><span data-stu-id="61e99-342">Because <xref:System.Xml.XmlTextReader> uses the <xref:System.Text.Encoding?displayProperty=nameWithType> class, `XmlTextReader` also supports all encodings supported by that class.</span></span> <span data-ttu-id="61e99-343">这种情况的例外是将 `<?xml` 序列映射到不同于 utf-8 的字节值的任何编码，如 utf-7 或 EBCDIC。</span><span class="sxs-lookup"><span data-stu-id="61e99-343">The exception to this is any encoding, such as UTF-7 or EBCDIC, that maps the `<?xml` sequence to different byte values than UTF-8.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EntityHandling">
      <MemberSignature Language="C#" Value="public System.Xml.EntityHandling EntityHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.EntityHandling EntityHandling" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.EntityHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property EntityHandling As EntityHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::EntityHandling EntityHandling { System::Xml::EntityHandling get(); void set(System::Xml::EntityHandling value); };" />
      <MemberSignature Language="F#" Value="member this.EntityHandling : System.Xml.EntityHandling with get, set" Usage="System.Xml.XmlTextReader.EntityHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.EntityHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="61e99-344">获取或设置一个值，该值指定读取器处理实体的方式。</span><span class="sxs-lookup"><span data-stu-id="61e99-344">Gets or sets a value that specifies how the reader handles entities.</span></span></summary>
        <value><span data-ttu-id="61e99-345"><see cref="T:System.Xml.EntityHandling" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="61e99-345">One of the <see cref="T:System.Xml.EntityHandling" /> values.</span></span> <span data-ttu-id="61e99-346">如果未指定 <see langword="EntityHandling" />，它将默认为 <see langword="EntityHandling.ExpandCharEntities" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-346">If no <see langword="EntityHandling" /> is specified, it defaults to <see langword="EntityHandling.ExpandCharEntities" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-347">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-347">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-348">此属性可动态更改，并在下一次调用之后生效 <xref:System.Xml.XmlTextReader.Read%2A> 。</span><span class="sxs-lookup"><span data-stu-id="61e99-348">This property can be changed on the fly and takes effect after the next <xref:System.Xml.XmlTextReader.Read%2A> call.</span></span>  
  
 <span data-ttu-id="61e99-349">当 `EntityHandling` 设置为时 `ExpandCharEntities` ，特性值仅部分规范化。</span><span class="sxs-lookup"><span data-stu-id="61e99-349">When `EntityHandling` is set to `ExpandCharEntities`, attribute values are only partially normalized.</span></span> <span data-ttu-id="61e99-350">读取器独立于相邻实体引用节点的内容来规范化每个单独的文本节点。</span><span class="sxs-lookup"><span data-stu-id="61e99-350">The reader normalizes each individual text node independently from the content of adjacent entity reference nodes.</span></span>  
  
 <span data-ttu-id="61e99-351">为了说明实体处理模式之间的差异，请考虑以下 XML：</span><span class="sxs-lookup"><span data-stu-id="61e99-351">To illustrate the difference between the entity handling modes consider the following XML:</span></span>  
  
```  
<!DOCTYPE doc [<!ENTITY num "123">]>  
    <doc> &#65; &num; </doc>  
```  
  
 <span data-ttu-id="61e99-352">当 `EntityHandling` 设置为 `ExpandEntities` "doc" 元素节点时，将包含一个文本节点，该节点具有展开的实体文本：</span><span class="sxs-lookup"><span data-stu-id="61e99-352">When `EntityHandling` is set to `ExpandEntities` the "doc" element node contains one text node with the expanded entity text:</span></span>  
  
|<span data-ttu-id="61e99-353">深度</span><span class="sxs-lookup"><span data-stu-id="61e99-353">Depth</span></span>|<span data-ttu-id="61e99-354">节点类型</span><span class="sxs-lookup"><span data-stu-id="61e99-354">Node type</span></span>|<span data-ttu-id="61e99-355">“属性”</span><span class="sxs-lookup"><span data-stu-id="61e99-355">Name</span></span>|<span data-ttu-id="61e99-356">“值”</span><span class="sxs-lookup"><span data-stu-id="61e99-356">Value</span></span>|  
|-----------|---------------|----------|-----------|  
|<span data-ttu-id="61e99-357">1</span><span class="sxs-lookup"><span data-stu-id="61e99-357">1</span></span>|`Text`||<span data-ttu-id="61e99-358">123</span><span class="sxs-lookup"><span data-stu-id="61e99-358">A 123</span></span>|  
  
 <span data-ttu-id="61e99-359">当 `EntityHandling` 设置为 `ExpandCharEntities` ，并且 <xref:System.Xml.XmlTextReader.WhitespaceHandling%2A> 设置为或时 `Significant` `All` ，"doc" 元素将展开字符实体并将常规实体作为节点返回：</span><span class="sxs-lookup"><span data-stu-id="61e99-359">When `EntityHandling` is set to `ExpandCharEntities`, and <xref:System.Xml.XmlTextReader.WhitespaceHandling%2A> is set to `Significant` or `All`, the "doc" element expands the character entity and returns the general entity as a node:</span></span>  
  
|<span data-ttu-id="61e99-360">深度</span><span class="sxs-lookup"><span data-stu-id="61e99-360">Depth</span></span>|<span data-ttu-id="61e99-361">节点类型</span><span class="sxs-lookup"><span data-stu-id="61e99-361">Node type</span></span>|<span data-ttu-id="61e99-362">“属性”</span><span class="sxs-lookup"><span data-stu-id="61e99-362">Name</span></span>|<span data-ttu-id="61e99-363">“值”</span><span class="sxs-lookup"><span data-stu-id="61e99-363">Value</span></span>|  
|-----------|---------------|----------|-----------|  
|<span data-ttu-id="61e99-364">1</span><span class="sxs-lookup"><span data-stu-id="61e99-364">1</span></span>|`Text`||<span data-ttu-id="61e99-365">包含当前请求的 URL 的</span><span class="sxs-lookup"><span data-stu-id="61e99-365">A</span></span>|  
|<span data-ttu-id="61e99-366">1</span><span class="sxs-lookup"><span data-stu-id="61e99-366">1</span></span>|`EntityReference`|<span data-ttu-id="61e99-367">num</span><span class="sxs-lookup"><span data-stu-id="61e99-367">num</span></span>||  
|<span data-ttu-id="61e99-368">1</span><span class="sxs-lookup"><span data-stu-id="61e99-368">1</span></span>|`SignificantWhitespace`|||  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public override bool EOF { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EOF" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.EOF" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property EOF As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool EOF { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.EOF : bool" Usage="System.Xml.XmlTextReader.EOF" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="61e99-369">获取一个值，该值指示读取器是否定位在流结尾。</span><span class="sxs-lookup"><span data-stu-id="61e99-369">Gets a value indicating whether the reader is positioned at the end of the stream.</span></span></summary>
        <value><span data-ttu-id="61e99-370">如果此读取器定位在流的结尾，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-370"><see langword="true" /> if the reader is positioned at the end of the stream; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-371">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-371">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="61e99-372">获取属性的值。</span><span class="sxs-lookup"><span data-stu-id="61e99-372">Gets the value of an attribute.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-373">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-373">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public override string GetAttribute (int i);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetAttribute(int32 i) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.GetAttribute(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetAttribute (i As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetAttribute(int i);" />
      <MemberSignature Language="F#" Value="override this.GetAttribute : int -&gt; string" Usage="xmlTextReader.GetAttribute i" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i"><span data-ttu-id="61e99-374">属性的索引。</span><span class="sxs-lookup"><span data-stu-id="61e99-374">The index of the attribute.</span></span> <span data-ttu-id="61e99-375">索引是从零开始的。</span><span class="sxs-lookup"><span data-stu-id="61e99-375">The index is zero-based.</span></span> <span data-ttu-id="61e99-376">（第一个属性的索引为 0。）</span><span class="sxs-lookup"><span data-stu-id="61e99-376">(The first attribute has index 0.)</span></span></param>
        <summary><span data-ttu-id="61e99-377">获取具有指定索引的属性的值。</span><span class="sxs-lookup"><span data-stu-id="61e99-377">Gets the value of the attribute with the specified index.</span></span></summary>
        <returns><span data-ttu-id="61e99-378">指定的属性的值。</span><span class="sxs-lookup"><span data-stu-id="61e99-378">The value of the specified attribute.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-379">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-379">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-380">此方法不移动读取器。</span><span class="sxs-lookup"><span data-stu-id="61e99-380">This method does not move the reader.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="61e99-381"><paramref name="i" /> 参数小于 0 或大于等于 <see cref="P:System.Xml.XmlTextReader.AttributeCount" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-381">The <paramref name="i" /> parameter is less than 0 or greater than or equal to <see cref="P:System.Xml.XmlTextReader.AttributeCount" />.</span></span></exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public override string? GetAttribute (string name);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetAttribute(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.GetAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetAttribute (name As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetAttribute(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.GetAttribute : string -&gt; string" Usage="xmlTextReader.GetAttribute name" />
      <MemberSignature Language="C#" Value="public override string GetAttribute (string name);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="61e99-382">属性的限定名称。</span><span class="sxs-lookup"><span data-stu-id="61e99-382">The qualified name of the attribute.</span></span></param>
        <summary><span data-ttu-id="61e99-383">获取具有指定名称的属性的值。</span><span class="sxs-lookup"><span data-stu-id="61e99-383">Gets the value of the attribute with the specified name.</span></span></summary>
        <returns><span data-ttu-id="61e99-384">指定的属性的值。</span><span class="sxs-lookup"><span data-stu-id="61e99-384">The value of the specified attribute.</span></span> <span data-ttu-id="61e99-385">如果未找到该属性，则返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-385">If the attribute is not found, <see langword="null" /> is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-386">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-386">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-387">此方法不移动读取器。</span><span class="sxs-lookup"><span data-stu-id="61e99-387">This method does not move the reader.</span></span>  
  
 <span data-ttu-id="61e99-388">如果读取器定位在节点上 `DocumentType` ，则此方法可用于获取公共和系统文本，例如 `reader.GetAttribute("PUBLIC")`</span><span class="sxs-lookup"><span data-stu-id="61e99-388">If the reader is positioned on a `DocumentType` node, this method can be used to get the PUBLIC and SYSTEM literals, for example, `reader.GetAttribute("PUBLIC")`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61e99-389">下面的示例获取 ISBN 特性的值。</span><span class="sxs-lookup"><span data-stu-id="61e99-389">The following example gets the value of the ISBN attribute.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.GetAttribute1 Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.GetAttribute1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.GetAttribute1 Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.GetAttribute1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.GetAttribute1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.GetAttribute1 Example/VB/source.vb#1)]  
  
 <span data-ttu-id="61e99-390">该示例使用文件 `attrs.xml` 作为输入。</span><span class="sxs-lookup"><span data-stu-id="61e99-390">The example uses the file, `attrs.xml`, as input.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.GetAttribute1 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.GetAttribute1 Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public override string GetAttribute (string? localName, string namespaceURI);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetAttribute(string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.GetAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetAttribute (localName As String, namespaceURI As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetAttribute(System::String ^ localName, System::String ^ namespaceURI);" />
      <MemberSignature Language="F#" Value="override this.GetAttribute : string * string -&gt; string" Usage="xmlTextReader.GetAttribute (localName, namespaceURI)" />
      <MemberSignature Language="C#" Value="public override string GetAttribute (string localName, string namespaceURI);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName"><span data-ttu-id="61e99-391">属性的本地名称。</span><span class="sxs-lookup"><span data-stu-id="61e99-391">The local name of the attribute.</span></span></param>
        <param name="namespaceURI"><span data-ttu-id="61e99-392">属性的命名空间 URI。</span><span class="sxs-lookup"><span data-stu-id="61e99-392">The namespace URI of the attribute.</span></span></param>
        <summary><span data-ttu-id="61e99-393">获取具有指定本地名称和命名空间 URI 的属性的值。</span><span class="sxs-lookup"><span data-stu-id="61e99-393">Gets the value of the attribute with the specified local name and namespace URI.</span></span></summary>
        <returns><span data-ttu-id="61e99-394">指定的属性的值。</span><span class="sxs-lookup"><span data-stu-id="61e99-394">The value of the specified attribute.</span></span> <span data-ttu-id="61e99-395">如果未找到该属性，则返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-395">If the attribute is not found, <see langword="null" /> is returned.</span></span> <span data-ttu-id="61e99-396">此方法不移动读取器。</span><span class="sxs-lookup"><span data-stu-id="61e99-396">This method does not move the reader.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-397">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-397">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-398">以下 XML 包含特定命名空间中的属性：</span><span class="sxs-lookup"><span data-stu-id="61e99-398">The following XML contains an attribute in a specific namespace:</span></span>  
  
```xml  
<test xmlns:dt="urn:datatypes" dt:type="int"/>  
```  
  
 <span data-ttu-id="61e99-399">可以 `dt:type` 使用一个参数 (前缀和本地名称) 或者两个参数 (本地名称和命名空间 URI) 来查找属性：</span><span class="sxs-lookup"><span data-stu-id="61e99-399">You can lookup the `dt:type` attribute using one argument (prefix and local name) or two arguments (local name and namespace URI):</span></span>  
  
```csharp  
String dt = reader.GetAttribute("dt:type");  
String dt2 = reader.GetAttribute("type","urn:datatypes");  
```  
  
 <span data-ttu-id="61e99-400">若要查找 `xmlns:dt` 属性，请使用以下参数之一：</span><span class="sxs-lookup"><span data-stu-id="61e99-400">To lookup the `xmlns:dt` attribute, use one of the following arguments:</span></span>  
  
```csharp  
String dt3 = reader.GetAttribute("xmlns:dt");  
String dt4 = reader.GetAttribute("dt",http://www.w3.org/2000/xmlns/);  
```  
  
 <span data-ttu-id="61e99-401">你还可以使用属性获取此信息 <xref:System.Xml.XmlTextReader.Prefix%2A> 。</span><span class="sxs-lookup"><span data-stu-id="61e99-401">You can also get this information using the <xref:System.Xml.XmlTextReader.Prefix%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="GetNamespacesInScope">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,string&gt; GetNamespacesInScope (System.Xml.XmlNamespaceScope scope);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, string&gt; GetNamespacesInScope(valuetype System.Xml.XmlNamespaceScope scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNamespacesInScope (scope As XmlNamespaceScope) As IDictionary(Of String, String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ GetNamespacesInScope(System::Xml::XmlNamespaceScope scope);" />
      <MemberSignature Language="F#" Value="member this.GetNamespacesInScope : System.Xml.XmlNamespaceScope -&gt; System.Collections.Generic.IDictionary&lt;string, string&gt;" Usage="xmlTextReader.GetNamespacesInScope scope" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="System.Xml.XmlNamespaceScope" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="scope"><span data-ttu-id="61e99-402">一个 <see cref="T:System.Xml.XmlNamespaceScope" /> 值，指定要返回的命名空间节点的类型。</span><span class="sxs-lookup"><span data-stu-id="61e99-402">An <see cref="T:System.Xml.XmlNamespaceScope" /> value that specifies the type of namespace nodes to return.</span></span></param>
        <summary><span data-ttu-id="61e99-403">获取一个集合，该集合包含当前在范围内的所有命名空间。</span><span class="sxs-lookup"><span data-stu-id="61e99-403">Gets a collection that contains all namespaces currently in-scope.</span></span></summary>
        <returns><span data-ttu-id="61e99-404">一个包含当前在范围内的所有命名空间的 <see cref="T:System.Collections.IDictionary" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="61e99-404">An <see cref="T:System.Collections.IDictionary" /> object that contains all the current in-scope namespaces.</span></span> <span data-ttu-id="61e99-405">如果读取器未定位在某元素上，则返回空字典（无命名空间）。</span><span class="sxs-lookup"><span data-stu-id="61e99-405">If the reader is not positioned on an element, an empty dictionary (no namespaces) is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-406">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-406">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-407">字典包含按前缀键控的命名空间名称的集合。</span><span class="sxs-lookup"><span data-stu-id="61e99-407">The dictionary consists of a collection of namespace names keyed by prefix.</span></span> <span data-ttu-id="61e99-408">它可用于枚举范围内的命名空间。</span><span class="sxs-lookup"><span data-stu-id="61e99-408">It can be used to enumerate the in-scope namespaces.</span></span> <span data-ttu-id="61e99-409">字典是读取器命名空间列表的断开连接的副本。</span><span class="sxs-lookup"><span data-stu-id="61e99-409">The dictionary is a disconnected copy of the namespace list of the reader.</span></span> <span data-ttu-id="61e99-410">它保持不变，因为读者位置、当前范围内命名空间列表更改。</span><span class="sxs-lookup"><span data-stu-id="61e99-410">It remains unchanged as the reader position, current in-scope namespace list, changes.</span></span>  
  
 <span data-ttu-id="61e99-411">下表介绍 <xref:System.Xml.XmlNamespaceScope> 枚举值如何影响默认值和内置命名空间是否由返回 <xref:System.Xml.XmlTextReader.GetNamespacesInScope%2A> 。</span><span class="sxs-lookup"><span data-stu-id="61e99-411">The following table describes how the <xref:System.Xml.XmlNamespaceScope> enumeration value affects the whether or not the default and built-in namespaces are returned by <xref:System.Xml.XmlTextReader.GetNamespacesInScope%2A>.</span></span>  
  
|<span data-ttu-id="61e99-412">XmlNamespaceScope 值</span><span class="sxs-lookup"><span data-stu-id="61e99-412">XmlNamespaceScope Value</span></span>|<span data-ttu-id="61e99-413">xmlns： xml</span><span class="sxs-lookup"><span data-stu-id="61e99-413">xmlns:xml</span></span>|<span data-ttu-id="61e99-414">xmlns： xmlns</span><span class="sxs-lookup"><span data-stu-id="61e99-414">xmlns:xmlns</span></span>|<span data-ttu-id="61e99-415">xmlns = ""</span><span class="sxs-lookup"><span data-stu-id="61e99-415">xmlns=""</span></span>|  
|-----------------------------|---------------|-----------------|---------------|  
|`All`|<span data-ttu-id="61e99-416">是</span><span class="sxs-lookup"><span data-stu-id="61e99-416">yes</span></span>|<span data-ttu-id="61e99-417">否</span><span class="sxs-lookup"><span data-stu-id="61e99-417">no</span></span>|<span data-ttu-id="61e99-418">否</span><span class="sxs-lookup"><span data-stu-id="61e99-418">no</span></span>|  
|`ExcludeXml`|<span data-ttu-id="61e99-419">否</span><span class="sxs-lookup"><span data-stu-id="61e99-419">no</span></span>|<span data-ttu-id="61e99-420">否</span><span class="sxs-lookup"><span data-stu-id="61e99-420">no</span></span>|<span data-ttu-id="61e99-421">否</span><span class="sxs-lookup"><span data-stu-id="61e99-421">no</span></span>|  
|`Local`|<span data-ttu-id="61e99-422">否</span><span class="sxs-lookup"><span data-stu-id="61e99-422">no</span></span>|<span data-ttu-id="61e99-423">否</span><span class="sxs-lookup"><span data-stu-id="61e99-423">no</span></span>|<span data-ttu-id="61e99-424">是</span><span class="sxs-lookup"><span data-stu-id="61e99-424">yes</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="GetRemainder">
      <MemberSignature Language="C#" Value="public System.IO.TextReader GetRemainder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.TextReader GetRemainder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.GetRemainder" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRemainder () As TextReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::TextReader ^ GetRemainder();" />
      <MemberSignature Language="F#" Value="member this.GetRemainder : unit -&gt; System.IO.TextReader" Usage="xmlTextReader.GetRemainder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="61e99-425">获取已缓冲的 XML 的剩余部分。</span><span class="sxs-lookup"><span data-stu-id="61e99-425">Gets the remainder of the buffered XML.</span></span></summary>
        <returns><span data-ttu-id="61e99-426">包含已缓冲的 XML 的剩余部分的 <see cref="T:System.IO.TextReader" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-426">A <see cref="T:System.IO.TextReader" /> containing the remainder of the buffered XML.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-427">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-427">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-428">由于 <xref:System.Xml.XmlTextReader> 执行缓冲 `Read` 操作，因此它必须能够返回未使用的缓冲区的其余部分，以便不会丢失任何数据。</span><span class="sxs-lookup"><span data-stu-id="61e99-428">Because <xref:System.Xml.XmlTextReader> does a buffered `Read`, it must be able to return the remainder of the unused buffer so that no data is lost.</span></span> <span data-ttu-id="61e99-429">这允许 (诸如多部分 MIME) 这样的协议将 XML 打包到与其他项目相同的流中。</span><span class="sxs-lookup"><span data-stu-id="61e99-429">This allows protocols (such as multi-part MIME) to package XML in the same stream as other things.</span></span>  
  
 <span data-ttu-id="61e99-430">调用此方法后，将 <xref:System.Xml.XmlTextReader.EOF%2A> 设置为 `true` 。</span><span class="sxs-lookup"><span data-stu-id="61e99-430">After calling this method, <xref:System.Xml.XmlTextReader.EOF%2A> is set to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61e99-431">下面的示例读取 XML 文档的第一部分，然后使用它 `GetRemainder` 来完成使用第二个读取器读取文档的过程。</span><span class="sxs-lookup"><span data-stu-id="61e99-431">The following example reads the first part of an XML document and then uses `GetRemainder` to complete reading the document using a second reader.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.GetRemainder Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.GetRemainder Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.GetRemainder Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.GetRemainder Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.GetRemainder Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.GetRemainder Example/VB/source.vb#1)]  
  
 <span data-ttu-id="61e99-432">该示例使用了输入文件 `tworeads.xml` 。</span><span class="sxs-lookup"><span data-stu-id="61e99-432">The example uses the input file `tworeads.xml`.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.GetRemainder Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.GetRemainder Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="HasLineInfo">
      <MemberSignature Language="C#" Value="public bool HasLineInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HasLineInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.HasLineInfo" />
      <MemberSignature Language="VB.NET" Value="Public Function HasLineInfo () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool HasLineInfo();" />
      <MemberSignature Language="F#" Value="abstract member HasLineInfo : unit -&gt; bool&#xA;override this.HasLineInfo : unit -&gt; bool" Usage="xmlTextReader.HasLineInfo " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlLineInfo.HasLineInfo</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="61e99-433">获取一个值，该值指示该类是否可返回行信息。</span><span class="sxs-lookup"><span data-stu-id="61e99-433">Gets a value indicating whether the class can return line information.</span></span></summary>
        <returns><span data-ttu-id="61e99-434">如果该类可以返回行信息，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-434"><see langword="true" /> if the class can return line information; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-435">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-435">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="HasValue">
      <MemberSignature Language="C#" Value="public override bool HasValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasValue" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.HasValue" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property HasValue As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool HasValue { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasValue : bool" Usage="System.Xml.XmlTextReader.HasValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="61e99-436">获取一个值，该值指示当前节点是否可以具有 <see langword="String.Empty" /> 以外的 <see cref="P:System.Xml.XmlTextReader.Value" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-436">Gets a value indicating whether the current node can have a <see cref="P:System.Xml.XmlTextReader.Value" /> other than <see langword="String.Empty" />.</span></span></summary>
        <value><span data-ttu-id="61e99-437">如果读取器当前定位在的节点可以具有 <see langword="Value" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-437"><see langword="true" /> if the node on which the reader is currently positioned can have a <see langword="Value" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-438">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-438">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-439">下表列出具有要返回的值的节点类型。</span><span class="sxs-lookup"><span data-stu-id="61e99-439">The following table lists node types that have a value to return.</span></span>  
  
|<span data-ttu-id="61e99-440">节点类型</span><span class="sxs-lookup"><span data-stu-id="61e99-440">Node type</span></span>|<span data-ttu-id="61e99-441">“值”</span><span class="sxs-lookup"><span data-stu-id="61e99-441">Value</span></span>|  
|---------------|-----------|  
|`Attribute`|<span data-ttu-id="61e99-442">属性的值。</span><span class="sxs-lookup"><span data-stu-id="61e99-442">The value of the attribute.</span></span>|  
|`CDATA`|<span data-ttu-id="61e99-443">CDATA 节的内容。</span><span class="sxs-lookup"><span data-stu-id="61e99-443">The content of the CDATA section.</span></span>|  
|`Comment`|<span data-ttu-id="61e99-444">注释的内容。</span><span class="sxs-lookup"><span data-stu-id="61e99-444">The content of the comment.</span></span>|  
|`DocumentType`|<span data-ttu-id="61e99-445">内部子集。</span><span class="sxs-lookup"><span data-stu-id="61e99-445">The internal subset.</span></span>|  
|`ProcessingInstruction`|<span data-ttu-id="61e99-446">全部内容（不包括指令目标）。</span><span class="sxs-lookup"><span data-stu-id="61e99-446">The entire content, excluding the target.</span></span>|  
|`SignificantWhitespace`|<span data-ttu-id="61e99-447">混合内容模型中标记之间的空白。</span><span class="sxs-lookup"><span data-stu-id="61e99-447">The white space between markup in a mixed content model.</span></span>|  
|`Text`|<span data-ttu-id="61e99-448">文本节点的内容。</span><span class="sxs-lookup"><span data-stu-id="61e99-448">The content of the text node.</span></span>|  
|`Whitespace`|<span data-ttu-id="61e99-449">标记之间的空白。</span><span class="sxs-lookup"><span data-stu-id="61e99-449">The white space between markup.</span></span>|  
|`XmlDeclaration`|<span data-ttu-id="61e99-450">声明的内容。</span><span class="sxs-lookup"><span data-stu-id="61e99-450">The content of the declaration.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="61e99-451">下面的示例显示了可以具有值的每个节点的值。</span><span class="sxs-lookup"><span data-stu-id="61e99-451">The following example displays the value for every node that can have a value.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.HasValue Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.HasValue Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.HasValue Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.HasValue Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.HasValue Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.HasValue Example/VB/source.vb#1)]  
  
 <span data-ttu-id="61e99-452">该示例使用文件 `book1.xml` 作为输入。</span><span class="sxs-lookup"><span data-stu-id="61e99-452">The example uses the file, `book1.xml`, as input.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.HasValue Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.HasValue Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="IsDefault">
      <MemberSignature Language="C#" Value="public override bool IsDefault { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDefault" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.IsDefault" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsDefault As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsDefault { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDefault : bool" Usage="System.Xml.XmlTextReader.IsDefault" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="61e99-453">获取一个值，该值指示当前节点是否是从 DTD 或架构中定义的默认值生成的属性。</span><span class="sxs-lookup"><span data-stu-id="61e99-453">Gets a value indicating whether the current node is an attribute that was generated from the default value defined in the DTD or schema.</span></span></summary>
        <value><span data-ttu-id="61e99-454">此属性始终返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-454">This property always returns <see langword="false" />.</span></span> <span data-ttu-id="61e99-455">（<see cref="T:System.Xml.XmlTextReader" /> 不展开默认属性。）</span><span class="sxs-lookup"><span data-stu-id="61e99-455">(<see cref="T:System.Xml.XmlTextReader" /> does not expand default attributes.)</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-456">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-456">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-457">此属性仅适用于属性节点。</span><span class="sxs-lookup"><span data-stu-id="61e99-457">This property applies only to attribute nodes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="IsEmptyElement">
      <MemberSignature Language="C#" Value="public override bool IsEmptyElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmptyElement" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.IsEmptyElement" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsEmptyElement As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsEmptyElement { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmptyElement : bool" Usage="System.Xml.XmlTextReader.IsEmptyElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="61e99-458">获取一个值，该值指示当前节点是否为空元素（例如 <c>&lt;MyElement/&gt;</c>）。</span><span class="sxs-lookup"><span data-stu-id="61e99-458">Gets a value indicating whether the current node is an empty element (for example, <c>&lt;MyElement/&gt;</c>).</span></span></summary>
        <value><span data-ttu-id="61e99-459"><see langword="true" /> 如果当前节点是一个元素 (<see cref="P:System.Xml.XmlTextReader.NodeType" /> 等于 <see langword="XmlNodeType.Element" /> 末尾) ， <c>/&gt;</c> 则为; 否则为 <see langword="false" /> 。</span><span class="sxs-lookup"><span data-stu-id="61e99-459"><see langword="true" /> if the current node is an element (<see cref="P:System.Xml.XmlTextReader.NodeType" /> equals <see langword="XmlNodeType.Element" />) that ends with <c>/&gt;</c>; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-460">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-460">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-461">此属性使您能够确定下面各项之间的差异：</span><span class="sxs-lookup"><span data-stu-id="61e99-461">This property enables you to determine the difference between the following:</span></span>  
  
 <span data-ttu-id="61e99-462">`<item num="123"/>``IsEmptyElement`)  (`true` 。</span><span class="sxs-lookup"><span data-stu-id="61e99-462">`<item num="123"/>` (`IsEmptyElement` is `true`).</span></span>  
  
 <span data-ttu-id="61e99-463">`<item num="123">` (`IsEmptyElement` 为 `false` ，但元素内容为空) 。</span><span class="sxs-lookup"><span data-stu-id="61e99-463">`<item num="123">` (`IsEmptyElement` is `false`, although element content is empty).</span></span>  
  
 <span data-ttu-id="61e99-464">`EndElement`不会为空元素生成相应的节点。</span><span class="sxs-lookup"><span data-stu-id="61e99-464">A corresponding `EndElement` node is not generated for empty elements.</span></span>  
  
 <span data-ttu-id="61e99-465">`IsEmptyElement` 只会报告源文档中的元素是否具有结束元素标记。</span><span class="sxs-lookup"><span data-stu-id="61e99-465">`IsEmptyElement` simply reports whether or not the element in the source document had an end element tag.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61e99-466">下面的示例显示每个元素的文本内容。</span><span class="sxs-lookup"><span data-stu-id="61e99-466">The following example displays the text content of each element.</span></span>  
  
 [!code-cpp[Classic WebData XmlReader.IsStartElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlReader.IsStartElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlReader.IsStartElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/VB/source.vb#1)]  
  
 <span data-ttu-id="61e99-467">该示例使用文件 `elems.xml` 作为输入。</span><span class="sxs-lookup"><span data-stu-id="61e99-467">The example uses the file, `elems.xml`, as input.</span></span>  
  
 [!code-xml[Classic WebData XmlReader.IsStartElement Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public override string this[int i] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overrides ReadOnly Property Item(i As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ default[int] { System::String ^ get(int i); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : string" Usage="System.Xml.XmlTextReader.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="i"><span data-ttu-id="61e99-468">属性的索引。</span><span class="sxs-lookup"><span data-stu-id="61e99-468">The index of the attribute.</span></span></param>
        <summary><span data-ttu-id="61e99-469">获取具有指定索引的属性的值。</span><span class="sxs-lookup"><span data-stu-id="61e99-469">Gets the value of the attribute with the specified index.</span></span></summary>
        <value><span data-ttu-id="61e99-470">属性的值。</span><span class="sxs-lookup"><span data-stu-id="61e99-470">The value of the attribute.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public override string this[string name] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overrides ReadOnly Property Item(name As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ default[System::String ^] { System::String ^ get(System::String ^ name); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : string" Usage="System.Xml.XmlTextReader.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="61e99-471">属性的限定名称。</span><span class="sxs-lookup"><span data-stu-id="61e99-471">The qualified name of the attribute.</span></span></param>
        <summary><span data-ttu-id="61e99-472">获取具有指定名称的属性的值。</span><span class="sxs-lookup"><span data-stu-id="61e99-472">Gets the value of the attribute with the specified name.</span></span></summary>
        <value><span data-ttu-id="61e99-473">指定的属性的值。</span><span class="sxs-lookup"><span data-stu-id="61e99-473">The value of the specified attribute.</span></span> <span data-ttu-id="61e99-474">如果找不到该属性，则返回 <see langword="null" /> 。</span><span class="sxs-lookup"><span data-stu-id="61e99-474">If the attribute is not found, returns <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<span data-ttu-id="61e99-475">此属性不移动读取器。</span><span class="sxs-lookup"><span data-stu-id="61e99-475">This property does not move the reader.</span></span>

<span data-ttu-id="61e99-476">如果读取器定位在节点上 `DocumentType` ，则此方法可用于获取公共和系统文本，例如 `reader["PUBLIC"]` 。</span><span class="sxs-lookup"><span data-stu-id="61e99-476">If the reader is positioned on a `DocumentType` node, this method can be used to get the PUBLIC and SYSTEM literals, for example, `reader["PUBLIC"]`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public override string this[string name, string namespaceURI] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Item(string, string)" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Item(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overrides ReadOnly Property Item(name As String, namespaceURI As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ default[System::String ^, System::String ^] { System::String ^ get(System::String ^ name, System::String ^ namespaceURI); };" />
      <MemberSignature Language="F#" Value="member this.Item(string * string) : string" Usage="System.Xml.XmlTextReader.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="namespaceURI" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="61e99-477">属性的本地名称。</span><span class="sxs-lookup"><span data-stu-id="61e99-477">The local name of the attribute.</span></span></param>
        <param name="namespaceURI"><span data-ttu-id="61e99-478">属性的命名空间 URI。</span><span class="sxs-lookup"><span data-stu-id="61e99-478">The namespace URI of the attribute.</span></span></param>
        <summary><span data-ttu-id="61e99-479">获取具有指定本地名称和命名空间 URI 的属性的值。</span><span class="sxs-lookup"><span data-stu-id="61e99-479">Gets the value of the attribute with the specified local name and namespace URI.</span></span></summary>
        <value><span data-ttu-id="61e99-480">指定的属性的值。</span><span class="sxs-lookup"><span data-stu-id="61e99-480">The value of the specified attribute.</span></span> <span data-ttu-id="61e99-481">如果找不到该属性，则返回 <see langword="null" /> 。</span><span class="sxs-lookup"><span data-stu-id="61e99-481">If the attribute is not found, returns <see langword="null" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LineNumber">
      <MemberSignature Language="C#" Value="public int LineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LineNumber" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.LineNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LineNumber As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LineNumber { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LineNumber : int" Usage="System.Xml.XmlTextReader.LineNumber" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Xml.IXmlLineInfo.LineNumber</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="61e99-482">获取当前行号。</span><span class="sxs-lookup"><span data-stu-id="61e99-482">Gets the current line number.</span></span></summary>
        <value><span data-ttu-id="61e99-483">当前行号。</span><span class="sxs-lookup"><span data-stu-id="61e99-483">The current line number.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-484">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-484">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-485">此属性最常用于错误报告，但可随时调用。</span><span class="sxs-lookup"><span data-stu-id="61e99-485">This property is most commonly used for error reporting, but can be called at any time.</span></span> <span data-ttu-id="61e99-486">此属性的起始值为 `1` 。</span><span class="sxs-lookup"><span data-stu-id="61e99-486">The starting value for this property is `1`.</span></span>  
  
 <span data-ttu-id="61e99-487">将与相结合 <xref:System.Xml.XmlTextReader.LinePosition%2A> ，值 `1,1` 指示文档的开头。</span><span class="sxs-lookup"><span data-stu-id="61e99-487">Combined with <xref:System.Xml.XmlTextReader.LinePosition%2A>, a value of `1,1` indicates the start of the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61e99-488">下面的示例显示每个节点，包括其深度、行号和行位置。</span><span class="sxs-lookup"><span data-stu-id="61e99-488">The following example displays each node including its depth, line number, and line position.</span></span>  
  
 [!code-cpp[XmlTextReader.LineNum#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.LineNum/CPP/readlinenum.cpp#1)]
 [!code-csharp[XmlTextReader.LineNum#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.LineNum/CS/readlinenum.cs#1)]
 [!code-vb[XmlTextReader.LineNum#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.LineNum/VB/readlinenum.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="LinePosition">
      <MemberSignature Language="C#" Value="public int LinePosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LinePosition" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.LinePosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LinePosition As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LinePosition { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LinePosition : int" Usage="System.Xml.XmlTextReader.LinePosition" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Xml.IXmlLineInfo.LinePosition</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="61e99-489">获取当前行位置。</span><span class="sxs-lookup"><span data-stu-id="61e99-489">Gets the current line position.</span></span></summary>
        <value><span data-ttu-id="61e99-490">当前行位置。</span><span class="sxs-lookup"><span data-stu-id="61e99-490">The current line position.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-491">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-491">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-492">此属性最常用于错误报告，但可随时调用。</span><span class="sxs-lookup"><span data-stu-id="61e99-492">This property is most commonly used for error reporting, but can be called at any time.</span></span> <span data-ttu-id="61e99-493">此属性的起始值为 `1` 。</span><span class="sxs-lookup"><span data-stu-id="61e99-493">The property's starting value is `1`.</span></span>  
  
 <span data-ttu-id="61e99-494">指示的位置是标记中文本的第一个字符。</span><span class="sxs-lookup"><span data-stu-id="61e99-494">The position indicated is the first character of text in the markup.</span></span>  
  
```  
<root>  
abc<tag/>  
</root>  
```  
  
 <span data-ttu-id="61e99-495">在上面的 XML 文本的第一行中， `LinePosition` 的与 `2` 字符相对应 `r` ; 在第二行，的对应 `LinePosition` 于 `5` 字符 `t` ; 而在第三行中，对应于 `LinePosition` `3` 字符 `r` 。</span><span class="sxs-lookup"><span data-stu-id="61e99-495">On the first line of the preceding XML text, a `LinePosition` of `2` corresponds to the character `r`; on the second line, a `LinePosition` of `5` corresponds to the character `t`; and on the third line, a `LinePosition` of `3` corresponds to the character `r`.</span></span>  
  
 <span data-ttu-id="61e99-496">将与相结合 <xref:System.Xml.XmlTextReader.LineNumber%2A> ，值 `1,1` 指示文档的开头。</span><span class="sxs-lookup"><span data-stu-id="61e99-496">Combined with <xref:System.Xml.XmlTextReader.LineNumber%2A>, a value of `1,1` indicates the start of the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61e99-497">下面的示例显示每个节点，包括其深度、行号和行位置。</span><span class="sxs-lookup"><span data-stu-id="61e99-497">The following example displays each node including its depth, line number, and line position.</span></span>  
  
 [!code-cpp[XmlTextReader.LineNum#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.LineNum/CPP/readlinenum.cpp#1)]
 [!code-csharp[XmlTextReader.LineNum#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.LineNum/CS/readlinenum.cs#1)]
 [!code-vb[XmlTextReader.LineNum#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.LineNum/VB/readlinenum.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public override string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.LocalName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property LocalName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ LocalName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalName : string" Usage="System.Xml.XmlTextReader.LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="61e99-498">获取当前节点的本地名称。</span><span class="sxs-lookup"><span data-stu-id="61e99-498">Gets the local name of the current node.</span></span></summary>
        <value><span data-ttu-id="61e99-499">移除了前缀的当前节点的名称。</span><span class="sxs-lookup"><span data-stu-id="61e99-499">The name of the current node with the prefix removed.</span></span> <span data-ttu-id="61e99-500">例如， <see langword="LocalName" /> <see langword="book" /> 对于元素<c> &lt; bk： &gt; book</c>。</span><span class="sxs-lookup"><span data-stu-id="61e99-500">For example, <see langword="LocalName" /> is <see langword="book" /> for the element <c>&lt;bk:book&gt;</c>.</span></span>  
  
<span data-ttu-id="61e99-501">对于没有名称的节点类型（如 <see langword="Text" />、<see langword="Comment" /> 等），该属性返回 <see langword="String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-501">For node types that do not have a name (like <see langword="Text" />, <see langword="Comment" />, and so on), this property returns <see langword="String.Empty" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-502">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-502">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61e99-503">下面的示例显示每个节点的本地名称，并显示前缀和命名空间 URI （如果存在）。</span><span class="sxs-lookup"><span data-stu-id="61e99-503">The following example displays the local name of each node, and, if they exist, the prefix and namespace URI.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.LocalName Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.LocalName Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.LocalName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/VB/source.vb#1)]  
  
 <span data-ttu-id="61e99-504">该示例使用文件 `book2.xml` 作为输入。</span><span class="sxs-lookup"><span data-stu-id="61e99-504">The example uses the file, `book2.xml`, as input.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.LocalName Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="LookupNamespace">
      <MemberSignature Language="C#" Value="public override string? LookupNamespace (string prefix);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string LookupNamespace(string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.LookupNamespace(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function LookupNamespace (prefix As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ LookupNamespace(System::String ^ prefix);" />
      <MemberSignature Language="F#" Value="override this.LookupNamespace : string -&gt; string" Usage="xmlTextReader.LookupNamespace prefix" />
      <MemberSignature Language="C#" Value="public override string LookupNamespace (string prefix);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix"><span data-ttu-id="61e99-505">要解析其命名空间 URI 的前缀。</span><span class="sxs-lookup"><span data-stu-id="61e99-505">The prefix whose namespace URI you want to resolve.</span></span> <span data-ttu-id="61e99-506">若要匹配默认命名空间，请传递一个空字符串。</span><span class="sxs-lookup"><span data-stu-id="61e99-506">To match the default namespace, pass an empty string.</span></span> <span data-ttu-id="61e99-507">不必原子化该字符串。</span><span class="sxs-lookup"><span data-stu-id="61e99-507">This string does not have to be atomized.</span></span></param>
        <summary><span data-ttu-id="61e99-508">解析当前元素的范围内的命名空间前缀。</span><span class="sxs-lookup"><span data-stu-id="61e99-508">Resolves a namespace prefix in the current element's scope.</span></span></summary>
        <returns><span data-ttu-id="61e99-509">前缀映射到的命名空间 URI；如果未找到任何匹配的前缀，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-509">The namespace URI to which the prefix maps or <see langword="null" /> if no matching prefix is found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-510">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-510">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-511">在以下 XML 中，如果读取器定位在属性上 `href` ，则 `a` 通过调用来解析前缀 `reader.LookupNamespace("a")` 。</span><span class="sxs-lookup"><span data-stu-id="61e99-511">In the following XML, if the reader is positioned on the `href` attribute, the prefix `a` is resolved by calling `reader.LookupNamespace("a")`.</span></span> <span data-ttu-id="61e99-512">返回的字符串为 `urn:456` 。</span><span class="sxs-lookup"><span data-stu-id="61e99-512">The returned string is `urn:456`.</span></span>  
  
```xml  
<root xmlns:a="urn:456">  
 <item>  
 <ref href="a:b"/>  
 </item>  
</root>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="61e99-513"><see cref="P:System.Xml.XmlTextReader.Namespaces" /> 属性设置为 <see langword="true" />，而 <paramref name="prefix" /> 值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-513">The <see cref="P:System.Xml.XmlTextReader.Namespaces" /> property is set to <see langword="true" /> and the <paramref name="prefix" /> value is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveToAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="61e99-514">移动到指定的属性。</span><span class="sxs-lookup"><span data-stu-id="61e99-514">Moves to the specified attribute.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-515">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-515">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveToAttribute">
      <MemberSignature Language="C#" Value="public override void MoveToAttribute (int i);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void MoveToAttribute(int32 i) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.MoveToAttribute(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub MoveToAttribute (i As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void MoveToAttribute(int i);" />
      <MemberSignature Language="F#" Value="override this.MoveToAttribute : int -&gt; unit" Usage="xmlTextReader.MoveToAttribute i" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i"><span data-ttu-id="61e99-516">属性的索引。</span><span class="sxs-lookup"><span data-stu-id="61e99-516">The index of the attribute.</span></span></param>
        <summary><span data-ttu-id="61e99-517">移动到具有指定索引的属性。</span><span class="sxs-lookup"><span data-stu-id="61e99-517">Moves to the attribute with the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-518">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-518">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61e99-519">下面的示例显示当前节点上的所有属性。</span><span class="sxs-lookup"><span data-stu-id="61e99-519">The following example displays all attributes on the current node.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.MoveToElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.MoveToElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.MoveToElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="61e99-520"><paramref name="i" /> 参数小于 0 或大于等于 <see cref="P:System.Xml.XmlReader.AttributeCount" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-520">The <paramref name="i" /> parameter is less than 0 or greater than or equal to <see cref="P:System.Xml.XmlReader.AttributeCount" />.</span></span></exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToAttribute">
      <MemberSignature Language="C#" Value="public override bool MoveToAttribute (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToAttribute(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.MoveToAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MoveToAttribute (name As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveToAttribute(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.MoveToAttribute : string -&gt; bool" Usage="xmlTextReader.MoveToAttribute name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="61e99-521">属性的限定名称。</span><span class="sxs-lookup"><span data-stu-id="61e99-521">The qualified name of the attribute.</span></span></param>
        <summary><span data-ttu-id="61e99-522">移动到具有指定名称的属性。</span><span class="sxs-lookup"><span data-stu-id="61e99-522">Moves to the attribute with the specified name.</span></span></summary>
        <returns><span data-ttu-id="61e99-523">如果找到了属性，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-523"><see langword="true" /> if the attribute is found; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="61e99-524">如果为 <see langword="false" />，则读取器的位置未改变。</span><span class="sxs-lookup"><span data-stu-id="61e99-524">If <see langword="false" />, the reader's position does not change.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-525">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-525">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-526">调用后， `MoveToAttribute` <xref:System.Xml.XmlTextReader.Name%2A> 、 <xref:System.Xml.XmlTextReader.NamespaceURI%2A> 和 <xref:System.Xml.XmlTextReader.Prefix%2A> 属性将反映该特性的属性。</span><span class="sxs-lookup"><span data-stu-id="61e99-526">After calling `MoveToAttribute`, the <xref:System.Xml.XmlTextReader.Name%2A>, <xref:System.Xml.XmlTextReader.NamespaceURI%2A>, and <xref:System.Xml.XmlTextReader.Prefix%2A> properties reflects the properties of that attribute.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToAttribute">
      <MemberSignature Language="C#" Value="public override bool MoveToAttribute (string localName, string? namespaceURI);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToAttribute(string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.MoveToAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MoveToAttribute (localName As String, namespaceURI As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveToAttribute(System::String ^ localName, System::String ^ namespaceURI);" />
      <MemberSignature Language="F#" Value="override this.MoveToAttribute : string * string -&gt; bool" Usage="xmlTextReader.MoveToAttribute (localName, namespaceURI)" />
      <MemberSignature Language="C#" Value="public override bool MoveToAttribute (string localName, string namespaceURI);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName"><span data-ttu-id="61e99-527">属性的本地名称。</span><span class="sxs-lookup"><span data-stu-id="61e99-527">The local name of the attribute.</span></span></param>
        <param name="namespaceURI"><span data-ttu-id="61e99-528">属性的命名空间 URI。</span><span class="sxs-lookup"><span data-stu-id="61e99-528">The namespace URI of the attribute.</span></span></param>
        <summary><span data-ttu-id="61e99-529">移动到具有指定本地名称和命名空间 URI 的属性。</span><span class="sxs-lookup"><span data-stu-id="61e99-529">Moves to the attribute with the specified local name and namespace URI.</span></span></summary>
        <returns><span data-ttu-id="61e99-530">如果找到了属性，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-530"><see langword="true" /> if the attribute is found; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="61e99-531">如果为 <see langword="false" />，则读取器的位置未改变。</span><span class="sxs-lookup"><span data-stu-id="61e99-531">If <see langword="false" />, the reader's position does not change.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-532">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-532">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-533">调用后， `MoveToAttribute` <xref:System.Xml.XmlTextReader.Name%2A> 、 <xref:System.Xml.XmlTextReader.NamespaceURI%2A> 和 <xref:System.Xml.XmlTextReader.Prefix%2A> 属性将反映该特性的属性。</span><span class="sxs-lookup"><span data-stu-id="61e99-533">After calling `MoveToAttribute`, the <xref:System.Xml.XmlTextReader.Name%2A>, <xref:System.Xml.XmlTextReader.NamespaceURI%2A>, and <xref:System.Xml.XmlTextReader.Prefix%2A> properties reflects the properties of that attribute.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToElement">
      <MemberSignature Language="C#" Value="public override bool MoveToElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.MoveToElement" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MoveToElement () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveToElement();" />
      <MemberSignature Language="F#" Value="override this.MoveToElement : unit -&gt; bool" Usage="xmlTextReader.MoveToElement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="61e99-534">移动到包含当前属性节点的元素。</span><span class="sxs-lookup"><span data-stu-id="61e99-534">Moves to the element that contains the current attribute node.</span></span></summary>
        <returns><span data-ttu-id="61e99-535">如果读取器定位在属性上（读取器移动到拥有该属性的元素），则为 <see langword="true" />；如果读取器未定位在属性上（读取器的位置不更改），则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-535"><see langword="true" /> if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); <see langword="false" /> if the reader is not positioned on an attribute (the position of the reader does not change).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-536">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-536">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-537">使用此方法可以在通过元素的属性导航后返回到元素。</span><span class="sxs-lookup"><span data-stu-id="61e99-537">Use this method to return to an element after navigating through its attributes.</span></span> <span data-ttu-id="61e99-538">此方法将读取器移动到以下节点类型之一： `Element` 、 `DocumentType` 或 `XmlDeclaration` 。</span><span class="sxs-lookup"><span data-stu-id="61e99-538">This method moves the reader to one of the following node types: `Element`, `DocumentType`, or `XmlDeclaration`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61e99-539">下面的示例显示当前节点上的所有属性。</span><span class="sxs-lookup"><span data-stu-id="61e99-539">The following example displays all attributes on the current node.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.MoveToElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.MoveToElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.MoveToElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToFirstAttribute">
      <MemberSignature Language="C#" Value="public override bool MoveToFirstAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToFirstAttribute() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.MoveToFirstAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MoveToFirstAttribute () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveToFirstAttribute();" />
      <MemberSignature Language="F#" Value="override this.MoveToFirstAttribute : unit -&gt; bool" Usage="xmlTextReader.MoveToFirstAttribute " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="61e99-540">移动到第一个属性。</span><span class="sxs-lookup"><span data-stu-id="61e99-540">Moves to the first attribute.</span></span></summary>
        <returns><span data-ttu-id="61e99-541">如果属性存在（读取器移动到第一个属性），则为 <see langword="true" />；否则为 <see langword="false" />（读取器的位置不更改）。</span><span class="sxs-lookup"><span data-stu-id="61e99-541"><see langword="true" /> if an attribute exists (the reader moves to the first attribute); otherwise, <see langword="false" /> (the position of the reader does not change).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-542">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-542">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61e99-543">下面的示例获取根节点的第一个属性的值。</span><span class="sxs-lookup"><span data-stu-id="61e99-543">The following example gets the value of the first attribute of the root node.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.MoveToFirstAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToFirstAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.MoveToFirstAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToFirstAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.MoveToFirstAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToFirstAttribute Example/VB/source.vb#1)]  
  
 <span data-ttu-id="61e99-544">该示例使用文件 `attrs.xml` 作为输入。</span><span class="sxs-lookup"><span data-stu-id="61e99-544">The example uses the file, `attrs.xml`, as input.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.MoveToFirstAttribute Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToFirstAttribute Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToNextAttribute">
      <MemberSignature Language="C#" Value="public override bool MoveToNextAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToNextAttribute() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.MoveToNextAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MoveToNextAttribute () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveToNextAttribute();" />
      <MemberSignature Language="F#" Value="override this.MoveToNextAttribute : unit -&gt; bool" Usage="xmlTextReader.MoveToNextAttribute " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="61e99-545">移动到下一个属性。</span><span class="sxs-lookup"><span data-stu-id="61e99-545">Moves to the next attribute.</span></span></summary>
        <returns><span data-ttu-id="61e99-546">如果存在下一个属性，则为 <see langword="true" />；如果没有其他属性，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-546"><see langword="true" /> if there is a next attribute; <see langword="false" /> if there are no more attributes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-547">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-547">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-548">如果当前节点是元素节点，则此方法等效于 <xref:System.Xml.XmlTextReader.MoveToFirstAttribute%2A> 。</span><span class="sxs-lookup"><span data-stu-id="61e99-548">If the current node is an element node, this method is equivalent to <xref:System.Xml.XmlTextReader.MoveToFirstAttribute%2A>.</span></span> <span data-ttu-id="61e99-549">如果 `MoveToNextAttribute` 返回 `true` ，则读取器移动到下一个特性; 否则，读取器的位置不会更改。</span><span class="sxs-lookup"><span data-stu-id="61e99-549">If `MoveToNextAttribute` returns `true`, the reader moves to the next attribute; otherwise, the position of the reader does not change.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61e99-550">下面的示例显示当前节点上的所有属性。</span><span class="sxs-lookup"><span data-stu-id="61e99-550">The following example displays all attributes on the current node.</span></span>  
  
 [!code-cpp[Classic WebData XmlReader.HasAttributes Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlReader.HasAttributes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlReader.HasAttributes Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlReader.HasAttributes Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlReader.HasAttributes Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlReader.HasAttributes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Xml.XmlTextReader.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="61e99-551">获取当前节点的限定名称。</span><span class="sxs-lookup"><span data-stu-id="61e99-551">Gets the qualified name of the current node.</span></span></summary>
        <value><span data-ttu-id="61e99-552">当前节点的限定名称。</span><span class="sxs-lookup"><span data-stu-id="61e99-552">The qualified name of the current node.</span></span> <span data-ttu-id="61e99-553">例如， <see langword="Name" /> <see langword="bk:book" /> 对于元素<c> &lt; bk： &gt; book</c>。</span><span class="sxs-lookup"><span data-stu-id="61e99-553">For example, <see langword="Name" /> is <see langword="bk:book" /> for the element <c>&lt;bk:book&gt;</c>.</span></span>  
  
<span data-ttu-id="61e99-554">返回的名称取决于节点的 <see cref="P:System.Xml.XmlTextReader.NodeType" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-554">The name returned is dependent on the <see cref="P:System.Xml.XmlTextReader.NodeType" /> of the node.</span></span> <span data-ttu-id="61e99-555">下列节点类型返回所列的值。</span><span class="sxs-lookup"><span data-stu-id="61e99-555">The following node types return the listed values.</span></span> <span data-ttu-id="61e99-556">所有其他节点类型返回空字符串。</span><span class="sxs-lookup"><span data-stu-id="61e99-556">All other node types return an empty string.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="61e99-557">节点类型</span><span class="sxs-lookup"><span data-stu-id="61e99-557">Node Type</span></span> 
 </term><description> <span data-ttu-id="61e99-558">name</span><span class="sxs-lookup"><span data-stu-id="61e99-558">Name</span></span> 
 </description></listheader><item><term><see langword="Attribute" /></term><description> <span data-ttu-id="61e99-559">属性名。</span><span class="sxs-lookup"><span data-stu-id="61e99-559">The name of the attribute.</span></span>  
  
 </description></item><item><term><see langword="DocumentType" /></term><description> <span data-ttu-id="61e99-560">文档类型名称。</span><span class="sxs-lookup"><span data-stu-id="61e99-560">The document type name.</span></span>  
  
 </description></item><item><term><see langword="Element" /></term><description> <span data-ttu-id="61e99-561">标记名称。</span><span class="sxs-lookup"><span data-stu-id="61e99-561">The tag name.</span></span>  
  
 </description></item><item><term><see langword="EntityReference" /></term><description> <span data-ttu-id="61e99-562">引用的实体的名称。</span><span class="sxs-lookup"><span data-stu-id="61e99-562">The name of the entity referenced.</span></span>  
  
 </description></item><item><term><see langword="ProcessingInstruction" /></term><description> <span data-ttu-id="61e99-563">处理指令的目标。</span><span class="sxs-lookup"><span data-stu-id="61e99-563">The target of the processing instruction.</span></span>  
  
 </description></item><item><term><see langword="XmlDeclaration" /></term><description> <span data-ttu-id="61e99-564">字符串 <see langword="xml" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-564">The literal string <see langword="xml" />.</span></span>  
  
 </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-565">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-565">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61e99-566">下面的示例读取 XML 文件并显示每个节点。</span><span class="sxs-lookup"><span data-stu-id="61e99-566">The following example reads an XML file and displays each of the nodes.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/VB/source.vb#1)]  
  
 <span data-ttu-id="61e99-567">该示例使用文件 `items.xml` 。</span><span class="sxs-lookup"><span data-stu-id="61e99-567">The sample uses the file `items.xml`.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.Name Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Namespaces">
      <MemberSignature Language="C#" Value="public bool Namespaces { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Namespaces" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Namespaces" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespaces As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Namespaces { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Namespaces : bool with get, set" Usage="System.Xml.XmlTextReader.Namespaces" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="61e99-568">获取或设置一个值，该值指示是否进行命名空间支持。</span><span class="sxs-lookup"><span data-stu-id="61e99-568">Gets or sets a value indicating whether to do namespace support.</span></span></summary>
        <value><span data-ttu-id="61e99-569">要进行命名空间支持，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-569"><see langword="true" /> to do namespace support; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="61e99-570">默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-570">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-571">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-571">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-572">此属性确定读取器是否支持 [XML 中的 W3C 命名空间](https://www.w3.org/TR/REC-xml-names) 的建议。</span><span class="sxs-lookup"><span data-stu-id="61e99-572">This property determines whether the reader supports the W3C [Namespaces in XML](https://www.w3.org/TR/REC-xml-names) recommendation.</span></span>  
  
 <span data-ttu-id="61e99-573">`Namespaces`发生读取操作后，无法设置该属性。</span><span class="sxs-lookup"><span data-stu-id="61e99-573">The `Namespaces` property cannot be set after a read operation has occurred.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="61e99-574">发生读操作（<see cref="P:System.Xml.XmlTextReader.ReadState" /> 并非 <see langword="ReadState.Initial" />）后，设置该属性。</span><span class="sxs-lookup"><span data-stu-id="61e99-574">Setting this property after a read operation has occurred (<see cref="P:System.Xml.XmlTextReader.ReadState" /> is not <see langword="ReadState.Initial" />).</span></span></exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="NamespaceURI">
      <MemberSignature Language="C#" Value="public override string NamespaceURI { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NamespaceURI" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.NamespaceURI" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property NamespaceURI As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ NamespaceURI { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NamespaceURI : string" Usage="System.Xml.XmlTextReader.NamespaceURI" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="61e99-575">获取读取器定位在的节点的命名空间 URI（采用 W3C 命名空间规范中定义）。</span><span class="sxs-lookup"><span data-stu-id="61e99-575">Gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.</span></span></summary>
        <value><span data-ttu-id="61e99-576">当前节点的命名空间 URI；否则为空字符串。</span><span class="sxs-lookup"><span data-stu-id="61e99-576">The namespace URI of the current node; otherwise an empty string.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-577">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-577">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-578">此属性 `Element` 仅与和 `Attribute` 节点相关。</span><span class="sxs-lookup"><span data-stu-id="61e99-578">This property is relevant to `Element` and `Attribute` nodes only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61e99-579">下面的示例显示每个节点的本地名称，并显示前缀和命名空间 URI （如果存在）。</span><span class="sxs-lookup"><span data-stu-id="61e99-579">The following example displays the local name of each node, and, if they exist, the prefix and namespace URI.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.LocalName Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.LocalName Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.LocalName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/VB/source.vb#1)]  
  
 <span data-ttu-id="61e99-580">该示例使用文件 `book2.xml` 作为输入。</span><span class="sxs-lookup"><span data-stu-id="61e99-580">The example uses the file, `book2.xml`, as input.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.LocalName Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="NameTable">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNameTable NameTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNameTable NameTable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.NameTable" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property NameTable As XmlNameTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlNameTable ^ NameTable { System::Xml::XmlNameTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NameTable : System.Xml.XmlNameTable" Usage="System.Xml.XmlTextReader.NameTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNameTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="61e99-581">获取与此实现关联的 <see cref="T:System.Xml.XmlNameTable" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-581">Gets the <see cref="T:System.Xml.XmlNameTable" /> associated with this implementation.</span></span></summary>
        <value><span data-ttu-id="61e99-582"><see langword="XmlNameTable" />，它使你能够获取该节点内字符串的原子化版本。</span><span class="sxs-lookup"><span data-stu-id="61e99-582">The <see langword="XmlNameTable" /> enabling you to get the atomized version of a string within the node.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-583">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-583">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-584">从返回的所有节点和属性名称 <xref:System.Xml.XmlTextReader> 都使用进行原子化 `NameTable` 。</span><span class="sxs-lookup"><span data-stu-id="61e99-584">All node and attribute names returned from <xref:System.Xml.XmlTextReader> are atomized using the `NameTable`.</span></span> <span data-ttu-id="61e99-585">如果多次返回相同的名称 (例如， `Customer`) ，则 `String` 会为该名称返回相同的对象。</span><span class="sxs-lookup"><span data-stu-id="61e99-585">When the same name is returned multiple times (for example, `Customer`), then the same `String` object is returned for that name.</span></span> <span data-ttu-id="61e99-586">这样一来，就可以编写有效的代码，对这些字符串进行对象比较，而不是对开销较高的字符串进行比较。</span><span class="sxs-lookup"><span data-stu-id="61e99-586">This makes it possible for you to write efficient code that does object comparisons on these strings instead of expensive string comparisons.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlNameTable" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlNodeType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property NodeType As XmlNodeType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlNodeType NodeType { System::Xml::XmlNodeType get(); };" />
      <MemberSignature Language="F#" Value="member this.NodeType : System.Xml.XmlNodeType" Usage="System.Xml.XmlTextReader.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="61e99-587">获取当前节点的类型。</span><span class="sxs-lookup"><span data-stu-id="61e99-587">Gets the type of the current node.</span></span></summary>
        <value><span data-ttu-id="61e99-588"><see cref="T:System.Xml.XmlNodeType" /> 值之一，表示当前节点的类型。</span><span class="sxs-lookup"><span data-stu-id="61e99-588">One of the <see cref="T:System.Xml.XmlNodeType" /> values representing the type of the current node.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-589">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-589">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-590">此属性从不返回以下 `XmlNodeType` 类型： `Document` 、 `DocumentFragment` 、 `Entity` 、 `EndEntity` 或 `Notation` 。</span><span class="sxs-lookup"><span data-stu-id="61e99-590">This property never returns the following `XmlNodeType` types: `Document`, `DocumentFragment`, `Entity`, `EndEntity`, or `Notation`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61e99-591">下面的示例读取 XML 文件并显示每个节点。</span><span class="sxs-lookup"><span data-stu-id="61e99-591">The following example reads an XML file and displays each of the nodes.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/VB/source.vb#1)]  
  
 <span data-ttu-id="61e99-592">该示例使用文件 `items.xml` 。</span><span class="sxs-lookup"><span data-stu-id="61e99-592">The sample uses the file `items.xml`.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.Name Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Normalization">
      <MemberSignature Language="C#" Value="public bool Normalization { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Normalization" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Normalization" />
      <MemberSignature Language="VB.NET" Value="Public Property Normalization As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Normalization { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Normalization : bool with get, set" Usage="System.Xml.XmlTextReader.Normalization" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="61e99-593">获取或设置一个值，该值指示是否规范化空白区域和属性值。</span><span class="sxs-lookup"><span data-stu-id="61e99-593">Gets or sets a value indicating whether to normalize white space and attribute values.</span></span></summary>
        <value><span data-ttu-id="61e99-594">如果要进行规范化，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-594"><see langword="true" /> to normalize; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="61e99-595">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-595">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-596">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-596">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-597">此属性可随时更改，并在下一次读取操作时生效。</span><span class="sxs-lookup"><span data-stu-id="61e99-597">This property can be changed at any time and takes effect on the next read operation.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="61e99-598">如果 <xref:System.Xml.XmlTextReader> 用于构造，则必须将 <xref:System.Xml.XmlValidatingReader> 设置为，以规范化特性值 `Normalization` `true` 。</span><span class="sxs-lookup"><span data-stu-id="61e99-598">If the <xref:System.Xml.XmlTextReader> is used to construct an <xref:System.Xml.XmlValidatingReader>, to normalize attribute values, `Normalization` must be set to `true`.</span></span>  
  
 <span data-ttu-id="61e99-599">如果将 `Normalization` 设置为 `false` ，则这也会对数值实体禁用字符范围检查。</span><span class="sxs-lookup"><span data-stu-id="61e99-599">If `Normalization` is set to `false`, this also disables character range checking for numeric entities.</span></span> <span data-ttu-id="61e99-600">因此，允许使用字符实体（如 `&#0;` ）。</span><span class="sxs-lookup"><span data-stu-id="61e99-600">As a result, character entities, such as `&#0;`, are allowed.</span></span>  
  
 <span data-ttu-id="61e99-601">下面介绍特性值规范化：</span><span class="sxs-lookup"><span data-stu-id="61e99-601">The following describes attribute value normalization:</span></span>  
  
-   <span data-ttu-id="61e99-602">对于字符引用，将所引用的字符追加到属性值。</span><span class="sxs-lookup"><span data-stu-id="61e99-602">For a character reference, append the referenced character to the attribute value.</span></span>  
  
-   <span data-ttu-id="61e99-603">对于实体引用，循环处理该实体的替换文本。</span><span class="sxs-lookup"><span data-stu-id="61e99-603">For an entity reference, recursively process the replacement text of the entity.</span></span>  
  
-   <span data-ttu-id="61e99-604">对于空格字符 ( # x20，#xD，#xA #x9) ，将 #x20 追加到规范化值。</span><span class="sxs-lookup"><span data-stu-id="61e99-604">For a white space character (#x20, #xD, #xA, #x9), append #x20 to the normalized value.</span></span> <span data-ttu-id="61e99-605"> (仅为作为外部分析实体一部分的 "#xD # xA" 序列附加单个 #x20，或为内部分析实体的文本实体值追加一个。 ) </span><span class="sxs-lookup"><span data-stu-id="61e99-605">(Only a single #x20 is appended for a "#xD#xA" sequence that is part of an external parsed entity or the literal entity value of an internal parsed entity.)</span></span>  
  
-   <span data-ttu-id="61e99-606">通过将其他字符追加到已标准化的值处理这些字符。</span><span class="sxs-lookup"><span data-stu-id="61e99-606">Process other characters by appending them to the normalized value.</span></span>  
  
-   <span data-ttu-id="61e99-607">如果声明的值不是 CDATA，则丢弃任何前导空格和尾随空格 ( # x20) 字符，并用单个空格替换空格 ( # x20) 字符 ( # x20) 字符。</span><span class="sxs-lookup"><span data-stu-id="61e99-607">If the declared value is not CDATA, discard any leading and trailing space (#x20) characters and replace sequences of space (#x20) characters with a single space (#x20) character.</span></span>  
  
 <span data-ttu-id="61e99-608">`XmlTextReader`仅执行特性或 CDATA 规范化。</span><span class="sxs-lookup"><span data-stu-id="61e99-608">The `XmlTextReader` only performs attribute or CDATA normalization.</span></span> <span data-ttu-id="61e99-609">除非在中包装，否则不会执行 DTD 特定的规范化 `XmlValidatingReader` 。</span><span class="sxs-lookup"><span data-stu-id="61e99-609">It does not do DTD-specific normalization unless wrapped within an `XmlValidatingReader`.</span></span>  
  
 <span data-ttu-id="61e99-610">有关规范化的进一步讨论，请参阅 W3C XML 1.0 建议。</span><span class="sxs-lookup"><span data-stu-id="61e99-610">Refer to the W3C XML 1.0 recommendation for further discussion on normalization.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61e99-611">下面的示例演示打开并关闭规范化的读取器行为。</span><span class="sxs-lookup"><span data-stu-id="61e99-611">The following example shows reader behavior with normalization turned on and then off.</span></span>  
  
 [!code-cpp[XmlTextReader.Normalization#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.Normalization/CPP/readnormal.cpp#1)]
 [!code-csharp[XmlTextReader.Normalization#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.Normalization/CS/readnormal.cs#1)]
 [!code-vb[XmlTextReader.Normalization#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.Normalization/VB/readnormal.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="61e99-612">当读取器关闭（<see cref="P:System.Xml.XmlTextReader.ReadState" /> 为 <see langword="ReadState.Closed" />）时，设置此属性。</span><span class="sxs-lookup"><span data-stu-id="61e99-612">Setting this property when the reader is closed (<see cref="P:System.Xml.XmlTextReader.ReadState" /> is <see langword="ReadState.Closed" />).</span></span></exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Prefix">
      <MemberSignature Language="C#" Value="public override string Prefix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Prefix" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Prefix" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Prefix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Prefix { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Prefix : string" Usage="System.Xml.XmlTextReader.Prefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="61e99-613">获取与当前节点关联的命名空间前缀。</span><span class="sxs-lookup"><span data-stu-id="61e99-613">Gets the namespace prefix associated with the current node.</span></span></summary>
        <value><span data-ttu-id="61e99-614">与当前节点关联的命名空间前缀。</span><span class="sxs-lookup"><span data-stu-id="61e99-614">The namespace prefix associated with the current node.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-615">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-615">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61e99-616">下面的示例显示每个节点的本地名称，并显示前缀和命名空间 URI （如果存在）。</span><span class="sxs-lookup"><span data-stu-id="61e99-616">The following example displays the local name of each node, and, if they exist, the prefix and namespace URI.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.LocalName Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.LocalName Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.LocalName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/VB/source.vb#1)]  
  
 <span data-ttu-id="61e99-617">该示例使用文件 `book2.xml` 作为输入。</span><span class="sxs-lookup"><span data-stu-id="61e99-617">The example uses the file, `book2.xml`, as input.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.LocalName Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ProhibitDtd">
      <MemberSignature Language="C#" Value="public bool ProhibitDtd { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ProhibitDtd" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.ProhibitDtd" />
      <MemberSignature Language="VB.NET" Value="Public Property ProhibitDtd As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ProhibitDtd { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ProhibitDtd : bool with get, set" Usage="System.Xml.XmlTextReader.ProhibitDtd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Obsolete("Use DtdProcessing property instead.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use DtdProcessing property instead.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="61e99-618">获取或设置一个值，该值指示是否允许 DTD 处理。</span><span class="sxs-lookup"><span data-stu-id="61e99-618">Gets or sets a value indicating whether to allow DTD processing.</span></span> <span data-ttu-id="61e99-619">此属性已过时。</span><span class="sxs-lookup"><span data-stu-id="61e99-619">This property is obsolete.</span></span> <span data-ttu-id="61e99-620">请改用 <see cref="P:System.Xml.XmlTextReader.DtdProcessing" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-620">Use <see cref="P:System.Xml.XmlTextReader.DtdProcessing" /> instead.</span></span></summary>
        <value><span data-ttu-id="61e99-621">如果不允许 DTD 处理，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-621"><see langword="true" /> to disallow DTD processing; otherwise <see langword="false" />.</span></span> <span data-ttu-id="61e99-622">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-622">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-623">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-623">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-624">默认情况下，将启用 DTD 处理以便向后兼容。</span><span class="sxs-lookup"><span data-stu-id="61e99-624">DTD processing is enabled by default for backwards compatibility.</span></span> <span data-ttu-id="61e99-625">但是，除非你的应用程序需要 DTD 处理，否则你应禁用此设置。</span><span class="sxs-lookup"><span data-stu-id="61e99-625">However, unless your application requires DTD processing, you should disable this setting.</span></span> <span data-ttu-id="61e99-626">禁用 DTD 处理对避免受到某些拒绝服务攻击非常有用。</span><span class="sxs-lookup"><span data-stu-id="61e99-626">Disabling DTD processing can be useful in preventing certain denial of service attacks.</span></span> <span data-ttu-id="61e99-627">如果设置为 `true` ，则读取器 <xref:System.Xml.XmlException> 在遇到任何 DTD 内容时将引发。</span><span class="sxs-lookup"><span data-stu-id="61e99-627">If set to `true`, the reader throws an <xref:System.Xml.XmlException> when any DTD content is encountered.</span></span>  
  
 <span data-ttu-id="61e99-628">如果已启用 DTD 处理，则需要注意包含来自不受信任源的 Dtd 以及可能的拒绝服务攻击。</span><span class="sxs-lookup"><span data-stu-id="61e99-628">If you have DTD processing enabled, you need to be aware of including DTDs from untrusted sources and possible denial of service attacks.</span></span> <span data-ttu-id="61e99-629">使用 <xref:System.Xml.XmlSecureResolver> 限制 <xref:System.Xml.XmlTextReader> 可以访问的资源。</span><span class="sxs-lookup"><span data-stu-id="61e99-629">Use the <xref:System.Xml.XmlSecureResolver> to restrict the resources that the <xref:System.Xml.XmlTextReader> can access.</span></span> <span data-ttu-id="61e99-630">还可以设计应用程序以使 XML 处理受内存和时间的约束。</span><span class="sxs-lookup"><span data-stu-id="61e99-630">You can also design your application so that the XML processing is memory and time constrained.</span></span> <span data-ttu-id="61e99-631">例如，在 ASP.NET 应用程序中配置超时限制</span><span class="sxs-lookup"><span data-stu-id="61e99-631">For example, configure time-out limits in your ASP.NET application</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="QuoteChar">
      <MemberSignature Language="C#" Value="public override char QuoteChar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char QuoteChar" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.QuoteChar" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property QuoteChar As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property char QuoteChar { char get(); };" />
      <MemberSignature Language="F#" Value="member this.QuoteChar : char" Usage="System.Xml.XmlTextReader.QuoteChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="61e99-632">获取用于括起属性节点的值的引号字符。</span><span class="sxs-lookup"><span data-stu-id="61e99-632">Gets the quotation mark character used to enclose the value of an attribute node.</span></span></summary>
        <value><span data-ttu-id="61e99-633">用于括起属性节点的值的引号字符（" 或 '）。</span><span class="sxs-lookup"><span data-stu-id="61e99-633">The quotation mark character (" or ') used to enclose the value of an attribute node.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-634">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-634">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-635">此属性仅适用于属性节点。</span><span class="sxs-lookup"><span data-stu-id="61e99-635">This property applies only to an attribute node.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override bool Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.Read" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Read();" />
      <MemberSignature Language="F#" Value="override this.Read : unit -&gt; bool" Usage="xmlTextReader.Read " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="61e99-636">从流中读取下一个节点。</span><span class="sxs-lookup"><span data-stu-id="61e99-636">Reads the next node from the stream.</span></span></summary>
        <returns><span data-ttu-id="61e99-637">如果成功读取了下一个节点，则为 <see langword="true" />；如果没有其他节点可读取，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-637"><see langword="true" /> if the next node was read successfully; <see langword="false" /> if there are no more nodes to read.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-638">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-638">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-639">首次创建和初始化读者时，没有可用的信息。</span><span class="sxs-lookup"><span data-stu-id="61e99-639">When a reader is first created and initialized, there is no information available.</span></span> <span data-ttu-id="61e99-640">您必须调用 `Read` 以读取第一个节点。</span><span class="sxs-lookup"><span data-stu-id="61e99-640">You must call `Read` to read the first node.</span></span>  
  
 <span data-ttu-id="61e99-641">此方法至少需要数据流中的四个字节，才能开始分析。</span><span class="sxs-lookup"><span data-stu-id="61e99-641">This method requires at least four bytes from the data stream in order to begin parsing.</span></span> <span data-ttu-id="61e99-642">如果返回的字节数少于四个，并且流中没有更多的数据，则该方法将失败。</span><span class="sxs-lookup"><span data-stu-id="61e99-642">If fewer than four bytes are returned and there is no more data in the stream, the method will fail.</span></span> <span data-ttu-id="61e99-643">如果流中有更多数据，该方法将会阻止分析，直到收到第四个字节。</span><span class="sxs-lookup"><span data-stu-id="61e99-643">If there is more data in the stream, the method will block parsing until receipt of the fourth byte.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61e99-644">下面的示例读取 XML 文件并显示每个节点。</span><span class="sxs-lookup"><span data-stu-id="61e99-644">The following example reads an XML file and displays each node.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/VB/source.vb#1)]  
  
 <span data-ttu-id="61e99-645">该示例使用文件 `items.xml` 。</span><span class="sxs-lookup"><span data-stu-id="61e99-645">The sample uses the file `items.xml`.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.Name Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException"><span data-ttu-id="61e99-646">分析 XML 时出错。</span><span class="sxs-lookup"><span data-stu-id="61e99-646">An error occurred while parsing the XML.</span></span></exception>
        <altmember cref="T:System.Xml.EntityHandling" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadAttributeValue">
      <MemberSignature Language="C#" Value="public override bool ReadAttributeValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool ReadAttributeValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadAttributeValue" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadAttributeValue () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool ReadAttributeValue();" />
      <MemberSignature Language="F#" Value="override this.ReadAttributeValue : unit -&gt; bool" Usage="xmlTextReader.ReadAttributeValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="61e99-647">将属性值分析为一个或多个 <see langword="Text" />、<see langword="EntityReference" /> 或 <see langword="EndEntity" /> 节点。</span><span class="sxs-lookup"><span data-stu-id="61e99-647">Parses the attribute value into one or more <see langword="Text" />, <see langword="EntityReference" />, or <see langword="EndEntity" /> nodes.</span></span></summary>
        <returns><span data-ttu-id="61e99-648">如果有可返回的节点，则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-648"><see langword="true" /> if there are nodes to return.</span></span>  
  
 <span data-ttu-id="61e99-649">如果进行初始调用时读取器不是定位在属性节点上，或者如果已读取了所有属性值，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-649"><see langword="false" /> if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.</span></span>  
  
<span data-ttu-id="61e99-650">如果是空属性（如 <c>misc=""</c>），则返回 <see langword="true" />，同时返回值为 <see langword="String.Empty" /> 的单个节点。</span><span class="sxs-lookup"><span data-stu-id="61e99-650">An empty attribute, such as, <c>misc=""</c>, returns <see langword="true" /> with a single node with a value of <see langword="String.Empty" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-651">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-651">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-652">在调用 `MoveToAttribute` 以读取组成特性值的文本或实体引用节点之前，请使用此方法。</span><span class="sxs-lookup"><span data-stu-id="61e99-652">Use this method after calling `MoveToAttribute` to read through the text or entity reference nodes that make up the attribute value.</span></span> <span data-ttu-id="61e99-653"><xref:System.Xml.XmlReader.Depth%2A>属性值节点的是一个加号节点的深度，在单步执行和跳出常规实体引用时，它会递增和递减一个。</span><span class="sxs-lookup"><span data-stu-id="61e99-653">The <xref:System.Xml.XmlReader.Depth%2A> of the attribute value nodes is one plus the depth of the attribute node; it increments and decrements by one when you step into and out of general entity references.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61e99-654">下面的示例将读取具有文本节点和实体节点的属性。</span><span class="sxs-lookup"><span data-stu-id="61e99-654">The following example reads an attribute with text and entity nodes.</span></span>  
  
 [!code-cpp[XmlTextReader.ReadAttributeValue#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.ReadAttributeValue/CPP/readattrval.cpp#1)]
 [!code-csharp[XmlTextReader.ReadAttributeValue#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.ReadAttributeValue/CS/readattrval.cs#1)]
 [!code-vb[XmlTextReader.ReadAttributeValue#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.ReadAttributeValue/VB/readattrval.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadBase64">
      <MemberSignature Language="C#" Value="public int ReadBase64 (byte[] array, int offset, int len);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReadBase64(unsigned int8[] array, int32 offset, int32 len) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadBase64(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadBase64 (array As Byte(), offset As Integer, len As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ReadBase64(cli::array &lt;System::Byte&gt; ^ array, int offset, int len);" />
      <MemberSignature Language="F#" Value="member this.ReadBase64 : byte[] * int * int -&gt; int" Usage="xmlTextReader.ReadBase64 (array, offset, len)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="len" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="61e99-655">作为文本内容写入到的缓冲区的字符数组。</span><span class="sxs-lookup"><span data-stu-id="61e99-655">The array of characters that serves as the buffer to which the text contents are written.</span></span></param>
        <param name="offset"><span data-ttu-id="61e99-656">数组中从零开始的索引，指定此方法可以开始写入缓冲区的位置。</span><span class="sxs-lookup"><span data-stu-id="61e99-656">The zero-based index into the array specifying where the method can begin to write to the buffer.</span></span></param>
        <param name="len"><span data-ttu-id="61e99-657">要写入缓冲区的字节数。</span><span class="sxs-lookup"><span data-stu-id="61e99-657">The number of bytes to write into the buffer.</span></span></param>
        <summary><span data-ttu-id="61e99-658">对 Base64 进行解码并返回解码的二进制字节。</span><span class="sxs-lookup"><span data-stu-id="61e99-658">Decodes Base64 and returns the decoded binary bytes.</span></span></summary>
        <returns><span data-ttu-id="61e99-659">写入缓冲区的字节数。</span><span class="sxs-lookup"><span data-stu-id="61e99-659">The number of bytes written to the buffer.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-660">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-660">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-661">与类似 <xref:System.Xml.XmlTextReader.ReadChars%2A> ，可以连续调用此方法以读取大量嵌入文本。</span><span class="sxs-lookup"><span data-stu-id="61e99-661">Like <xref:System.Xml.XmlTextReader.ReadChars%2A>, this method can be called successively to read large streams of embedded text.</span></span> <span data-ttu-id="61e99-662">它对 Base64 内容进行解码并返回解码的二进制字节 (例如，内联 Base64 编码 GIF 图像) 到缓冲区中。</span><span class="sxs-lookup"><span data-stu-id="61e99-662">It decodes Base64 content and returns the decoded binary bytes (for example, an inline Base64 encoded GIF image) into the buffer.</span></span> <span data-ttu-id="61e99-663">请参阅 RFC 1521。</span><span class="sxs-lookup"><span data-stu-id="61e99-663">See RFC 1521.</span></span> <span data-ttu-id="61e99-664"> (可以从 [征求意见](https://www.rfc-editor.org)网站获取 rfc。 ) </span><span class="sxs-lookup"><span data-stu-id="61e99-664">(You can obtain RFCs from the [Request for Comments Web site](https://www.rfc-editor.org).)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61e99-665">下面的示例读取包含 Base64 和 BinHex 数据的文件。</span><span class="sxs-lookup"><span data-stu-id="61e99-665">The following example reads a file containing Base64 and BinHex data.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.ReadBase64 Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.ReadBase64 Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.ReadBase64 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/VB/source.vb#1)]  
  
 <span data-ttu-id="61e99-666">该示例使用文件 `binary.xml`</span><span class="sxs-lookup"><span data-stu-id="61e99-666">The sample uses the file `binary.xml`</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.ReadBase64 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException"><span data-ttu-id="61e99-667">Base64 序列无效。</span><span class="sxs-lookup"><span data-stu-id="61e99-667">The Base64 sequence is not valid.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="61e99-668"><paramref name="array" /> 的值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-668">The value of <paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="61e99-669"><paramref name="offset" /> &lt; 0、<paramref name="len" /> &lt; 0 或 <paramref name="len" /> &gt; <paramref name="array" /> Length- <paramref name="offset" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-669"><paramref name="offset" /> &lt; 0, or <paramref name="len" /> &lt; 0, or <paramref name="len" /> &gt; <paramref name="array" />.Length- <paramref name="offset" />.</span></span></exception>
        <altmember cref="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadBinHex">
      <MemberSignature Language="C#" Value="public int ReadBinHex (byte[] array, int offset, int len);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReadBinHex(unsigned int8[] array, int32 offset, int32 len) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadBinHex(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadBinHex (array As Byte(), offset As Integer, len As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ReadBinHex(cli::array &lt;System::Byte&gt; ^ array, int offset, int len);" />
      <MemberSignature Language="F#" Value="member this.ReadBinHex : byte[] * int * int -&gt; int" Usage="xmlTextReader.ReadBinHex (array, offset, len)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="len" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="61e99-670">作为解码的二进制字节写入到的缓冲区的字节数组。</span><span class="sxs-lookup"><span data-stu-id="61e99-670">The byte array that serves as the buffer to which the decoded binary bytes are written.</span></span></param>
        <param name="offset"><span data-ttu-id="61e99-671">数组中从零开始的索引，指定此方法可以开始写入缓冲区的位置。</span><span class="sxs-lookup"><span data-stu-id="61e99-671">The zero-based index into the array specifying where the method can begin to write to the buffer.</span></span></param>
        <param name="len"><span data-ttu-id="61e99-672">要写入缓冲区的字节数。</span><span class="sxs-lookup"><span data-stu-id="61e99-672">The number of bytes to write into the buffer.</span></span></param>
        <summary><span data-ttu-id="61e99-673">对 <see langword="BinHex" /> 进行解码并返回解码后的二进制字节。</span><span class="sxs-lookup"><span data-stu-id="61e99-673">Decodes <see langword="BinHex" /> and returns the decoded binary bytes.</span></span></summary>
        <returns><span data-ttu-id="61e99-674">写入你的缓冲区的字节数。</span><span class="sxs-lookup"><span data-stu-id="61e99-674">The number of bytes written to your buffer.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-675">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-675">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-676">与类似 <xref:System.Xml.XmlTextReader.ReadChars%2A> ，可以连续调用此方法以读取大量嵌入文本。</span><span class="sxs-lookup"><span data-stu-id="61e99-676">Like <xref:System.Xml.XmlTextReader.ReadChars%2A>, this method can be called successively to read large streams of embedded text.</span></span> <span data-ttu-id="61e99-677">它 `BinHex` 对内容进行解码并返回解码的二进制字节 (例如，内联 `BinHex` 编码的 GIF 图像) 到缓冲区中。</span><span class="sxs-lookup"><span data-stu-id="61e99-677">It decodes `BinHex` content and returns the decoded binary bytes (for example, an inline `BinHex` encoded GIF image) into the buffer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61e99-678">下面的示例读取包含 `Base64` 和数据的文件 `BinHex` 。</span><span class="sxs-lookup"><span data-stu-id="61e99-678">The following example reads a file containing `Base64` and `BinHex` data.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.ReadBase64 Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.ReadBase64 Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.ReadBase64 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/VB/source.vb#1)]  
  
 <span data-ttu-id="61e99-679">该示例使用文件 `binary.xml`</span><span class="sxs-lookup"><span data-stu-id="61e99-679">The sample uses the file `binary.xml`</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.ReadBase64 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException"><span data-ttu-id="61e99-680"><see langword="BinHex" /> 序列无效。</span><span class="sxs-lookup"><span data-stu-id="61e99-680">The <see langword="BinHex" /> sequence is not valid.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="61e99-681"><paramref name="array" /> 的值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-681">The value of <paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="61e99-682"><paramref name="offset" /> &lt; 0、<paramref name="len" /> &lt; 0 或 <paramref name="len" /> &gt; <paramref name="array" /> Length- <paramref name="offset" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-682"><paramref name="offset" /> &lt; 0, or <paramref name="len" /> &lt; 0, or <paramref name="len" /> &gt; <paramref name="array" />.Length- <paramref name="offset" />.</span></span></exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadChars">
      <MemberSignature Language="C#" Value="public int ReadChars (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReadChars(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadChars (buffer As Char(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ReadChars(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="member this.ReadChars : char[] * int * int -&gt; int" Usage="xmlTextReader.ReadChars (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="61e99-683">作为文本内容写入到的缓冲区的字符数组。</span><span class="sxs-lookup"><span data-stu-id="61e99-683">The array of characters that serves as the buffer to which the text contents are written.</span></span></param>
        <param name="index"><span data-ttu-id="61e99-684"><paramref name="buffer" /> 中的位置，此方法可以从该位置开始写入文本内容。</span><span class="sxs-lookup"><span data-stu-id="61e99-684">The position within <paramref name="buffer" /> where the method can begin writing text contents.</span></span></param>
        <param name="count"><span data-ttu-id="61e99-685">要写入 <paramref name="buffer" /> 的字符数。</span><span class="sxs-lookup"><span data-stu-id="61e99-685">The number of characters to write into <paramref name="buffer" />.</span></span></param>
        <summary><span data-ttu-id="61e99-686">将元素的文本内容读入字符缓冲区。</span><span class="sxs-lookup"><span data-stu-id="61e99-686">Reads the text contents of an element into a character buffer.</span></span> <span data-ttu-id="61e99-687">通过连续调用此方法，可以读取大的嵌入文本的流。</span><span class="sxs-lookup"><span data-stu-id="61e99-687">This method is designed to read large streams of embedded text by calling it successively.</span></span></summary>
        <returns><span data-ttu-id="61e99-688">读取的字符数。</span><span class="sxs-lookup"><span data-stu-id="61e99-688">The number of characters read.</span></span> <span data-ttu-id="61e99-689">如果读取器未定位在元素上，或如果当前上下文中没有要返回的其他文本内容，则这可以是 <see langword="0" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-689">This can be <see langword="0" /> if the reader is not positioned on an element or if there is no more text content to return in the current context.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-690">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-690">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-691">这是处理嵌入 XML 文档中的大量文本流的最有效方法。</span><span class="sxs-lookup"><span data-stu-id="61e99-691">This is the most efficient way to process very large streams of text embedded in an XML document.</span></span> <span data-ttu-id="61e99-692">不是分配大字符串对象，而是 `ReadChars` 一次返回一个缓冲区的文本内容。</span><span class="sxs-lookup"><span data-stu-id="61e99-692">Rather than allocating large string objects, `ReadChars` returns text content a buffer at a time.</span></span> <span data-ttu-id="61e99-693">此方法旨在仅适用于元素节点。</span><span class="sxs-lookup"><span data-stu-id="61e99-693">This method is designed to work only on element nodes.</span></span> <span data-ttu-id="61e99-694">其他节点类型 `ReadChars` 将导致返回 `0` 。</span><span class="sxs-lookup"><span data-stu-id="61e99-694">Other node types cause `ReadChars` to return `0`.</span></span>  
  
 <span data-ttu-id="61e99-695">在以下 XML 中，如果读取器定位在开始标记上，则 `ReadChars` 返回， `test` 并将读取器定位在结束标记后。</span><span class="sxs-lookup"><span data-stu-id="61e99-695">In the following XML, if the reader is positioned on the start tag, `ReadChars` returns `test` and positions the reader after the end tag.</span></span>  
  
```xml  
<Item>test</Item>  
```  
  
 <span data-ttu-id="61e99-696">`ReadChars` 具有以下功能：</span><span class="sxs-lookup"><span data-stu-id="61e99-696">`ReadChars` has the following functionality:</span></span>  
  
-   <span data-ttu-id="61e99-697">此方法仅适用于元素节点。</span><span class="sxs-lookup"><span data-stu-id="61e99-697">This method is designed to work on element nodes only.</span></span> <span data-ttu-id="61e99-698">其他节点类型 `ReadChars` 将导致返回0。</span><span class="sxs-lookup"><span data-stu-id="61e99-698">Other node types cause `ReadChars` to return 0.</span></span>  
  
-   <span data-ttu-id="61e99-699">此方法返回实际字符内容。</span><span class="sxs-lookup"><span data-stu-id="61e99-699">This method returns the actual character content.</span></span> <span data-ttu-id="61e99-700">不会尝试解析实体、CDATA 或遇到的任何其他标记。</span><span class="sxs-lookup"><span data-stu-id="61e99-700">There is no attempt to resolve entities, CDATA, or any other markup encountered.</span></span> <span data-ttu-id="61e99-701">`ReadChars` 返回开始标记和结束标记之间的所有内容，包括标记。</span><span class="sxs-lookup"><span data-stu-id="61e99-701">`ReadChars` returns everything between the start tag and the end tag, including markup.</span></span>  
  
-   <span data-ttu-id="61e99-702">`ReadChars` 忽略格式不正确的 XML 标记。</span><span class="sxs-lookup"><span data-stu-id="61e99-702">`ReadChars` ignores XML markup that is not well-formed.</span></span> <span data-ttu-id="61e99-703">例如，在读取以下 XML 字符串时 `<A>1<A>2</A>` ，将 `ReadChars` 返回 `1<A>2</A>` 。</span><span class="sxs-lookup"><span data-stu-id="61e99-703">For example, when reading the following XML string `<A>1<A>2</A>`, `ReadChars` returns `1<A>2</A>`.</span></span> <span data-ttu-id="61e99-704"> (它从匹配的元素对返回标记并忽略其他标记。 ) </span><span class="sxs-lookup"><span data-stu-id="61e99-704">(It returns markup from the matching element pair and ignores others.)</span></span>  
  
-   <span data-ttu-id="61e99-705">此方法不执行任何标准化。</span><span class="sxs-lookup"><span data-stu-id="61e99-705">This method does not do any normalization.</span></span>  
  
-   <span data-ttu-id="61e99-706">当 `ReadChars` 到达字符流的末尾时，它返回值0，读取器位于结束标记之后。</span><span class="sxs-lookup"><span data-stu-id="61e99-706">When `ReadChars` has reached the end of the character stream, it returns the value 0 and the reader is positioned after the end tag.</span></span>  
  
-   <span data-ttu-id="61e99-707">使用时，特性读取方法不可用 `ReadChars` 。</span><span class="sxs-lookup"><span data-stu-id="61e99-707">Attribute read methods are not available while using `ReadChars`.</span></span>  
  
 <span data-ttu-id="61e99-708">例如，使用下面的 XML：</span><span class="sxs-lookup"><span data-stu-id="61e99-708">For example, using the following XML:</span></span>  
  
```xml  
<thing>  
 some text  
</thing>  
<item>  
</item>  
```  
  
 <span data-ttu-id="61e99-709">在 while 循环结束时，读取器定位在 `<item>` 元素上。</span><span class="sxs-lookup"><span data-stu-id="61e99-709">The reader is positioned on the `<item>` element at the end of the while loop.</span></span>  
  
```csharp  
if (XmlNodeType.Element == reader.NodeType && "thing" == reader.Name)  
{  
 while(0 != reader.ReadChars(buffer, 0, 1)  
 {  
 // Do something.  
 // Attribute values are not available at this point.  
 }  
}  
```  
  
   
  
## Examples  
 <span data-ttu-id="61e99-710">下面的示例使用在 XML 中读取 `ReadChars` 。</span><span class="sxs-lookup"><span data-stu-id="61e99-710">The following example reads in XML using `ReadChars`.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.ReadChars Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.ReadChars Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.ReadChars Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.ReadChars Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.ReadChars Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.ReadChars Example/VB/source.vb#1)]  
  
 <span data-ttu-id="61e99-711">示例使用 `items.xml` 文件作为输入。</span><span class="sxs-lookup"><span data-stu-id="61e99-711">The example uses the `items.xml` file as input.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.Name Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="61e99-712"><paramref name="count" /> 大于 <paramref name="buffer" /> 中指定的空间（缓冲区大小 - <paramref name="index" />）。</span><span class="sxs-lookup"><span data-stu-id="61e99-712"><paramref name="count" /> is greater than the space specified in the <paramref name="buffer" /> (buffer size - <paramref name="index" />).</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="61e99-713"><paramref name="buffer" /> 值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-713">The <paramref name="buffer" /> value is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="61e99-714"><paramref name="index" />
          <see langword="&lt; 0" /> 或 <paramref name="count" /><see langword="&lt; 0" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-714"><paramref name="index" />
          <see langword="&lt; 0" /> or <paramref name="count" /><see langword="&lt; 0" />.</span></span></exception>
        <altmember cref="M:System.Xml.XmlTextReader.ReadBase64(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Xml.XmlTextReader.ReadBinHex(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsBase64">
      <MemberSignature Language="C#" Value="public override int ReadContentAsBase64 (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadContentAsBase64(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadContentAsBase64 (buffer As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ReadContentAsBase64(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.ReadContentAsBase64 : byte[] * int * int -&gt; int" Usage="xmlTextReader.ReadContentAsBase64 (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="61e99-715">结果文本复制到的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="61e99-715">The buffer into which to copy the resulting text.</span></span> <span data-ttu-id="61e99-716">此值不能为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-716">This value cannot be <see langword="null" />.</span></span></param>
        <param name="index"><span data-ttu-id="61e99-717">缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。</span><span class="sxs-lookup"><span data-stu-id="61e99-717">The offset into the buffer where to start copying the result.</span></span></param>
        <param name="count"><span data-ttu-id="61e99-718">要复制到缓冲区的最大字节数。</span><span class="sxs-lookup"><span data-stu-id="61e99-718">The maximum number of bytes to copy into the buffer.</span></span> <span data-ttu-id="61e99-719">此方法返回复制的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="61e99-719">The actual number of bytes copied is returned from this method.</span></span></param>
        <summary><span data-ttu-id="61e99-720">读取内容并返回 <see langword="Base64" /> 解码的二进制字节。</span><span class="sxs-lookup"><span data-stu-id="61e99-720">Reads the content and returns the <see langword="Base64" /> decoded binary bytes.</span></span></summary>
        <returns><span data-ttu-id="61e99-721">写入缓冲区的字节数。</span><span class="sxs-lookup"><span data-stu-id="61e99-721">The number of bytes written to the buffer.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-722">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-722">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-723">此方法对内容进行流式处理、对 `Base64` 内容进行解码并返回解码的二进制字节 (例如，将内联 `Base64` 编码的 GIF 图像) 到缓冲区中。</span><span class="sxs-lookup"><span data-stu-id="61e99-723">This method streams the content, decodes the `Base64` content, and returns the decoded binary bytes (for example, an inline `Base64`-encoded GIF image) into the buffer.</span></span> <span data-ttu-id="61e99-724">可以连续调用此方法以读取大量嵌入文本。</span><span class="sxs-lookup"><span data-stu-id="61e99-724">This method can be called successively to read large streams of embedded text.</span></span> <span data-ttu-id="61e99-725">有关详细信息，请参阅 RFC 1521 "MIME (多用途 Internet 邮件扩展) 第一项：用于指定和描述 Internet 邮件正文格式的机制"。</span><span class="sxs-lookup"><span data-stu-id="61e99-725">For more information, see RFC 1521, "MIME (Multipurpose Internet Mail Extensions) Part One: Mechanisms for Specifying and Describing the Format of Internet Message Bodies".</span></span> <span data-ttu-id="61e99-726">你可以从 [征求意见](https://www.rfc-editor.org)网站获取 rfc。</span><span class="sxs-lookup"><span data-stu-id="61e99-726">You can obtain RFCs from the [Request for Comments Web site](https://www.rfc-editor.org).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="61e99-727">在方法 <xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A> 返回值0之前，不应访问方法之间的任何读取器属性。</span><span class="sxs-lookup"><span data-stu-id="61e99-727">You should not access any of the reader properties between calls to the <xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A> method until the method returns the value 0.</span></span>  
  
 <span data-ttu-id="61e99-728">此方法具有以下行为：</span><span class="sxs-lookup"><span data-stu-id="61e99-728">This method has the following behavior:</span></span>  
  
-   <span data-ttu-id="61e99-729"><xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A> 当值达到其所操作的字节流的末尾时，返回值0。</span><span class="sxs-lookup"><span data-stu-id="61e99-729"><xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A> returns the value 0 when it has reached the end of the byte stream it was operating on.</span></span> <span data-ttu-id="61e99-730">读取器定位在第一个非内容节点上。</span><span class="sxs-lookup"><span data-stu-id="61e99-730">The reader is positioned on the first non-content node.</span></span>  
  
-   <span data-ttu-id="61e99-731">如果请求的字节数少于或小于的字节数，则读取器将保留在其当前位置。</span><span class="sxs-lookup"><span data-stu-id="61e99-731">If you ask for fewer, or the exact number, of bytes than are left in the stream the reader remains in its current position.</span></span>  
  
-   <span data-ttu-id="61e99-732"><xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A> 以下 XML 节点类型不支持： `Element` 、、 `XmlDeclaration` `None` 、 `Document` 、、 `DocumentType` `Notation` `Entity` 、和 `DocumentFragment` 。</span><span class="sxs-lookup"><span data-stu-id="61e99-732"><xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A> is not supported on the following XML node types: `Element`, `XmlDeclaration`, `None`, `Document`, `DocumentType`, `Notation`, `Entity`, `DocumentFragment`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="61e99-733"><paramref name="buffer" /> 值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-733">The <paramref name="buffer" /> value is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="61e99-734">当前节点不支持 <see cref="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-734"><see cref="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" /> is not supported in the current node.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="61e99-735">缓冲区中的索引或者索引与计数之和大于分配的缓冲区大小。</span><span class="sxs-lookup"><span data-stu-id="61e99-735">The index into the buffer or index + count is larger than the allocated buffer size.</span></span></exception>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="T:System.Xml.XmlNodeType" />
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsBinHex">
      <MemberSignature Language="C#" Value="public override int ReadContentAsBinHex (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadContentAsBinHex(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadContentAsBinHex (buffer As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ReadContentAsBinHex(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.ReadContentAsBinHex : byte[] * int * int -&gt; int" Usage="xmlTextReader.ReadContentAsBinHex (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="61e99-736">结果文本复制到的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="61e99-736">The buffer into which to copy the resulting text.</span></span> <span data-ttu-id="61e99-737">此值不能为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-737">This value cannot be <see langword="null" />.</span></span></param>
        <param name="index"><span data-ttu-id="61e99-738">缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。</span><span class="sxs-lookup"><span data-stu-id="61e99-738">The offset into the buffer where to start copying the result.</span></span></param>
        <param name="count"><span data-ttu-id="61e99-739">要复制到缓冲区的最大字节数。</span><span class="sxs-lookup"><span data-stu-id="61e99-739">The maximum number of bytes to copy into the buffer.</span></span> <span data-ttu-id="61e99-740">此方法返回复制的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="61e99-740">The actual number of bytes copied is returned from this method.</span></span></param>
        <summary><span data-ttu-id="61e99-741">读取内容并返回 <see langword="BinHex" /> 解码的二进制字节。</span><span class="sxs-lookup"><span data-stu-id="61e99-741">Reads the content and returns the <see langword="BinHex" /> decoded binary bytes.</span></span></summary>
        <returns><span data-ttu-id="61e99-742">写入缓冲区的字节数。</span><span class="sxs-lookup"><span data-stu-id="61e99-742">The number of bytes written to the buffer.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-743">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-743">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-744">此方法对内容进行流式处理、对 `BinHex` 内容进行解码并返回解码的二进制字节 (例如，将内联 `BinHex` 编码的 GIF 图像) 到缓冲区中。</span><span class="sxs-lookup"><span data-stu-id="61e99-744">This method streams the content, decodes the `BinHex` content, and returns the decoded binary bytes (for example, an inline `BinHex` encoded GIF image) into the buffer.</span></span> <span data-ttu-id="61e99-745">可以连续调用此方法以读取大量嵌入文本。</span><span class="sxs-lookup"><span data-stu-id="61e99-745">This method can be called successively to read large streams of embedded text.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="61e99-746">在方法 <xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A> 返回值0之前，不应访问方法之间的任何读取器属性。</span><span class="sxs-lookup"><span data-stu-id="61e99-746">You should not access any of the reader properties between calls to the <xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A> method until the method returns the value 0.</span></span>  
  
 <span data-ttu-id="61e99-747">此方法具有以下行为：</span><span class="sxs-lookup"><span data-stu-id="61e99-747">This method has the following behavior:</span></span>  
  
-   <span data-ttu-id="61e99-748"><xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A> 当值达到其所操作的字节流的末尾时，返回值0。</span><span class="sxs-lookup"><span data-stu-id="61e99-748"><xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A> returns the value 0 when it has reached the end of the byte stream it was operating on.</span></span> <span data-ttu-id="61e99-749">读取器定位在第一个非内容节点上。</span><span class="sxs-lookup"><span data-stu-id="61e99-749">The reader is positioned on the first non-content node.</span></span>  
  
-   <span data-ttu-id="61e99-750">如果请求的字节数少于或小于的字节数，则读取器将保留在其当前位置。</span><span class="sxs-lookup"><span data-stu-id="61e99-750">If you ask for fewer, or the exact number, of bytes than are left in the stream the reader remains in its current position.</span></span>  
  
-   <span data-ttu-id="61e99-751"><xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A> 以下 XML 节点类型不支持： `Element` 、、 `XmlDeclaration` `None` 、 `Document` 、、 `DocumentType` `Notation` `Entity` 、和 `DocumentFragment` 。</span><span class="sxs-lookup"><span data-stu-id="61e99-751"><xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A> is not supported on the following XML node types: `Element`, `XmlDeclaration`, `None`, `Document`, `DocumentType`, `Notation`, `Entity`, `DocumentFragment`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="61e99-752"><paramref name="buffer" /> 值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-752">The <paramref name="buffer" /> value is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="61e99-753">当前节点不支持 <see cref="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-753"><see cref="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" /> is not supported on the current node.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="61e99-754">缓冲区中的索引或者索引与计数之和大于分配的缓冲区大小。</span><span class="sxs-lookup"><span data-stu-id="61e99-754">The index into the buffer or index + count is larger than the allocated buffer size.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="61e99-755"><see cref="T:System.Xml.XmlTextReader" /> 实现不支持此方法。</span><span class="sxs-lookup"><span data-stu-id="61e99-755">The <see cref="T:System.Xml.XmlTextReader" /> implementation does not support this method.</span></span></exception>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="T:System.Xml.XmlNodeType" />
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsBase64">
      <MemberSignature Language="C#" Value="public override int ReadElementContentAsBase64 (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadElementContentAsBase64(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadElementContentAsBase64 (buffer As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ReadElementContentAsBase64(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.ReadElementContentAsBase64 : byte[] * int * int -&gt; int" Usage="xmlTextReader.ReadElementContentAsBase64 (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="61e99-756">结果文本复制到的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="61e99-756">The buffer into which to copy the resulting text.</span></span> <span data-ttu-id="61e99-757">此值不能为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-757">This value cannot be <see langword="null" />.</span></span></param>
        <param name="index"><span data-ttu-id="61e99-758">缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。</span><span class="sxs-lookup"><span data-stu-id="61e99-758">The offset into the buffer where to start copying the result.</span></span></param>
        <param name="count"><span data-ttu-id="61e99-759">要复制到缓冲区的最大字节数。</span><span class="sxs-lookup"><span data-stu-id="61e99-759">The maximum number of bytes to copy into the buffer.</span></span> <span data-ttu-id="61e99-760">此方法返回复制的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="61e99-760">The actual number of bytes copied is returned from this method.</span></span></param>
        <summary><span data-ttu-id="61e99-761">读取元素并对 Base64 内容进行解码。</span><span class="sxs-lookup"><span data-stu-id="61e99-761">Reads the element and decodes the Base64 content.</span></span></summary>
        <returns><span data-ttu-id="61e99-762">写入缓冲区的字节数。</span><span class="sxs-lookup"><span data-stu-id="61e99-762">The number of bytes written to the buffer.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-763">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-763">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-764">此方法读取元素内容，使用 Base64 编码对其进行解码并返回解码的二进制字节 (例如，将内联 Base64 编码 GIF 图像) 到缓冲区中。</span><span class="sxs-lookup"><span data-stu-id="61e99-764">This method reads the element content, decodes it using Base64 encoding, and returns the decoded binary bytes (for example, an inline Base64 encoded GIF image) into the buffer.</span></span> <span data-ttu-id="61e99-765">有关详细信息，请参阅 RFC 1521 "MIME (多用途 Internet 邮件扩展) 第一项：用于指定和描述 Internet 邮件正文格式的机制"。</span><span class="sxs-lookup"><span data-stu-id="61e99-765">For more information, see RFC 1521, "MIME (Multipurpose Internet Mail Extensions) Part One: Mechanisms for Specifying and Describing the Format of Internet Message Bodies".</span></span> <span data-ttu-id="61e99-766">你可以从 [征求意见](https://www.rfc-editor.org)网站获取 rfc。</span><span class="sxs-lookup"><span data-stu-id="61e99-766">You can obtain RFCs from the [Request for Comments Web site](https://www.rfc-editor.org).</span></span>  
  
 <span data-ttu-id="61e99-767">此方法只能读取简单内容元素。</span><span class="sxs-lookup"><span data-stu-id="61e99-767">This method can only read simple-content elements.</span></span> <span data-ttu-id="61e99-768">元素可以包含文本、空格、有效空白、CDATA 部分、注释和处理指令。</span><span class="sxs-lookup"><span data-stu-id="61e99-768">The element can contain text, white space, significant white space, CDATA sections, comments and processing instructions.</span></span> <span data-ttu-id="61e99-769">它还可以包含自动扩展的实体引用。</span><span class="sxs-lookup"><span data-stu-id="61e99-769">It can also contain entity references, which are automatically expanded.</span></span> <span data-ttu-id="61e99-770">元素不能有子元素。</span><span class="sxs-lookup"><span data-stu-id="61e99-770">The element cannot have child elements.</span></span>  
  
 <span data-ttu-id="61e99-771">此方法与方法非常类似， <xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A> 只是它只能在元素节点类型上调用。</span><span class="sxs-lookup"><span data-stu-id="61e99-771">This method is very similar to the <xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A> method except that it can only be called on element node types.</span></span>  
  
 <span data-ttu-id="61e99-772">如果 `count` 值大于文档中的字节数，或者它等于文档中的字节数，则 <xref:System.Xml.XmlTextReader> 读取文档中的所有剩余字节并返回读取的字节数。</span><span class="sxs-lookup"><span data-stu-id="61e99-772">If the `count` value is higher than the number of bytes in the document, or if it is equal to the number of bytes in the document, the <xref:System.Xml.XmlTextReader> reads all the remaining bytes in the document and returns the number of bytes read.</span></span> <span data-ttu-id="61e99-773">下一个 <xref:System.Xml.XmlTextReader> 方法调用返回零，并将读取器移动到后面的节点 <xref:System.Xml.XmlNodeType.EndElement> 。</span><span class="sxs-lookup"><span data-stu-id="61e99-773">The next <xref:System.Xml.XmlTextReader> method call returns a zero and moves the reader to the node following the <xref:System.Xml.XmlNodeType.EndElement>.</span></span>  
  
 <span data-ttu-id="61e99-774">如果在 <xref:System.Xml.XmlTextReader.Read%2A> 所有元素内容被使用之前调用，则读取器的行为可能与先使用第一个内容，然后 <xref:System.Xml.XmlTextReader.Read%2A> 调用方法相同。</span><span class="sxs-lookup"><span data-stu-id="61e99-774">If you call <xref:System.Xml.XmlTextReader.Read%2A> before all of the element content is consumed, the reader may behave as if the first content was consumed and then the <xref:System.Xml.XmlTextReader.Read%2A> method was called.</span></span> <span data-ttu-id="61e99-775">这意味着读取器将读取所有文本，直到遇到结束元素。</span><span class="sxs-lookup"><span data-stu-id="61e99-775">This means that the reader reads all the text until the end element is encountered.</span></span> <span data-ttu-id="61e99-776">然后读取结束标记节点，读取下一个节点，然后在下一个后续节点上定位自身。</span><span class="sxs-lookup"><span data-stu-id="61e99-776">It then reads the end tag node, reads the next node, and then positions itself on the next subsequent node.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61e99-777">有关 <xref:System.Xml.XmlReader.ReadElementContentAsBase64%2A?displayProperty=nameWithType> 使用此方法的示例，请参阅。</span><span class="sxs-lookup"><span data-stu-id="61e99-777">See <xref:System.Xml.XmlReader.ReadElementContentAsBase64%2A?displayProperty=nameWithType> to see an example using this method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="61e99-778"><paramref name="buffer" /> 值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-778">The <paramref name="buffer" /> value is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="61e99-779">当前节点不是元素节点。</span><span class="sxs-lookup"><span data-stu-id="61e99-779">The current node is not an element node.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="61e99-780">缓冲区中的索引或者索引与计数之和大于分配的缓冲区大小。</span><span class="sxs-lookup"><span data-stu-id="61e99-780">The index into the buffer or index + count is larger than the allocated buffer size.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="61e99-781"><see cref="T:System.Xml.XmlTextReader" /> 实现不支持此方法。</span><span class="sxs-lookup"><span data-stu-id="61e99-781">The <see cref="T:System.Xml.XmlTextReader" /> implementation does not support this method.</span></span></exception>
        <exception cref="T:System.Xml.XmlException"><span data-ttu-id="61e99-782">该元素包含混合内容。</span><span class="sxs-lookup"><span data-stu-id="61e99-782">The element contains mixed-content.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="61e99-783">无法将内容转换成请求的类型。</span><span class="sxs-lookup"><span data-stu-id="61e99-783">The content cannot be converted to the requested type.</span></span></exception>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsBinHex">
      <MemberSignature Language="C#" Value="public override int ReadElementContentAsBinHex (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadElementContentAsBinHex(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadElementContentAsBinHex (buffer As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ReadElementContentAsBinHex(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.ReadElementContentAsBinHex : byte[] * int * int -&gt; int" Usage="xmlTextReader.ReadElementContentAsBinHex (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="61e99-784">结果文本复制到的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="61e99-784">The buffer into which to copy the resulting text.</span></span> <span data-ttu-id="61e99-785">此值不能为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-785">This value cannot be <see langword="null" />.</span></span></param>
        <param name="index"><span data-ttu-id="61e99-786">缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。</span><span class="sxs-lookup"><span data-stu-id="61e99-786">The offset into the buffer where to start copying the result.</span></span></param>
        <param name="count"><span data-ttu-id="61e99-787">要复制到缓冲区的最大字节数。</span><span class="sxs-lookup"><span data-stu-id="61e99-787">The maximum number of bytes to copy into the buffer.</span></span> <span data-ttu-id="61e99-788">此方法返回复制的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="61e99-788">The actual number of bytes copied is returned from this method.</span></span></param>
        <summary><span data-ttu-id="61e99-789">读取元素并对 <see langword="BinHex" /> 内容进行解码。</span><span class="sxs-lookup"><span data-stu-id="61e99-789">Reads the element and decodes the <see langword="BinHex" /> content.</span></span></summary>
        <returns><span data-ttu-id="61e99-790">写入缓冲区的字节数。</span><span class="sxs-lookup"><span data-stu-id="61e99-790">The number of bytes written to the buffer.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-791">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-791">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-792">此方法读取元素内容，使用编码对其进行解码， `BinHex` 并返回解码的二进制字节 (例如，内联 `BinHex` 编码的 GIF 图像) 到缓冲区中。</span><span class="sxs-lookup"><span data-stu-id="61e99-792">This method reads the element content, decodes it using `BinHex` encoding, and returns the decoded binary bytes (for example, an inline `BinHex` encoded GIF image) into the buffer.</span></span>  
  
 <span data-ttu-id="61e99-793">此方法只能读取简单内容元素。</span><span class="sxs-lookup"><span data-stu-id="61e99-793">This method can only read simple-content elements.</span></span> <span data-ttu-id="61e99-794">元素可以包含文本、空格、有效空白、CDATA 部分、注释和处理指令。</span><span class="sxs-lookup"><span data-stu-id="61e99-794">The element can contain text, white space, significant white space, CDATA sections, comments and processing instructions.</span></span> <span data-ttu-id="61e99-795">它还可以包含自动扩展的实体引用。</span><span class="sxs-lookup"><span data-stu-id="61e99-795">It can also contain entity references, which are automatically expanded.</span></span> <span data-ttu-id="61e99-796">元素不能有子元素。</span><span class="sxs-lookup"><span data-stu-id="61e99-796">The element cannot have child elements.</span></span>  
  
 <span data-ttu-id="61e99-797">此方法与方法非常类似， <xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A> 只是它只能在元素节点类型上调用。</span><span class="sxs-lookup"><span data-stu-id="61e99-797">This method is very similar to the <xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A> method except that it can only be called on element node types.</span></span>  
  
 <span data-ttu-id="61e99-798">如果 `count` 值大于文档中的字节数，或者它等于文档中的字节数，则 <xref:System.Xml.XmlTextReader> 读取文档中的所有剩余字节并返回读取的字节数。</span><span class="sxs-lookup"><span data-stu-id="61e99-798">If the `count` value is higher than the number of bytes in the document, or if it is equal to the number of bytes in the document, the <xref:System.Xml.XmlTextReader> reads all the remaining bytes in the document and returns the number of bytes read.</span></span> <span data-ttu-id="61e99-799">下一个 <xref:System.Xml.XmlTextReader> 方法调用返回零，并将读取器移动到后面的节点 <xref:System.Xml.XmlNodeType.EndElement> 。</span><span class="sxs-lookup"><span data-stu-id="61e99-799">The next <xref:System.Xml.XmlTextReader> method call returns a zero and moves the reader to the node following the <xref:System.Xml.XmlNodeType.EndElement>.</span></span>  
  
 <span data-ttu-id="61e99-800">如果在 <xref:System.Xml.XmlTextReader.Read%2A> 所有元素内容被使用之前调用，则读取器的行为可能与先使用第一个内容，然后 <xref:System.Xml.XmlTextReader.Read%2A> 调用方法相同。</span><span class="sxs-lookup"><span data-stu-id="61e99-800">If you call <xref:System.Xml.XmlTextReader.Read%2A> before all of the element content is consumed, the reader may behave as if the first content was consumed and then the <xref:System.Xml.XmlTextReader.Read%2A> method was called.</span></span> <span data-ttu-id="61e99-801">这意味着读取器将读取所有文本，直到遇到结束元素。</span><span class="sxs-lookup"><span data-stu-id="61e99-801">This means that the reader reads all the text until the end element is encountered.</span></span> <span data-ttu-id="61e99-802">然后读取结束标记节点，读取下一个节点，然后在下一个后续节点上定位自身。</span><span class="sxs-lookup"><span data-stu-id="61e99-802">It then reads the end tag node, reads the next node, and then positions itself on the next subsequent node.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61e99-803">有关 <xref:System.Xml.XmlReader.ReadElementContentAsBinHex%2A?displayProperty=nameWithType> 使用此方法的示例，请参阅。</span><span class="sxs-lookup"><span data-stu-id="61e99-803">See <xref:System.Xml.XmlReader.ReadElementContentAsBinHex%2A?displayProperty=nameWithType> to see an example using this method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="61e99-804"><paramref name="buffer" /> 值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-804">The <paramref name="buffer" /> value is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="61e99-805">当前节点不是元素节点。</span><span class="sxs-lookup"><span data-stu-id="61e99-805">The current node is not an element node.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="61e99-806">缓冲区中的索引或者索引与计数之和大于分配的缓冲区大小。</span><span class="sxs-lookup"><span data-stu-id="61e99-806">The index into the buffer or index + count is larger than the allocated buffer size.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="61e99-807"><see cref="T:System.Xml.XmlReader" /> 实现不支持此方法。</span><span class="sxs-lookup"><span data-stu-id="61e99-807">The <see cref="T:System.Xml.XmlReader" /> implementation does not support this method.</span></span></exception>
        <exception cref="T:System.Xml.XmlException"><span data-ttu-id="61e99-808">该元素包含混合内容。</span><span class="sxs-lookup"><span data-stu-id="61e99-808">The element contains mixed-content.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="61e99-809">无法将内容转换成请求的类型。</span><span class="sxs-lookup"><span data-stu-id="61e99-809">The content cannot be converted to the requested type.</span></span></exception>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadState">
      <MemberSignature Language="C#" Value="public override System.Xml.ReadState ReadState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ReadState ReadState" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.ReadState" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReadState As ReadState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::ReadState ReadState { System::Xml::ReadState get(); };" />
      <MemberSignature Language="F#" Value="member this.ReadState : System.Xml.ReadState" Usage="System.Xml.XmlTextReader.ReadState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.ReadState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="61e99-810">获取读取器的状态。</span><span class="sxs-lookup"><span data-stu-id="61e99-810">Gets the state of the reader.</span></span></summary>
        <value><span data-ttu-id="61e99-811"><see cref="T:System.Xml.ReadState" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="61e99-811">One of the <see cref="T:System.Xml.ReadState" /> values.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-812">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-812">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadString">
      <MemberSignature Language="C#" Value="public override string ReadString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ReadString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ReadString();" />
      <MemberSignature Language="F#" Value="override this.ReadString : unit -&gt; string" Usage="xmlTextReader.ReadString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="61e99-813">将元素或文本节点的内容读取为一个字符串。</span><span class="sxs-lookup"><span data-stu-id="61e99-813">Reads the contents of an element or a text node as a string.</span></span></summary>
        <returns><span data-ttu-id="61e99-814">该元素或文本节点的内容。</span><span class="sxs-lookup"><span data-stu-id="61e99-814">The contents of the element or text node.</span></span> <span data-ttu-id="61e99-815">如果读取器定位在元素或文本节点以外的位置，或者当前上下文中没有其他文本内容可返回，则这可以是空字符串。</span><span class="sxs-lookup"><span data-stu-id="61e99-815">This can be an empty string if the reader is positioned on something other than an element or text node, or if there is no more text content to return in the current context.</span></span>  
  
 <span data-ttu-id="61e99-816"><see langword="Note:" />文本节点可以是元素或属性文本节点。</span><span class="sxs-lookup"><span data-stu-id="61e99-816"><see langword="Note:" /> The text node can be either an element or an attribute text node.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-817">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-817">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-818">如果定位在某个元素上，则将 `ReadString` 所有文本、有效空白、空白和 `CData` 节节点类型连接在一起，并将连接的数据作为元素内容返回。</span><span class="sxs-lookup"><span data-stu-id="61e99-818">If positioned on an element, `ReadString` concatenates all text, significant white space, white space, and `CData` section node types together and returns the concatenated data as the element content.</span></span> <span data-ttu-id="61e99-819">它在遇到任何标记时停止，包括注释和处理指令。</span><span class="sxs-lookup"><span data-stu-id="61e99-819">It stops when any markup is encountered, including comments and processing instructions.</span></span> <span data-ttu-id="61e99-820">这可以在混合内容模型中发生，也可以在读取元素结束标记时发生。</span><span class="sxs-lookup"><span data-stu-id="61e99-820">This could occur in a mixed content model, or when an element end tag is read.</span></span>  
  
 <span data-ttu-id="61e99-821">如果定位在文本节点上，则 `ReadString` 执行从文本节点到元素结束标记的相同串联。</span><span class="sxs-lookup"><span data-stu-id="61e99-821">If positioned on a text node, `ReadString` performs the same concatenation from the text node to the element end tag.</span></span> <span data-ttu-id="61e99-822">如果读取器定位在属性文本节点上，则 `ReadString` 与读取器定位在元素开始标记上时的功能相同。</span><span class="sxs-lookup"><span data-stu-id="61e99-822">If the reader is positioned on an attribute text node, `ReadString` has the same functionality as if the reader were position on the element start tag.</span></span> <span data-ttu-id="61e99-823">它返回所有串联在一起的元素文本节点。</span><span class="sxs-lookup"><span data-stu-id="61e99-823">It returns all the concatenated element text nodes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61e99-824">下面的示例显示每个元素的文本内容。</span><span class="sxs-lookup"><span data-stu-id="61e99-824">The following example displays the text content of each element.</span></span>  
  
 [!code-cpp[Classic WebData XmlReader.IsStartElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlReader.IsStartElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlReader.IsStartElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/VB/source.vb#1)]  
  
 <span data-ttu-id="61e99-825">该示例使用文件 `elems.xml` 作为输入。</span><span class="sxs-lookup"><span data-stu-id="61e99-825">The example uses the file, `elems.xml`, as input.</span></span>  
  
 [!code-xml[Classic WebData XmlReader.IsStartElement Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException"><span data-ttu-id="61e99-826">分析 XML 时出错。</span><span class="sxs-lookup"><span data-stu-id="61e99-826">An error occurred while parsing the XML.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="61e99-827">尝试进行无效操作。</span><span class="sxs-lookup"><span data-stu-id="61e99-827">An invalid operation was attempted.</span></span></exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ResetState">
      <MemberSignature Language="C#" Value="public void ResetState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ResetState" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetState ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetState();" />
      <MemberSignature Language="F#" Value="member this.ResetState : unit -&gt; unit" Usage="xmlTextReader.ResetState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="61e99-828">将读取器的状态重置为 ReadState.Initial。</span><span class="sxs-lookup"><span data-stu-id="61e99-828">Resets the state of the reader to ReadState.Initial.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-829">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-829">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-830">此方法使你能够在单个流中分析多个 XML 文档。</span><span class="sxs-lookup"><span data-stu-id="61e99-830">This method enables you to parse multiple XML documents in a single stream.</span></span> <span data-ttu-id="61e99-831">当你到达 XML 文档的末尾时，你可以调用 `ResetState` 来重置读取器的状态以准备下一个 xml 文档。</span><span class="sxs-lookup"><span data-stu-id="61e99-831">When you reach the end of an XML document, you can call `ResetState` to reset the state of the reader in preparation for the next XML document.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="61e99-832">流中的文档必须共享相同的编码。</span><span class="sxs-lookup"><span data-stu-id="61e99-832">The documents in the stream must share the same encoding.</span></span> <span data-ttu-id="61e99-833">如果不是这种情况，则在 `ResetState` 调用时会 <xref:System.Xml.XmlException> 引发。</span><span class="sxs-lookup"><span data-stu-id="61e99-833">If this is not the case, when `ResetState` is called an <xref:System.Xml.XmlException> is thrown.</span></span> <span data-ttu-id="61e99-834"> (这是 .NET Framework 版本1.1 及更低版本) 的行为更改。</span><span class="sxs-lookup"><span data-stu-id="61e99-834">(This is a change in behavior from .NET Framework version 1.1 and earlier).</span></span>  
  
 <span data-ttu-id="61e99-835">以下属性不受影响 `ResetState` 。</span><span class="sxs-lookup"><span data-stu-id="61e99-835">The following properties are not affected by `ResetState`.</span></span>  
  
-   <xref:System.Xml.XmlTextReader.Normalization%2A>  
  
-   <xref:System.Xml.XmlTextReader.Namespaces%2A>  
  
-   <xref:System.Xml.XmlTextReader.XmlResolver%2A>  
  
-   <xref:System.Xml.XmlTextReader.WhitespaceHandling%2A>  
  
   
  
## Examples  
 <span data-ttu-id="61e99-836">下面的示例将分析单个流中的两个 XML 文档。</span><span class="sxs-lookup"><span data-stu-id="61e99-836">The following example parses two XML documents in a single stream.</span></span>  
  
 [!code-cpp[XmlTextReader.ResetState#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.ResetState/CPP/resetstate.cpp#1)]
 [!code-csharp[XmlTextReader.ResetState#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.ResetState/CS/resetstate.cs#1)]
 [!code-vb[XmlTextReader.ResetState#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.ResetState/VB/resetstate.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="61e99-837">如果读取器是使用 <see cref="T:System.Xml.XmlParserContext" /> 构造的，则调用 <see langword="ResetState" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-837">Calling <see langword="ResetState" /> if the reader was constructed using an <see cref="T:System.Xml.XmlParserContext" />.</span></span></exception>
        <exception cref="T:System.Xml.XmlException"><span data-ttu-id="61e99-838">单个流中的文档不共享同一编码。</span><span class="sxs-lookup"><span data-stu-id="61e99-838">Documents in a single stream do not share the same encoding.</span></span></exception>
        <altmember cref="T:System.Xml.ReadState" />
      </Docs>
    </Member>
    <Member MemberName="ResolveEntity">
      <MemberSignature Language="C#" Value="public override void ResolveEntity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ResolveEntity() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ResolveEntity" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ResolveEntity ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ResolveEntity();" />
      <MemberSignature Language="F#" Value="override this.ResolveEntity : unit -&gt; unit" Usage="xmlTextReader.ResolveEntity " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="61e99-839">解析 <see langword="EntityReference" /> 节点的实体引用。</span><span class="sxs-lookup"><span data-stu-id="61e99-839">Resolves the entity reference for <see langword="EntityReference" /> nodes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-840">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-840">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-841">如果读取器定位在 `EntityReference` 节点 (`XmlNodeType.EntityReference`) ，则在 <xref:System.Xml.XmlTextReader.Read%2A> 调用此方法后调用时，将分析实体替换文本。</span><span class="sxs-lookup"><span data-stu-id="61e99-841">If the reader is positioned on an `EntityReference` node (`XmlNodeType.EntityReference`), if <xref:System.Xml.XmlTextReader.Read%2A> is called after calling this method, the entity replacement text is parsed.</span></span> <span data-ttu-id="61e99-842">实体替换文本完成后，将返回一个 `EndEntity` 节点以关闭实体引用作用域。</span><span class="sxs-lookup"><span data-stu-id="61e99-842">When the entity replacement text is finished, an `EndEntity` node is returned to close the entity reference scope.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="61e99-843">调用此方法后，如果实体是属性值的一部分，则必须调用 <xref:System.Xml.XmlTextReader.ReadAttributeValue%2A> 以单步执行此实体。</span><span class="sxs-lookup"><span data-stu-id="61e99-843">After calling this method, if the entity is part of an attribute value, you must call <xref:System.Xml.XmlTextReader.ReadAttributeValue%2A> to step into the entity.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Settings">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlReaderSettings Settings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlReaderSettings Settings" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Settings" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Settings As XmlReaderSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlReaderSettings ^ Settings { System::Xml::XmlReaderSettings ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Settings : System.Xml.XmlReaderSettings" Usage="System.Xml.XmlTextReader.Settings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReaderSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="61e99-844">获取用于创建此 <see cref="T:System.Xml.XmlTextReader" /> 实例的 <see cref="T:System.Xml.XmlReaderSettings" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="61e99-844">Gets the <see cref="T:System.Xml.XmlReaderSettings" /> object used to create this <see cref="T:System.Xml.XmlTextReader" /> instance.</span></span></summary>
        <value><span data-ttu-id="61e99-845">用于创建此 <see cref="T:System.Xml.XmlTextReader" /> 实例的 <see cref="T:System.Xml.XmlReaderSettings" /> 对象；如果读取器不是使用 <see cref="Overload:System.Xml.XmlReader.Create" /> 方法创建的，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-845">The <see cref="T:System.Xml.XmlReaderSettings" /> object used to create this <see cref="T:System.Xml.XmlTextReader" /> instance; <see langword="null" /> if the reader was not created using the <see cref="Overload:System.Xml.XmlReader.Create" /> method.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  

> <span data-ttu-id="61e99-846">在 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)] 中，建议的做法是使用 <xref:System.Xml.XmlReader> 类和 <xref:System.Xml.XmlReaderSettings> 方法创建 <xref:System.Xml.XmlReader.Create%2A> 实例。</span><span class="sxs-lookup"><span data-stu-id="61e99-846">In the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], the recommended practice is to create <xref:System.Xml.XmlReader> instances using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method.</span></span> <span data-ttu-id="61e99-847">这样可以充分利用 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 中引入的所有新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-847">This allows you to take full advantage of all the new features introduced in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].</span></span> <span data-ttu-id="61e99-848">有关详细信息，请参阅 "参考" 页中的 "备注" 部分 <xref:System.Xml.XmlReader> 。</span><span class="sxs-lookup"><span data-stu-id="61e99-848">For more information, see the Remarks section in the <xref:System.Xml.XmlReader> reference page.</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Skip">
      <MemberSignature Language="C#" Value="public override void Skip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Skip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.Skip" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Skip ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Skip();" />
      <MemberSignature Language="F#" Value="override this.Skip : unit -&gt; unit" Usage="xmlTextReader.Skip " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="61e99-849">跳过当前节点的子级。</span><span class="sxs-lookup"><span data-stu-id="61e99-849">Skips the children of the current node.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-850">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-850">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-851">在以下 XML 输入中，如果读取器定位在 `<a>` 节点或它的任何属性上，则调用会将 `Skip` 读取器定位到 `<b>` 节点。</span><span class="sxs-lookup"><span data-stu-id="61e99-851">In the following XML input if the reader is positioned on the `<a>` node or any of its attributes, calling `Skip` positions the reader to the `<b>` node.</span></span>  
  
 <span data-ttu-id="61e99-852">如果读取器位于已 (的叶节点上（例如 `<x>` 节点或文本节点 `abc`) ），则调用与 `Skip` 调用相同 <xref:System.Xml.XmlTextReader.Read%2A> 。</span><span class="sxs-lookup"><span data-stu-id="61e99-852">If the reader is positioned on a leaf node already (such as the `<x>` node or the text node `abc`), calling `Skip` is the same as calling <xref:System.Xml.XmlTextReader.Read%2A>.</span></span>  
  
```xml  
<a name="bob" age="123">  
  <x/>abc<y/>  
</a>  
<b>  
 ...  
</b>  
```  
  
 <span data-ttu-id="61e99-853">此方法检查格式正确的 XML。</span><span class="sxs-lookup"><span data-stu-id="61e99-853">This method checks for well-formed XML.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlLineInfo.HasLineInfo">
      <MemberSignature Language="C#" Value="bool IXmlLineInfo.HasLineInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Xml.IXmlLineInfo.HasLineInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.System#Xml#IXmlLineInfo#HasLineInfo" />
      <MemberSignature Language="VB.NET" Value="Function HasLineInfo () As Boolean Implements IXmlLineInfo.HasLineInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Xml.IXmlLineInfo.HasLineInfo() = System::Xml::IXmlLineInfo::HasLineInfo;" />
      <MemberSignature Language="F#" Value="abstract member System.Xml.IXmlLineInfo.HasLineInfo : unit -&gt; bool&#xA;override this.System.Xml.IXmlLineInfo.HasLineInfo : unit -&gt; bool" Usage="xmlTextReader.System.Xml.IXmlLineInfo.HasLineInfo " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlLineInfo.HasLineInfo</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="61e99-854">有关此成员的说明，请参见 <see cref="M:System.Xml.IXmlLineInfo.HasLineInfo" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-854">For a description of this member, see <see cref="M:System.Xml.IXmlLineInfo.HasLineInfo" />.</span></span></summary>
        <returns><span data-ttu-id="61e99-855">如果可以提供 <see cref="P:System.Xml.IXmlLineInfo.LineNumber" /> 和 <see cref="P:System.Xml.IXmlLineInfo.LinePosition" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-855"><see langword="true" /> if <see cref="P:System.Xml.IXmlLineInfo.LineNumber" /> and <see cref="P:System.Xml.IXmlLineInfo.LinePosition" /> can be provided; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="61e99-856">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="61e99-856">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="61e99-857">它只能在 <xref:System.Xml.XmlTextReader> 实例被强制转换为 <xref:System.Xml.IXmlLineInfo> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="61e99-857">It can be used only when the <xref:System.Xml.XmlTextReader> instance is cast to an <xref:System.Xml.IXmlLineInfo> interface.</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlNamespaceResolver.GetNamespacesInScope">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IDictionary&lt;string,string&gt; IXmlNamespaceResolver.GetNamespacesInScope (System.Xml.XmlNamespaceScope scope);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IDictionary`2&lt;string, string&gt; System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(valuetype System.Xml.XmlNamespaceScope scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />
      <MemberSignature Language="VB.NET" Value="Function GetNamespacesInScope (scope As XmlNamespaceScope) As IDictionary(Of String, String) Implements IXmlNamespaceResolver.GetNamespacesInScope" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System::Xml::XmlNamespaceScope scope) = System::Xml::IXmlNamespaceResolver::GetNamespacesInScope;" />
      <MemberSignature Language="F#" Value="abstract member System.Xml.IXmlNamespaceResolver.GetNamespacesInScope : System.Xml.XmlNamespaceScope -&gt; System.Collections.Generic.IDictionary&lt;string, string&gt;&#xA;override this.System.Xml.IXmlNamespaceResolver.GetNamespacesInScope : System.Xml.XmlNamespaceScope -&gt; System.Collections.Generic.IDictionary&lt;string, string&gt;" Usage="xmlTextReader.System.Xml.IXmlNamespaceResolver.GetNamespacesInScope scope" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="System.Xml.XmlNamespaceScope" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="scope"><span data-ttu-id="61e99-858">一个 <see cref="T:System.Xml.XmlNamespaceScope" /> 值，指定要返回的命名空间节点的类型。</span><span class="sxs-lookup"><span data-stu-id="61e99-858">An <see cref="T:System.Xml.XmlNamespaceScope" /> value that specifies the type of namespace nodes to return.</span></span></param>
        <summary><span data-ttu-id="61e99-859">有关此成员的说明，请参见 <see cref="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-859">For a description of this member, see <see cref="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />.</span></span></summary>
        <returns><span data-ttu-id="61e99-860">一个包含当前在范围内的命名空间的 <see cref="T:System.Collections.IDictionary" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-860">An <see cref="T:System.Collections.IDictionary" /> that contains the current in-scope namespaces.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61e99-861">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="61e99-861">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="61e99-862">它只能在 <xref:System.Xml.XmlTextReader> 实例被强制转换为 <xref:System.Xml.IXmlNamespaceResolver> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="61e99-862">It can be used only when the <xref:System.Xml.XmlTextReader> instance is cast to an <xref:System.Xml.IXmlNamespaceResolver> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlNamespaceResolver.LookupNamespace">
      <MemberSignature Language="C#" Value="string IXmlNamespaceResolver.LookupNamespace (string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function LookupNamespace (prefix As String) As String Implements IXmlNamespaceResolver.LookupNamespace" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.Xml.IXmlNamespaceResolver.LookupNamespace(System::String ^ prefix) = System::Xml::IXmlNamespaceResolver::LookupNamespace;" />
      <MemberSignature Language="F#" Value="abstract member System.Xml.IXmlNamespaceResolver.LookupNamespace : string -&gt; string&#xA;override this.System.Xml.IXmlNamespaceResolver.LookupNamespace : string -&gt; string" Usage="xmlTextReader.System.Xml.IXmlNamespaceResolver.LookupNamespace prefix" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="prefix"><span data-ttu-id="61e99-863">要查找其命名空间 URI 的前缀。</span><span class="sxs-lookup"><span data-stu-id="61e99-863">The prefix whose namespace URI you wish to find.</span></span></param>
        <summary><span data-ttu-id="61e99-864">有关此成员的说明，请参见 <see cref="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-864">For a description of this member, see <see cref="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)" />.</span></span></summary>
        <returns><span data-ttu-id="61e99-865">映射到前缀的命名空间 URI；如果前缀未映射到命名空间 URI，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-865">The namespace URI that is mapped to the prefix; <see langword="null" /> if the prefix is not mapped to a namespace URI.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61e99-866">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="61e99-866">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="61e99-867">它只能在 <xref:System.Xml.XmlTextReader> 实例被强制转换为 <xref:System.Xml.IXmlNamespaceResolver> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="61e99-867">It can be used only when the <xref:System.Xml.XmlTextReader> instance is cast to an <xref:System.Xml.IXmlNamespaceResolver> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlNamespaceResolver.LookupPrefix">
      <MemberSignature Language="C#" Value="string IXmlNamespaceResolver.LookupPrefix (string namespaceName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function LookupPrefix (namespaceName As String) As String Implements IXmlNamespaceResolver.LookupPrefix" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.Xml.IXmlNamespaceResolver.LookupPrefix(System::String ^ namespaceName) = System::Xml::IXmlNamespaceResolver::LookupPrefix;" />
      <MemberSignature Language="F#" Value="abstract member System.Xml.IXmlNamespaceResolver.LookupPrefix : string -&gt; string&#xA;override this.System.Xml.IXmlNamespaceResolver.LookupPrefix : string -&gt; string" Usage="xmlTextReader.System.Xml.IXmlNamespaceResolver.LookupPrefix namespaceName" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceName" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="namespaceName"><span data-ttu-id="61e99-868">要查找其前缀的命名空间 URI。</span><span class="sxs-lookup"><span data-stu-id="61e99-868">The namespace URI whose prefix you wish to find.</span></span></param>
        <summary><span data-ttu-id="61e99-869">有关此成员的说明，请参见 <see cref="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-869">For a description of this member, see <see cref="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)" />.</span></span></summary>
        <returns><span data-ttu-id="61e99-870">映射到命名空间 URI 的前缀；如果命名空间 URI 未映射到前缀，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-870">The prefix that is mapped to the namespace URI; <see langword="null" /> if the namespace URI is not mapped to a prefix.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public override string Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Value" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Value { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : string" Usage="System.Xml.XmlTextReader.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="61e99-871">获取当前节点的文本值。</span><span class="sxs-lookup"><span data-stu-id="61e99-871">Gets the text value of the current node.</span></span></summary>
        <value><span data-ttu-id="61e99-872">返回的值取决于节点的 <see cref="P:System.Xml.XmlTextReader.NodeType" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-872">The value returned depends on the <see cref="P:System.Xml.XmlTextReader.NodeType" /> of the node.</span></span> <span data-ttu-id="61e99-873">下表列出具有要返回的值的节点类型。</span><span class="sxs-lookup"><span data-stu-id="61e99-873">The following table lists node types that have a value to return.</span></span> <span data-ttu-id="61e99-874">所有其他节点类型返回 <see langword="String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-874">All other node types return <see langword="String.Empty" />.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="61e99-875">节点类型</span><span class="sxs-lookup"><span data-stu-id="61e99-875">Node Type</span></span> 
 </term><description> <span data-ttu-id="61e99-876">“值”</span><span class="sxs-lookup"><span data-stu-id="61e99-876">Value</span></span> 
 </description></listheader><item><term><see langword="Attribute" /></term><description> <span data-ttu-id="61e99-877">属性的值。</span><span class="sxs-lookup"><span data-stu-id="61e99-877">The value of the attribute.</span></span>  
  
 </description></item><item><term><see langword="CDATA" /></term><description> <span data-ttu-id="61e99-878">CDATA 节的内容。</span><span class="sxs-lookup"><span data-stu-id="61e99-878">The content of the CDATA section.</span></span>  
  
 </description></item><item><term><see langword="Comment" /></term><description> <span data-ttu-id="61e99-879">注释的内容。</span><span class="sxs-lookup"><span data-stu-id="61e99-879">The content of the comment.</span></span>  
  
 </description></item><item><term><see langword="DocumentType" /></term><description> <span data-ttu-id="61e99-880">内部子集。</span><span class="sxs-lookup"><span data-stu-id="61e99-880">The internal subset.</span></span>  
  
 </description></item><item><term><see langword="ProcessingInstruction" /></term><description> <span data-ttu-id="61e99-881">全部内容（不包括指令目标）。</span><span class="sxs-lookup"><span data-stu-id="61e99-881">The entire content, excluding the target.</span></span>  
  
 </description></item><item><term><see langword="SignificantWhitespace" /></term><description> <span data-ttu-id="61e99-882"><see langword="xml:space" />= 'preserve' 范围中的空白。</span><span class="sxs-lookup"><span data-stu-id="61e99-882">The white space within an <see langword="xml:space" />= 'preserve' scope.</span></span>  
  
 </description></item><item><term><see langword="Text" /></term><description> <span data-ttu-id="61e99-883">文本节点的内容。</span><span class="sxs-lookup"><span data-stu-id="61e99-883">The content of the text node.</span></span>  
  
 </description></item><item><term><see langword="Whitespace" /></term><description> <span data-ttu-id="61e99-884">标记之间的空白。</span><span class="sxs-lookup"><span data-stu-id="61e99-884">The white space between markup.</span></span>  
  
 </description></item><item><term><see langword="XmlDeclaration" /></term><description> <span data-ttu-id="61e99-885">声明的内容。</span><span class="sxs-lookup"><span data-stu-id="61e99-885">The content of the declaration.</span></span>  
  
 </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-886">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-886">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61e99-887">下面的示例读取 XML 文件并显示每个节点。</span><span class="sxs-lookup"><span data-stu-id="61e99-887">The following example reads an XML file and displays each node.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/VB/source.vb#1)]  
  
 <span data-ttu-id="61e99-888">该示例使用文件 `items.xml` 。</span><span class="sxs-lookup"><span data-stu-id="61e99-888">The sample uses the file `items.xml`.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.Name Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="WhitespaceHandling">
      <MemberSignature Language="C#" Value="public System.Xml.WhitespaceHandling WhitespaceHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.WhitespaceHandling WhitespaceHandling" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.WhitespaceHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property WhitespaceHandling As WhitespaceHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::WhitespaceHandling WhitespaceHandling { System::Xml::WhitespaceHandling get(); void set(System::Xml::WhitespaceHandling value); };" />
      <MemberSignature Language="F#" Value="member this.WhitespaceHandling : System.Xml.WhitespaceHandling with get, set" Usage="System.Xml.XmlTextReader.WhitespaceHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.WhitespaceHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="61e99-889">获取或设置一个值，该值指定如何处理空白区域。</span><span class="sxs-lookup"><span data-stu-id="61e99-889">Gets or sets a value that specifies how white space is handled.</span></span></summary>
        <value><span data-ttu-id="61e99-890"><see cref="T:System.Xml.WhitespaceHandling" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="61e99-890">One of the <see cref="T:System.Xml.WhitespaceHandling" /> values.</span></span> <span data-ttu-id="61e99-891">默认值为 <see langword="WhitespaceHandling.All" />（返回 <see langword="Whitespace" /> 和 <see langword="SignificantWhitespace" /> 节点）。</span><span class="sxs-lookup"><span data-stu-id="61e99-891">The default is <see langword="WhitespaceHandling.All" /> (returns <see langword="Whitespace" /> and <see langword="SignificantWhitespace" /> nodes).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-892">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-892">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-893">此属性可随时更改，并在下一次读取操作时生效。</span><span class="sxs-lookup"><span data-stu-id="61e99-893">This property can be changed at any time and takes effect on the next read operation.</span></span>  
  
 <span data-ttu-id="61e99-894">因为没有 `XmlTextReader` 可用的 DTD 信息，所以 `SignificantWhitepsace` 仅在作用域内返回节点 `xml:space='preserve'` 。</span><span class="sxs-lookup"><span data-stu-id="61e99-894">Because the `XmlTextReader` does not have DTD information available to it, `SignificantWhitepsace` nodes are only returned within an `xml:space='preserve'` scope.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61e99-895">下面的示例读取一个 XML 片段。</span><span class="sxs-lookup"><span data-stu-id="61e99-895">The following example reads an XML fragment.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.WhitespaceHandling Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.WhitespaceHandling Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.WhitespaceHandling Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.WhitespaceHandling Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.WhitespaceHandling Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.WhitespaceHandling Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="61e99-896">指定了无效的值。</span><span class="sxs-lookup"><span data-stu-id="61e99-896">Invalid value specified.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="61e99-897">当读取器关闭（<see cref="P:System.Xml.XmlTextReader.ReadState" /> 为 <see langword="ReadState.Closed" />）时，设置此属性。</span><span class="sxs-lookup"><span data-stu-id="61e99-897">Setting this property when the reader is closed (<see cref="P:System.Xml.XmlTextReader.ReadState" /> is <see langword="ReadState.Closed" />).</span></span></exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="XmlLang">
      <MemberSignature Language="C#" Value="public override string XmlLang { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string XmlLang" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.XmlLang" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property XmlLang As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ XmlLang { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.XmlLang : string" Usage="System.Xml.XmlTextReader.XmlLang" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="61e99-898">获取当前 <see langword="xml:lang" /> 范围。</span><span class="sxs-lookup"><span data-stu-id="61e99-898">Gets the current <see langword="xml:lang" /> scope.</span></span></summary>
        <value><span data-ttu-id="61e99-899">当前 <see langword="xml:lang" /> 范围。</span><span class="sxs-lookup"><span data-stu-id="61e99-899">The current <see langword="xml:lang" /> scope.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-900">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-900">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-901">此属性表示 `xml:lang` 当前节点所在的作用域。</span><span class="sxs-lookup"><span data-stu-id="61e99-901">This property represents the `xml:lang` scope within which the current node resides.</span></span> <span data-ttu-id="61e99-902">例如，以下是 `xml:lang` 根元素中设置为 US 英语的 XML 片段：</span><span class="sxs-lookup"><span data-stu-id="61e99-902">For example, here is an XML fragment with `xml:lang` set to US English in the root element:</span></span>  
  
 \<root xml:lang="en-us">  
  
 <span data-ttu-id="61e99-903">\<name>Fred\</name></span><span class="sxs-lookup"><span data-stu-id="61e99-903">\<name>Fred\</name></span></span>  
  
 \</root>  
  
 <span data-ttu-id="61e99-904">当读取器定位在元素上时 `name` ，可以使用此属性来查找它是否在美国英语特性的作用域中 `xml:lang` 。</span><span class="sxs-lookup"><span data-stu-id="61e99-904">When the reader is positioned on the `name` element, you can use this property to find that it is in the scope of a US English `xml:lang` attribute.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61e99-905">下面的示例显示 `xml:lang` 每个节点的值。</span><span class="sxs-lookup"><span data-stu-id="61e99-905">The following example displays the `xml:lang` value for each of the nodes.</span></span>  
  
 [!code-cpp[XmlTextReader.XmlLang#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.XmlLang/CPP/readlang.cpp#1)]
 [!code-csharp[XmlTextReader.XmlLang#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.XmlLang/CS/readlang.cs#1)]
 [!code-vb[XmlTextReader.XmlLang#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.XmlLang/VB/readlang.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver? XmlResolver { set; }" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.XmlResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlResolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ XmlResolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlResolver : System.Xml.XmlResolver" Usage="System.Xml.XmlTextReader.XmlResolver" />
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver XmlResolver { set; }" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="61e99-906">设置用于解析 DTD 引用的 <see cref="T:System.Xml.XmlResolver" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-906">Sets the <see cref="T:System.Xml.XmlResolver" /> used for resolving DTD references.</span></span></summary>
        <value><span data-ttu-id="61e99-907">要使用的 <see langword="XmlResolver" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-907">The <see langword="XmlResolver" /> to use.</span></span> <span data-ttu-id="61e99-908">如果设置为 <see langword="null" />，则不解析外部资源。</span><span class="sxs-lookup"><span data-stu-id="61e99-908">If set to <see langword="null" />, external resources are not resolved.</span></span>  
  
<span data-ttu-id="61e99-909">在 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 的 1.1 版中，调用方必须完全受到信任，才能指定 <see langword="XmlResolver" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-909">In version 1.1 of the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], the caller must be fully trusted in order to specify an <see langword="XmlResolver" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-910">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-910">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="61e99-911">读取器使用 `XmlResolver` 来解析加载到读取器中的文件的位置，同时解析 DTD 引用。</span><span class="sxs-lookup"><span data-stu-id="61e99-911">The reader uses `XmlResolver` to resolve the location of the file loaded into the reader and also to resolve DTD references.</span></span> <span data-ttu-id="61e99-912">例如，如果 XML 包含 DOCTYPE 声明， `<!DOCTYPE book SYSTEM book.dtd>` 则读取器将解析此外部文件，并确保 DTD 格式正确。</span><span class="sxs-lookup"><span data-stu-id="61e99-912">For example, if your XML included the DOCTYPE declaration, `<!DOCTYPE book SYSTEM book.dtd>` the reader resolves this external file and ensures that the DTD is well-formed.</span></span> <span data-ttu-id="61e99-913">读取器不使用 DTD 进行验证。</span><span class="sxs-lookup"><span data-stu-id="61e99-913">The reader does not use the DTD for validation.</span></span>  
  
 <span data-ttu-id="61e99-914">此属性可随时更改，并在下一次读取操作时生效。</span><span class="sxs-lookup"><span data-stu-id="61e99-914">This property can be changed at any time and takes effect on the next read operation.</span></span> <span data-ttu-id="61e99-915">如果将此属性设置为 `null` ，则不解析读取器遇到的任何外部 DTD 引用。</span><span class="sxs-lookup"><span data-stu-id="61e99-915">If this property is set to `null`, any external DTD references encountered by the reader are not resolved.</span></span>  
  
 <span data-ttu-id="61e99-916">在的版本1.1 中 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] ，如果未设置此属性，则应用程序的信任级别将确定默认行为。</span><span class="sxs-lookup"><span data-stu-id="61e99-916">In version 1.1 of the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], if this property is not set, the trust level of the application determines the default behavior.</span></span>  
  
 <span data-ttu-id="61e99-917">`Fully trusted code:` 读取器使用 <xref:System.Xml.XmlUrlResolver> 没有用户凭据的默认值。</span><span class="sxs-lookup"><span data-stu-id="61e99-917">`Fully trusted code:` The reader uses a default <xref:System.Xml.XmlUrlResolver> with no user credentials.</span></span> <span data-ttu-id="61e99-918">如果需要身份验证才能访问网络资源，请使用 `XmlResolver` 属性指定 `XmlResolver` 具有必要凭据的。</span><span class="sxs-lookup"><span data-stu-id="61e99-918">If authentication is required to access a network resource, use the `XmlResolver` property to specify an `XmlResolver` with the necessary credentials.</span></span>  
  
 <span data-ttu-id="61e99-919">`Semi-trusted code:``XmlResolver`属性设置为 `null` 。</span><span class="sxs-lookup"><span data-stu-id="61e99-919">`Semi-trusted code:` The `XmlResolver` property is set to `null`.</span></span> <span data-ttu-id="61e99-920">不解析外部资源。</span><span class="sxs-lookup"><span data-stu-id="61e99-920">External resources are not resolved.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61e99-921">下面的示例使用 `XmlResolver` 属性指定访问网络文件所需的凭据。</span><span class="sxs-lookup"><span data-stu-id="61e99-921">The following example uses the `XmlResolver` property to specify the credentials necessary to access the networked file.</span></span>  
  
 [!code-cpp[XmlTextReader.XmlResolver#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.XmlResolver/CPP/rdr_resolver.cpp#1)]
 [!code-csharp[XmlTextReader.XmlResolver#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.XmlResolver/CS/rdr_resolver.cs#1)]
 [!code-vb[XmlTextReader.XmlResolver#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.XmlResolver/VB/rdr_resolver.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.XmlUrlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="XmlSpace">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlSpace XmlSpace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlSpace XmlSpace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.XmlSpace" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property XmlSpace As XmlSpace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlSpace XmlSpace { System::Xml::XmlSpace get(); };" />
      <MemberSignature Language="F#" Value="member this.XmlSpace : System.Xml.XmlSpace" Usage="System.Xml.XmlTextReader.XmlSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlSpace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="61e99-922">获取当前 <see langword="xml:space" /> 范围。</span><span class="sxs-lookup"><span data-stu-id="61e99-922">Gets the current <see langword="xml:space" /> scope.</span></span></summary>
        <value><span data-ttu-id="61e99-923"><see cref="T:System.Xml.XmlSpace" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="61e99-923">One of the <see cref="T:System.Xml.XmlSpace" /> values.</span></span> <span data-ttu-id="61e99-924">如果不存在任何 <see langword="xml:space" /> 范围，则该属性默认值为 <see langword="XmlSpace.None" />。</span><span class="sxs-lookup"><span data-stu-id="61e99-924">If no <see langword="xml:space" /> scope exists, this property defaults to <see langword="XmlSpace.None" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="61e99-925">从 .NET Framework 2.0 开始，我们建议 <xref:System.Xml.XmlReader> 使用方法创建实例 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 以利用新功能。</span><span class="sxs-lookup"><span data-stu-id="61e99-925">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61e99-926">下面的示例分析文件，并在 `xml:space='preserve'` 找到范围时返回重要空白。</span><span class="sxs-lookup"><span data-stu-id="61e99-926">The following example parses a file and returns significant white space if an `xml:space='preserve'` scope is found.</span></span>  
  
 [!code-cpp[XmlTextReader.XmlSpace#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.XmlSpace/CPP/readspace.cpp#1)]
 [!code-csharp[XmlTextReader.XmlSpace#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.XmlSpace/CS/readspace.cs#1)]
 [!code-vb[XmlTextReader.XmlSpace#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.XmlSpace/VB/readspace.vb#1)]  
  
 <span data-ttu-id="61e99-927">该示例使用文件 `authors.xml` 作为输入。</span><span class="sxs-lookup"><span data-stu-id="61e99-927">The example uses the file, `authors.xml`, as input.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
  </Members>
</Type>
