<Type Name="XmlUrlResolver" FullName="System.Xml.XmlUrlResolver">
  <Metadata><Meta Name="ms.openlocfilehash" Value="17a0ecf48e6bf4f80fc11844aa81291de3c9539f" /><Meta Name="ms.sourcegitcommit" Value="943c8cdbe5b47c6c296a6f4b73038bbd43da0dd2" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="02/12/2021" /><Meta Name="ms.locfileid" Value="100304779" /></Metadata><TypeSignature Language="C#" Value="public class XmlUrlResolver : System.Xml.XmlResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlUrlResolver extends System.Xml.XmlResolver" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlUrlResolver" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlUrlResolver&#xA;Inherits XmlResolver" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlUrlResolver : System::Xml::XmlResolver" />
  <TypeSignature Language="F#" Value="type XmlUrlResolver = class&#xA;    inherit XmlResolver" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Xml.ReaderWriter" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Xml.XmlResolver</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="96e0a-101">解析由统一资源标识符 (URI) 命名的外部 XML 资源。</span><span class="sxs-lookup"><span data-stu-id="96e0a-101">Resolves external XML resources named by a Uniform Resource Identifier (URI).</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96e0a-102"><xref:System.Xml.XmlUrlResolver> 用于解析外部 XML 资源，如实体、文档类型定义 (Dtd) 或架构。</span><span class="sxs-lookup"><span data-stu-id="96e0a-102"><xref:System.Xml.XmlUrlResolver> is used to resolve external XML resources such as entities, document type definitions (DTDs) or schemas.</span></span> <span data-ttu-id="96e0a-103">它还用于处理可扩展样式表语言 (XSL) 样式表或 XML 架构定义语言 (XSD) 架构中找到的包含和导入元素。</span><span class="sxs-lookup"><span data-stu-id="96e0a-103">It is also used to process include and import elements found in Extensible StyleSheet Language (XSL) style sheets or XML Schema definition language (XSD) schemas.</span></span>  
  
 <span data-ttu-id="96e0a-104"><xref:System.Xml.XmlUrlResolver> 命名空间中所有类的默认解析程序 <xref:System.Xml> 。</span><span class="sxs-lookup"><span data-stu-id="96e0a-104"><xref:System.Xml.XmlUrlResolver> is the default resolver for all classes in the <xref:System.Xml> namespace.</span></span> <span data-ttu-id="96e0a-105">它支持 `file://` 和 `http://` 协议以及来自 <xref:System.Net.WebRequest> 类的请求。</span><span class="sxs-lookup"><span data-stu-id="96e0a-105">It supports the `file://` and `http://` protocols and requests from the <xref:System.Net.WebRequest> class.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="96e0a-106"><xref:System.Xml.XmlUrlResolver> 对象可以包含敏感信息，例如用户凭据。</span><span class="sxs-lookup"><span data-stu-id="96e0a-106"><xref:System.Xml.XmlUrlResolver> objects can contain sensitive information such as user credentials.</span></span> <span data-ttu-id="96e0a-107">缓存对象时应小心 <xref:System.Xml.XmlUrlResolver> ，不应将 <xref:System.Xml.XmlUrlResolver> 对象传递给不受信任的组件。</span><span class="sxs-lookup"><span data-stu-id="96e0a-107">You should be careful when you cache <xref:System.Xml.XmlUrlResolver> objects and should not pass <xref:System.Xml.XmlUrlResolver> objects to an untrusted component.</span></span>  
  
## <a name="resolving-dtds"></a><span data-ttu-id="96e0a-108">解析 Dtd</span><span class="sxs-lookup"><span data-stu-id="96e0a-108">Resolving DTDs</span></span>  
 <span data-ttu-id="96e0a-109">如果 XML 读取器 (<xref:System.Xml.XmlReader>) 正在读取包含外部 DTD 的 xml 文件，它将调用 <xref:System.Xml.XmlUrlResolver.GetEntityAsync%2A?displayProperty=nameWithType> 方法来获取 DTD 的流表示形式。</span><span class="sxs-lookup"><span data-stu-id="96e0a-109">If an XML reader (<xref:System.Xml.XmlReader>) is reading an XML file that contains an external DTD, it calls the <xref:System.Xml.XmlUrlResolver.GetEntityAsync%2A?displayProperty=nameWithType> method to get a stream representation of the DTD.</span></span> <span data-ttu-id="96e0a-110">如果 DTD 的 URI 是相对 URI，则 XML 读取器调用 <xref:System.Xml.XmlUrlResolver.ResolveUri%2A?displayProperty=nameWithType> 方法并返回给定和参数的绝对 URI `relativeUri` `baseURi` 。</span><span class="sxs-lookup"><span data-stu-id="96e0a-110">If the URI of the DTD is a relative URI, the XML reader calls the <xref:System.Xml.XmlUrlResolver.ResolveUri%2A?displayProperty=nameWithType> method and returns an absolute URI for the given `relativeUri` and `baseURi` parameters.</span></span> <span data-ttu-id="96e0a-111">如果 <xref:System.Xml.XmlUrlResolver> 不知道如何解析 URI，它将返回 `null` 。</span><span class="sxs-lookup"><span data-stu-id="96e0a-111">If the <xref:System.Xml.XmlUrlResolver> doesn't know how to resolve the URI, it returns `null`.</span></span>  
  
 <span data-ttu-id="96e0a-112"><xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=nameWithType> 方法使用 <xref:System.Xml.XmlUrlResolver.Credentials%2A> 属性中的适当信息以访问资源。</span><span class="sxs-lookup"><span data-stu-id="96e0a-112">The <xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=nameWithType> method uses the information in the <xref:System.Xml.XmlUrlResolver.Credentials%2A> property as appropriate to gain access to the resource.</span></span> <span data-ttu-id="96e0a-113">`get`出于安全原因，不存在对此属性的访问器。</span><span class="sxs-lookup"><span data-stu-id="96e0a-113">There is no `get` accessor to this property for security reasons.</span></span> <span data-ttu-id="96e0a-114">当覆盖时 <xref:System.Xml.XmlResolver> ， **GetEntity** 是使用 **凭据** 属性中的凭据信息的方法。</span><span class="sxs-lookup"><span data-stu-id="96e0a-114">When overwriting <xref:System.Xml.XmlResolver>, **GetEntity** is the method that utilizes the credential information in the **Credentials** property.</span></span>  
  
 <span data-ttu-id="96e0a-115">解析所有其他 XML 资源与解析 DTD 非常类似。</span><span class="sxs-lookup"><span data-stu-id="96e0a-115">Resolving all other XML resources is very similar to resolving DTDs.</span></span> <span data-ttu-id="96e0a-116"><xref:System.Xml.XmlResolver> 与外部资源协商连接并返回 <xref:System.IO.Stream> 内容的表示形式。</span><span class="sxs-lookup"><span data-stu-id="96e0a-116"><xref:System.Xml.XmlResolver> negotiates the connection with the external resource and returns a <xref:System.IO.Stream> representation of the content.</span></span> <span data-ttu-id="96e0a-117">调用以 <xref:System.Xml.XmlResolver> 解释流的对象。</span><span class="sxs-lookup"><span data-stu-id="96e0a-117">The object that is making the call to <xref:System.Xml.XmlResolver> interprets the stream.</span></span>  
  
## <a name="extending-the-xmlurlresolver-class"></a><span data-ttu-id="96e0a-118">扩展 XmlUrlResolver 类</span><span class="sxs-lookup"><span data-stu-id="96e0a-118">Extending the XmlUrlResolver class</span></span>  
 <span data-ttu-id="96e0a-119"><xref:System.Xml.XmlUrlResolver> 类的默认行为是从其源而不是缓存中解析 XML 数据资源。</span><span class="sxs-lookup"><span data-stu-id="96e0a-119">The default behavior of the <xref:System.Xml.XmlUrlResolver> class is to resolve an XML data resource from its source, not from cache.</span></span> <span data-ttu-id="96e0a-120">在某些情况下，从缓存解析数据资源可以节省到数据资源的行程，因而可提高应用程序的性能。</span><span class="sxs-lookup"><span data-stu-id="96e0a-120">In some cases, resolving a data resource from cache can improve the performance of an application by saving a trip to the data resource's server.</span></span> <span data-ttu-id="96e0a-121">这种性能增益必须针对最新内容需要加以权衡。</span><span class="sxs-lookup"><span data-stu-id="96e0a-121">The performance gains here must be weighed against the need for up-to-date content.</span></span>  
  
 <span data-ttu-id="96e0a-122">下面的示例将扩展 <xref:System.Xml.XmlUrlResolver> 并生成一个新类， `XmlCachingResolver` 以便从缓存中检索资源。</span><span class="sxs-lookup"><span data-stu-id="96e0a-122">The following example extends <xref:System.Xml.XmlUrlResolver> and builds a new class, `XmlCachingResolver`, to retrieve resources from the cache.</span></span> <span data-ttu-id="96e0a-123">这是通过重写 <xref:System.Xml.XmlUrlResolver.Credentials%2A?displayProperty=nameWithType> 属性和 <xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=nameWithType> 方法来完成的。</span><span class="sxs-lookup"><span data-stu-id="96e0a-123">This is done by overriding the <xref:System.Xml.XmlUrlResolver.Credentials%2A?displayProperty=nameWithType> property and the <xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[XmlCachingResolver_ex#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlCachingResolver_ex/CS/XmlCachingResolver_ex.cs#1)]
 [!code-vb[XmlCachingResolver_ex#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlCachingResolver_ex/VB/XmlCachingResolver_ex.vb#1)]  
  
 <span data-ttu-id="96e0a-124">`XmlCachingResolver` 类的缓存行为在 `GetEntity` 方法中实现。</span><span class="sxs-lookup"><span data-stu-id="96e0a-124">The caching behavior of the `XmlCachingResolver` class is implemented in the `GetEntity` method.</span></span> <span data-ttu-id="96e0a-125">这是通过创建新的 <xref:System.Net.WebRequest> 和 <xref:System.Net.Cache.HttpRequestCachePolicy> 对象来完成的。</span><span class="sxs-lookup"><span data-stu-id="96e0a-125">This is done by creating new <xref:System.Net.WebRequest> and <xref:System.Net.Cache.HttpRequestCachePolicy> objects.</span></span> <span data-ttu-id="96e0a-126"><xref:System.Net.Cache.HttpRequestCachePolicy> 对象是使用 <xref:System.Net.Cache.HttpRequestCacheLevel.Default> 枚举的 <xref:System.Net.Cache.HttpRequestCacheLevel> 成员创建的。</span><span class="sxs-lookup"><span data-stu-id="96e0a-126">The <xref:System.Net.Cache.HttpRequestCachePolicy> object is created using the <xref:System.Net.Cache.HttpRequestCacheLevel.Default> member of the <xref:System.Net.Cache.HttpRequestCacheLevel> enumeration.</span></span>  
  
 <span data-ttu-id="96e0a-127">使用 <xref:System.Net.WebRequest.CachePolicy%2A> 对象设置 <xref:System.Net.WebRequest> 对象的 <xref:System.Net.Cache.HttpRequestCachePolicy> 属性。</span><span class="sxs-lookup"><span data-stu-id="96e0a-127">The <xref:System.Net.WebRequest.CachePolicy%2A> property of the <xref:System.Net.WebRequest> object is set with the <xref:System.Net.Cache.HttpRequestCachePolicy> object.</span></span>  
  
 <span data-ttu-id="96e0a-128">`XmlCachingResolver`使用创建类的实例 `Boolean` `enableHttpCaching` 。</span><span class="sxs-lookup"><span data-stu-id="96e0a-128">An instance of the `XmlCachingResolver` class is created with the `Boolean` `enableHttpCaching`.</span></span> <span data-ttu-id="96e0a-129">如果此值设置为 `true` ，则实例将从默认缓存解析资源（如果可能）。</span><span class="sxs-lookup"><span data-stu-id="96e0a-129">When this value is set to `true`, the instance resolves a resource from the default cache if possible.</span></span> <span data-ttu-id="96e0a-130">当 `enableHttpCaching` 设置为时 `false` ，实例使用默认行为，并从其源解析资源。</span><span class="sxs-lookup"><span data-stu-id="96e0a-130">When `enableHttpCaching` is set to `false`, the instance uses the default behavior and resolves resources from their source.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96e0a-131">此示例利用了 .NET Framework 中的 XML 类的可扩展性。</span><span class="sxs-lookup"><span data-stu-id="96e0a-131">This example leverages the extensibility of the XML classes in the .NET Framework.</span></span> <span data-ttu-id="96e0a-132">可以扩展和自定义其他类以满足特定应用程序的需要。</span><span class="sxs-lookup"><span data-stu-id="96e0a-132">Other classes can be extended and customized to suit the needs of a particular application.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96e0a-133">下面的示例创建一个 <xref:System.Xml.XmlReader> ，它将 <xref:System.Xml.XmlUrlResolver> 与默认凭据一起使用。</span><span class="sxs-lookup"><span data-stu-id="96e0a-133">The following example creates an <xref:System.Xml.XmlReader> that uses an <xref:System.Xml.XmlUrlResolver> with default credentials.</span></span>  
  
 [!code-csharp[XmlResolver_Samples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlResolver_Samples/CS/XmlResolver_Samples.cs#1)]
 [!code-vb[XmlResolver_Samples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlResolver_Samples/VB/XmlResolver_Samples.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/standard/data/xml/"><span data-ttu-id="96e0a-134">XML 文档和数据</span><span class="sxs-lookup"><span data-stu-id="96e0a-134">XML Documents and Data</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlUrlResolver ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlUrlResolver.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlUrlResolver();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="96e0a-135">初始化 <see cref="T:System.Xml.XmlUrlResolver" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="96e0a-135">Initializes a new instance of the <see cref="T:System.Xml.XmlUrlResolver" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CachePolicy">
      <MemberSignature Language="C#" Value="public System.Net.Cache.RequestCachePolicy CachePolicy { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Cache.RequestCachePolicy CachePolicy" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlUrlResolver.CachePolicy" />
      <MemberSignature Language="VB.NET" Value="Public Property CachePolicy As RequestCachePolicy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Cache::RequestCachePolicy ^ CachePolicy {  void set(System::Net::Cache::RequestCachePolicy ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CachePolicy : System.Net.Cache.RequestCachePolicy" Usage="System.Xml.XmlUrlResolver.CachePolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Cache.RequestCachePolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="96e0a-136">获取或设置基础 <see cref="T:System.Net.WebRequest" /> 对象的缓存策略。</span><span class="sxs-lookup"><span data-stu-id="96e0a-136">Gets or sets the cache policy for the underlying <see cref="T:System.Net.WebRequest" /> object.</span></span></summary>
        <value><span data-ttu-id="96e0a-137">基础 Web 请求的缓存策略。</span><span class="sxs-lookup"><span data-stu-id="96e0a-137">The cache policy for the underlying web request.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Credentials">
      <MemberSignature Language="C#" Value="public override System.Net.ICredentials Credentials { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.ICredentials Credentials" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlUrlResolver.Credentials" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Credentials As ICredentials" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Net::ICredentials ^ Credentials {  void set(System::Net::ICredentials ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Credentials : System.Net.ICredentials" Usage="System.Xml.XmlUrlResolver.Credentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.ICredentials</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="96e0a-138">设置用于对 Web 请求进行身份验证的凭据。</span><span class="sxs-lookup"><span data-stu-id="96e0a-138">Sets credentials used to authenticate web requests.</span></span></summary>
        <value><span data-ttu-id="96e0a-139">用于对 Web 请求进行身份验证的凭据。</span><span class="sxs-lookup"><span data-stu-id="96e0a-139">The credentials to be used to authenticate web requests.</span></span> <span data-ttu-id="96e0a-140">如果未设置该属性，则该值默认为 <see langword="null" />；即 <see langword="XmlUrlResolver" /> 没有用户凭据。</span><span class="sxs-lookup"><span data-stu-id="96e0a-140">If this property is not set, the value defaults to <see langword="null" />; that is, the <see langword="XmlUrlResolver" /> has no user credentials.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96e0a-141">如果虚拟目录不需要身份验证，则不需要设置此属性。</span><span class="sxs-lookup"><span data-stu-id="96e0a-141">If the virtual directory does not require authentication, this property does not need to be set.</span></span> <span data-ttu-id="96e0a-142">否则，必须提供用户的凭据。</span><span class="sxs-lookup"><span data-stu-id="96e0a-142">Otherwise, the credentials of the user must be supplied.</span></span>  
  
 <span data-ttu-id="96e0a-143">可以将不同的凭据与不同的 Uri 相关联，并将其添加到缓存中。</span><span class="sxs-lookup"><span data-stu-id="96e0a-143">You can associate different credentials with different URIs and add them to a cache.</span></span> <span data-ttu-id="96e0a-144">然后，可以使用凭据检查不同 Uri 的身份验证，而不考虑 XML 的原始源。</span><span class="sxs-lookup"><span data-stu-id="96e0a-144">You can then use the credentials to check authentication for different URIs, regardless of the original source of the XML.</span></span>  
  
 <span data-ttu-id="96e0a-145">下面的 c # 代码演示如何将 <xref:System.Xml.XmlUrlResolver.Credentials%2A> 属性设置为凭据缓存。</span><span class="sxs-lookup"><span data-stu-id="96e0a-145">The following C# code shows how to set the <xref:System.Xml.XmlUrlResolver.Credentials%2A> property to a credential cache.</span></span>  
  
```csharp  
NetworkCredential myCred = new NetworkCredential(UserName,SecurelyStoredPassword,Domain);   
CredentialCache myCache = new CredentialCache();   
myCache.Add(new Uri("http://www.contoso.com/"), "Basic", myCred);   
myCache.Add(new Uri("http://app.contoso.com/"), "Basic", myCred);  
XmlUrlResolver resolver = new XmlUrlResolver();  
resolver.Credentials = myCache;  
```  
  
   
  
## Examples  
 <span data-ttu-id="96e0a-146">下面的示例创建一个 <xref:System.Xml.XmlUrlResolver> 具有凭据的对象。</span><span class="sxs-lookup"><span data-stu-id="96e0a-146">The following example creates an <xref:System.Xml.XmlUrlResolver> object with credentials.</span></span> <span data-ttu-id="96e0a-147"><xref:System.Xml.XmlReader>使用对象上的凭据 <xref:System.Xml.XmlUrlResolver> 来访问网络资源。</span><span class="sxs-lookup"><span data-stu-id="96e0a-147">The <xref:System.Xml.XmlReader> uses the credentials on the <xref:System.Xml.XmlUrlResolver> object to access a network resource.</span></span>  
  
 [!code-csharp[XmlResolver_Samples#2](~/samples/snippets/csharp/VS_Snippets_Data/XmlResolver_Samples/CS/XmlResolver_Samples.cs#2)]
 [!code-vb[XmlResolver_Samples#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlResolver_Samples/VB/XmlResolver_Samples.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
      </Docs>
    </Member>
    <Member MemberName="GetEntity">
      <MemberSignature Language="C#" Value="public override object? GetEntity (Uri absoluteUri, string? role, Type? ofObjectToReturn);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object GetEntity(class System.Uri absoluteUri, string role, class System.Type ofObjectToReturn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlUrlResolver.GetEntity(System.Uri,System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEntity (absoluteUri As Uri, role As String, ofObjectToReturn As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ GetEntity(Uri ^ absoluteUri, System::String ^ role, Type ^ ofObjectToReturn);" />
      <MemberSignature Language="F#" Value="override this.GetEntity : Uri * string * Type -&gt; obj" Usage="xmlUrlResolver.GetEntity (absoluteUri, role, ofObjectToReturn)" />
      <MemberSignature Language="C#" Value="public override object GetEntity (Uri absoluteUri, string role, Type ofObjectToReturn);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="absoluteUri" Type="System.Uri" />
        <Parameter Name="role" Type="System.String" />
        <Parameter Name="ofObjectToReturn" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="absoluteUri"><span data-ttu-id="96e0a-148">从 <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /> 返回的 URI。</span><span class="sxs-lookup"><span data-stu-id="96e0a-148">The URI returned from <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />.</span></span></param>
        <param name="role"><span data-ttu-id="96e0a-149">当前未使用。</span><span class="sxs-lookup"><span data-stu-id="96e0a-149">Currently not used.</span></span></param>
        <param name="ofObjectToReturn"><span data-ttu-id="96e0a-150">要返回的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="96e0a-150">The type of object to return.</span></span> <span data-ttu-id="96e0a-151">当前实现只返回 <see cref="T:System.IO.Stream" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="96e0a-151">The current implementation only returns <see cref="T:System.IO.Stream" /> objects.</span></span></param>
        <summary><span data-ttu-id="96e0a-152">将 URI 映射到包含实际资源的对象。</span><span class="sxs-lookup"><span data-stu-id="96e0a-152">Maps a URI to an object that contains the actual resource.</span></span></summary>
        <returns><span data-ttu-id="96e0a-153">流对象；如果指定了流以外的类型，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="96e0a-153">A stream object or <see langword="null" /> if a type other than stream is specified.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96e0a-154">如果调用方想要将给定的 URI 映射到包含 URI 所表示的资源的对象，则使用此方法。</span><span class="sxs-lookup"><span data-stu-id="96e0a-154">This method is used when the caller wants to map a given URI to an object that contains the resource that the URI represents.</span></span>  
  
 <span data-ttu-id="96e0a-155">有关此方法的异步版本，请参阅 <xref:System.Xml.XmlUrlResolver.GetEntityAsync%2A> 。</span><span class="sxs-lookup"><span data-stu-id="96e0a-155">For the asynchronous version of this method, see <xref:System.Xml.XmlUrlResolver.GetEntityAsync%2A>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="96e0a-156">应用程序可以 <xref:System.Xml.XmlUrlResolver.GetEntity%2A> 通过实现 IStream <xref:System.Runtime.InteropServices.ComTypes.IStream> 来限制读取的字节数，从而减轻对方法的内存拒绝服务威胁。</span><span class="sxs-lookup"><span data-stu-id="96e0a-156">Your application can mitigate memory denial of service threats to the <xref:System.Xml.XmlUrlResolver.GetEntity%2A> method by implementing IStream <xref:System.Runtime.InteropServices.ComTypes.IStream> to limit the number of bytes read.</span></span> <span data-ttu-id="96e0a-157">这有助于防止恶意代码尝试将无限字节流传递到方法的情况 <xref:System.Xml.XmlUrlResolver.GetEntity%2A> 。</span><span class="sxs-lookup"><span data-stu-id="96e0a-157">This helps guard against situations where malicious code attempts to pass an infinite stream of bytes to the <xref:System.Xml.XmlUrlResolver.GetEntity%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96e0a-158">下面的示例演示了 `GetEntity` 和 <xref:System.Xml.XmlResolver.ResolveUri%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="96e0a-158">The following example demonstrates the `GetEntity` and <xref:System.Xml.XmlResolver.ResolveUri%2A> methods.</span></span>  
  
 [!code-cpp[Classic WebData XmlUrlResolver.ResolveUri Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlUrlResolver.ResolveUri Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlUrlResolver.ResolveUri Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlUrlResolver.ResolveUri Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlUrlResolver.ResolveUri Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlUrlResolver.ResolveUri Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException"><span data-ttu-id="96e0a-159"><paramref name="ofObjectToReturn" /> 既不是 <see langword="null" /> 也不是 <see langword="Stream" /> 类型。</span><span class="sxs-lookup"><span data-stu-id="96e0a-159"><paramref name="ofObjectToReturn" /> is neither <see langword="null" /> nor a <see langword="Stream" /> type.</span></span></exception>
        <exception cref="T:System.UriFormatException"><span data-ttu-id="96e0a-160">指定的 URI 不是一个绝对 URI。</span><span class="sxs-lookup"><span data-stu-id="96e0a-160">The specified URI is not an absolute URI.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="96e0a-161"><paramref name="absoluteUri" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="96e0a-161"><paramref name="absoluteUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Exception"><span data-ttu-id="96e0a-162">存在运行时错误（例如中断的服务器连接）。</span><span class="sxs-lookup"><span data-stu-id="96e0a-162">There is a runtime error (for example, an interrupted server connection).</span></span></exception>
        <altmember cref="T:System.Uri" />
      </Docs>
    </Member>
    <Member MemberName="GetEntityAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;object&gt; GetEntityAsync (Uri absoluteUri, string? role, Type? ofObjectToReturn);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;object&gt; GetEntityAsync(class System.Uri absoluteUri, string role, class System.Type ofObjectToReturn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlUrlResolver.GetEntityAsync(System.Uri,System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEntityAsync (absoluteUri As Uri, role As String, ofObjectToReturn As Type) As Task(Of Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task&lt;System::Object ^&gt; ^ GetEntityAsync(Uri ^ absoluteUri, System::String ^ role, Type ^ ofObjectToReturn);" />
      <MemberSignature Language="F#" Value="override this.GetEntityAsync : Uri * string * Type -&gt; System.Threading.Tasks.Task&lt;obj&gt;" Usage="xmlUrlResolver.GetEntityAsync (absoluteUri, role, ofObjectToReturn)" />
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;object&gt; GetEntityAsync (Uri absoluteUri, string role, Type ofObjectToReturn);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="absoluteUri" Type="System.Uri" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="role" Type="System.String" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="ofObjectToReturn" Type="System.Type" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="absoluteUri"><span data-ttu-id="96e0a-163">从 <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /> 返回的 URI。</span><span class="sxs-lookup"><span data-stu-id="96e0a-163">The URI returned from <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />.</span></span></param>
        <param name="role"><span data-ttu-id="96e0a-164">当前未使用。</span><span class="sxs-lookup"><span data-stu-id="96e0a-164">Currently not used.</span></span></param>
        <param name="ofObjectToReturn"><span data-ttu-id="96e0a-165">要返回的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="96e0a-165">The type of object to return.</span></span> <span data-ttu-id="96e0a-166">当前实现只返回 <see cref="T:System.IO.Stream" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="96e0a-166">The current implementation only returns <see cref="T:System.IO.Stream" /> objects.</span></span></param>
        <summary><span data-ttu-id="96e0a-167">将 URI 异步映射到包含实际资源的对象。</span><span class="sxs-lookup"><span data-stu-id="96e0a-167">Asynchronously maps a URI to an object that contains the actual resource.</span></span></summary>
        <returns><span data-ttu-id="96e0a-168">流对象；如果指定了流以外的类型，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="96e0a-168">A stream object or <see langword="null" /> if a type other than stream is specified.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Proxy">
      <MemberSignature Language="C#" Value="public System.Net.IWebProxy Proxy { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.IWebProxy Proxy" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlUrlResolver.Proxy" />
      <MemberSignature Language="VB.NET" Value="Public Property Proxy As IWebProxy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::IWebProxy ^ Proxy {  void set(System::Net::IWebProxy ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Proxy : System.Net.IWebProxy" Usage="System.Xml.XmlUrlResolver.Proxy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.IWebProxy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="96e0a-169">获取或设置基础 <see cref="T:System.Net.WebRequest" /> 对象的网络代理。</span><span class="sxs-lookup"><span data-stu-id="96e0a-169">Gets or sets the network proxy for the underlying <see cref="T:System.Net.WebRequest" /> object.</span></span></summary>
        <value><span data-ttu-id="96e0a-170">用于访问 Internet 资源的 <see cref="T:System.Net.IWebProxy" />。</span><span class="sxs-lookup"><span data-stu-id="96e0a-170">The <see cref="T:System.Net.IWebProxy" /> to use to access the Internet resource.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveUri">
      <MemberSignature Language="C#" Value="public override Uri ResolveUri (Uri? baseUri, string? relativeUri);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Uri ResolveUri(class System.Uri baseUri, string relativeUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlUrlResolver.ResolveUri(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ResolveUri (baseUri As Uri, relativeUri As String) As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Uri ^ ResolveUri(Uri ^ baseUri, System::String ^ relativeUri);" />
      <MemberSignature Language="F#" Value="override this.ResolveUri : Uri * string -&gt; Uri" Usage="xmlUrlResolver.ResolveUri (baseUri, relativeUri)" />
      <MemberSignature Language="C#" Value="public override Uri ResolveUri (Uri baseUri, string relativeUri);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseUri" Type="System.Uri" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="relativeUri" Type="System.String" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="baseUri"><span data-ttu-id="96e0a-171">用于解析相对 URI 的基 URI。</span><span class="sxs-lookup"><span data-stu-id="96e0a-171">The base URI used to resolve the relative URI.</span></span></param>
        <param name="relativeUri"><span data-ttu-id="96e0a-172">要解析的 URI。</span><span class="sxs-lookup"><span data-stu-id="96e0a-172">The URI to resolve.</span></span> <span data-ttu-id="96e0a-173">URI 可以是绝对的或相对的。</span><span class="sxs-lookup"><span data-stu-id="96e0a-173">The URI can be absolute or relative.</span></span> <span data-ttu-id="96e0a-174">如果是绝对的，此值有效地替换 <paramref name="baseUri" /> 值。</span><span class="sxs-lookup"><span data-stu-id="96e0a-174">If absolute, this value effectively replaces the <paramref name="baseUri" /> value.</span></span> <span data-ttu-id="96e0a-175">如果是相对的，它与 <paramref name="baseUri" /> 组合以构成绝对 URI。</span><span class="sxs-lookup"><span data-stu-id="96e0a-175">If relative, it combines with the <paramref name="baseUri" /> to make an absolute URI.</span></span></param>
        <summary><span data-ttu-id="96e0a-176">从基 URI 和相对 URI 解析绝对 URI。</span><span class="sxs-lookup"><span data-stu-id="96e0a-176">Resolves the absolute URI from the base and relative URIs.</span></span></summary>
        <returns><span data-ttu-id="96e0a-177">绝对 URI；如果不能解析相对 URI，则为 <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="96e0a-177">The absolute URI, or <see langword="null" /> if the relative URI cannot be resolved.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96e0a-178">绝对 URI 可用作与此 URI 相关的所有后续请求的基 URI。</span><span class="sxs-lookup"><span data-stu-id="96e0a-178">The absolute URI can be used as the base URI for any subsequent requests for entities that are relative to this URI.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="96e0a-179"><paramref name="baseUri" /> 为 <see langword="null" /> 或 <paramref name="relativeUri" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="96e0a-179"><paramref name="baseUri" /> is <see langword="null" /> or <paramref name="relativeUri" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="96e0a-180">此方法具有继承要求。</span><span class="sxs-lookup"><span data-stu-id="96e0a-180">This method has an inheritance demand.</span></span> <span data-ttu-id="96e0a-181">需要完全信任才能重写 <see cref="M:System.Xml.XmlUrlResolver.ResolveUri(System.Uri,System.String)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="96e0a-181">Full trust is required to override the <see cref="M:System.Xml.XmlUrlResolver.ResolveUri(System.Uri,System.String)" /> method.</span></span></para></block>
      </Docs>
    </Member>
  </Members>
</Type>
