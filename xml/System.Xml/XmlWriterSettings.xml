<Type Name="XmlWriterSettings" FullName="System.Xml.XmlWriterSettings">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b0234dd9a10f9b1be891393f5fd7ef3f1b81c0fa" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89744515" /></Metadata><TypeSignature Language="C#" Value="public sealed class XmlWriterSettings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XmlWriterSettings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlWriterSettings" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XmlWriterSettings" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlWriterSettings sealed" />
  <TypeSignature Language="F#" Value="type XmlWriterSettings = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System.Xml" FromVersion="4.0.0.0" To="System.Xml.ReaderWriter" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Xml.ReaderWriter" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>指定在由 <see cref="T:System.Xml.XmlWriter" /> 方法创建的 <see cref="Overload:System.Xml.XmlWriter.Create" /> 对象上支持的一组功能。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlWriter.Create%2A>方法是用于获取实例的首选机制 <xref:System.Xml.XmlWriter> 。 <xref:System.Xml.XmlWriter.Create%2A>方法使用 <xref:System.Xml.XmlWriterSettings> 类来指定要在创建的对象中实现哪些功能 <xref:System.Xml.XmlWriter> 。  
  
> [!NOTE]
>  如果要将对象用于 <xref:System.Xml.XmlWriter> <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 方法，则应使用 <xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings%2A> 属性获取 <xref:System.Xml.XmlWriterSettings> 具有正确设置的对象。 这样可以确保所创建的 <xref:System.Xml.XmlWriter> 对象的输出设置是正确的。  
  
 <xref:System.Xml.XmlWriterSettings>类提供控制数据一致性和输出格式的属性。  
  
 对于数据一致性检查和自动更正，请使用以下属性：  
  
|properties|指定|值|默认|  
|--------------|---------------|-----------|-------------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|是否检查字符是否符合 W3C 定义的合法 XML 字符集。|`true` 或 `false`|`true`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|是否检查输出是否为格式正确的 XML 1.0 文档或片段。|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType> (文档级) 、 <xref:System.Xml.ConformanceLevel.Fragment> (段落级别) 或 <xref:System.Xml.ConformanceLevel.Auto> (自动检测) |<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType> (文档级符合性) |  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|调用方法时是否向所有未关闭的元素添加结束标记 <xref:System.Xml.XmlWriter.Close%2A> 。|`true` 或 `false`|`true`|  
  
 若要指定输出格式，请使用以下属性：  
  
|properties|指定|值|默认|  
|--------------|---------------|-----------|-------------|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|要使用的文本编码。|<xref:System.Text.Encoding?displayProperty=nameWithType> 值|<xref:System.Text.Encoding.UTF8?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|是否缩进元素|`true` 或 `false`|`false` (无缩进) |  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|当 (设置为) 时使用的缩进时要使用的字符串 <xref:System.Xml.XmlWriterSettings.Indent%2A> `true` 。|String|两个空格|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|用于分行符的字符串。|String|`\r\n` (回车符、换行) |  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|如何处理换行符。|<xref:System.Xml.NewLineHandling?displayProperty=nameWithType> 值： <xref:System.Xml.NewLineHandling.Entitize> (标准化) 、 <xref:System.Xml.NewLineHandling.Replace> (替换) 或 <xref:System.Xml.NewLineHandling.None> (保持不变) |<xref:System.Xml.NewLineHandling.Replace> (替换为) 指定的字符 <xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|是否在单独的行上写入属性 (在) 时不起作用 <xref:System.Xml.XmlWriterSettings.Indent%2A> `false` 。|`true` 或 `false`|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|是否写入 XML 声明。|`true` 或 `false`|`false`|  
  
   
  
## Examples  
 下面的示例创建一个 <xref:System.Xml.XmlWriter> 写入 XML 文件的，并在新行上写入每个特性。  
  
 [!code-csharp[XmlWriterSettings.NewLineOnAttributes#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/CS/writenewlineattrs.cs#1)]
 [!code-vb[XmlWriterSettings.NewLineOnAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/VB/writenewlineattrs.vb#1)]  
  
 该示例生成以下输出：  
  
```xml  
<order  
  orderID="367A54"  
  date="2001-05-03">  
  <price>19.95</price>  
</order>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriterSettings.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterSettings();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Xml.XmlWriterSettings" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表显示了实例的初始属性值 <xref:System.Xml.XmlWriterSettings> 。  
  
|属性|初始值|  
|--------------|-------------------|  
|<xref:System.Xml.XmlWriterSettings.Async%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`.|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document>.|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|`Encoding.UTF8`.|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|两个空格。|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n` (回车符、换行) 。|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace>.|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`.|  
  
   
  
## Examples  
 下面的示例创建一个 <xref:System.Xml.XmlWriter> 对象，该对象使用制表符进行缩进。  
  
 [!code-csharp[XmlWriterSettings.Indent#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.Indent/CS/writeindent.cs#1)]
 [!code-vb[XmlWriterSettings.Indent#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.Indent/VB/writeindent.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Async">
      <MemberSignature Language="C#" Value="public bool Async { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Async" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.Async" />
      <MemberSignature Language="VB.NET" Value="Public Property Async As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Async { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Async : bool with get, set" Usage="System.Xml.XmlWriterSettings.Async" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否可对特定的 <see cref="T:System.Xml.XmlWriter" /> 实例使用异步 <see cref="T:System.Xml.XmlWriter" /> 方法。</summary>
        <value>则可以使用异步方法，则为 <see langword="true" />；否则，为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `true` <xref:System.Xml.XmlWriter> 如果要 <xref:System.Xml.XmlWriter> 在该实例上使用异步方法，则在创建新实例时必须将此值设置为。 <xref:System.Xml.XmlWriter>创建实例后， <xref:System.Xml.XmlWriterSettings.Async%2A> 属性为只读。 此属性的默认值为 `false`。  
  
 重载将忽略此标志 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 。 这意味着，如果基于现有创建新 <xref:System.Xml.XmlWriter> <xref:System.Xml.XmlWriter> 的，则异步行为取决于输入 <xref:System.Xml.XmlWriter> ，不能使用 <xref:System.Xml.XmlWriterSettings.Async%2A> 标志来更改异步行为。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/csharp/async">异步编程 (c # ) </related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/concepts/async/">异步编程与 Async 和 Await (Visual Basic) </related>
      </Docs>
    </Member>
    <Member MemberName="CheckCharacters">
      <MemberSignature Language="C#" Value="public bool CheckCharacters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckCharacters" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.CheckCharacters" />
      <MemberSignature Language="VB.NET" Value="Public Property CheckCharacters As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CheckCharacters { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CheckCharacters : bool with get, set" Usage="System.Xml.XmlWriterSettings.CheckCharacters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否应检查 XML 编写器以确保文档中的所有字符都符合 W3C [XML 1.0 建议](https://www.w3.org/TR/REC-xml/#charsets)中的“2.2 字符”部分。</summary>
        <value>如果进行字符检查，则为 <see langword="true" />；否则，为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 <xref:System.Xml.XmlWriter> 对象支持字符检查，则在 W3C [XML 1.0 建议](https://www.w3.org/TR/REC-xml/#charsets)的 "2.2 字符" 部分指定的合法 XML 字符范围之外的任何字符时，将引发异常。  
  
 字符检查不包括检查 XML 名称中的非法字符或检查所有 XML 名称是否有效。 这些检查是一致性检查的一部分，始终执行。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Xml.XmlWriterSettings Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlWriterSettings Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriterSettings.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As XmlWriterSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlWriterSettings ^ Clone();" />
      <MemberSignature Language="F#" Value="member this.Clone : unit -&gt; System.Xml.XmlWriterSettings" Usage="xmlWriterSettings.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriterSettings</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建 <see cref="T:System.Xml.XmlWriterSettings" /> 实例的副本。</summary>
        <returns>克隆的 <see cref="T:System.Xml.XmlWriterSettings" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlWriterSettings>可以修改克隆的对象，而不会影响原始对象上的设置。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloseOutput">
      <MemberSignature Language="C#" Value="public bool CloseOutput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CloseOutput" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.CloseOutput" />
      <MemberSignature Language="VB.NET" Value="Public Property CloseOutput As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CloseOutput { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CloseOutput : bool with get, set" Usage="System.Xml.XmlWriterSettings.CloseOutput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示调用 <see cref="M:System.Xml.XmlWriter.Close" /> 方法时 <see cref="T:System.Xml.XmlWriter" /> 是否也应关闭基础流或 <see cref="T:System.IO.TextWriter" />。</summary>
        <value>如果还应该关闭该基础流或 <see cref="T:System.IO.TextWriter" />，则为 <see langword="true" />；否则，为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果希望将 XML 写入流，然后在完成写入后将额外信息添加到流的末尾，则此设置非常有用 <xref:System.Xml.XmlWriter> 。  
  
 此属性仅适用于将 <xref:System.Xml.XmlWriter> XML 内容输出到流或的实例 <xref:System.IO.TextWriter> ; 否则，将忽略此设置。  
  
   
  
## Examples  
 下面的示例将 XML 片段写入内存流。  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConformanceLevel">
      <MemberSignature Language="C#" Value="public System.Xml.ConformanceLevel ConformanceLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ConformanceLevel ConformanceLevel" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.ConformanceLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ConformanceLevel As ConformanceLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::ConformanceLevel ConformanceLevel { System::Xml::ConformanceLevel get(); void set(System::Xml::ConformanceLevel value); };" />
      <MemberSignature Language="F#" Value="member this.ConformanceLevel : System.Xml.ConformanceLevel with get, set" Usage="System.Xml.XmlWriterSettings.ConformanceLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.ConformanceLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置的 XML 写入器检查 XML 输出的一致性级别。</summary>
        <value>指定一致性级别（文档、片段或自动检测）的枚举值之一。 默认值为 <see cref="F:System.Xml.ConformanceLevel.Document" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A?displayProperty=nameWithType>属性将 XML 编写器配置为检查并确保所写入的流符合一组特定规则。 可以检查 XML 数据是否符合格式正确的 XML 1.0 文档或文档片段的规则。 下表描述了这三个设置。 默认值为文档级一致性。  
  
|设置|说明|  
|-------------|-----------------|  
|<xref:System.Xml.ConformanceLevel.Document>|确保 XML 输出符合 [格式正确的 XML 1.0 文档的规则](https://www.w3.org/TR/REC-xml/#sec-well-formed) ，并可由任何符合要求的处理器处理。<br /><br /> 文档一致性检查包含大部分片段级别检查，并确保以下各项：<br /><br /> -顶级项没有 XML 声明、DTD、元素、注释、空白或处理指令以外的任何节点。<br />-XML 数据有且只有一个顶级元素节点。<br /><br /> XML 编写器不会分析写入的 DTD 信息。 用户负责确保 DTD 格式正确。|  
|<xref:System.Xml.ConformanceLevel.Fragment>|确保 XML 输出符合 [格式正确的 xml 1.0 文档片段的规则](https://www.w3.org/TR/REC-xml/#wf-entities)。<br /><br /> 此设置接受在顶级包含多个根元素或文本节点的 XML 数据。 此检查级别确保任何处理器可以将正在读取的流作为 XML 1.0 外部分析的实体使用。<br /><br /> 文档片段中不允许使用 DTD 信息。|  
|<xref:System.Xml.ConformanceLevel.Auto>|指定 XML 编写器应根据传入数据确定一致性检查的级别。 如果你不知道生成的 XML 是格式正确的 XML 文档还是片段，则此设置可能很有用。<br /><br /> 在下列情况下应用文档一致性检查：<br /><br /> -如果 <xref:System.Xml.XmlWriter.WriteStartDocument%2A> 调用方法，则为。<br />-如果写入 DTD 信息，则为。<br /><br /> 如果 XML 数据包含以下其中一项，则应用片段一致性检查：<br /><br /> 根级别的文本、CDATA 或 EntityReference 节点。<br />-根级别有多个元素。<br />-根级别上没有元素。<br /><br /> 如果存在冲突，例如在根级别尝试写入文本节点和 DTD 时，将引发 <xref:System.Xml.XmlException>。<br /><br /> 如果你正在包装另一个 <xref:System.Xml.XmlWriter> 对象，则外部对象不执行任何其他的一致性检查; 这将留给基础对象。|  
  
 如果 XML 编写器检测到任何会违反指定一致性级别的信息，则会引发异常。 在某些情况下，XML 编写器会自动纠正一致性错误。 例如，编写器关闭未关闭的属性，而不引发异常。 下表显示了如何在每个设置中处理各种一致性冲突。  
  
|条件|<xref:System.Xml.ConformanceLevel.Document>|<xref:System.Xml.ConformanceLevel.Fragment>|<xref:System.Xml.ConformanceLevel.Auto>|  
|---------------|---------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|  
|找到 DTD 信息。|不违反此设置。 但是，XML 编写器不会检查 DTD;用户必须确保 DTD 格式正确。|<xref:System.Xml.XmlException> 引发。|应用文档一致性检查。|  
|调用 <xref:System.Xml.XmlWriter.WriteStartDocument%2A>。|不视为违反此设置。|<xref:System.Xml.XmlException> 引发。|应用文档一致性检查。|  
|多次调用了 <xref:System.Xml.XmlWriter.WriteStartDocument%2A>。|<xref:System.Xml.XmlException> 引发。|<xref:System.Xml.XmlException> 引发。|<xref:System.Xml.XmlException> 引发。|  
|文本值显示在顶层 (不在元素或属性节点下) 。|<xref:System.Xml.XmlException> 引发。|不视为冲突。|应用片断一致性检查。|  
|多个元素或没有元素出现在顶级。|<xref:System.Xml.XmlException> 引发。|不视为冲突。|应用片断一致性检查。|  
|顶级项为空白。|不视为冲突。|不视为冲突。|不视为冲突。|  
|<xref:System.Xml.XmlWriter.WriteEndAttribute%2A> 不调用来结束特性节点。|由 XML 编写器修复。|由 XML 编写器修复。|由 XML 编写器修复。|  
|XML 编写器处于错误嵌套状态 (例如， <xref:System.Xml.XmlWriter.WriteStartElement%2A> 调用后跟 <xref:System.Xml.XmlWriter.WriteEndAttribute%2A>) 。|<xref:System.Xml.XmlException> 引发。|<xref:System.Xml.XmlException> 引发。|<xref:System.Xml.XmlException> 引发。|  
|顶级项是一个属性。|<xref:System.Xml.XmlException> 引发。|<xref:System.Xml.XmlException> 引发。|<xref:System.Xml.XmlException> 引发。|  
|发现多个连续的文本节点。|不视为冲突，但用户需要负责连接文本节点。|不视为冲突，但用户需要负责连接文本节点。|不视为冲突，但用户需要负责连接文本节点。|  
|相同的命名空间前缀在元素中声明两次。|XML 编写器为第二个命名空间生成新的前缀。|XML 编写器为第二个命名空间生成新的前缀。|XML 编写器为第二个命名空间生成新的前缀。|  
|<xref:System.Xml.XmlWriter.WriteStartElement%2A> 指定在该范围内未声明的前缀和命名空间，或与其他命名空间关联的前缀。|XML 编写器写入必要的命名空间节点。|XML 编写器写入必要的命名空间节点。|XML 编写器写入必要的命名空间节点。|  
|<xref:System.Xml.XmlWriter.WriteStartAttribute%2A> 指定在该范围内未声明的前缀和命名空间。|XML 编写器写入必要的命名空间节点。|XML 编写器写入必要的命名空间节点。|XML 编写器写入必要的命名空间节点。|  
|<xref:System.Xml.XmlWriter.WriteStartAttribute%2A> 指定前缀和命名空间，但前缀与不同的范围内命名空间相关联。|XML 编写器忽略指定的前缀，并查找正确的前缀或生成新的前缀。|XML 编写器忽略指定的前缀，并查找正确的前缀或生成新的前缀。|XML 编写器忽略指定的前缀，并查找正确的前缀或生成新的前缀。|  
|<xref:System.Xml.XmlWriter.WriteQualifiedName%2A> 用于通过使用范围中不存在的命名空间来写入元素内容。|<xref:System.Xml.XmlException> 引发。|<xref:System.Xml.XmlException> 引发。|<xref:System.Xml.XmlException> 引发。|  
|<xref:System.Xml.XmlWriter.WriteQualifiedName%2A> 用于通过使用范围中不存在的命名空间来写入特性内容。|XML 编写器写入必要的命名空间声明。|XML 编写器写入必要的命名空间声明。|XML 编写器写入必要的命名空间声明。|  
|该 `xml:space` 属性不包含有效的值。|<xref:System.Xml.XmlException> 引发。|<xref:System.Xml.XmlException> 引发。|<xref:System.Xml.XmlException> 引发。|  
|遇到无效的名称。|<xref:System.Xml.XmlException> 引发。|<xref:System.Xml.XmlException> 引发。|<xref:System.Xml.XmlException> 引发。|  
|`xml`前缀与 URI 不匹配。|XML 编写器不会检查是否有这种类型的冲突。|XML 编写器不会检查是否有这种类型的冲突。|XML 编写器不会检查是否有这种类型的冲突。|  
|`xml`前缀与 URI 不匹配 http://www.w3.org/XML/1998/namespace 。|<xref:System.Xml.XmlException> 引发。|<xref:System.Xml.XmlException> 引发。|<xref:System.Xml.XmlException> 引发。|  
|`xmlns`前缀或本地名称与 URI 不匹配。|XML 编写器不会检查是否有这种类型的冲突。|XML 编写器不会检查是否有这种类型的冲突。|XML 编写器不会检查是否有这种类型的冲突。|  
|`xmlns`前缀或本地名称与 URI 不匹配 http://www.w3.org/2000/xmlns 。|<xref:System.Xml.XmlException> 引发。|<xref:System.Xml.XmlException> 引发。|<xref:System.Xml.XmlException> 引发。|  
  
   
  
## Examples  
 下面的示例将 XML 片段写入内存流。  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DoNotEscapeUriAttributes">
      <MemberSignature Language="C#" Value="public bool DoNotEscapeUriAttributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DoNotEscapeUriAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.DoNotEscapeUriAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Property DoNotEscapeUriAttributes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DoNotEscapeUriAttributes { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DoNotEscapeUriAttributes : bool with get, set" Usage="System.Xml.XmlWriterSettings.DoNotEscapeUriAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="T:System.Xml.XmlWriter" /> 是否未转义 URI 属性。</summary>
        <value><see langword="true" /> 如果 <see cref="T:System.Xml.XmlWriter" /> 未转义 URI 属性，则为; 否则为 <see langword="false" /> 。 默认值为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding Encoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Encoding : System.Text.Encoding with get, set" Usage="System.Xml.XmlWriterSettings.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要使用的文本编码的类型。</summary>
        <value>要使用的文本编码。 默认值为 <see langword="Encoding.UTF8" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlWriter>同时对字符的缓冲区进行编码，而不是按字符对字符进行编码。 <xref:System.Xml.XmlWriter.Flush%2A>如果遇到任何编码错误，则调用方法时将引发异常。  
  
 <xref:System.Xml.XmlWriterSettings.Encoding%2A>属性仅适用于用指定的 <xref:System.Xml.XmlWriter> <xref:System.IO.Stream> 或用指定的文件名创建的实例。 如果 <xref:System.Xml.XmlWriter> 使用指定的创建实例 <xref:System.IO.TextWriter> ，则 <xref:System.Xml.XmlWriterSettings.Encoding%2A> 会通过基础的编码重写属性 <xref:System.IO.TextWriter> 。 例如，如果将此属性设置为 Unicode (UTF-16) 特定的 <xref:System.Xml.XmlWriter> ，但基础编写器是 <xref:System.IO.StreamWriter> 从) 派生的 (， <xref:System.IO.TextWriter> 并且其编码设置为 UTF8，则输出将为 utf-8 编码。  
  
 如果该 <xref:System.Xml.XmlWriter> 实例是用其他 output 参数创建的，则 <xref:System.Xml.XmlWriterSettings.Encoding%2A> 忽略该属性。  
  
 如下示例中：  
  
-   <xref:System.Xml.XmlWriterSettings.Encoding%2A> 的默认值为 `Encoding.UTF8`。  
  
-   <xref:System.IO.StreamWriter>设置为 `Encoding.Unicode` ，并且的 <xref:System.IO.StreamWriter> 编码会重写该 <xref:System.Xml.XmlWriterSettings.Encoding%2A> 设置。  
  
-   输出将为 `Encoding.Unicode` 。  
  
```csharp  
using (StreamWriter output =  
    new StreamWriter(new FileStream("Xml01.xml", FileMode.Create), Encoding.Unicode))  
{  
    using (XmlWriter xmlWriter =  
        XmlWriter.Create(output, new XmlWriterSettings()))  
    {  
        xmlWriter.WriteStartDocument();  
        xmlWriter.WriteStartElement("Root");  
        xmlWriter.WriteEndElement();  
        xmlWriter.WriteEndDocument();  
    }  
}  
```  
  
> [!IMPORTANT]
>  不要接受 <xref:System.Text.Encoding> 来自不受信任源的对象。  
  
   
  
## Examples  
 下面的示例演示如何设置 `Enconding` 属性：  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XML_Migration/CS/migration.cs#6)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XML_Migration/VB/migration.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Indent">
      <MemberSignature Language="C#" Value="public bool Indent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Indent" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.Indent" />
      <MemberSignature Language="VB.NET" Value="Public Property Indent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Indent { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Indent : bool with get, set" Usage="System.Xml.XmlWriterSettings.Indent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置指示是否缩进元素的值。</summary>
        <value>如果将各元素分别写入新行并将其缩进，则为 <see langword="true" />；否则，为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性仅适用于 <xref:System.Xml.XmlWriter> 输出文本内容的实例; 否则，将忽略此设置。  
  
 只要元素不包含混合内容，就会缩进元素。 <xref:System.Xml.XmlWriter.WriteString%2A> <xref:System.Xml.XmlWriter.WriteWhitespace%2A> 调用或方法写出混合元素内容后，将 <xref:System.Xml.XmlWriter> 停止缩进。 当混合内容元素关闭之后，缩进会恢复。  
  
   
  
## Examples  
 下面的示例创建一个 <xref:System.Xml.XmlWriter> 对象，该对象使用制表符进行缩进。  
  
 [!code-csharp[XmlWriterSettings.Indent#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.Indent/CS/writeindent.cs#1)]
 [!code-vb[XmlWriterSettings.Indent#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.Indent/VB/writeindent.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndentChars">
      <MemberSignature Language="C#" Value="public string IndentChars { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IndentChars" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.IndentChars" />
      <MemberSignature Language="VB.NET" Value="Public Property IndentChars As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IndentChars { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.IndentChars : string with get, set" Usage="System.Xml.XmlWriterSettings.IndentChars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置缩进时要使用的字符串。 在 <see cref="P:System.Xml.XmlWriterSettings.Indent" /> 属性设置为 <see langword="true" /> 时使用此设置。</summary>
        <value>缩进时要使用的字符串。 它可以设置为任何字符串值。 但是，为了确保 XML 有效，应该只指定有效的空格字符，例如空格、制表符、回车符或换行符。 默认值为两个空格。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性仅适用于 <xref:System.Xml.XmlWriter> 输出文本内容的实例; 否则，将忽略此设置。 <xref:System.Xml.XmlWriter>如果缩进字符将导致无效的 XML，则会引发异常。  
  
   
  
## Examples  
 下面的示例创建一个 <xref:System.Xml.XmlWriter> 对象，该对象使用制表符进行缩进。  
  
 [!code-csharp[XmlWriterSettings.Indent#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.Indent/CS/writeindent.cs#1)]
 [!code-vb[XmlWriterSettings.Indent#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.Indent/VB/writeindent.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">分配给 <see cref="P:System.Xml.XmlWriterSettings.IndentChars" /> 的值为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="NamespaceHandling">
      <MemberSignature Language="C#" Value="public System.Xml.NamespaceHandling NamespaceHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.NamespaceHandling NamespaceHandling" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NamespaceHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property NamespaceHandling As NamespaceHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::NamespaceHandling NamespaceHandling { System::Xml::NamespaceHandling get(); void set(System::Xml::NamespaceHandling value); };" />
      <MemberSignature Language="F#" Value="member this.NamespaceHandling : System.Xml.NamespaceHandling with get, set" Usage="System.Xml.XmlWriterSettings.NamespaceHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.NamespaceHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示在写入 XML 内容时 <see cref="T:System.Xml.XmlWriter" /> 是否应移除重复的命名空间声明。 写入器的默认行为是输出写入器的命名空间解析程序中存在的所有命名空间声明。</summary>
        <value>用于指定是否在 <see cref="T:System.Xml.NamespaceHandling" /> 中移除重复的命名空间声明的 <see cref="T:System.Xml.XmlWriter" /> 枚举。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewLineChars">
      <MemberSignature Language="C#" Value="public string NewLineChars { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NewLineChars" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NewLineChars" />
      <MemberSignature Language="VB.NET" Value="Public Property NewLineChars As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NewLineChars { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NewLineChars : string with get, set" Usage="System.Xml.XmlWriterSettings.NewLineChars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要用于换行符的字符串。</summary>
        <value>要用于换行符的字符串。 它可以设置为任何字符串值。 但是，为了确保 XML 有效，应该只指定有效的空格字符，例如空格、制表符、回车符或换行符。 默认值为 <c>\r\n</c> (回车符、换行) 。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性仅适用于 <xref:System.Xml.XmlWriter> 输出文本内容的实例; 否则，将忽略此设置。 <xref:System.Xml.XmlWriter>如果换行符导致无效的 XML，则会引发异常。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">分配给 <see cref="P:System.Xml.XmlWriterSettings.NewLineChars" /> 的值为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="NewLineHandling">
      <MemberSignature Language="C#" Value="public System.Xml.NewLineHandling NewLineHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.NewLineHandling NewLineHandling" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NewLineHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property NewLineHandling As NewLineHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::NewLineHandling NewLineHandling { System::Xml::NewLineHandling get(); void set(System::Xml::NewLineHandling value); };" />
      <MemberSignature Language="F#" Value="member this.NewLineHandling : System.Xml.NewLineHandling with get, set" Usage="System.Xml.XmlWriterSettings.NewLineHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.NewLineHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否将输出中的换行符规范化。</summary>
        <value><see cref="T:System.Xml.NewLineHandling" /> 值之一。 默认值为 <see cref="F:System.Xml.NewLineHandling.Replace" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 写入文本内容或属性值时，将应用此设置。 下面对每个 <xref:System.Xml.NewLineHandling> 值进行了说明：  
  
-   此 <xref:System.Xml.NewLineHandling.Entitize> 设置通知 <xref:System.Xml.XmlWriter> 替换新行字符，该字符将不会通过包含字符实体的正常化进行保留 <xref:System.Xml.XmlReader> 。 这在使用规范化读取输出的往返过程中非常有用 <xref:System.Xml.XmlReader> 。 当在中进行舍入时，其他规范化规则适用于属性值 `\t` ，在 `\n` `\r` 中规范化时，将替换为属性值中的空格 <xref:System.Xml.XmlReader> 。  
  
-   此 <xref:System.Xml.NewLineHandling.Replace> 设置告诉将 <xref:System.Xml.XmlWriter> 新行字符替换为 `\r\n` ，这是 Microsoft Windows 操作系统使用的新行格式。 这有助于确保记事本或 Microsoft Word 应用程序可以正确地显示文件。 此设置还将属性中的新行替换为字符实体，以保留字符。 这是默认值。  
  
-   <xref:System.Xml.NewLineHandling.None>设置将告知 <xref:System.Xml.XmlWriter> 输入保持不变。 如果不想进行任何新行处理，则使用此设置。 当通过不 <xref:System.Xml.XmlReader> 执行任何规范化 (例如，使用默认设置的来读取输出时，这非常有用 <xref:System.Xml.XmlTextReader> 。 )   
  
 下表显示了 <xref:System.Xml.XmlWriter.WriteString%2A> 随输入值提供方法时的方法的输出，具体取决于 <xref:System.Xml.XmlWriterSettings.NewLineHandling%2A> 属性设置。 这些表显示了写入文本内容时以及写入特性值时的输出。  
  
 `Text Node Value:`  
  
||！|\n|\r|\t|  
|-|------------|---------|---------|---------|  
|对|&#D; \n|\n|&#D;|\t|  
|Replace|！|！|！|\t|  
|无|！|\n|\r|\t|  
  
 `Attribute Value:`  
  
||！|\n|\r|\t|  
|-|------------|---------|---------|---------|  
|对|&#D;&#A;|&#A;|&#D;|&\#900|  
|Replace|&#D;&#A;|&#A;|&#D;|&\#900|  
|无|！|\n|\r|\t|  
  
> [!NOTE]
>  在 <xref:System.Xml.XmlWriter> CDATA 节、注释或处理指令中写入内容时，具有以下行为。 永远不会将新行替换为它们的字符实体，即使将 <xref:System.Xml.XmlWriterSettings.NewLineHandling%2A> 属性设置为也是如此 <xref:System.Xml.NewLineHandling.Entitize> 。 这是因为，在 CDATA 节、注释或处理指令中不能识别字符实体。 如果 <xref:System.Xml.XmlWriterSettings.NewLineHandling%2A> 将属性设置为 <xref:System.Xml.NewLineHandling.None> 或，则行为与 <xref:System.Xml.NewLineHandling.Replace> 写入文本节点值时的行为相同。  
  
 下表描述了规范化 <xref:System.Xml.XmlReader> 为每个空白输入返回的内容。 有关详细信息，请参阅 W3C [XML 1.0 建议](https://www.w3.org/TR/REC-xml/)的2.11 和3.3.3 节。  
  
> [!NOTE]
>  规范化读取器是 <xref:System.Xml.XmlReader> 通过方法创建的任何对象 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 。 这些对象始终执行换行符规范化和属性的完全规范化。 <xref:System.Xml.XmlTextReader>如果对象的 <xref:System.Xml.XmlTextReader.Normalization%2A> 属性设置为，则该对象也可以是规范化读取器 `true` 。  
  
||！|\n|\r|\t|  
|-|------------|---------|---------|---------|  
|文本节点值|\n|\n|\n|\t|  
|特性值|单个空格|单个空格|单个空格|单个空格|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewLineOnAttributes">
      <MemberSignature Language="C#" Value="public bool NewLineOnAttributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NewLineOnAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NewLineOnAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Property NewLineOnAttributes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NewLineOnAttributes { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.NewLineOnAttributes : bool with get, set" Usage="System.Xml.XmlWriterSettings.NewLineOnAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否在新行上写入属性。</summary>
        <value>如果将特性写入单独的行，则为 <see langword="true" />；否则，为 <see langword="false" />。 默认值为 <see langword="false" />。  
  
 <block subset="none" type="note"><para>  
 如果 <see cref="P:System.Xml.XmlWriterSettings.Indent" /> 属性值为 <see langword="false" />，则此设置无效。  
  
</para></block>  
  
 如果 <see cref="P:System.Xml.XmlWriterSettings.NewLineOnAttributes" /> 设置为 <see langword="true" />，则每个属性都会写入到一个新行并应用一个额外的缩进级别。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性仅适用于 <xref:System.Xml.XmlWriter> 输出文本内容的实例; 否则，将忽略此设置。  
  
   
  
## Examples  
 下面的示例创建一个 <xref:System.Xml.XmlWriter> 写入 XML 文件的，并在新行上写入每个特性。  
  
 [!code-csharp[XmlWriterSettings.NewLineOnAttributes#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/CS/writenewlineattrs.cs#1)]
 [!code-vb[XmlWriterSettings.NewLineOnAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/VB/writenewlineattrs.vb#1)]  
  
 该示例生成以下输出：  
  
```xml  
<order  
  orderID="367A54"  
  date="2001-05-03">  
  <price>19.95</price>  
</order>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OmitXmlDeclaration">
      <MemberSignature Language="C#" Value="public bool OmitXmlDeclaration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OmitXmlDeclaration" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.OmitXmlDeclaration" />
      <MemberSignature Language="VB.NET" Value="Public Property OmitXmlDeclaration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OmitXmlDeclaration { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.OmitXmlDeclaration : bool with get, set" Usage="System.Xml.XmlWriterSettings.OmitXmlDeclaration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否省略 XML 声明。</summary>
        <value>如果省略 XML 声明，则为 <see langword="true" />；否则，为 <see langword="false" />。 默认值为 <see langword="false" />，即编写 XML 声明。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性仅适用于 <xref:System.Xml.XmlWriter> 输出文本内容的实例; 否则，将忽略此设置。  
  
 如果 <xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A> 设置为，则将 `false` 自动写入 XML 声明  
  
 如果设置为，则始终编写 XML 声明 <xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A> <xref:System.Xml.ConformanceLevel.Document> ，即使将设置为也是如此 <xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A> `true` 。  
  
 如果设置为，则不会编写 XML 声明 <xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A> <xref:System.Xml.ConformanceLevel.Fragment> 。 您可以调用 <xref:System.Xml.XmlWriter.WriteProcessingInstruction%2A> 来显式写出 XML 声明。  
  
   
  
## Examples  
 下面的示例将 XML 片段写入内存流。  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputMethod">
      <MemberSignature Language="C#" Value="public System.Xml.XmlOutputMethod OutputMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlOutputMethod OutputMethod" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.OutputMethod" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OutputMethod As XmlOutputMethod" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlOutputMethod OutputMethod { System::Xml::XmlOutputMethod get(); };" />
      <MemberSignature Language="F#" Value="member this.OutputMethod : System.Xml.XmlOutputMethod" Usage="System.Xml.XmlWriterSettings.OutputMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlOutputMethod</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用于串行化 <see cref="T:System.Xml.XmlWriter" /> 输出的方法。</summary>
        <value><see cref="T:System.Xml.XmlOutputMethod" /> 值之一。 默认值为 <see cref="F:System.Xml.XmlOutputMethod.Xml" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性指定用于序列化输出的方法。 可以使用 HTML 规则、XML 1.0 规则等对输出进行序列化。 此设置由 XSLT 处理器设置，由 Visual Studio 在内部使用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriterSettings.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="xmlWriterSettings.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将设置类的成员重置为各自的默认值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表显示了实例的默认属性值 <xref:System.Xml.XmlWriterSettings> 。  
  
|properties|初始值|  
|--------------|-------------------|  
|<xref:System.Xml.XmlWriterSettings.Async%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`.|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document>.|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|`Encoding.UTF8`.|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|两个空格。|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n`.|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace>.|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteEndDocumentOnClose">
      <MemberSignature Language="C#" Value="public bool WriteEndDocumentOnClose { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WriteEndDocumentOnClose" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose" />
      <MemberSignature Language="VB.NET" Value="Public Property WriteEndDocumentOnClose As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool WriteEndDocumentOnClose { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.WriteEndDocumentOnClose : bool with get, set" Usage="System.Xml.XmlWriterSettings.WriteEndDocumentOnClose" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示在调用 <see cref="M:System.Xml.XmlWriter.Close" /> 方法时 <see cref="T:System.Xml.XmlWriter" /> 是否会向所有未关闭的元素标记添加结束标记。</summary>
        <value>如果将抛售所有未关闭元素标记，则为 <see langword="true" />；否则，为 <see langword="false" />。 默认值是 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果将此标志设置为 `false` ，则输出 XML 文件的格式可能不正确。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
