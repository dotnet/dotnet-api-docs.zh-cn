<Type Name="Enlistment" FullName="System.Transactions.Enlistment">
  <Metadata><Meta Name="ms.openlocfilehash" Value="acf214860c2fae6c11239d73eb79640d3229c102" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89811946" /></Metadata><TypeSignature Language="C#" Value="public class Enlistment" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Enlistment extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Transactions.Enlistment" />
  <TypeSignature Language="VB.NET" Value="Public Class Enlistment" />
  <TypeSignature Language="C++ CLI" Value="public ref class Enlistment" />
  <TypeSignature Language="F#" Value="type Enlistment = class" />
  <AssemblyInfo>
    <AssemblyName>System.Transactions</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Transactions.Local</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Transactions.Local" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>促进登记的事务参与者和事务管理器之间在事务的最后阶段中的通信。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当 <xref:System.Transactions.Transaction.EnlistVolatile%2A> <xref:System.Transactions.Transaction.EnlistDurable%2A> 调用对象的和方法 <xref:System.Transactions.Transaction> 以在事务中登记参与者时，它们将返回描述登记的此对象。  
  
 在事务提交的最后阶段，事务管理器将此对象传递到一个资源管理器，该管理器实现 <xref:System.Transactions.IEnlistmentNotification> 已在事务中登记的接口。 具体而言，事务管理器将调用 <xref:System.Transactions.IEnlistmentNotification.Commit%2A> 参与者的或 <xref:System.Transactions.IEnlistmentNotification.Rollback%2A> 方法，具体取决于后者是决定提交还是回滚事务。 参与者应调用 <xref:System.Transactions.Enlistment.Done%2A> 此对象的方法，以使事务管理器知道它已完成其工作。  
  
 在 <xref:System.Transactions.Enlistment.Done%2A> 准备阶段中调用方法之前，它可以随时调用方法 <xref:System.Transactions.PreparingEnlistment.Prepared%2A> 。  这样，登记就会强制转换为只读投票，这意味着它会在事务上提交，但不需要接收最终结果。 请注意，在 <xref:System.Transactions.Enlistment.Done%2A> 调用方法后，登记的参与者不会从事务管理器接收任何进一步的通知。  
  
   
  
## Examples  
 下面的示例演示接口的实现 <xref:System.Transactions.IEnlistmentNotification> ，以及何时 <xref:System.Transactions.Enlistment.Done%2A> 应调用方法。  
  
 [!code-csharp[Tx_Enlist#2](~/samples/snippets/csharp/VS_Snippets_CFX/tx_enlist/cs/enlist.cs#2)]
 [!code-vb[Tx_Enlist#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/tx_enlist/vb/enlist.vb#2)]  
  
 ]]></format>
    </remarks>
    <threadsafe>此类型是线程安全的。</threadsafe>
    <altmember cref="T:System.Transactions.PreparingEnlistment" />
    <altmember cref="T:System.Transactions.IEnlistmentNotification" />
    <related type="Article" href="/dotnet/framework/data/transactions/enlisting-resources-as-participants-in-a-transaction">在事务中将资源登记为参与者</related>
  </Docs>
  <Members>
    <Member MemberName="Done">
      <MemberSignature Language="C#" Value="public void Done ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Done() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Enlistment.Done" />
      <MemberSignature Language="VB.NET" Value="Public Sub Done ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Done();" />
      <MemberSignature Language="F#" Value="member this.Done : unit -&gt; unit" Usage="enlistment.Done " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>指示事务参与者已完成其工作。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在事务提交的最后阶段，事务管理器将调用 <xref:System.Transactions.IEnlistmentNotification.Commit%2A> <xref:System.Transactions.IEnlistmentNotification.Rollback%2A> 参与者的或 <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> 方法，具体取决于是否提交或回滚事务。 资源管理器应执行完成事务所需的任何工作，然后通过对参数调用方法来通知事务管理器已完成 <xref:System.Transactions.Enlistment.Done%2A> `enlistment` 。  
  
 如果资源管理器已登记持久，但未通过调用方法做出响应 <xref:System.Transactions.Enlistment.Done%2A> ，则事务管理器无法确定资源管理器是否已收到相应的通知调用。 因此，事务管理器会继续等待响应并维护与此事务相关的信息。  如果 <xref:System.Transactions.Enlistment.Done%2A> 从不调用，则此信息会无限期保留在内存中或系统范围内的资源中。 这将导致无法回收资源。 对于分布式事务，此操作最终可能会填充 MSDTC 日志来暂停 MSDTC 进程。 如果事务是由管理的，则会 <xref:System.Transactions> 导致资源管理器进程的内存消耗逐步增加。 因此，在 <xref:System.Transactions.Enlistment.Done%2A> 资源管理器完成准备工作后，调用方法非常重要。  
  
 在 <xref:System.Transactions.Enlistment.Done%2A> 准备阶段中调用方法之前，它可以随时调用方法 <xref:System.Transactions.PreparingEnlistment.Prepared%2A> 。 这样，登记就会强制转换为只读投票，这意味着它会在事务上提交，但不需要接收最终结果。 请注意，在调用此方法后，登记的参与者将不会从事务管理器接收更多通知。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Transactions.PreparingEnlistment" />
        <altmember cref="T:System.Transactions.IEnlistmentNotification" />
        <related type="Article" href="/dotnet/framework/data/transactions/enlisting-resources-as-participants-in-a-transaction">在事务中将资源登记为参与者</related>
      </Docs>
    </Member>
  </Members>
</Type>
