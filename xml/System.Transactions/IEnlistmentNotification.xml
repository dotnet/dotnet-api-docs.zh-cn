<Type Name="IEnlistmentNotification" FullName="System.Transactions.IEnlistmentNotification">
  <Metadata><Meta Name="ms.openlocfilehash" Value="16ecff6e491b37458e455bfc9b15800cbfba9cf7" /><Meta Name="ms.sourcegitcommit" Value="9506e50ec7beb4fa30206b9840dc546b035a6600" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/23/2020" /><Meta Name="ms.locfileid" Value="83963234" /></Metadata><TypeSignature Language="C#" Value="public interface IEnlistmentNotification" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEnlistmentNotification" />
  <TypeSignature Language="DocId" Value="T:System.Transactions.IEnlistmentNotification" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEnlistmentNotification" />
  <TypeSignature Language="C++ CLI" Value="public interface class IEnlistmentNotification" />
  <TypeSignature Language="F#" Value="type IEnlistmentNotification = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Transactions</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Transactions.Local</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Transactions.Local" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Interfaces />
  <Docs>
    <summary>描述一个接口，资源管理器应实现该接口以在登记参与时为事务管理器提供两阶段提交通知回调。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 为了使资源管理器参与事务，必须通过事务管理器在事务中登记。 <xref:System.Transactions.Transaction> 类定义了一组提供此功能的方法，这些方法的名称以 `Enlist` 开头。 不同的 `Enlist` 方法对应于资源管理器可能具有的不同登记类型。  
  
 此类描述一个接口，资源管理器应实现该接口以在登记参与时为事务管理器提供两阶段提交通知回调。 对于每个资源管理器的 <xref:System.Transactions.IEnlistmentNotification> 接口实现，应使用方法或类的方法来登记该接口， <xref:System.Transactions.Transaction.EnlistVolatile%2A> <xref:System.Transactions.Transaction.EnlistDurable%2A> <xref:System.Transactions.Transaction> 具体取决于资源是可变还是持久。 有关登记和2PC 的详细信息，请参阅在[事务中将资源登记为参与者](/dotnet/framework/data/transactions/enlisting-resources-as-participants-in-a-transaction)，并分别[在单阶段和多阶段中提交事务](/dotnet/framework/data/transactions/committing-a-transaction-in-single-phase-and-multi-phase)。  
  
 事务管理器通过以下方法在两阶段提交协议的不同阶段通知登记的对象。  
  
|方法|描述|  
|------------|-----------------|  
|<xref:System.Transactions.IEnlistmentNotification.Prepare%2A>|当事务管理器请求参与者是否可以提交事务时，登记的对象的此方法将用作事务管理器在事务的第一阶段的回调。|  
|<xref:System.Transactions.IEnlistmentNotification.Commit%2A>|如果提交事务，则登记的对象的此方法将用作事务的第二个阶段中的事务管理器回调。|  
|<xref:System.Transactions.IEnlistmentNotification.Rollback%2A>|如果事务已中止（即回滚），则登记的对象的此方法将用作事务的第二个阶段中的事务管理器回调。|  
|<xref:System.Transactions.IEnlistmentNotification.InDoubt%2A>|如果事务不确定，则登记的对象的此方法将用作事务的第二个阶段中的事务管理器回调。|  
  
> [!NOTE]
>  应注意，通知可能不会按顺序发送或按特定顺序发送。  
  
   
  
## Examples  
 下面的示例演示如何实现此接口，以及如何使用方法将对象作为事务中的参与者登记 <xref:System.Transactions.Transaction.EnlistVolatile%2A> 。  
  
 [!code-csharp[Tx_Enlist#1](~/samples/snippets/csharp/VS_Snippets_CFX/tx_enlist/cs/enlist.cs#1)]
 [!code-vb[Tx_Enlist#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/tx_enlist/vb/enlist.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Transactions.ISinglePhaseNotification" />
    <related type="Article" href="https://msdn.microsoft.com/library/786a12c2-d530-49f4-9c59-5c973e15a11d">在事务中将资源登记为参与者</related>
    <related type="Article" href="https://msdn.microsoft.com/library/694ea153-e4db-41ae-96ac-9ac66dcb69a9">在单阶段和多阶段中提交事务</related>
  </Docs>
  <Members>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public void Commit (System.Transactions.Enlistment enlistment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Commit(class System.Transactions.Enlistment enlistment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.IEnlistmentNotification.Commit(System.Transactions.Enlistment)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Commit (enlistment As Enlistment)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Commit(System::Transactions::Enlistment ^ enlistment);" />
      <MemberSignature Language="F#" Value="abstract member Commit : System.Transactions.Enlistment -&gt; unit" Usage="iEnlistmentNotification.Commit enlistment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enlistment" Type="System.Transactions.Enlistment" />
      </Parameters>
      <Docs>
        <param name="enlistment">用于将响应发送到事务管理器的 <see cref="T:System.Transactions.Enlistment" /> 对象。</param>
        <summary>通知登记的对象事务正在提交。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 事务管理器在提交的第二个阶段（当该对象指示所有参与者提交事务时）调用此方法。  
  
 资源管理器应执行完成事务所需的任何工作，然后通过对参数调用方法，通知 TM 已经完成了 <xref:System.Transactions.Enlistment.Done%2A> `enlistment` 。  
  
 如果资源管理器已登记持久，但未通过调用方法做出响应 <xref:System.Transactions.Enlistment.Done%2A> ，则事务管理器无法确定资源管理器是否已接收到 <xref:System.Transactions.IEnlistmentNotification.Commit%2A> 调用。 因此，事务管理器会继续等待响应并维护与此事务相关的信息。  如果 <xref:System.Transactions.Enlistment.Done%2A> 从不调用，则此信息会无限期保留在内存中或系统范围内的资源中。 这将导致无法回收资源。 对于分布式事务，此操作最终可能会填充 MSDTC 日志来暂停 MSDTC 进程。 如果事务是由管理的，则会 <xref:System.Transactions> 导致资源管理器进程的内存消耗逐步增加。 因此，在 <xref:System.Transactions.Enlistment.Done%2A> 资源管理器完成准备工作后，调用方法非常重要。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InDoubt">
      <MemberSignature Language="C#" Value="public void InDoubt (System.Transactions.Enlistment enlistment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InDoubt(class System.Transactions.Enlistment enlistment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.IEnlistmentNotification.InDoubt(System.Transactions.Enlistment)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InDoubt (enlistment As Enlistment)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InDoubt(System::Transactions::Enlistment ^ enlistment);" />
      <MemberSignature Language="F#" Value="abstract member InDoubt : System.Transactions.Enlistment -&gt; unit" Usage="iEnlistmentNotification.InDoubt enlistment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enlistment" Type="System.Transactions.Enlistment" />
      </Parameters>
      <Docs>
        <param name="enlistment">用于将响应发送到事务管理器的 <see cref="T:System.Transactions.Enlistment" /> 对象。</param>
        <summary>通知登记的对象事务的状态不确定。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果事务管理器已调用单个持久资源的单阶段提交操作，然后在获取事务结果之前连接到持久资源，则会对可变资源调用此方法。 此时，不能安全地确定事务结果。  
  
 As <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> 视为事务的最终状态，你不应在调用时调用 <xref:System.Transactions.IEnlistmentNotification.Commit%2A> 或 <xref:System.Transactions.IEnlistmentNotification.Rollback%2A> <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> 。  
  
> [!NOTE]
>  此方法对可变资源的实现应执行它了解的任何恢复或包含操作对受影响的数据。  它还必须在 <xref:System.Transactions.Enlistment.Done%2A> 完成其工作后，对参数上的调用方法 `enlistment` 。  
  
 如果资源管理器已登记持久，但未通过调用方法做出响应 <xref:System.Transactions.Enlistment.Done%2A> ，则事务管理器无法确定资源管理器是否已接收到 <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> 调用。 因此，事务管理器会继续等待响应并维护与此事务相关的信息。  如果 <xref:System.Transactions.Enlistment.Done%2A> 从不调用，则此信息会无限期保留在内存中或系统范围内的资源中。 这将导致无法回收资源。 对于分布式事务，此操作最终可能会填充 MSDTC 日志来暂停 MSDTC 进程。 如果事务是由管理的，则会 <xref:System.Transactions> 导致资源管理器进程的内存消耗逐步增加。 因此，在 <xref:System.Transactions.Enlistment.Done%2A> 资源管理器完成准备工作后，调用方法非常重要。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prepare">
      <MemberSignature Language="C#" Value="public void Prepare (System.Transactions.PreparingEnlistment preparingEnlistment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Prepare(class System.Transactions.PreparingEnlistment preparingEnlistment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.IEnlistmentNotification.Prepare(System.Transactions.PreparingEnlistment)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Prepare (preparingEnlistment As PreparingEnlistment)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Prepare(System::Transactions::PreparingEnlistment ^ preparingEnlistment);" />
      <MemberSignature Language="F#" Value="abstract member Prepare : System.Transactions.PreparingEnlistment -&gt; unit" Usage="iEnlistmentNotification.Prepare preparingEnlistment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="preparingEnlistment" Type="System.Transactions.PreparingEnlistment" />
      </Parameters>
      <Docs>
        <param name="preparingEnlistment">用于将响应发送到事务管理器的 <see cref="T:System.Transactions.PreparingEnlistment" /> 对象。</param>
        <summary>通知登记的对象事务正在为提交做准备。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 事务管理器在提交时，在提交的第1阶段调用此方法，并在请求参与者是否可以提交事务时调用此方法。  
  
 在实现持久资源管理器时，应在此阶段记录准备记录。 记录应包含执行恢复所需的所有信息。 这包括 <xref:System.Transactions.PreparingEnlistment.RecoveryInformation%2A> 属性，该属性将在恢复期间传递到方法中的事务管理器 <xref:System.Transactions.TransactionManager.Reenlist%2A> 。 有关恢复的详细信息，请参阅[执行恢复](https://msdn.microsoft.com/library/d342c5c7-da64-4a4c-8e63-b52f4fbf2691)。  
  
 在调用参数的方法之前，资源管理器应完成所有必须完成的工作， <xref:System.Transactions.PreparingEnlistment.Prepared%2A> `preparingEnlistment` 以指示其对承诺的投票。 应确保在收到任何第2阶段通知（如 commit、rollback 或不确定）之前完成此操作。 这是因为，第2阶段的通知可能在第1阶段调用了方法的同一线程上发生内联 <xref:System.Transactions.PreparingEnlistment.Prepared%2A> 。 因此，在调用 <xref:System.Transactions.PreparingEnlistment.Prepared%2A> 后，您不应执行任何预计在收到第 2 阶段通知前就可完成的操作（如释放锁定）。  
  
 还可以调用参数的方法 `preparingEnlistment` 来指示回滚的投票。  
  
 如果希望对象只观察事务进度并做出反应，而不参与事务，则此方法的实现应 <xref:System.Transactions.Enlistment.Done%2A> `preparingEnlistment` 在完成其工作时调用参数的方法。 这样，资源管理器将不会收到任何第2阶段通知。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public void Rollback (System.Transactions.Enlistment enlistment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Rollback(class System.Transactions.Enlistment enlistment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.IEnlistmentNotification.Rollback(System.Transactions.Enlistment)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rollback (enlistment As Enlistment)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Rollback(System::Transactions::Enlistment ^ enlistment);" />
      <MemberSignature Language="F#" Value="abstract member Rollback : System.Transactions.Enlistment -&gt; unit" Usage="iEnlistmentNotification.Rollback enlistment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enlistment" Type="System.Transactions.Enlistment" />
      </Parameters>
      <Docs>
        <param name="enlistment">用于将响应发送到事务管理器的 <see cref="T:System.Transactions.Enlistment" /> 对象。</param>
        <summary>通知登记的对象事务正在回滚（中止）。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 事务管理器在事务回滚（中止）时将调用已登记对象的此方法，因为一个或多个事务参与者无法提交该事务。  
  
 资源管理器应执行完成事务所需的任何工作，然后通过对参数调用方法，通知 TM 已经完成了 <xref:System.Transactions.Enlistment.Done%2A> `enlistment` 。  
  
 如果资源管理器已登记持久，但未通过调用方法做出响应 <xref:System.Transactions.Enlistment.Done%2A> ，则事务管理器无法确定资源管理器是否已接收到 <xref:System.Transactions.IEnlistmentNotification.Rollback%2A> 调用。 因此，事务管理器会继续等待响应并维护与此事务相关的信息。  如果 <xref:System.Transactions.Enlistment.Done%2A> 从不调用，则此信息会无限期保留在内存中或系统范围内的资源中。 这将导致无法回收资源。 对于分布式事务，此操作最终可能会填充 MSDTC 日志来暂停 MSDTC 进程。 如果事务是由管理的，则会 <xref:System.Transactions> 导致资源管理器进程的内存消耗逐步增加。 因此，在 <xref:System.Transactions.Enlistment.Done%2A> 资源管理器完成准备工作后，调用方法非常重要。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
