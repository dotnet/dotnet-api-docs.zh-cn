<Type Name="SystemdLifetime" FullName="Microsoft.Extensions.Hosting.Systemd.SystemdLifetime">
  <Metadata><Meta Name="ms.openlocfilehash" Value="43a61d9ebab09d0b832ef6d25f7dc89486e9f891" /><Meta Name="ms.sourcegitcommit" Value="0bd9d099f2522ef14c6f48a8ea5f2c0650df0f6f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="10/15/2020" /><Meta Name="ms.locfileid" Value="92084502" /></Metadata><TypeSignature Language="C#" Value="public class SystemdLifetime : IDisposable, Microsoft.Extensions.Hosting.IHostLifetime" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SystemdLifetime extends System.Object implements class Microsoft.Extensions.Hosting.IHostLifetime, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Hosting.Systemd.SystemdLifetime" />
  <TypeSignature Language="VB.NET" Value="Public Class SystemdLifetime&#xA;Implements IDisposable, IHostLifetime" />
  <TypeSignature Language="C++ CLI" Value="public ref class SystemdLifetime : IDisposable, Microsoft::Extensions::Hosting::IHostLifetime" />
  <TypeSignature Language="F#" Value="type SystemdLifetime = class&#xA;    interface IHostLifetime&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Hosting.Systemd</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Extensions.Hosting.IHostLifetime</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SystemdLifetime (Microsoft.Extensions.Hosting.IHostEnvironment environment, Microsoft.Extensions.Hosting.IHostApplicationLifetime applicationLifetime, Microsoft.Extensions.Hosting.Systemd.ISystemdNotifier systemdNotifier, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Extensions.Hosting.IHostEnvironment environment, class Microsoft.Extensions.Hosting.IHostApplicationLifetime applicationLifetime, class Microsoft.Extensions.Hosting.Systemd.ISystemdNotifier systemdNotifier, class Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Hosting.Systemd.SystemdLifetime.#ctor(Microsoft.Extensions.Hosting.IHostEnvironment,Microsoft.Extensions.Hosting.IHostApplicationLifetime,Microsoft.Extensions.Hosting.Systemd.ISystemdNotifier,Microsoft.Extensions.Logging.ILoggerFactory)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (environment As IHostEnvironment, applicationLifetime As IHostApplicationLifetime, systemdNotifier As ISystemdNotifier, loggerFactory As ILoggerFactory)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SystemdLifetime(Microsoft::Extensions::Hosting::IHostEnvironment ^ environment, Microsoft::Extensions::Hosting::IHostApplicationLifetime ^ applicationLifetime, Microsoft::Extensions::Hosting::Systemd::ISystemdNotifier ^ systemdNotifier, Microsoft::Extensions::Logging::ILoggerFactory ^ loggerFactory);" />
      <MemberSignature Language="F#" Value="new Microsoft.Extensions.Hosting.Systemd.SystemdLifetime : Microsoft.Extensions.Hosting.IHostEnvironment * Microsoft.Extensions.Hosting.IHostApplicationLifetime * Microsoft.Extensions.Hosting.Systemd.ISystemdNotifier * Microsoft.Extensions.Logging.ILoggerFactory -&gt; Microsoft.Extensions.Hosting.Systemd.SystemdLifetime" Usage="new Microsoft.Extensions.Hosting.Systemd.SystemdLifetime (environment, applicationLifetime, systemdNotifier, loggerFactory)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting.Systemd</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="environment" Type="Microsoft.Extensions.Hosting.IHostEnvironment" />
        <Parameter Name="applicationLifetime" Type="Microsoft.Extensions.Hosting.IHostApplicationLifetime" />
        <Parameter Name="systemdNotifier" Type="Microsoft.Extensions.Hosting.Systemd.ISystemdNotifier" />
        <Parameter Name="loggerFactory" Type="Microsoft.Extensions.Logging.ILoggerFactory" />
      </Parameters>
      <Docs>
        <param name="environment">To be added.</param>
        <param name="applicationLifetime">To be added.</param>
        <param name="systemdNotifier">To be added.</param>
        <param name="loggerFactory">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Hosting.Systemd.SystemdLifetime.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="systemdLifetime.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting.Systemd</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a812a-101">执行与释放或重置非托管资源关联的应用程序定义的任务。</span><span class="sxs-lookup"><span data-stu-id="a812a-101">Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StopAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StopAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task StopAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Hosting.Systemd.SystemdLifetime.StopAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function StopAsync (cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ StopAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="abstract member StopAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.StopAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="systemdLifetime.StopAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Hosting.IHostLifetime.StopAsync(System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting.Systemd</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="a812a-102">指示停止应该不再正常的取消标记。</span><span class="sxs-lookup"><span data-stu-id="a812a-102">A cancellation token that indicates when stop should no longer be graceful.</span></span></param>
        <summary><span data-ttu-id="a812a-103">异步停止和关闭主机。</span><span class="sxs-lookup"><span data-stu-id="a812a-103">Asynchronously stops and shuts down the host.</span></span> <span data-ttu-id="a812a-104">通过 <see cref="M:Microsoft.Extensions.Hosting.IHost.StopAsync(System.Threading.CancellationToken)" /> 调用此方法。</span><span class="sxs-lookup"><span data-stu-id="a812a-104">This method is called from <see cref="M:Microsoft.Extensions.Hosting.IHost.StopAsync(System.Threading.CancellationToken)" />.</span></span></summary>
        <returns><span data-ttu-id="a812a-105">表示异步停止操作的任务。</span><span class="sxs-lookup"><span data-stu-id="a812a-105">A task that represents the asynchronous stop operation.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitForStartAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WaitForStartAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WaitForStartAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Hosting.Systemd.SystemdLifetime.WaitForStartAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForStartAsync (cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WaitForStartAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="abstract member WaitForStartAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.WaitForStartAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="systemdLifetime.WaitForStartAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Hosting.IHostLifetime.WaitForStartAsync(System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting.Systemd</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="a812a-106">指示停止应该不再正常的取消标记。</span><span class="sxs-lookup"><span data-stu-id="a812a-106">A cancellation token that indicates when stop should no longer be graceful.</span></span></param>
        <summary><span data-ttu-id="a812a-107">异步等待，直到启动操作完成，然后再继续。</span><span class="sxs-lookup"><span data-stu-id="a812a-107">Asynchronously waits until the start operation is complete before continuing.</span></span> <span data-ttu-id="a812a-108">在 <see cref="M:Microsoft.Extensions.Hosting.IHost.StartAsync(System.Threading.CancellationToken)" /> 开头调用此方法。</span><span class="sxs-lookup"><span data-stu-id="a812a-108">This method is called at the beginning of <see cref="M:Microsoft.Extensions.Hosting.IHost.StartAsync(System.Threading.CancellationToken)" />.</span></span> <span data-ttu-id="a812a-109">它可用于延迟启动，直到外部事件发出信号。</span><span class="sxs-lookup"><span data-stu-id="a812a-109">This can be used to delay startup until signaled by an external event.</span></span></summary>
        <returns><span data-ttu-id="a812a-110">表示等待启动操作的任务。</span><span class="sxs-lookup"><span data-stu-id="a812a-110">A task that represents the waiting for start operation.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
