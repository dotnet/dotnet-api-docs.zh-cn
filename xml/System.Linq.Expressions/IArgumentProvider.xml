<Type Name="IArgumentProvider" FullName="System.Linq.Expressions.IArgumentProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0681c36df26c5ee5fcd46cbf73351034dd3a307d" /><Meta Name="ms.sourcegitcommit" Value="9506e50ec7beb4fa30206b9840dc546b035a6600" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/23/2020" /><Meta Name="ms.locfileid" Value="83545147" /></Metadata><TypeSignature Language="C#" Value="public interface IArgumentProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IArgumentProvider" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.IArgumentProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IArgumentProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IArgumentProvider" />
  <TypeSignature Language="F#" Value="type IArgumentProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Linq.Expressions" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="922f2-101">提供用于访问多个树节点（DynamicExpression、ElementInit、MethodCallExpression、InvocationExpression、NewExpression 和 IndexExpression）的参数的内部接口。</span><span class="sxs-lookup"><span data-stu-id="922f2-101">Provides an internal interface for accessing the arguments of multiple tree nodes (DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression, and IndexExpression).</span></span>  <span data-ttu-id="922f2-102">此 API 仅供内部使用。</span><span class="sxs-lookup"><span data-stu-id="922f2-102">This API is for internal use only.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[
      
## Remarks

<span data-ttu-id="922f2-103">不应使用此 API。</span><span class="sxs-lookup"><span data-stu-id="922f2-103">You should not use this API.</span></span>  <span data-ttu-id="922f2-104">它仅由于程序集重构而成为公共的，并且仅用于内部性能优化。</span><span class="sxs-lookup"><span data-stu-id="922f2-104">It is public only due to assembly refactoring, and it exists only for internal performance optimizations.</span></span> <span data-ttu-id="922f2-105">它允许两种优化来减小树的大小：</span><span class="sxs-lookup"><span data-stu-id="922f2-105">It enables two optimizations that reduce the size of the trees:</span></span>
  
1. <span data-ttu-id="922f2-106">它使节点可以保存到 <xref:System.Collections.Generic.IList%601> 而不是 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> 。</span><span class="sxs-lookup"><span data-stu-id="922f2-106">It enables the nodes to hold onto an <xref:System.Collections.Generic.IList%601> instead of a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.</span></span>  <span data-ttu-id="922f2-107">这节省了为每个节点分配只读集合的成本。</span><span class="sxs-lookup"><span data-stu-id="922f2-107">This saves the cost of allocating the read-only collection for each node.</span></span>
  
2. <span data-ttu-id="922f2-108">它允许创建专门的子类，以容纳特定数量的自变量（例如，、 `Block2` `Block2` 、 `Block4` ）。</span><span class="sxs-lookup"><span data-stu-id="922f2-108">It enables specialized subclasses to be created that hold on to a specific number of arguments (for example, `Block2`, `Block2`, `Block4`).</span></span>  <span data-ttu-id="922f2-109">因此，这些节点避免同时分配 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> 和数组来存储其元素，从而为每个节点节省32字节。</span><span class="sxs-lookup"><span data-stu-id="922f2-109">Therefore, these nodes avoid allocating both a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> and an array for storing their elements, thus saving 32 bytes per node.</span></span>  <span data-ttu-id="922f2-110">此方法由各种节点使用，包括 <xref:System.Linq.Expressions.BlockExpression> 、 <xref:System.Linq.Expressions.InvocationExpression> 和 <xref:System.Linq.Expressions.MethodCallExpression> 。</span><span class="sxs-lookup"><span data-stu-id="922f2-110">This technique is used by various nodes, including <xref:System.Linq.Expressions.BlockExpression>, <xref:System.Linq.Expressions.InvocationExpression>, and <xref:System.Linq.Expressions.MethodCallExpression>.</span></span>
            
<span data-ttu-id="922f2-111">表达式树节点继续公开对象的原始 LINQ 属性 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> 。</span><span class="sxs-lookup"><span data-stu-id="922f2-111">The expression tree nodes continue to expose the original LINQ properties of <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> objects.</span></span> <span data-ttu-id="922f2-112">它们通过重复使用一个字段来存储数组或通常存储在数组中的元素来执行此操作。</span><span class="sxs-lookup"><span data-stu-id="922f2-112">They do this by reusing a field for storing both the array or an element that would normally be stored in the array.</span></span>
            
<span data-ttu-id="922f2-113">对于数组用例，将集合类型化为 <xref:System.Collections.Generic.IList%601> 而不是 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> 。</span><span class="sxs-lookup"><span data-stu-id="922f2-113">For the array case, the collection is typed to <xref:System.Collections.Generic.IList%601> instead of <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.</span></span> <span data-ttu-id="922f2-114">最初构造节点时，该节点是数组。</span><span class="sxs-lookup"><span data-stu-id="922f2-114">When the node is initially constructed, it is an array.</span></span>  <span data-ttu-id="922f2-115">此库中的编译器或实用工具通过此接口访问元素。</span><span class="sxs-lookup"><span data-stu-id="922f2-115">The compiler or utilities in this library access the elements through this interface.</span></span> <span data-ttu-id="922f2-116">访问数组元素可将数组升级到 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> 。</span><span class="sxs-lookup"><span data-stu-id="922f2-116">Accessing array elements promotes the array to a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.</span></span>
            
<span data-ttu-id="922f2-117">对于对象事例，第一个参数存储在类型为的字段中 <xref:System.Object> 。</span><span class="sxs-lookup"><span data-stu-id="922f2-117">For the object case, the first argument is stored in a field typed to <xref:System.Object>.</span></span> <span data-ttu-id="922f2-118">最初构造节点时，此字段包含 <xref:System.Linq.Expressions.Expression> 第一个参数的。</span><span class="sxs-lookup"><span data-stu-id="922f2-118">When the node is initially constructed, this field holds the <xref:System.Linq.Expressions.Expression> of the first argument.</span></span>  <span data-ttu-id="922f2-119">当此库中的编译器和实用工具访问参数时，它们将再次使用此接口，第一个参数的访问器使用内部 `Expression.ReturnObject<T>(System.Object)` helper 方法返回处理 <xref:System.Linq.Expressions.Expression> 或 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> 大小写的对象。</span><span class="sxs-lookup"><span data-stu-id="922f2-119">When the compiler and utilities in this library access the arguments, they again use this interface, and the accessor for the first argument uses the internal `Expression.ReturnObject<T>(System.Object)` helper method to return the object that handles the <xref:System.Linq.Expressions.Expression> or <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> case.</span></span> <span data-ttu-id="922f2-120">当用户访问时 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> ，对象字段将更新为直接保存到 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> 。</span><span class="sxs-lookup"><span data-stu-id="922f2-120">When the user accesses the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>, the object field is updated to hold directly onto the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.</span></span>
            
<span data-ttu-id="922f2-121">属性总是返回相同的，这一点非常重要 <xref:System.Linq.Expressions.Expression> <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> 。</span><span class="sxs-lookup"><span data-stu-id="922f2-121">It is important that <xref:System.Linq.Expressions.Expression> properties consistently return the same <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.</span></span> <span data-ttu-id="922f2-122">否则，表达式访问者使用的重写程序树查看程序将中断。</span><span class="sxs-lookup"><span data-stu-id="922f2-122">Otherwise, the rewriter tree walker used by expression visitors will break.</span></span> <span data-ttu-id="922f2-123">这是从 LINQ v1 到不同 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> 于同一个节点的返回不同的重大更改 <xref:System.Linq.Expressions.Expression> 。</span><span class="sxs-lookup"><span data-stu-id="922f2-123">It is a breaking change from LINQ v1 to return different <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> from the same <xref:System.Linq.Expressions.Expression> node.</span></span> <span data-ttu-id="922f2-124">目前，用户可以依赖对象标识来判断节点是否已更改。</span><span class="sxs-lookup"><span data-stu-id="922f2-124">Currently, users can rely on object identity to tell if the node has changed.</span></span>  <span data-ttu-id="922f2-125">将存储 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> 在重载字段中可减少内存使用量，并保持公共 API 的兼容性。</span><span class="sxs-lookup"><span data-stu-id="922f2-125">Storing the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> in an overloaded field both reduces memory usage and maintains compatibility for the public API.</span></span>

      ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ArgumentCount">
      <MemberSignature Language="C#" Value="public int ArgumentCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ArgumentCount" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ArgumentCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ArgumentCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ArgumentCount : int" Usage="System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="922f2-126">返回表达式树节点的参数数目。</span><span class="sxs-lookup"><span data-stu-id="922f2-126">Returns the number of arguments to the expression tree node.</span></span> <span data-ttu-id="922f2-127">此 API 仅供内部使用。</span><span class="sxs-lookup"><span data-stu-id="922f2-127">This API is for internal use only.</span></span></summary>
        <value><span data-ttu-id="922f2-128">作为 <see cref="T:System.Int32" /> 的表达式树节点的参数数目。</span><span class="sxs-lookup"><span data-stu-id="922f2-128">The number of arguments to the expression tree node as <see cref="T:System.Int32" />.</span></span></value>
        <remarks><span data-ttu-id="922f2-129">不应使用此 API。</span><span class="sxs-lookup"><span data-stu-id="922f2-129">You should not use this API.</span></span> <span data-ttu-id="922f2-130">由于程序集重构，它是公共的，并且在内部用于性能优化。</span><span class="sxs-lookup"><span data-stu-id="922f2-130">It is public only due to assembly refactoring, and it is used internally for performance optimizations.</span></span></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArgument">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression GetArgument (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression GetArgument(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetArgument (index As Integer) As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression ^ GetArgument(int index);" />
      <MemberSignature Language="F#" Value="abstract member GetArgument : int -&gt; System.Linq.Expressions.Expression" Usage="iArgumentProvider.GetArgument index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="922f2-131">自变量的索引。</span><span class="sxs-lookup"><span data-stu-id="922f2-131">The index of the argument.</span></span></param>
        <summary><span data-ttu-id="922f2-132"><paramref name="index" /> 时返回自变量，当 <paramref name="index" /> 超出界限时引发。</span><span class="sxs-lookup"><span data-stu-id="922f2-132">Returns the argument at <paramref name="index" />, throwing if <paramref name="index" /> is out of bounds.</span></span> <span data-ttu-id="922f2-133">此 API 仅供内部使用。</span><span class="sxs-lookup"><span data-stu-id="922f2-133">This API is for internal use only.</span></span></summary>
        <returns><span data-ttu-id="922f2-134">索引时的自变量。</span><span class="sxs-lookup"><span data-stu-id="922f2-134">The argument at index.</span></span></returns>
        <remarks><span data-ttu-id="922f2-135">不应使用此 API。</span><span class="sxs-lookup"><span data-stu-id="922f2-135">You should not use this API.</span></span>  <span data-ttu-id="922f2-136">由于程序集重构，只能为公共的；并且在内部用于性能优化。</span><span class="sxs-lookup"><span data-stu-id="922f2-136">It is only public due to assembly refactoring, and it is used internally for performance optimizations.</span></span></remarks>
      </Docs>
    </Member>
  </Members>
</Type>
