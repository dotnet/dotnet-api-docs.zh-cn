<Type Name="WebProxy" FullName="System.Net.WebProxy">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9906952f9d4f21fca492e26b1ab91550ac22c672" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89786130" /></Metadata><TypeSignature Language="C#" Value="public class WebProxy : System.Net.IWebProxy, System.Runtime.Serialization.ISerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-4.0;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WebProxy extends System.Object implements class System.Net.IWebProxy, class System.Runtime.Serialization.ISerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.Net.WebProxy" />
  <TypeSignature Language="VB.NET" Value="Public Class WebProxy&#xA;Implements ISerializable, IWebProxy" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-4.0;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebProxy : System::Net::IWebProxy, System::Runtime::Serialization::ISerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-4.0;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="F#" Value="type WebProxy = class&#xA;    interface IWebProxy&#xA;    interface ISerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit WebProxy extends System.Object implements class System.Net.IWebProxy, class System.Runtime.Serialization.ISerializable" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C#" Value="public class WebProxy : System.Runtime.Serialization.ISerializable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="VB.NET" Value="Public Class WebProxy&#xA;Implements ISerializable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebProxy : System::Runtime::Serialization::ISerializable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type WebProxy = class&#xA;    interface ISerializable&#xA;    interface IWebProxy" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net.WebProxy</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Net.WebProxy" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Net.IWebProxy</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="18774-101">包含 <see cref="T:System.Net.WebRequest" /> 类的 HTTP 代理设置。</span><span class="sxs-lookup"><span data-stu-id="18774-101">Contains HTTP proxy settings for the <see cref="T:System.Net.WebRequest" /> class.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18774-102"><xref:System.Net.WebProxy>类包含代理设置，这些设置用于 <xref:System.Net.WebRequest> 确定是否使用 Web 代理来发送请求。</span><span class="sxs-lookup"><span data-stu-id="18774-102">The <xref:System.Net.WebProxy> class contains the proxy settings that <xref:System.Net.WebRequest> instances use to determine whether a Web proxy is used to send requests.</span></span> <span data-ttu-id="18774-103">全局 Web 代理设置可在计算机和应用程序配置文件中指定，应用程序可以使用类的实例 <xref:System.Net.WebProxy> 来自定义 Web 代理使用。</span><span class="sxs-lookup"><span data-stu-id="18774-103">Global Web proxy settings can be specified in machine and application configuration files, and applications can use instances of the <xref:System.Net.WebProxy> class to customize Web proxy use.</span></span> <span data-ttu-id="18774-104"><xref:System.Net.WebProxy>类是接口的基实现 <xref:System.Net.IWebProxy> 。</span><span class="sxs-lookup"><span data-stu-id="18774-104">The <xref:System.Net.WebProxy> class is the base implementation of the <xref:System.Net.IWebProxy> interface.</span></span>  
  
 <span data-ttu-id="18774-105">若要获取 Web 代理类的实例，可以使用以下任一方法：</span><span class="sxs-lookup"><span data-stu-id="18774-105">To obtain instances of the Web proxy class, you can use any of the following methods:</span></span>  
  
-   <span data-ttu-id="18774-106"><xref:System.Net.WebProxy.%23ctor%2A>构造函数。</span><span class="sxs-lookup"><span data-stu-id="18774-106">The <xref:System.Net.WebProxy.%23ctor%2A> constructor.</span></span>  
  
-   <span data-ttu-id="18774-107"><xref:System.Net.WebProxy.GetDefaultProxy%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="18774-107">The <xref:System.Net.WebProxy.GetDefaultProxy%2A> method.</span></span>  
  
-   <span data-ttu-id="18774-108"><xref:System.Net.GlobalProxySelection.Select%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="18774-108">The <xref:System.Net.GlobalProxySelection.Select%2A> method.</span></span>  
  
 <span data-ttu-id="18774-109">这些方法都提供一个 <xref:System.Net.WebProxy> 可进一步自定义的实例; 它们之间的区别在于实例在返回到应用程序之前如何初始化。</span><span class="sxs-lookup"><span data-stu-id="18774-109">These methods each supply a <xref:System.Net.WebProxy> instance that you can further customize; the difference between them is how the instance is initialized before it is returned to your application.</span></span> <span data-ttu-id="18774-110"><xref:System.Net.WebProxy.%23ctor%2A>构造函数返回类的实例 <xref:System.Net.WebProxy> ，其 <xref:System.Net.WebProxy.Address%2A> 属性设置为 `null` 。</span><span class="sxs-lookup"><span data-stu-id="18774-110">The <xref:System.Net.WebProxy.%23ctor%2A> constructor returns an instance of the <xref:System.Net.WebProxy> class with the <xref:System.Net.WebProxy.Address%2A> property set to `null`.</span></span> <span data-ttu-id="18774-111">当请求使用 <xref:System.Net.WebProxy> 处于此状态的实例时，将不使用代理来发送请求。</span><span class="sxs-lookup"><span data-stu-id="18774-111">When a request uses a <xref:System.Net.WebProxy> instance in this state, no proxy is used to send the request.</span></span>  
  
 <span data-ttu-id="18774-112"><xref:System.Net.WebProxy.GetDefaultProxy%2A>方法返回类的实例，并将 <xref:System.Net.WebProxy> <xref:System.Net.WebProxy.Address%2A> 、 <xref:System.Net.WebProxy.BypassProxyOnLocal%2A> 和 <xref:System.Net.WebProxy.BypassList%2A> 属性设置为 Internet Explorer 5.5 和更高版本使用的值。</span><span class="sxs-lookup"><span data-stu-id="18774-112">The <xref:System.Net.WebProxy.GetDefaultProxy%2A> method returns an instance of the <xref:System.Net.WebProxy> class with the <xref:System.Net.WebProxy.Address%2A>, <xref:System.Net.WebProxy.BypassProxyOnLocal%2A>, and <xref:System.Net.WebProxy.BypassList%2A> properties set to the values used by Internet Explorer 5.5 and later.</span></span>  
  
 <span data-ttu-id="18774-113"><xref:System.Net.GlobalProxySelection.Select%2A>方法返回类的实例，并 <xref:System.Net.WebProxy> 根据 Internet Explorer 和配置文件设置的组合设置其属性。</span><span class="sxs-lookup"><span data-stu-id="18774-113">The <xref:System.Net.GlobalProxySelection.Select%2A> method returns an instance of the <xref:System.Net.WebProxy> class with it properties set according to a combination of Internet Explorer and configuration file settings.</span></span>  
  
 <span data-ttu-id="18774-114"><xref:System.Net.WebProxy>类支持自动检测和执行代理配置脚本。</span><span class="sxs-lookup"><span data-stu-id="18774-114">The <xref:System.Net.WebProxy> class supports automatic detection and execution of proxy configuration scripts.</span></span> <span data-ttu-id="18774-115">此功能也称为 Web 代理自动发现 (WPAD)。</span><span class="sxs-lookup"><span data-stu-id="18774-115">This feature is also known as Web Proxy Auto-Discovery (WPAD).</span></span> <span data-ttu-id="18774-116">使用自动代理配置时，必须找到、下载、编译和运行配置脚本（通常名为 Wpad）。</span><span class="sxs-lookup"><span data-stu-id="18774-116">When using automatic proxy configuration, a configuration script, typically named Wpad.dat, must be located, downloaded, compiled, and run.</span></span> <span data-ttu-id="18774-117">如果这些操作成功，该脚本将返回可用于请求的代理。</span><span class="sxs-lookup"><span data-stu-id="18774-117">If these operations are successful, the script returns the proxies that can be used for a request.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18774-118">下面的代码示例将 <xref:System.Net.WebProxy> 实例分配给 <xref:System.Net.WebRequest> 实例。</span><span class="sxs-lookup"><span data-stu-id="18774-118">The following code example assigns a <xref:System.Net.WebProxy> instance to a <xref:System.Net.WebRequest> instance.</span></span> <span data-ttu-id="18774-119"><xref:System.Net.WebRequest>实例使用代理连接到外部 Internet 资源。</span><span class="sxs-lookup"><span data-stu-id="18774-119">The <xref:System.Net.WebRequest> instance uses the proxy to connect to external Internet resources.</span></span> <span data-ttu-id="18774-120"> (有关演示如何使用 WPAD 功能的示例，请参阅类的文档 <xref:System.Net.IWebProxyScript> 。 ) </span><span class="sxs-lookup"><span data-stu-id="18774-120">(For an example that demonstrates using the WPAD feature, see the documentation for the <xref:System.Net.IWebProxyScript> class.)</span></span>  
  
 [!code-cpp[Classic WebProxy Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic WebProxy Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebProxy Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic WebProxy Example/CS/source.cs#1)]
 [!code-vb[Classic WebProxy Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic WebProxy Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="18774-121">初始化 <see cref="T:System.Net.WebProxy" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="18774-121">Initializes a new instance of the <see cref="T:System.Net.WebProxy" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebProxy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebProxy.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebProxy();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebProxy</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="18774-122">初始化 <see cref="T:System.Net.WebProxy" /> 类的空实例。</span><span class="sxs-lookup"><span data-stu-id="18774-122">Initializes an empty instance of the <see cref="T:System.Net.WebProxy" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18774-123">无参数构造函数初始化类的空实例 <xref:System.Net.WebProxy> ，并将 <xref:System.Net.WebProxy.Address%2A> 属性设置为 `null` 。</span><span class="sxs-lookup"><span data-stu-id="18774-123">The parameterless constructor initializes an empty instance of the <xref:System.Net.WebProxy> class with the <xref:System.Net.WebProxy.Address%2A> property set to `null`.</span></span>  
  
 <span data-ttu-id="18774-124">当 <xref:System.Net.WebProxy.Address%2A> 属性为时 `null` ， <xref:System.Net.WebProxy.IsBypassed%2A> 方法将返回， `true` 并且 <xref:System.Net.WebProxy.GetProxy%2A> 方法将返回目标地址。</span><span class="sxs-lookup"><span data-stu-id="18774-124">When the <xref:System.Net.WebProxy.Address%2A> property is `null`, the <xref:System.Net.WebProxy.IsBypassed%2A> method returns `true` and the <xref:System.Net.WebProxy.GetProxy%2A> method returns the destination address.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18774-125">下面的代码示例演示如何调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="18774-125">The following code example demonstrates calling this constructor.</span></span>  
  
 [!code-cpp[NCLWebProxy#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebProxy/CPP/nclwebproxy.cpp#1)]
 [!code-csharp[NCLWebProxy#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebProxy/CS/nclwebproxy.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebProxy (string Address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string Address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebProxy.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Address As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebProxy(System::String ^ Address);" />
      <MemberSignature Language="F#" Value="new System.Net.WebProxy : string -&gt; System.Net.WebProxy" Usage="new System.Net.WebProxy Address" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebProxy</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="Address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Address"><span data-ttu-id="18774-126">代理服务器的 URI。</span><span class="sxs-lookup"><span data-stu-id="18774-126">The URI of the proxy server.</span></span></param>
        <summary><span data-ttu-id="18774-127">用指定的 URI 初始化 <see cref="T:System.Net.WebProxy" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="18774-127">Initializes a new instance of the <see cref="T:System.Net.WebProxy" /> class with the specified URI.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18774-128"><xref:System.Net.WebProxy>初始化实例，并将 <xref:System.Net.WebProxy.Address%2A> 属性设置为包含的 <xref:System.Uri> 实例 `Address` 。</span><span class="sxs-lookup"><span data-stu-id="18774-128">The <xref:System.Net.WebProxy> instance is initialized with the <xref:System.Net.WebProxy.Address%2A> property set to a <xref:System.Uri> instance containing `Address`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18774-129">下面的代码示例演示如何调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="18774-129">The following code example demonstrates calling this constructor.</span></span>  
  
 [!code-cpp[NCLWebProxy#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebProxy/CPP/nclwebproxy.cpp#6)]
 [!code-csharp[NCLWebProxy#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebProxy/CS/nclwebproxy.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UriFormatException"><span data-ttu-id="18774-130"><paramref name="Address" /> 是无效的 URI。</span><span class="sxs-lookup"><span data-stu-id="18774-130"><paramref name="Address" /> is an invalid URI.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebProxy (Uri Address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri Address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebProxy.#ctor(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Address As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebProxy(Uri ^ Address);" />
      <MemberSignature Language="F#" Value="new System.Net.WebProxy : Uri -&gt; System.Net.WebProxy" Usage="new System.Net.WebProxy Address" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebProxy</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="Address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="Address"><span data-ttu-id="18774-131">一个 <see cref="T:System.Uri" /> 实例，它包含代理服务器的地址。</span><span class="sxs-lookup"><span data-stu-id="18774-131">A <see cref="T:System.Uri" /> instance that contains the address of the proxy server.</span></span></param>
        <summary><span data-ttu-id="18774-132">从指定的 <see cref="T:System.Net.WebProxy" /> 实例中初始化 <see cref="T:System.Uri" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="18774-132">Initializes a new instance of the <see cref="T:System.Net.WebProxy" /> class from the specified <see cref="T:System.Uri" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18774-133"><xref:System.Net.WebProxy>初始化实例，并将 <xref:System.Net.WebProxy.Address%2A> 属性设置为 `Address` 参数。</span><span class="sxs-lookup"><span data-stu-id="18774-133">The <xref:System.Net.WebProxy> instance is initialized with the <xref:System.Net.WebProxy.Address%2A> property set to the `Address` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18774-134">下面的代码示例演示如何调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="18774-134">The following code example demonstrates calling this constructor.</span></span>  
  
 [!code-cpp[NCLWebProxy#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebProxy/CPP/nclwebproxy.cpp#2)]
 [!code-csharp[NCLWebProxy#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebProxy/CS/nclwebproxy.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WebProxy (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo serializationInfo, valuetype System.Runtime.Serialization.StreamingContext streamingContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebProxy.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (serializationInfo As SerializationInfo, streamingContext As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WebProxy(System::Runtime::Serialization::SerializationInfo ^ serializationInfo, System::Runtime::Serialization::StreamingContext streamingContext);" />
      <MemberSignature Language="F#" Value="new System.Net.WebProxy : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; System.Net.WebProxy" Usage="new System.Net.WebProxy (serializationInfo, streamingContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebProxy</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serializationInfo" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="streamingContext" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="serializationInfo"><span data-ttu-id="18774-135">序列化数据。</span><span class="sxs-lookup"><span data-stu-id="18774-135">The serialization data.</span></span></param>
        <param name="streamingContext"><span data-ttu-id="18774-136">序列化数据的上下文。</span><span class="sxs-lookup"><span data-stu-id="18774-136">The context for the serialized data.</span></span></param>
        <summary><span data-ttu-id="18774-137">使用以前序列化的内容初始化 <see cref="T:System.Net.WebProxy" /> 类的实例。</span><span class="sxs-lookup"><span data-stu-id="18774-137">Initializes an instance of the <see cref="T:System.Net.WebProxy" /> class using previously serialized content.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18774-138">系统调用此方法对实例进行反序列化 <xref:System.Net.WebProxy> ; 应用程序不调用它。</span><span class="sxs-lookup"><span data-stu-id="18774-138">This method is called by the system to deserialize a <xref:System.Net.WebProxy> instance; applications do not call it.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebProxy (string Address, bool BypassOnLocal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string Address, bool BypassOnLocal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebProxy.#ctor(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Address As String, BypassOnLocal As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebProxy(System::String ^ Address, bool BypassOnLocal);" />
      <MemberSignature Language="F#" Value="new System.Net.WebProxy : string * bool -&gt; System.Net.WebProxy" Usage="new System.Net.WebProxy (Address, BypassOnLocal)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebProxy</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="Address" Type="System.String" />
        <Parameter Name="BypassOnLocal" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Address"><span data-ttu-id="18774-139">代理服务器的 URI。</span><span class="sxs-lookup"><span data-stu-id="18774-139">The URI of the proxy server.</span></span></param>
        <param name="BypassOnLocal"><span data-ttu-id="18774-140">如果对本地地址跳过代理，则为 <see langword="true" />；否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18774-140"><see langword="true" /> to bypass the proxy for local addresses; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="18774-141">使用指定的 URI 和回避设置初始化 <see cref="T:System.Net.WebProxy" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="18774-141">Initializes a new instance of the <see cref="T:System.Net.WebProxy" /> class with the specified URI and bypass setting.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18774-142">初始化实例，并将 <xref:System.Net.WebProxy> <xref:System.Net.WebProxy.Address%2A> 属性设置为包含的 <xref:System.Uri> 实例 `Address` ，并将 <xref:System.Net.WebProxy.BypassProxyOnLocal%2A> 属性设置为 `BypassOnLocal` 。</span><span class="sxs-lookup"><span data-stu-id="18774-142">The <xref:System.Net.WebProxy> instance is initialized with the <xref:System.Net.WebProxy.Address%2A> property set to a <xref:System.Uri> instance that contains `Address` and the <xref:System.Net.WebProxy.BypassProxyOnLocal%2A> property set to `BypassOnLocal`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18774-143">下面的代码示例演示如何调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="18774-143">The following code example demonstrates calling this constructor.</span></span>  
  
 [!code-cpp[NCLWebProxy#7](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebProxy/CPP/nclwebproxy.cpp#7)]
 [!code-csharp[NCLWebProxy#7](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebProxy/CS/nclwebproxy.cs#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UriFormatException"><span data-ttu-id="18774-144"><paramref name="Address" /> 是无效的 URI。</span><span class="sxs-lookup"><span data-stu-id="18774-144"><paramref name="Address" /> is an invalid URI.</span></span></exception>
        <altmember cref="P:System.Net.WebProxy.BypassProxyOnLocal" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebProxy (string Host, int Port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string Host, int32 Port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebProxy.#ctor(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Host As String, Port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebProxy(System::String ^ Host, int Port);" />
      <MemberSignature Language="F#" Value="new System.Net.WebProxy : string * int -&gt; System.Net.WebProxy" Usage="new System.Net.WebProxy (Host, Port)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebProxy</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="Host" Type="System.String" />
        <Parameter Name="Port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Host"><span data-ttu-id="18774-145">代理主机的名称。</span><span class="sxs-lookup"><span data-stu-id="18774-145">The name of the proxy host.</span></span></param>
        <param name="Port"><span data-ttu-id="18774-146">要使用的 <paramref name="Host" /> 上的端口号。</span><span class="sxs-lookup"><span data-stu-id="18774-146">The port number on <paramref name="Host" /> to use.</span></span></param>
        <summary><span data-ttu-id="18774-147">使用指定的主机和端口号初始化 <see cref="T:System.Net.WebProxy" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="18774-147">Initializes a new instance of the <see cref="T:System.Net.WebProxy" /> class with the specified host and port number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18774-148"><xref:System.Net.WebProxy>初始化实例，并将 <xref:System.Net.WebProxy.Address%2A> 属性设置为 <xref:System.Uri> http://：的实例 `Host` `Port` 。</span><span class="sxs-lookup"><span data-stu-id="18774-148">The <xref:System.Net.WebProxy> instance is initialized with the <xref:System.Net.WebProxy.Address%2A> property set to a <xref:System.Uri> instance of the form http:// `Host` : `Port`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18774-149">下面的代码示例演示如何调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="18774-149">The following code example demonstrates calling this constructor.</span></span>  
  
 [!code-cpp[NCLWebProxy#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebProxy/CPP/nclwebproxy.cpp#5)]
 [!code-csharp[NCLWebProxy#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebProxy/CS/nclwebproxy.cs#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UriFormatException"><span data-ttu-id="18774-150">通过组合 <paramref name="Host" /> 和 <paramref name="Port" /> 构成的 URI 不是有效的 URI。</span><span class="sxs-lookup"><span data-stu-id="18774-150">The URI formed by combining <paramref name="Host" /> and <paramref name="Port" /> is not a valid URI.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebProxy (Uri Address, bool BypassOnLocal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri Address, bool BypassOnLocal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebProxy.#ctor(System.Uri,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Address As Uri, BypassOnLocal As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebProxy(Uri ^ Address, bool BypassOnLocal);" />
      <MemberSignature Language="F#" Value="new System.Net.WebProxy : Uri * bool -&gt; System.Net.WebProxy" Usage="new System.Net.WebProxy (Address, BypassOnLocal)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebProxy</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="Address" Type="System.Uri" />
        <Parameter Name="BypassOnLocal" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Address"><span data-ttu-id="18774-151">一个 <see cref="T:System.Uri" /> 实例，它包含代理服务器的地址。</span><span class="sxs-lookup"><span data-stu-id="18774-151">A <see cref="T:System.Uri" /> instance that contains the address of the proxy server.</span></span></param>
        <param name="BypassOnLocal"><span data-ttu-id="18774-152">如果对本地地址跳过代理，则为 <see langword="true" />；否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18774-152"><see langword="true" /> to bypass the proxy for local addresses; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="18774-153">使用 <see cref="T:System.Net.WebProxy" /> 实例和回避设置初始化 <see cref="T:System.Uri" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="18774-153">Initializes a new instance of the <see cref="T:System.Net.WebProxy" /> class with the <see cref="T:System.Uri" /> instance and bypass setting.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18774-154"><xref:System.Net.WebProxy>初始化实例， <xref:System.Net.WebProxy.Address%2A> 并将属性设置为 `Address` ，并将 <xref:System.Net.WebProxy.BypassProxyOnLocal%2A> 属性设置为 `BypassOnLocal` 。</span><span class="sxs-lookup"><span data-stu-id="18774-154">The <xref:System.Net.WebProxy> instance is initialized with the <xref:System.Net.WebProxy.Address%2A> property set to `Address` and with the <xref:System.Net.WebProxy.BypassProxyOnLocal%2A> property set to `BypassOnLocal`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18774-155">下面的代码示例演示如何调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="18774-155">The following code example demonstrates calling this constructor.</span></span>  
  
 [!code-cpp[NCLWebProxy#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebProxy/CPP/nclwebproxy.cpp#3)]
 [!code-csharp[NCLWebProxy#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebProxy/CS/nclwebproxy.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebProxy (string Address, bool BypassOnLocal, string[]? BypassList);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string Address, bool BypassOnLocal, string[] BypassList) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebProxy.#ctor(System.String,System.Boolean,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Address As String, BypassOnLocal As Boolean, BypassList As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebProxy(System::String ^ Address, bool BypassOnLocal, cli::array &lt;System::String ^&gt; ^ BypassList);" />
      <MemberSignature Language="F#" Value="new System.Net.WebProxy : string * bool * string[] -&gt; System.Net.WebProxy" Usage="new System.Net.WebProxy (Address, BypassOnLocal, BypassList)" />
      <MemberSignature Language="C#" Value="public WebProxy (string Address, bool BypassOnLocal, string[] BypassList);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebProxy</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="Address" Type="System.String" />
        <Parameter Name="BypassOnLocal" Type="System.Boolean" />
        <Parameter Name="BypassList" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="Address"><span data-ttu-id="18774-156">代理服务器的 URI。</span><span class="sxs-lookup"><span data-stu-id="18774-156">The URI of the proxy server.</span></span></param>
        <param name="BypassOnLocal"><span data-ttu-id="18774-157">如果对本地地址跳过代理，则为 <see langword="true" />；否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18774-157"><see langword="true" /> to bypass the proxy for local addresses; otherwise, <see langword="false" />.</span></span></param>
        <param name="BypassList"><span data-ttu-id="18774-158">一个正则表达式字符串数组，它包含要跳过的服务器的 URI。</span><span class="sxs-lookup"><span data-stu-id="18774-158">An array of regular expression strings that contain the URIs of the servers to bypass.</span></span></param>
        <summary><span data-ttu-id="18774-159">使用指定的 URI、回避设置和要回避的 URI 列表初始化 <see cref="T:System.Net.WebProxy" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="18774-159">Initializes a new instance of the <see cref="T:System.Net.WebProxy" /> class with the specified URI, bypass setting, and list of URIs to bypass.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18774-160"><xref:System.Net.WebProxy>初始化实例，并将 <xref:System.Net.WebProxy.Address%2A> 属性设置为包含的 <xref:System.Uri> 实例，将 `Address` 属性设置 <xref:System.Net.WebProxy.BypassProxyOnLocal%2A> 为 `BypassOnLocal` ，并将 <xref:System.Net.WebProxy.BypassList%2A> 属性设置为 `BypassList` 。</span><span class="sxs-lookup"><span data-stu-id="18774-160">The <xref:System.Net.WebProxy> instance is initialized with the <xref:System.Net.WebProxy.Address%2A> property set to a <xref:System.Uri> instance that contains `Address`, the <xref:System.Net.WebProxy.BypassProxyOnLocal%2A> property set to `BypassOnLocal`, and the <xref:System.Net.WebProxy.BypassList%2A> property set to `BypassList`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18774-161">下面的代码示例演示如何调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="18774-161">The following code example demonstrates calling this constructor.</span></span>  
  
 [!code-cpp[NCLWebProxy#8](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebProxy/CPP/nclwebproxy.cpp#8)]
 [!code-csharp[NCLWebProxy#8](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebProxy/CS/nclwebproxy.cs#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UriFormatException"><span data-ttu-id="18774-162"><paramref name="Address" /> 是无效的 URI。</span><span class="sxs-lookup"><span data-stu-id="18774-162"><paramref name="Address" /> is an invalid URI.</span></span></exception>
        <altmember cref="P:System.Net.WebProxy.BypassProxyOnLocal" />
        <altmember cref="P:System.Net.WebProxy.BypassList" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebProxy (Uri Address, bool BypassOnLocal, string[]? BypassList);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri Address, bool BypassOnLocal, string[] BypassList) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebProxy.#ctor(System.Uri,System.Boolean,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Address As Uri, BypassOnLocal As Boolean, BypassList As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebProxy(Uri ^ Address, bool BypassOnLocal, cli::array &lt;System::String ^&gt; ^ BypassList);" />
      <MemberSignature Language="F#" Value="new System.Net.WebProxy : Uri * bool * string[] -&gt; System.Net.WebProxy" Usage="new System.Net.WebProxy (Address, BypassOnLocal, BypassList)" />
      <MemberSignature Language="C#" Value="public WebProxy (Uri Address, bool BypassOnLocal, string[] BypassList);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebProxy</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="Address" Type="System.Uri" />
        <Parameter Name="BypassOnLocal" Type="System.Boolean" />
        <Parameter Name="BypassList" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="Address"><span data-ttu-id="18774-163">一个 <see cref="T:System.Uri" /> 实例，它包含代理服务器的地址。</span><span class="sxs-lookup"><span data-stu-id="18774-163">A <see cref="T:System.Uri" /> instance that contains the address of the proxy server.</span></span></param>
        <param name="BypassOnLocal"><span data-ttu-id="18774-164">如果对本地地址跳过代理，则为 <see langword="true" />；否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18774-164"><see langword="true" /> to bypass the proxy for local addresses; otherwise, <see langword="false" />.</span></span></param>
        <param name="BypassList"><span data-ttu-id="18774-165">一个正则表达式字符串数组，它包含要跳过的服务器的 URI。</span><span class="sxs-lookup"><span data-stu-id="18774-165">An array of regular expression strings that contains the URIs of the servers to bypass.</span></span></param>
        <summary><span data-ttu-id="18774-166">使用指定的 <see cref="T:System.Net.WebProxy" /> 实例、回避设置和要回避的 URI 列表初始化 <see cref="T:System.Uri" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="18774-166">Initializes a new instance of the <see cref="T:System.Net.WebProxy" /> class with the specified <see cref="T:System.Uri" /> instance, bypass setting, and list of URIs to bypass.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18774-167"><xref:System.Net.WebProxy>初始化实例，并将 <xref:System.Net.WebProxy.Address%2A> 属性设置为，并将属性设置为 `Address` <xref:System.Net.WebProxy.BypassProxyOnLocal%2A> `BypassOnLocal` ，并将 <xref:System.Net.WebProxy.BypassList%2A> 属性设置为 `BypassList` 。</span><span class="sxs-lookup"><span data-stu-id="18774-167">The <xref:System.Net.WebProxy> instance is initialized with the <xref:System.Net.WebProxy.Address%2A> property set to `Address`, the <xref:System.Net.WebProxy.BypassProxyOnLocal%2A> property set to `BypassOnLocal`, and the <xref:System.Net.WebProxy.BypassList%2A> property set to `BypassList`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18774-168">下面的代码示例演示如何调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="18774-168">The following code example demonstrates calling this constructor.</span></span>  
  
 [!code-cpp[NCLWebProxy#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebProxy/CPP/nclwebproxy.cpp#4)]
 [!code-csharp[NCLWebProxy#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebProxy/CS/nclwebproxy.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebProxy (string Address, bool BypassOnLocal, string[]? BypassList, System.Net.ICredentials Credentials);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string Address, bool BypassOnLocal, string[] BypassList, class System.Net.ICredentials Credentials) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebProxy.#ctor(System.String,System.Boolean,System.String[],System.Net.ICredentials)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Address As String, BypassOnLocal As Boolean, BypassList As String(), Credentials As ICredentials)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebProxy(System::String ^ Address, bool BypassOnLocal, cli::array &lt;System::String ^&gt; ^ BypassList, System::Net::ICredentials ^ Credentials);" />
      <MemberSignature Language="F#" Value="new System.Net.WebProxy : string * bool * string[] * System.Net.ICredentials -&gt; System.Net.WebProxy" Usage="new System.Net.WebProxy (Address, BypassOnLocal, BypassList, Credentials)" />
      <MemberSignature Language="C#" Value="public WebProxy (string Address, bool BypassOnLocal, string[] BypassList, System.Net.ICredentials Credentials);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebProxy</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="Address" Type="System.String" />
        <Parameter Name="BypassOnLocal" Type="System.Boolean" />
        <Parameter Name="BypassList" Type="System.String[]" />
        <Parameter Name="Credentials" Type="System.Net.ICredentials" />
      </Parameters>
      <Docs>
        <param name="Address"><span data-ttu-id="18774-169">代理服务器的 URI。</span><span class="sxs-lookup"><span data-stu-id="18774-169">The URI of the proxy server.</span></span></param>
        <param name="BypassOnLocal"><span data-ttu-id="18774-170">如果对本地地址跳过代理，则为 <see langword="true" />；否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18774-170"><see langword="true" /> to bypass the proxy for local addresses; otherwise, <see langword="false" />.</span></span></param>
        <param name="BypassList"><span data-ttu-id="18774-171">一个正则表达式字符串数组，它包含要跳过的服务器的 URI。</span><span class="sxs-lookup"><span data-stu-id="18774-171">An array of regular expression strings that contains the URIs of the servers to bypass.</span></span></param>
        <param name="Credentials"><span data-ttu-id="18774-172">要提交给代理服务器进行身份验证的 <see cref="T:System.Net.ICredentials" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="18774-172">An <see cref="T:System.Net.ICredentials" /> instance to submit to the proxy server for authentication.</span></span></param>
        <summary><span data-ttu-id="18774-173">使用指定的 URI、回避设置、要回避的 URI 列表和凭据初始化 <see cref="T:System.Net.WebProxy" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="18774-173">Initializes a new instance of the <see cref="T:System.Net.WebProxy" /> class with the specified URI, bypass setting, list of URIs to bypass, and credentials.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18774-174"><xref:System.Net.WebProxy>初始化实例，并将 <xref:System.Net.WebProxy.Address%2A> 属性设置为包含的 <xref:System.Uri> 实例，将 `Address` 属性设置为，属性设置 <xref:System.Net.WebProxy.BypassProxyOnLocal%2A> `BypassOnLocal` <xref:System.Net.WebProxy.BypassList%2A> 为 `BypassList` ，并将 <xref:System.Net.WebProxy.Credentials%2A> 属性设置为 `Credentials` 。</span><span class="sxs-lookup"><span data-stu-id="18774-174">The <xref:System.Net.WebProxy> instance is initialized with the <xref:System.Net.WebProxy.Address%2A> property set to a <xref:System.Uri> instance that contains `Address`, the <xref:System.Net.WebProxy.BypassProxyOnLocal%2A> property set to `BypassOnLocal`, the <xref:System.Net.WebProxy.BypassList%2A> property set to `BypassList`, and the <xref:System.Net.WebProxy.Credentials%2A> property set to `Credentials`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18774-175">下面的代码示例演示如何调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="18774-175">The following code example demonstrates calling this constructor.</span></span>  
  
 [!code-cpp[NCLWebProxy#9](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebProxy/CPP/nclwebproxy.cpp#9)]
 [!code-csharp[NCLWebProxy#9](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebProxy/CS/nclwebproxy.cs#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UriFormatException"><span data-ttu-id="18774-176"><paramref name="Address" /> 是无效的 URI。</span><span class="sxs-lookup"><span data-stu-id="18774-176"><paramref name="Address" /> is an invalid URI.</span></span></exception>
        <altmember cref="P:System.Net.WebProxy.BypassProxyOnLocal" />
        <altmember cref="P:System.Net.WebProxy.BypassList" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebProxy (Uri Address, bool BypassOnLocal, string[]? BypassList, System.Net.ICredentials Credentials);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri Address, bool BypassOnLocal, string[] BypassList, class System.Net.ICredentials Credentials) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebProxy.#ctor(System.Uri,System.Boolean,System.String[],System.Net.ICredentials)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Address As Uri, BypassOnLocal As Boolean, BypassList As String(), Credentials As ICredentials)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebProxy(Uri ^ Address, bool BypassOnLocal, cli::array &lt;System::String ^&gt; ^ BypassList, System::Net::ICredentials ^ Credentials);" />
      <MemberSignature Language="F#" Value="new System.Net.WebProxy : Uri * bool * string[] * System.Net.ICredentials -&gt; System.Net.WebProxy" Usage="new System.Net.WebProxy (Address, BypassOnLocal, BypassList, Credentials)" />
      <MemberSignature Language="C#" Value="public WebProxy (Uri Address, bool BypassOnLocal, string[] BypassList, System.Net.ICredentials Credentials);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebProxy</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="Address" Type="System.Uri" />
        <Parameter Name="BypassOnLocal" Type="System.Boolean" />
        <Parameter Name="BypassList" Type="System.String[]" />
        <Parameter Name="Credentials" Type="System.Net.ICredentials" />
      </Parameters>
      <Docs>
        <param name="Address"><span data-ttu-id="18774-177">一个 <see cref="T:System.Uri" /> 实例，它包含代理服务器的地址。</span><span class="sxs-lookup"><span data-stu-id="18774-177">A <see cref="T:System.Uri" /> instance that contains the address of the proxy server.</span></span></param>
        <param name="BypassOnLocal"><span data-ttu-id="18774-178">如果对本地地址跳过代理，则为 <see langword="true" />；否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18774-178"><see langword="true" /> to bypass the proxy for local addresses; otherwise, <see langword="false" />.</span></span></param>
        <param name="BypassList"><span data-ttu-id="18774-179">一个正则表达式字符串数组，它包含要跳过的服务器的 URI。</span><span class="sxs-lookup"><span data-stu-id="18774-179">An array of regular expression strings that contains the URIs of the servers to bypass.</span></span></param>
        <param name="Credentials"><span data-ttu-id="18774-180">要提交给代理服务器进行身份验证的 <see cref="T:System.Net.ICredentials" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="18774-180">An <see cref="T:System.Net.ICredentials" /> instance to submit to the proxy server for authentication.</span></span></param>
        <summary><span data-ttu-id="18774-181">使用指定的 <see cref="T:System.Net.WebProxy" /> 实例、回避设置、要回避的 URI 列表和凭据初始化 <see cref="T:System.Uri" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="18774-181">Initializes a new instance of the <see cref="T:System.Net.WebProxy" /> class with the specified <see cref="T:System.Uri" /> instance, bypass setting, list of URIs to bypass, and credentials.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18774-182"><xref:System.Net.WebProxy>初始化实例时 <xref:System.Net.WebProxy.Address%2A> ，属性设置为，属性 `Address` 设置为， <xref:System.Net.WebProxy.BypassProxyOnLocal%2A> `BypassOnLocal` <xref:System.Net.WebProxy.BypassList%2A> 属性设置为 `BypassList` ， <xref:System.Net.WebProxy.Credentials%2A> 属性设置为 `Credentials` 。</span><span class="sxs-lookup"><span data-stu-id="18774-182">The <xref:System.Net.WebProxy> instance is initialized with the <xref:System.Net.WebProxy.Address%2A> property set to `Address`, the <xref:System.Net.WebProxy.BypassProxyOnLocal%2A> property set to `BypassOnLocal`, the <xref:System.Net.WebProxy.BypassList%2A> property set to `BypassList`, and the <xref:System.Net.WebProxy.Credentials%2A> property set to `Credentials`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18774-183">下面的代码示例演示如何调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="18774-183">The following code example demonstrates calling this constructor.</span></span>  
  
 [!code-cpp[NCLWebProxy#13](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebProxy/CPP/nclwebproxy.cpp#13)]
 [!code-csharp[NCLWebProxy#13](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebProxy/CS/nclwebproxy.cs#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Address">
      <MemberSignature Language="C#" Value="public Uri Address { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Address" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebProxy.Address" />
      <MemberSignature Language="VB.NET" Value="Public Property Address As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ Address { Uri ^ get(); void set(Uri ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Address : Uri with get, set" Usage="System.Net.WebProxy.Address" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebProxy</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18774-184">获取或设置代理服务器的地址。</span><span class="sxs-lookup"><span data-stu-id="18774-184">Gets or sets the address of the proxy server.</span></span></summary>
        <value><span data-ttu-id="18774-185">一个 <see cref="T:System.Uri" /> 实例，它包含代理服务器的地址。</span><span class="sxs-lookup"><span data-stu-id="18774-185">A <see cref="T:System.Uri" /> instance that contains the address of the proxy server.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18774-186"><xref:System.Net.WebProxy.Address%2A>属性包含代理服务器的地址。</span><span class="sxs-lookup"><span data-stu-id="18774-186">The <xref:System.Net.WebProxy.Address%2A> property contains the address of the proxy server.</span></span> <span data-ttu-id="18774-187">当未启用自动代理检测且未指定自动配置脚本时， <xref:System.Net.WebProxy.Address%2A> 属性和 <xref:System.Net.WebProxy.BypassList%2A> 确定用于请求的代理。</span><span class="sxs-lookup"><span data-stu-id="18774-187">When automatic proxy detection is not enabled, and no automatic configuration script is specified, the <xref:System.Net.WebProxy.Address%2A> property and <xref:System.Net.WebProxy.BypassList%2A> determine the proxy used for a request.</span></span>  
  
 <span data-ttu-id="18774-188">当 <xref:System.Net.WebProxy.Address%2A> 属性为时 `null` ，请求将绕过代理并直接连接到目标主机。</span><span class="sxs-lookup"><span data-stu-id="18774-188">When the <xref:System.Net.WebProxy.Address%2A> property is `null`, requests bypass the proxy and connect directly to the destination host.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18774-189">下面的代码示例显示对象的属性 <xref:System.Net.WebProxy> ，包括其 <xref:System.Net.WebProxy.Address%2A> 。</span><span class="sxs-lookup"><span data-stu-id="18774-189">The following code example displays the properties of a <xref:System.Net.WebProxy> object, including its <xref:System.Net.WebProxy.Address%2A>.</span></span>  
  
 [!code-cpp[NCLAutoProxy#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLAutoProxy/CPP/proxy.cpp#1)]
 [!code-csharp[NCLAutoProxy#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLAutoProxy/CS/proxy.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BypassArrayList">
      <MemberSignature Language="C#" Value="public System.Collections.ArrayList? BypassArrayList { get; }" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ArrayList BypassArrayList" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebProxy.BypassArrayList" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BypassArrayList As ArrayList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ArrayList ^ BypassArrayList { System::Collections::ArrayList ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BypassArrayList : System.Collections.ArrayList" Usage="System.Net.WebProxy.BypassArrayList" />
      <MemberSignature Language="C#" Value="public System.Collections.ArrayList BypassArrayList { get; }" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebProxy</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ArrayList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18774-190">获取不使用代理服务器的地址列表。</span><span class="sxs-lookup"><span data-stu-id="18774-190">Gets a list of addresses that do not use the proxy server.</span></span></summary>
        <value><span data-ttu-id="18774-191">一个 <see cref="T:System.Collections.ArrayList" />，其中包含表示 URI 的 <see cref="P:System.Net.WebProxy.BypassList" /> 数组的列表，这些 URI 在被访问时不使用代理服务器。</span><span class="sxs-lookup"><span data-stu-id="18774-191">An <see cref="T:System.Collections.ArrayList" /> that contains a list of <see cref="P:System.Net.WebProxy.BypassList" /> arrays that represents URIs that do not use the proxy server when accessed.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18774-192"><xref:System.Net.WebProxy.BypassList%2A>是正则表达式字符串的数组列表，它们描述 <xref:System.Net.WebRequest> 实例直接访问而不是通过代理服务器访问的 uri。</span><span class="sxs-lookup"><span data-stu-id="18774-192">The <xref:System.Net.WebProxy.BypassList%2A> is an array list of regular expression strings that describe the URIs that a <xref:System.Net.WebRequest> instance accesses directly instead of through the proxy server.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BypassList">
      <MemberSignature Language="C#" Value="public string[]? BypassList { get; set; }" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] BypassList" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebProxy.BypassList" />
      <MemberSignature Language="VB.NET" Value="Public Property BypassList As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ BypassList { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BypassList : string[] with get, set" Usage="System.Net.WebProxy.BypassList" />
      <MemberSignature Language="C#" Value="public string[] BypassList { get; set; }" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebProxy</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18774-193">获取或设置一个地址数组，这些地址不使用代理服务器。</span><span class="sxs-lookup"><span data-stu-id="18774-193">Gets or sets an array of addresses that do not use the proxy server.</span></span></summary>
        <value><span data-ttu-id="18774-194">包含描述 URI 的正则表达式列表的数组，这些 URI 在被访问时不使用代理服务器。</span><span class="sxs-lookup"><span data-stu-id="18774-194">An array that contains a list of regular expressions that describe URIs that do not use the proxy server when accessed.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18774-195"><xref:System.Net.WebProxy.BypassList%2A>属性包含正则表达式的数组，这些表达式描述 <xref:System.Net.WebRequest> 实例直接访问而不是通过代理服务器访问的 uri。</span><span class="sxs-lookup"><span data-stu-id="18774-195">The <xref:System.Net.WebProxy.BypassList%2A> property contains an array of regular expressions that describe URIs that a <xref:System.Net.WebRequest> instance accesses directly instead of through the proxy server.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18774-196">下面的代码示例显示对象的属性 <xref:System.Net.WebProxy> ，包括其 <xref:System.Net.WebProxy.BypassList%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="18774-196">The following code example displays the properties of a <xref:System.Net.WebProxy> object, including its <xref:System.Net.WebProxy.BypassList%2A> property.</span></span>  
  
 [!code-cpp[NCLAutoProxy#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLAutoProxy/CPP/proxy.cpp#1)]
 [!code-csharp[NCLAutoProxy#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLAutoProxy/CS/proxy.cs#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.RegularExpressions.Regex" />
      </Docs>
    </Member>
    <Member MemberName="BypassProxyOnLocal">
      <MemberSignature Language="C#" Value="public bool BypassProxyOnLocal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BypassProxyOnLocal" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebProxy.BypassProxyOnLocal" />
      <MemberSignature Language="VB.NET" Value="Public Property BypassProxyOnLocal As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool BypassProxyOnLocal { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.BypassProxyOnLocal : bool with get, set" Usage="System.Net.WebProxy.BypassProxyOnLocal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebProxy</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18774-197">获取或设置一个值，该值指示是否跳过代理服务器而使用本地地址。</span><span class="sxs-lookup"><span data-stu-id="18774-197">Gets or sets a value that indicates whether to bypass the proxy server for local addresses.</span></span></summary>
        <value><span data-ttu-id="18774-198">如果跳过代理服务器而使用本地地址，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18774-198"><see langword="true" /> to bypass the proxy server for local addresses; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="18774-199">默认值是 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18774-199">The default value is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18774-200">属性的设置 <xref:System.Net.WebProxy.BypassProxyOnLocal%2A> 确定 <xref:System.Net.WebRequest> 在访问本地 Internet 资源时实例是否使用代理服务器。</span><span class="sxs-lookup"><span data-stu-id="18774-200">The setting of the <xref:System.Net.WebProxy.BypassProxyOnLocal%2A> property determines whether <xref:System.Net.WebRequest> instances use the proxy server when accessing local Internet resources.</span></span>  
  
 <span data-ttu-id="18774-201">如果 <xref:System.Net.WebProxy.BypassProxyOnLocal%2A> 为 `true`，则对本地 Internet 资源的请求不使用代理服务器。</span><span class="sxs-lookup"><span data-stu-id="18774-201">If <xref:System.Net.WebProxy.BypassProxyOnLocal%2A> is `true`, requests to local Internet resources do not use the proxy server.</span></span> <span data-ttu-id="18774-202">通过在 URI 中缺少一个句点 )  ( 来标识本地请求，如中所示， `http://webserver/` 或访问本地服务器，包括 `http://localhost` 、 `http://loopback` 或 `http://127.0.0.1` 。</span><span class="sxs-lookup"><span data-stu-id="18774-202">Local requests are identified by the lack of a period (.) in the URI, as in `http://webserver/`, or access the local server, including `http://localhost`, `http://loopback`, or `http://127.0.0.1`.</span></span> <span data-ttu-id="18774-203"><xref:System.Net.WebProxy.BypassProxyOnLocal%2A> 为 `false` 时，所有 Internet 请求都通过代理服务器进行。</span><span class="sxs-lookup"><span data-stu-id="18774-203">When <xref:System.Net.WebProxy.BypassProxyOnLocal%2A> is `false`, all Internet requests are made through the proxy server.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="18774-204">对包含句点的 URI 的本地主机的请求使用代理。</span><span class="sxs-lookup"><span data-stu-id="18774-204">Requests to a local host with a URI that contain a period use the proxy.</span></span> <span data-ttu-id="18774-205">若要避免在这些情况下使用代理，请在中为主机创建一个条目 <xref:System.Net.WebProxy.BypassList%2A> 。</span><span class="sxs-lookup"><span data-stu-id="18774-205">To avoid using a proxy in these cases, create an entry for the host in the <xref:System.Net.WebProxy.BypassList%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18774-206">下面的代码示例演示如何调用设置此属性和获取此属性的值的构造函数。</span><span class="sxs-lookup"><span data-stu-id="18774-206">The following code example demonstrates calling a constructor that sets this property and getting the value of this property.</span></span>  
  
 [!code-cpp[NCLWebProxy#7](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebProxy/CPP/nclwebproxy.cpp#7)]
 [!code-csharp[NCLWebProxy#7](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebProxy/CS/nclwebproxy.cs#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDefaultProxy">
      <MemberSignature Language="C#" Value="public static System.Net.IWebProxy CreateDefaultProxy ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.IWebProxy CreateDefaultProxy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebProxy.CreateDefaultProxy" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateDefaultProxy () As IWebProxy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Net::IWebProxy ^ CreateDefaultProxy();" />
      <MemberSignature Language="F#" Value="static member CreateDefaultProxy : unit -&gt; System.Net.IWebProxy" Usage="System.Net.WebProxy.CreateDefaultProxy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebProxy</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IWebProxy</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Credentials">
      <MemberSignature Language="C#" Value="public System.Net.ICredentials Credentials { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.ICredentials Credentials" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebProxy.Credentials" />
      <MemberSignature Language="VB.NET" Value="Public Property Credentials As ICredentials" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::ICredentials ^ Credentials { System::Net::ICredentials ^ get(); void set(System::Net::ICredentials ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Credentials : System.Net.ICredentials with get, set" Usage="System.Net.WebProxy.Credentials" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Net.IWebProxy.Credentials</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebProxy</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.ICredentials</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18774-207">获取或设置要提交到代理服务器进行身份验证的凭据。</span><span class="sxs-lookup"><span data-stu-id="18774-207">Gets or sets the credentials to submit to the proxy server for authentication.</span></span></summary>
        <value><span data-ttu-id="18774-208">一个 <see cref="T:System.Net.ICredentials" /> 实例，它包含要提交给代理服务器进行身份验证的凭据。</span><span class="sxs-lookup"><span data-stu-id="18774-208">An <see cref="T:System.Net.ICredentials" /> instance that contains the credentials to submit to the proxy server for authentication.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18774-209"><xref:System.Net.WebProxy.Credentials%2A>属性包含要发送到代理服务器的身份验证凭据，以响应 HTTP 407 (proxy authorization) 状态代码。</span><span class="sxs-lookup"><span data-stu-id="18774-209">The <xref:System.Net.WebProxy.Credentials%2A> property contains the authentication credentials to send to the proxy server in response to an HTTP 407 (proxy authorization) status code.</span></span> <span data-ttu-id="18774-210">在大多数客户端方案中，应使用 <xref:System.Net.CredentialCache.DefaultCredentials%2A> ，这是当前已登录用户的凭据。</span><span class="sxs-lookup"><span data-stu-id="18774-210">In most client scenarios, you should use the <xref:System.Net.CredentialCache.DefaultCredentials%2A>, which are the credentials of the currently logged on user.</span></span> <span data-ttu-id="18774-211">为此，请将 <xref:System.Net.WebProxy.UseDefaultCredentials%2A> 属性设置为， `true` 而不是设置此属性。</span><span class="sxs-lookup"><span data-stu-id="18774-211">To do this, set the <xref:System.Net.WebProxy.UseDefaultCredentials%2A> property to `true` instead of setting this property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="18774-212">如果将属性设置 <xref:System.Net.WebProxy.Credentials%2A> 为的凭据不是，则将 <xref:System.Net.CredentialCache.DefaultCredentials%2A> <xref:System.Net.WebProxy.UseDefaultCredentials%2A> 属性设置为将 `true` 导致 <xref:System.InvalidOperationException> 。</span><span class="sxs-lookup"><span data-stu-id="18774-212">If you set the <xref:System.Net.WebProxy.Credentials%2A> property to credentials other than the <xref:System.Net.CredentialCache.DefaultCredentials%2A>, setting the <xref:System.Net.WebProxy.UseDefaultCredentials%2A> property to `true` causes a <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="18774-213">若要防止出现这种情况，必须在将 <xref:System.Net.WebProxy.Credentials%2A> `null` 属性设置为之前将属性设置为 <xref:System.Net.WebProxy.UseDefaultCredentials%2A> `true` 。</span><span class="sxs-lookup"><span data-stu-id="18774-213">To prevent this, you must set the <xref:System.Net.WebProxy.Credentials%2A> property to `null` before setting the <xref:System.Net.WebProxy.UseDefaultCredentials%2A> property to `true`.</span></span> <span data-ttu-id="18774-214">同样，如果为，则不能将此属性设置为任意值 <xref:System.Net.WebProxy.UseDefaultCredentials%2A> `true` 。</span><span class="sxs-lookup"><span data-stu-id="18774-214">Likewise, you cannot set this property to any value when <xref:System.Net.WebProxy.UseDefaultCredentials%2A> is `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="18774-215">将 <see cref="P:System.Net.WebProxy.UseDefaultCredentials" /> 属性设置为 <see langword="true" /> 后，尝试设置此属性。</span><span class="sxs-lookup"><span data-stu-id="18774-215">You attempted to set this property when the <see cref="P:System.Net.WebProxy.UseDefaultCredentials" /> property was set to <see langword="true" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultProxy">
      <MemberSignature Language="C#" Value="public static System.Net.WebProxy GetDefaultProxy ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.WebProxy GetDefaultProxy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebProxy.GetDefaultProxy" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDefaultProxy () As WebProxy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Net::WebProxy ^ GetDefaultProxy();" />
      <MemberSignature Language="F#" Value="static member GetDefaultProxy : unit -&gt; System.Net.WebProxy" Usage="System.Net.WebProxy.GetDefaultProxy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebProxy</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Obsolete("This method has been deprecated. Please use the proxy selected for you by default. http://go.microsoft.com/fwlink/?linkid=14202")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This method has been deprecated. Please use the proxy selected for you by default. http://go.microsoft.com/fwlink/?linkid=14202")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-3.1;netstandard-2.1">
          <AttributeName Language="C#">[System.Obsolete("This method has been deprecated. Please use the proxy selected for you by default. https://go.microsoft.com/fwlink/?linkid=14202")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This method has been deprecated. Please use the proxy selected for you by default. https://go.microsoft.com/fwlink/?linkid=14202")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.WebProxy</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="18774-216">读取 Internet Explorer 非动态代理设置。</span><span class="sxs-lookup"><span data-stu-id="18774-216">Reads the Internet Explorer nondynamic proxy settings.</span></span></summary>
        <returns><span data-ttu-id="18774-217">一个 <see cref="T:System.Net.WebProxy" /> 实例，它包含 Internet Explorer 5.5 及更高版本中的非动态代理设置。</span><span class="sxs-lookup"><span data-stu-id="18774-217">A <see cref="T:System.Net.WebProxy" /> instance that contains the nondynamic proxy settings from Internet Explorer 5.5 and later.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18774-218"><xref:System.Net.WebProxy.GetDefaultProxy%2A>方法读取 Internet Explorer 5.5 和更高版本存储的非动态代理设置，并 <xref:System.Net.WebProxy> 使用这些设置创建一个实例。</span><span class="sxs-lookup"><span data-stu-id="18774-218">The <xref:System.Net.WebProxy.GetDefaultProxy%2A> method reads the nondynamic proxy settings stored by Internet Explorer 5.5 and later, and creates a <xref:System.Net.WebProxy> instance with those settings.</span></span>  
  
 <span data-ttu-id="18774-219"><xref:System.Net.WebProxy.GetDefaultProxy%2A>方法不会从 Internet Explorer 运行的脚本、自动配置条目或从 DHCP 或 DNS 查找中提取任何动态设置。</span><span class="sxs-lookup"><span data-stu-id="18774-219">The <xref:System.Net.WebProxy.GetDefaultProxy%2A> method does not pick up any dynamic settings that are generated from scripts run by Internet Explorer, from automatic configuration entries, or from DHCP or DNS lookups.</span></span>  
  
 <span data-ttu-id="18774-220">应用程序应使用 <xref:System.Net.WebRequest.DefaultWebProxy%2A?displayProperty=nameWithType> 属性和 <xref:System.Net.WebRequest.GetSystemWebProxy%2A?displayProperty=nameWithType> 方法，而不是 <xref:System.Net.WebProxy.GetDefaultProxy%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="18774-220">Applications should use the <xref:System.Net.WebRequest.DefaultWebProxy%2A?displayProperty=nameWithType> property and the <xref:System.Net.WebRequest.GetSystemWebProxy%2A?displayProperty=nameWithType> method instead of the <xref:System.Net.WebProxy.GetDefaultProxy%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18774-221">下面的代码示例演示如何调用此方法。</span><span class="sxs-lookup"><span data-stu-id="18774-221">The following code example demonstrates calling this method.</span></span>  
  
 [!code-cpp[NCLWebProxy#11](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebProxy/CPP/nclwebproxy.cpp#11)]
 [!code-csharp[NCLWebProxy#11](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebProxy/CS/nclwebproxy.cs#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="protected virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo serializationInfo, valuetype System.Runtime.Serialization.StreamingContext streamingContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebProxy.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GetObjectData (serializationInfo As SerializationInfo, streamingContext As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ serializationInfo, System::Runtime::Serialization::StreamingContext streamingContext);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="webProxy.GetObjectData (serializationInfo, streamingContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebProxy</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serializationInfo" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="streamingContext" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="serializationInfo"><span data-ttu-id="18774-222">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</span><span class="sxs-lookup"><span data-stu-id="18774-222">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</span></span></param>
        <param name="streamingContext"><span data-ttu-id="18774-223">用于指定该序列化的目标的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</span><span class="sxs-lookup"><span data-stu-id="18774-223">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> that specifies the destination for this serialization.</span></span></param>
        <summary><span data-ttu-id="18774-224">使用序列化目标对象所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</span><span class="sxs-lookup"><span data-stu-id="18774-224">Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data that is needed to serialize the target object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18774-225"><xref:System.Runtime.Serialization.SerializationInfo>格式化程序会自动跟踪和序列化中包含的所有对象。</span><span class="sxs-lookup"><span data-stu-id="18774-225">Any objects included in the <xref:System.Runtime.Serialization.SerializationInfo> are automatically tracked and serialized by the formatter.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProxy">
      <MemberSignature Language="C#" Value="public Uri? GetProxy (Uri destination);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Uri GetProxy(class System.Uri destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebProxy.GetProxy(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProxy (destination As Uri) As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Uri ^ GetProxy(Uri ^ destination);" />
      <MemberSignature Language="F#" Value="abstract member GetProxy : Uri -&gt; Uri&#xA;override this.GetProxy : Uri -&gt; Uri" Usage="webProxy.GetProxy destination" />
      <MemberSignature Language="C#" Value="public Uri GetProxy (Uri destination);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Net.IWebProxy.GetProxy(System.Uri)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebProxy</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="18774-226">所请求 Internet 资源的 <see cref="T:System.Uri" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="18774-226">The <see cref="T:System.Uri" /> instance of the requested Internet resource.</span></span></param>
        <summary><span data-ttu-id="18774-227">返回请求的已代理 URI。</span><span class="sxs-lookup"><span data-stu-id="18774-227">Returns the proxied URI for a request.</span></span></summary>
        <returns><span data-ttu-id="18774-228">如果资源在回避列表上，则为 Internet 资源的 <see cref="T:System.Uri" /> 实例；否则为代理的 <see cref="T:System.Uri" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="18774-228">The <see cref="T:System.Uri" /> instance of the Internet resource, if the resource is on the bypass list; otherwise, the <see cref="T:System.Uri" /> instance of the proxy.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18774-229"><xref:System.Net.WebProxy.GetProxy%2A>方法返回 <xref:System.Net.WebRequest> 实例用于访问 Internet 资源的 URI。</span><span class="sxs-lookup"><span data-stu-id="18774-229">The <xref:System.Net.WebProxy.GetProxy%2A> method returns the URI that the <xref:System.Net.WebRequest> instance uses to access the Internet resource.</span></span>  
  
 <span data-ttu-id="18774-230"><xref:System.Net.WebProxy.GetProxy%2A>`destination`使用方法与的内容进行比较 <xref:System.Net.WebProxy.BypassList%2A> <xref:System.Net.WebProxy.IsBypassed%2A> 。</span><span class="sxs-lookup"><span data-stu-id="18774-230"><xref:System.Net.WebProxy.GetProxy%2A> compares `destination` with the contents of <xref:System.Net.WebProxy.BypassList%2A>, using the <xref:System.Net.WebProxy.IsBypassed%2A> method.</span></span> <span data-ttu-id="18774-231">如果 <xref:System.Net.WebProxy.IsBypassed%2A> 返回 `true` ，则 <xref:System.Net.WebProxy.GetProxy%2A> 返回， `destination` 并且该 <xref:System.Net.WebRequest> 实例不使用代理服务器。</span><span class="sxs-lookup"><span data-stu-id="18774-231">If <xref:System.Net.WebProxy.IsBypassed%2A> returns `true`, <xref:System.Net.WebProxy.GetProxy%2A> returns `destination` and the <xref:System.Net.WebRequest> instance does not use the proxy server.</span></span>  
  
 <span data-ttu-id="18774-232">如果不 `destination` 在中 <xref:System.Net.WebProxy.BypassList%2A> ，则 <xref:System.Net.WebRequest> 实例使用代理服务器并 <xref:System.Net.WebProxy.Address%2A> 返回属性。</span><span class="sxs-lookup"><span data-stu-id="18774-232">If `destination` is not in <xref:System.Net.WebProxy.BypassList%2A>, the <xref:System.Net.WebRequest> instance uses the proxy server and the <xref:System.Net.WebProxy.Address%2A> property is returned.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18774-233">下面的代码示例创建一个 <xref:System.Net.WebProxy> 对象并调用此方法来获取为资源选择的代理。</span><span class="sxs-lookup"><span data-stu-id="18774-233">The following code example creates a <xref:System.Net.WebProxy> object and calls this method to get the proxy that is selected for a resource.</span></span>  
  
 [!code-cpp[NCLAutoProxy#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLAutoProxy/CPP/proxy.cpp#2)]
 [!code-csharp[NCLAutoProxy#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLAutoProxy/CS/proxy.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="18774-234"><paramref name="destination" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="18774-234">The <paramref name="destination" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsBypassed">
      <MemberSignature Language="C#" Value="public bool IsBypassed (Uri host);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsBypassed(class System.Uri host) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebProxy.IsBypassed(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsBypassed (host As Uri) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsBypassed(Uri ^ host);" />
      <MemberSignature Language="F#" Value="abstract member IsBypassed : Uri -&gt; bool&#xA;override this.IsBypassed : Uri -&gt; bool" Usage="webProxy.IsBypassed host" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Net.IWebProxy.IsBypassed(System.Uri)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebProxy</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="host"><span data-ttu-id="18774-235">要检查代理使用情况的主机的 <see cref="T:System.Uri" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="18774-235">The <see cref="T:System.Uri" /> instance of the host to check for proxy use.</span></span></param>
        <summary><span data-ttu-id="18774-236">指示是否对指定的主机使用代理服务器。</span><span class="sxs-lookup"><span data-stu-id="18774-236">Indicates whether to use the proxy server for the specified host.</span></span></summary>
        <returns><span data-ttu-id="18774-237">如果代理服务器不应用于 <paramref name="host" />，则为 <see langword="true" />；否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18774-237"><see langword="true" /> if the proxy server should not be used for <paramref name="host" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18774-238"><xref:System.Net.WebProxy.IsBypassed%2A>方法用于确定在访问 Internet 资源时是否绕过代理服务器。</span><span class="sxs-lookup"><span data-stu-id="18774-238">The <xref:System.Net.WebProxy.IsBypassed%2A> method is used to determine whether to bypass the proxy server when accessing an Internet resource.</span></span>  
  
 <span data-ttu-id="18774-239"><xref:System.Net.WebProxy.BypassProxyOnLocal%2A>和 <xref:System.Net.WebProxy.BypassList%2A> 属性控制方法的返回值 <xref:System.Net.WebProxy.IsBypassed%2A> 。</span><span class="sxs-lookup"><span data-stu-id="18774-239">The <xref:System.Net.WebProxy.BypassProxyOnLocal%2A> and <xref:System.Net.WebProxy.BypassList%2A> properties control the return value of the <xref:System.Net.WebProxy.IsBypassed%2A> method.</span></span>  
  
 <span data-ttu-id="18774-240"><xref:System.Net.WebProxy.IsBypassed%2A>`true`在以下任何条件下返回：</span><span class="sxs-lookup"><span data-stu-id="18774-240"><xref:System.Net.WebProxy.IsBypassed%2A> returns `true` under any of the following conditions:</span></span>  
  
-   <span data-ttu-id="18774-241">如果 <xref:System.Net.WebProxy.BypassProxyOnLocal%2A> 为 `true` 且 `host` 为本地 URI，则为。</span><span class="sxs-lookup"><span data-stu-id="18774-241">If <xref:System.Net.WebProxy.BypassProxyOnLocal%2A> is `true` and `host` is a local URI.</span></span> <span data-ttu-id="18774-242">本地请求通过在 URI 中缺少句点 )  ( 来标识，如中所示 `http://webserver/` 。</span><span class="sxs-lookup"><span data-stu-id="18774-242">Local requests are identified by the lack of a period (.) in the URI, as in `http://webserver/`.</span></span>  
  
-   <span data-ttu-id="18774-243">如果 `host` 与中的正则表达式匹配，则为 <xref:System.Net.WebProxy.BypassList%2A> 。</span><span class="sxs-lookup"><span data-stu-id="18774-243">If `host` matches a regular expression in <xref:System.Net.WebProxy.BypassList%2A>.</span></span>  
  
-   <span data-ttu-id="18774-244">如果 <xref:System.Net.WebProxy.Address%2A> 为 `null`。</span><span class="sxs-lookup"><span data-stu-id="18774-244">If <xref:System.Net.WebProxy.Address%2A> is `null`.</span></span>  
  
 <span data-ttu-id="18774-245">所有其他条件返回 `false` 。</span><span class="sxs-lookup"><span data-stu-id="18774-245">All other conditions return `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18774-246">下面的代码示例创建一个 <xref:System.Net.WebProxy> 对象并调用此方法来检查是否正确设置了跳过列表。</span><span class="sxs-lookup"><span data-stu-id="18774-246">The following code example creates a <xref:System.Net.WebProxy> object and calls this method to check whether the bypass list is properly set.</span></span>  
  
 [!code-cpp[NCLWebProxy#12](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebProxy/CPP/nclwebproxy.cpp#12)]
 [!code-csharp[NCLWebProxy#12](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebProxy/CS/nclwebproxy.cs#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="18774-247"><paramref name="host" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="18774-247">The <paramref name="host" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo serializationInfo, valuetype System.Runtime.Serialization.StreamingContext streamingContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebProxy.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (serializationInfo As SerializationInfo, streamingContext As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ serializationInfo, System::Runtime::Serialization::StreamingContext streamingContext) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberSignature Language="F#" Value="abstract member System.Runtime.Serialization.ISerializable.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.System.Runtime.Serialization.ISerializable.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="webProxy.System.Runtime.Serialization.ISerializable.GetObjectData (serializationInfo, streamingContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebProxy</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serializationInfo" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="streamingContext" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="serializationInfo"><span data-ttu-id="18774-248">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="18774-248">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object to populate with data.</span></span></param>
        <param name="streamingContext"><span data-ttu-id="18774-249">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 结构，指定该序列化的目标。</span><span class="sxs-lookup"><span data-stu-id="18774-249">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> structure that indicates the destination for this serialization.</span></span></param>
        <summary><span data-ttu-id="18774-250">创建系统序列化 <see cref="T:System.Net.WebProxy" /> 对象时所使用的序列化数据和上下文。</span><span class="sxs-lookup"><span data-stu-id="18774-250">Creates the serialization data and context that are used by the system to serialize a <see cref="T:System.Net.WebProxy" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18774-251">系统调用此方法对对象进行序列化;应用程序不会直接调用它。</span><span class="sxs-lookup"><span data-stu-id="18774-251">The system calls this method to serialize an object; applications do not call it directly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseDefaultCredentials">
      <MemberSignature Language="C#" Value="public bool UseDefaultCredentials { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseDefaultCredentials" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebProxy.UseDefaultCredentials" />
      <MemberSignature Language="VB.NET" Value="Public Property UseDefaultCredentials As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseDefaultCredentials { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseDefaultCredentials : bool with get, set" Usage="System.Net.WebProxy.UseDefaultCredentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebProxy</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18774-252">获取或设置 <see cref="T:System.Boolean" /> 值，该值控制 <see cref="P:System.Net.CredentialCache.DefaultCredentials" /> 是否随请求一起发送。</span><span class="sxs-lookup"><span data-stu-id="18774-252">Gets or sets a <see cref="T:System.Boolean" /> value that controls whether the <see cref="P:System.Net.CredentialCache.DefaultCredentials" /> are sent with requests.</span></span></summary>
        <value><span data-ttu-id="18774-253">如果使用默认凭据，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18774-253"><see langword="true" /> if the default credentials are used; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="18774-254">默认值是 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18774-254">The default value is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18774-255">`true`如果此对象发出的请求 <xref:System.Net.WebProxy> 应在服务器请求时使用当前登录用户的凭据进行身份验证，请将此属性设置为。</span><span class="sxs-lookup"><span data-stu-id="18774-255">Set this property to `true` when requests made by this <xref:System.Net.WebProxy> object should, if requested by the server, be authenticated using the credentials of the currently logged on user.</span></span> <span data-ttu-id="18774-256">对于客户端应用程序，这在大多数情况下都是所需的行为。</span><span class="sxs-lookup"><span data-stu-id="18774-256">For client applications, this is the desired behavior in most scenarios.</span></span> <span data-ttu-id="18774-257">对于中间层应用程序（如 ASP.NET 应用程序），通常应将 <xref:System.Net.WebProxy.Credentials%2A> 属性设置为代表其发出请求的客户端的凭据。</span><span class="sxs-lookup"><span data-stu-id="18774-257">For middle tier applications, such as ASP.NET applications, instead of using this property, you would typically set the <xref:System.Net.WebProxy.Credentials%2A> property to the credentials of the client on whose behalf the request is made.</span></span>  
  
 <span data-ttu-id="18774-258">下表显示了 <xref:System.Net.WebProxy.UseDefaultCredentials%2A> 基于属性的值设置该值的效果 <xref:System.Net.WebProxy.Credentials%2A> 。</span><span class="sxs-lookup"><span data-stu-id="18774-258">The following table shows the effect of setting the <xref:System.Net.WebProxy.UseDefaultCredentials%2A> value, based on the value of the <xref:System.Net.WebProxy.Credentials%2A> property.</span></span>  
  
|<span data-ttu-id="18774-259"><xref:System.Net.WebProxy.Credentials%2A> 值</span><span class="sxs-lookup"><span data-stu-id="18774-259"><xref:System.Net.WebProxy.Credentials%2A> value</span></span>|<span data-ttu-id="18774-260"><xref:System.Net.WebProxy.UseDefaultCredentials%2A> 值</span><span class="sxs-lookup"><span data-stu-id="18774-260"><xref:System.Net.WebProxy.UseDefaultCredentials%2A> value</span></span>|<span data-ttu-id="18774-261">效果</span><span class="sxs-lookup"><span data-stu-id="18774-261">Effect</span></span>|  
|----------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------|------------|  
|<xref:System.Net.CredentialCache.DefaultCredentials%2A>|`true`|<span data-ttu-id="18774-262">无效。</span><span class="sxs-lookup"><span data-stu-id="18774-262">No effect.</span></span>|  
|<xref:System.Net.CredentialCache.DefaultCredentials%2A>|`false`|<span data-ttu-id="18774-263">将 <xref:System.Net.WebProxy.Credentials%2A> 设置为 `null`。</span><span class="sxs-lookup"><span data-stu-id="18774-263"><xref:System.Net.WebProxy.Credentials%2A> is set to `null`.</span></span>|  
|`null`|`true`|<span data-ttu-id="18774-264">将 <xref:System.Net.WebProxy.Credentials%2A> 设置为 <xref:System.Net.CredentialCache.DefaultCredentials%2A>。</span><span class="sxs-lookup"><span data-stu-id="18774-264"><xref:System.Net.WebProxy.Credentials%2A> is set to <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</span></span>|  
|<span data-ttu-id="18774-265">或以外的任何值 <xref:System.Net.CredentialCache.DefaultCredentials%2A>`null`</span><span class="sxs-lookup"><span data-stu-id="18774-265">Any value other than <xref:System.Net.CredentialCache.DefaultCredentials%2A> or `null`</span></span>|<span data-ttu-id="18774-266">`true` 或 `false`</span><span class="sxs-lookup"><span data-stu-id="18774-266">`true` or `false`</span></span>|<span data-ttu-id="18774-267">设置会 <xref:System.Net.WebProxy.UseDefaultCredentials%2A> 引发异常。</span><span class="sxs-lookup"><span data-stu-id="18774-267">Setting <xref:System.Net.WebProxy.UseDefaultCredentials%2A> throws an exception.</span></span>|  
  
 <span data-ttu-id="18774-268">如果 <xref:System.Net.WebProxy.UseDefaultCredentials%2A> 为 `false` ，则可以将 <xref:System.Net.WebProxy.Credentials%2A> 属性更改为任何凭据。</span><span class="sxs-lookup"><span data-stu-id="18774-268">If <xref:System.Net.WebProxy.UseDefaultCredentials%2A> is `false`, you can change the <xref:System.Net.WebProxy.Credentials%2A> property to any credentials.</span></span> <span data-ttu-id="18774-269">如果 <xref:System.Net.WebProxy.UseDefaultCredentials%2A> 为 `true` ，则将 <xref:System.Net.WebProxy.Credentials%2A> 属性从 <xref:System.Net.CredentialCache.DefaultCredentials%2A> (更改属性设置为) 时所设置的值 <xref:System.Net.WebProxy.UseDefaultCredentials%2A> `true` 将引发异常。</span><span class="sxs-lookup"><span data-stu-id="18774-269">If <xref:System.Net.WebProxy.UseDefaultCredentials%2A> is `true`, changing the <xref:System.Net.WebProxy.Credentials%2A> property from <xref:System.Net.CredentialCache.DefaultCredentials%2A> (the value that is set when the <xref:System.Net.WebProxy.UseDefaultCredentials%2A> property is set to `true`) will throw an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="18774-270">当 <see cref="P:System.Net.WebProxy.Credentials" /> 属性包含默认凭据以外的凭据时，尝试设置此属性。</span><span class="sxs-lookup"><span data-stu-id="18774-270">You attempted to set this property when the <see cref="P:System.Net.WebProxy.Credentials" /> property contains credentials other than the default credentials.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
