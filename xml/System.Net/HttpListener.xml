<Type Name="HttpListener" FullName="System.Net.HttpListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7812e9e8fadfae625ff61f918c957a985c6b1abb" /><Meta Name="ms.sourcegitcommit" Value="930a2e90be5bc29a285f5df9da5cd44a74574596" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/23/2020" /><Meta Name="ms.locfileid" Value="91130347" /></Metadata><TypeSignature Language="C#" Value="public sealed class HttpListener : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HttpListener extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.HttpListener" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HttpListener&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpListener sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type HttpListener = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net.HttpListener</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Net.HttpListener" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="2bbba-101">提供一个简单的、可通过编程方式控制的 HTTP 协议侦听器。</span><span class="sxs-lookup"><span data-stu-id="2bbba-101">Provides a simple, programmatically controlled HTTP protocol listener.</span></span> <span data-ttu-id="2bbba-102">此类不能被继承。</span><span class="sxs-lookup"><span data-stu-id="2bbba-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks

 <span data-ttu-id="2bbba-103">使用 <xref:System.Net.HttpListener> 类，可以创建一个响应 http 请求的简单 http 协议侦听器。</span><span class="sxs-lookup"><span data-stu-id="2bbba-103">Using the <xref:System.Net.HttpListener> class, you can create a simple HTTP protocol listener that responds to HTTP requests.</span></span> <span data-ttu-id="2bbba-104">侦听器在对象的生存期内处于活动状态 <xref:System.Net.HttpListener> ，并在应用程序中运行，并具有其权限。</span><span class="sxs-lookup"><span data-stu-id="2bbba-104">The listener is active for the lifetime of the <xref:System.Net.HttpListener> object and runs within your application with its permissions.</span></span>
   
 <span data-ttu-id="2bbba-105">若要使用 <xref:System.Net.HttpListener> ，请使用构造函数创建类的新实例， <xref:System.Net.HttpListener> 并使用 <xref:System.Net.HttpListener.Prefixes%2A> 属性获取对包含字符串的集合的访问权限，这些字符串指定哪个统一资源标识符 (URI) <xref:System.Net.HttpListener> 应处理的前缀。</span><span class="sxs-lookup"><span data-stu-id="2bbba-105">To use <xref:System.Net.HttpListener>, create a new instance of the class using the <xref:System.Net.HttpListener> constructor and use the <xref:System.Net.HttpListener.Prefixes%2A> property to gain access to the collection that holds the strings that specify which Uniform Resource Identifier (URI) prefixes the <xref:System.Net.HttpListener> should process.</span></span>
  
 <span data-ttu-id="2bbba-106">URI 前缀字符串由方案 (http 或 https) 、主机、可选端口和可选路径组成。</span><span class="sxs-lookup"><span data-stu-id="2bbba-106">A URI prefix string is composed of a scheme (http or https), a host, an optional port, and an optional path.</span></span> <span data-ttu-id="2bbba-107">完整前缀字符串的一个示例是 *http://www.contoso.com:8080/customerData/* 。</span><span class="sxs-lookup"><span data-stu-id="2bbba-107">An example of a complete prefix string is *http://www.contoso.com:8080/customerData/*.</span></span> <span data-ttu-id="2bbba-108">前缀必须以正斜杠结尾 ( "/" ) 。</span><span class="sxs-lookup"><span data-stu-id="2bbba-108">Prefixes must end in a forward slash ("/").</span></span> <span data-ttu-id="2bbba-109"><xref:System.Net.HttpListener>带有与请求的 URI 最匹配的前缀的对象响应请求。</span><span class="sxs-lookup"><span data-stu-id="2bbba-109">The <xref:System.Net.HttpListener> object with the prefix that most closely matches a requested URI responds to the request.</span></span> <span data-ttu-id="2bbba-110">多个 <xref:System.Net.HttpListener> 对象不能添加相同的前缀; <xref:System.ComponentModel.Win32Exception> 如果 <xref:System.Net.HttpListener> 添加已在使用的前缀，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="2bbba-110">Multiple <xref:System.Net.HttpListener> objects cannot add the same prefix; a <xref:System.ComponentModel.Win32Exception> exception is thrown if a <xref:System.Net.HttpListener> adds a prefix that is already in use.</span></span>
  
 <span data-ttu-id="2bbba-111">指定端口后，可以使用 "" 替换主机元素， \* 以指示 <xref:System.Net.HttpListener> 如果请求的 URI 与任何其他前缀不匹配，则接受发送到端口的请求。</span><span class="sxs-lookup"><span data-stu-id="2bbba-111">When a port is specified, the host element can be replaced with "\*" to indicate that the <xref:System.Net.HttpListener> accepts requests sent to the port if the requested URI does not match any other prefix.</span></span> <span data-ttu-id="2bbba-112">例如，若要接收发送到端口8080的所有请求，当请求的 URI 未由任何处理时 <xref:System.Net.HttpListener> ，前缀为 *http:// \* ： 8080/*。</span><span class="sxs-lookup"><span data-stu-id="2bbba-112">For example, to receive all requests sent to port 8080 when the requested URI is not handled by any <xref:System.Net.HttpListener>, the prefix is *http://\*:8080/*.</span></span> <span data-ttu-id="2bbba-113">同样，若要指定 <xref:System.Net.HttpListener> 接受发送到端口的所有请求，请将主机元素替换为 "+" 字符。</span><span class="sxs-lookup"><span data-stu-id="2bbba-113">Similarly, to specify that the <xref:System.Net.HttpListener> accepts all requests sent to a port, replace the host element with the "+" character.</span></span> <span data-ttu-id="2bbba-114">例如， *https://+:8080* 。</span><span class="sxs-lookup"><span data-stu-id="2bbba-114">For example, *https://+:8080*.</span></span> <span data-ttu-id="2bbba-115">" \* " 和 "+" 字符可以出现在包含路径的前缀中。</span><span class="sxs-lookup"><span data-stu-id="2bbba-115">The "\*" and "+" characters can be present in prefixes that include paths.</span></span>
  
 <span data-ttu-id="2bbba-116">从 Windows 10 上的 .NET Core 2.0 或 .NET Framework 4.6 开始，由对象管理的 URI 前缀支持通配符子域 <xref:System.Net.HttpListener> 。</span><span class="sxs-lookup"><span data-stu-id="2bbba-116">Starting with .NET Core 2.0 or .NET Framework 4.6 on Windows 10, wildcard subdomains are supported in URI prefixes that are managed by an <xref:System.Net.HttpListener> object.</span></span> <span data-ttu-id="2bbba-117">若要指定通配符子域，请使用 " \* " 字符作为 URI 前缀中的主机名的一部分。</span><span class="sxs-lookup"><span data-stu-id="2bbba-117">To specify a wildcard subdomain, use the "\*" character as part of the hostname in a URI prefix.</span></span> <span data-ttu-id="2bbba-118">例如， *http:// \* . foo.com/*。</span><span class="sxs-lookup"><span data-stu-id="2bbba-118">For example, *http://\*.foo.com/*.</span></span> <span data-ttu-id="2bbba-119">将此作为参数传递给 <xref:System.Net.HttpListenerPrefixCollection.Add%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="2bbba-119">Pass this as the argument to the <xref:System.Net.HttpListenerPrefixCollection.Add%2A> method.</span></span> <span data-ttu-id="2bbba-120">这适用于 Windows 10 上的 .NET Core 2.0 或 .NET Framework 4.6;在早期版本中，这会生成一个 <xref:System.Net.HttpListenerException> 。</span><span class="sxs-lookup"><span data-stu-id="2bbba-120">This works as of .NET Core 2.0 or .NET Framework 4.6 on Windows 10; in earlier versions, this generates an <xref:System.Net.HttpListenerException>.</span></span>

 > [!WARNING]
 > <span data-ttu-id="2bbba-121">不应使用顶级通配符绑定 (*http:// \* ： 8080/* 和 *http://+:8080*) **not** 。</span><span class="sxs-lookup"><span data-stu-id="2bbba-121">Top-level wildcard bindings (*http://\*:8080/* and *http://+:8080*) should **not** be used.</span></span> <span data-ttu-id="2bbba-122">顶级通配符绑定可能会为应用带来安全漏洞。</span><span class="sxs-lookup"><span data-stu-id="2bbba-122">Top-level wildcard bindings can open up your app to security vulnerabilities.</span></span> <span data-ttu-id="2bbba-123">此行为同时适用于强通配符和弱通配符。</span><span class="sxs-lookup"><span data-stu-id="2bbba-123">This applies to both strong and weak wildcards.</span></span> <span data-ttu-id="2bbba-124">使用显式主机名而不是通配符。</span><span class="sxs-lookup"><span data-stu-id="2bbba-124">Use explicit host names rather than wildcards.</span></span> <span data-ttu-id="2bbba-125">如果可控制整个父域（区别于易受攻击的 `*.com`），则子域通配符绑定（例如，`*.mysub.com`）不具有此安全风险。</span><span class="sxs-lookup"><span data-stu-id="2bbba-125">Subdomain wildcard binding (for example, `*.mysub.com`) doesn't have this security risk if you control the entire parent domain (as opposed to `*.com`, which is vulnerable).</span></span> <span data-ttu-id="2bbba-126">有关详细信息，请参阅 [rfc7230 第 5.4 条](https://tools.ietf.org/html/rfc7230#section-5.4)。</span><span class="sxs-lookup"><span data-stu-id="2bbba-126">See [rfc7230 section-5.4](https://tools.ietf.org/html/rfc7230#section-5.4) for more information.</span></span>
  
 <span data-ttu-id="2bbba-127">若要开始侦听来自客户端的请求，请将 URI 前缀添加到集合并调用 <xref:System.Net.HttpListener.Start%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="2bbba-127">To begin listening for requests from clients, add the URI prefixes to the collection and call the <xref:System.Net.HttpListener.Start%2A> method.</span></span> <span data-ttu-id="2bbba-128"><xref:System.Net.HttpListener> 提供同步和异步模型来处理客户端请求。</span><span class="sxs-lookup"><span data-stu-id="2bbba-128"><xref:System.Net.HttpListener> offers both synchronous and asynchronous models for processing client requests.</span></span> <span data-ttu-id="2bbba-129">使用 <xref:System.Net.HttpListenerContext> 方法返回的对象 <xref:System.Net.HttpListener.GetContext%2A> 或其异步对应项、 <xref:System.Net.HttpListener.BeginGetContext%2A> 和方法访问请求及其关联的响应 <xref:System.Net.HttpListener.EndGetContext%2A> 。</span><span class="sxs-lookup"><span data-stu-id="2bbba-129">Requests and their associated responses are accessed using the <xref:System.Net.HttpListenerContext> object returned by the <xref:System.Net.HttpListener.GetContext%2A> method or its asynchronous counterparts, the <xref:System.Net.HttpListener.BeginGetContext%2A> and <xref:System.Net.HttpListener.EndGetContext%2A> methods.</span></span>
  
 <span data-ttu-id="2bbba-130">如果你的应用程序应在等待客户端请求时被阻止，并且你希望一次只处理一个请求，则可以使用同步模型。</span><span class="sxs-lookup"><span data-stu-id="2bbba-130">The synchronous model is appropriate if your application should block while waiting for a client request and if you want to process only one request at a time.</span></span> <span data-ttu-id="2bbba-131">使用同步模型，调用 <xref:System.Net.HttpListener.GetContext%2A> 方法，该方法将等待客户端发送请求。</span><span class="sxs-lookup"><span data-stu-id="2bbba-131">Using the synchronous model, call the <xref:System.Net.HttpListener.GetContext%2A> method, which waits for a client to send a request.</span></span> <span data-ttu-id="2bbba-132">方法返回一个 <xref:System.Net.HttpListenerContext> 对象，以便在发生一次处理时进行处理。</span><span class="sxs-lookup"><span data-stu-id="2bbba-132">The method returns an <xref:System.Net.HttpListenerContext> object to you for processing when one occurs.</span></span>
  
 <span data-ttu-id="2bbba-133">在更复杂的异步模型中，你的应用程序不会在等待请求时被阻止，并且每个请求会在其自己的执行线程中进行处理。</span><span class="sxs-lookup"><span data-stu-id="2bbba-133">In the more complex asynchronous model, your application does not block while waiting for requests and each request is processed in its own execution thread.</span></span> <span data-ttu-id="2bbba-134">使用 <xref:System.Net.HttpListener.BeginGetContext%2A> 方法指定要为每个传入请求调用的应用程序定义的方法。</span><span class="sxs-lookup"><span data-stu-id="2bbba-134">Use the <xref:System.Net.HttpListener.BeginGetContext%2A> method to specify an application-defined method to be called for each incoming request.</span></span> <span data-ttu-id="2bbba-135">在该方法中，调用 <xref:System.Net.HttpListener.EndGetContext%2A> 方法以获取请求，处理请求并作出响应。</span><span class="sxs-lookup"><span data-stu-id="2bbba-135">Within that method, call the <xref:System.Net.HttpListener.EndGetContext%2A> method to obtain the request, process it, and respond.</span></span>
  
 <span data-ttu-id="2bbba-136">在这两种模型中，均使用属性访问传入请求， <xref:System.Net.HttpListenerContext.Request%2A?displayProperty=nameWithType> 并由 <xref:System.Net.HttpListenerRequest> 对象表示。</span><span class="sxs-lookup"><span data-stu-id="2bbba-136">In either model, incoming requests are accessed using the <xref:System.Net.HttpListenerContext.Request%2A?displayProperty=nameWithType> property and are represented by <xref:System.Net.HttpListenerRequest> objects.</span></span> <span data-ttu-id="2bbba-137">同样，使用属性访问响应， <xref:System.Net.HttpListenerContext.Response%2A?displayProperty=nameWithType> 并由 <xref:System.Net.HttpListenerResponse> 对象表示。</span><span class="sxs-lookup"><span data-stu-id="2bbba-137">Similarly, responses are accessed using the <xref:System.Net.HttpListenerContext.Response%2A?displayProperty=nameWithType> property and are represented by <xref:System.Net.HttpListenerResponse> objects.</span></span> <span data-ttu-id="2bbba-138">这些对象与和对象共享某些 <xref:System.Net.HttpWebRequest> 功能 <xref:System.Net.HttpWebResponse> ，但后面的对象不能与一起使用， <xref:System.Net.HttpListener> 因为它们实现客户端，而不是服务器和行为。</span><span class="sxs-lookup"><span data-stu-id="2bbba-138">These objects share some functionality with the <xref:System.Net.HttpWebRequest> and <xref:System.Net.HttpWebResponse> objects, but the latter objects cannot be used in conjunction with <xref:System.Net.HttpListener> because they implement client, not server, behaviors.</span></span>
  
 <span data-ttu-id="2bbba-139"><xref:System.Net.HttpListener>可能需要客户端身份验证。</span><span class="sxs-lookup"><span data-stu-id="2bbba-139">An <xref:System.Net.HttpListener> can require client authentication.</span></span> <span data-ttu-id="2bbba-140">可以指定用于身份验证的特定方案，也可以指定一个委托来确定要使用的方案。</span><span class="sxs-lookup"><span data-stu-id="2bbba-140">You can either specify a particular scheme to use for authentication, or you can specify a delegate that determines the scheme to use.</span></span> <span data-ttu-id="2bbba-141">您必须需要某种形式的身份验证才能获取有关客户端标识的信息。</span><span class="sxs-lookup"><span data-stu-id="2bbba-141">You must require some form of authentication to obtain information about the client's identity.</span></span> <span data-ttu-id="2bbba-142">有关其他信息，请参阅 <xref:System.Net.HttpListenerContext.User%2A> 、 <xref:System.Net.HttpListener.AuthenticationSchemes%2A> 和 <xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="2bbba-142">For additional information, see the <xref:System.Net.HttpListenerContext.User%2A>, <xref:System.Net.HttpListener.AuthenticationSchemes%2A>, and <xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A> properties.</span></span>
  
> [!NOTE]
> <span data-ttu-id="2bbba-143">如果 <xref:System.Net.HttpListener> 使用 https 创建，则必须为该侦听器选择服务器证书。</span><span class="sxs-lookup"><span data-stu-id="2bbba-143">If you create an <xref:System.Net.HttpListener> using https, you must select a Server Certificate for that listener.</span></span> <span data-ttu-id="2bbba-144">否则， <xref:System.Net.HttpWebRequest> 该连接的查询 <xref:System.Net.HttpListener> 将失败，并出现意外的连接关闭。</span><span class="sxs-lookup"><span data-stu-id="2bbba-144">Otherwise, an <xref:System.Net.HttpWebRequest> query of this <xref:System.Net.HttpListener> will fail with an unexpected close of the connection.</span></span>
  
> [!NOTE]
> <span data-ttu-id="2bbba-145">您可以通过使用网络 Shell ( # A0) 来配置服务器证书和其他侦听器选项。</span><span class="sxs-lookup"><span data-stu-id="2bbba-145">You can configure Server Certificates and other listener options by using Network Shell (netsh.exe).</span></span> <span data-ttu-id="2bbba-146">有关更多详细信息，请参阅 [Network Shell (Netsh) ](/windows-server/networking/technologies/netsh/netsh) 。</span><span class="sxs-lookup"><span data-stu-id="2bbba-146">See [Network Shell (Netsh)](/windows-server/networking/technologies/netsh/netsh) for more details.</span></span> <span data-ttu-id="2bbba-147">可执行文件开始随 Windows Server 2008 和 Windows Vista 一起发布。</span><span class="sxs-lookup"><span data-stu-id="2bbba-147">The executable began shipping with Windows Server 2008 and Windows Vista.</span></span>
  
> [!NOTE]
> <span data-ttu-id="2bbba-148">如果为指定多个身份验证方案 <xref:System.Net.HttpListener> ，则侦听器将按以下顺序质询客户端： `Negotiate` 、 `NTLM` 、 `Digest` 和 `Basic` 。</span><span class="sxs-lookup"><span data-stu-id="2bbba-148">If you specify multiple authentication schemes for the <xref:System.Net.HttpListener>, the listener will challenge clients in the following order: `Negotiate`, `NTLM`, `Digest`, and then `Basic`.</span></span>

### <a name="httpsys"></a><span data-ttu-id="2bbba-149">HTTP.sys</span><span class="sxs-lookup"><span data-stu-id="2bbba-149">HTTP.sys</span></span>

<span data-ttu-id="2bbba-150"><xref:System.Net.HttpListener>类是在上构建的 `HTTP.sys` ，后者是处理 Windows 的所有 HTTP 流量的内核模式侦听器。</span><span class="sxs-lookup"><span data-stu-id="2bbba-150">The <xref:System.Net.HttpListener> class is built on top of `HTTP.sys`, which is the kernel mode listener that handles all HTTP traffic for Windows.</span></span>
<span data-ttu-id="2bbba-151">`HTTP.sys` 提供连接管理、带宽限制和 web 服务器日志记录。</span><span class="sxs-lookup"><span data-stu-id="2bbba-151">`HTTP.sys` provides connection management, bandwidth throttling, and web server logging.</span></span>
<span data-ttu-id="2bbba-152">使用 [HttpCfg.exe](/windows/win32/http/httpcfg-exe) 工具添加 SSL 证书。</span><span class="sxs-lookup"><span data-stu-id="2bbba-152">Use the [HttpCfg.exe](/windows/win32/http/httpcfg-exe) tool to add SSL certificates.</span></span>
  
## Examples
 <span data-ttu-id="2bbba-153">下面的代码示例演示如何使用 <xref:System.Net.HttpListener> 。</span><span class="sxs-lookup"><span data-stu-id="2bbba-153">The following code example demonstrates using a <xref:System.Net.HttpListener>.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#2)]  
 [!code-vb[Net_Listener_Basic#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Net_Listener_Basic/VB/test.vb#2)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/framework/network-programming/changes-to-ntlm-authentication-for-httpwebrequest-in-version-3-5-sp1"><span data-ttu-id="2bbba-154">版本 3.5 SP1 中对 HTTPWebRequest 的 NTLM 身份验证的更改</span><span class="sxs-lookup"><span data-stu-id="2bbba-154">Changes to NTLM authentication for HTTPWebRequest in Version 3.5 SP1</span></span></related>
    <related type="Article" href="/windows/win32/http/httpcfg-exe"><span data-ttu-id="2bbba-155">HttpCfg.exe</span><span class="sxs-lookup"><span data-stu-id="2bbba-155">HttpCfg.exe</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpListener ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpListener();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2bbba-156">初始化 <see cref="T:System.Net.HttpListener" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="2bbba-156">Initializes a new instance of the <see cref="T:System.Net.HttpListener" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bbba-157">使用此构造函数返回的实例之前，必须调用其 <xref:System.Net.HttpListener.Start%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="2bbba-157">Before using the instance returned by this constructor, you must invoke its <xref:System.Net.HttpListener.Start%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2bbba-158">下面的代码示例演示如何使用 <xref:System.Net.HttpListener> 构造函数创建新的 <xref:System.Net.HttpListener> 对象。</span><span class="sxs-lookup"><span data-stu-id="2bbba-158">The following code example demonstrates using the <xref:System.Net.HttpListener> constructor to create a new <xref:System.Net.HttpListener> object.</span></span> <span data-ttu-id="2bbba-159">有关完整的示例，请参阅 <xref:System.Net.HttpListener> 类主题。</span><span class="sxs-lookup"><span data-stu-id="2bbba-159">For the complete example, see the <xref:System.Net.HttpListener> class topic.</span></span>  
  
 [!code-csharp[Net_listener_Basic#9](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#9)]  
 [!code-vb[Net_Listener_Basic#9](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Net_Listener_Basic/VB/test.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="2bbba-160">此类不能在当前操作系统上使用。</span><span class="sxs-lookup"><span data-stu-id="2bbba-160">This class cannot be used on the current operating system.</span></span> <span data-ttu-id="2bbba-161">使用此类的实例需要 Windows Server 2003 或 Windows XP SP2。</span><span class="sxs-lookup"><span data-stu-id="2bbba-161">Windows Server 2003 or Windows XP SP2 is required to use instances of this class.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="2bbba-162">注意：如果在应用程序中启用网络跟踪，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="2bbba-162">Note: This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="2bbba-163">有关详细信息，请参阅 [.NET Framework 中的网络跟踪](/dotnet/framework/network-programming/network-tracing)。</span><span class="sxs-lookup"><span data-stu-id="2bbba-163">For more information, see [Network Tracing in the .NET Framework](/dotnet/framework/network-programming/network-tracing).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abort();" />
      <MemberSignature Language="F#" Value="member this.Abort : unit -&gt; unit" Usage="httpListener.Abort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2bbba-164">立刻关闭 <see cref="T:System.Net.HttpListener" /> 对象，这样会放弃所有当前排队的请求。</span><span class="sxs-lookup"><span data-stu-id="2bbba-164">Shuts down the <see cref="T:System.Net.HttpListener" /> object immediately, discarding all currently queued requests.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bbba-165">此方法释放此侦听器持有的所有资源。</span><span class="sxs-lookup"><span data-stu-id="2bbba-165">This method disposes of all resources held by this listener.</span></span> <span data-ttu-id="2bbba-166">所有挂起的请求均无法完成。</span><span class="sxs-lookup"><span data-stu-id="2bbba-166">Any pending requests are unable to complete.</span></span>  
  
 <span data-ttu-id="2bbba-167">调用此方法后， <xref:System.ObjectDisposedException> 如果你尝试使用此方法，则将收到 <xref:System.Net.HttpListener> 。</span><span class="sxs-lookup"><span data-stu-id="2bbba-167">After calling this method, you will receive an <xref:System.ObjectDisposedException> if you attempt to use this <xref:System.Net.HttpListener>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2bbba-168">下面的代码示例演示如何调用此方法。</span><span class="sxs-lookup"><span data-stu-id="2bbba-168">The following code example demonstrates calling this method.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#11](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#11)]  
 [!code-vb[Net_Listener_Basic#11](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Net_Listener_Basic/VB/test.vb#11)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="2bbba-169">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="2bbba-169">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="2bbba-170">有关详细信息，请参阅 [.NET Framework 中的网络跟踪](/dotnet/framework/network-programming/network-tracing)。</span><span class="sxs-lookup"><span data-stu-id="2bbba-170">For more information, see [Network Tracing in the .NET Framework](/dotnet/framework/network-programming/network-tracing).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="AuthenticationSchemes">
      <MemberSignature Language="C#" Value="public System.Net.AuthenticationSchemes AuthenticationSchemes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.AuthenticationSchemes AuthenticationSchemes" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.AuthenticationSchemes" />
      <MemberSignature Language="VB.NET" Value="Public Property AuthenticationSchemes As AuthenticationSchemes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::AuthenticationSchemes AuthenticationSchemes { System::Net::AuthenticationSchemes get(); void set(System::Net::AuthenticationSchemes value); };" />
      <MemberSignature Language="F#" Value="member this.AuthenticationSchemes : System.Net.AuthenticationSchemes with get, set" Usage="System.Net.HttpListener.AuthenticationSchemes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.AuthenticationSchemes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2bbba-171">获取或设置用于客户端身份验证的方案。</span><span class="sxs-lookup"><span data-stu-id="2bbba-171">Gets or sets the scheme used to authenticate clients.</span></span></summary>
        <value><span data-ttu-id="2bbba-172">指示如何对客户端进行身份验证的 <see cref="T:System.Net.AuthenticationSchemes" /> 枚举值的按位组合。</span><span class="sxs-lookup"><span data-stu-id="2bbba-172">A bitwise combination of <see cref="T:System.Net.AuthenticationSchemes" /> enumeration values that indicates how clients are to be authenticated.</span></span> <span data-ttu-id="2bbba-173">默认值是 <see cref="F:System.Net.AuthenticationSchemes.Anonymous" />。</span><span class="sxs-lookup"><span data-stu-id="2bbba-173">The default value is <see cref="F:System.Net.AuthenticationSchemes.Anonymous" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bbba-174"><xref:System.Net.HttpListener>使用指定的方案对所有传入的请求进行身份验证。</span><span class="sxs-lookup"><span data-stu-id="2bbba-174">The <xref:System.Net.HttpListener> uses the specified scheme to authenticate all incoming requests.</span></span> <span data-ttu-id="2bbba-175"><xref:System.Net.HttpListener.GetContext%2A> <xref:System.Net.HttpListener.EndGetContext%2A> 仅当 <xref:System.Net.HttpListener> 成功对请求进行身份验证时，和方法才返回传入的客户端请求。</span><span class="sxs-lookup"><span data-stu-id="2bbba-175">The <xref:System.Net.HttpListener.GetContext%2A> and <xref:System.Net.HttpListener.EndGetContext%2A> methods return an incoming client request only if the <xref:System.Net.HttpListener> successfully authenticates the request.</span></span>  
  
 <span data-ttu-id="2bbba-176">可以通过使用属性来询问已成功通过身份验证的客户端的标识 <xref:System.Net.HttpListenerContext.User%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="2bbba-176">You can interrogate the identity of a successfully authenticated client by using the <xref:System.Net.HttpListenerContext.User%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="2bbba-177">如果希望 <xref:System.Net.HttpListener> 对象根据其收到的请求的特征使用不同的身份验证机制 (例如，请求的 <xref:System.Net.HttpListenerRequest.Url%2A> 或 <xref:System.Net.HttpListenerRequest.UserHostName%2A> 属性) ，则必须实现选择身份验证方案的方法。</span><span class="sxs-lookup"><span data-stu-id="2bbba-177">If you want an <xref:System.Net.HttpListener> object to use different authentication mechanisms based on characteristics of the requests it receives (for example, the request's <xref:System.Net.HttpListenerRequest.Url%2A> or <xref:System.Net.HttpListenerRequest.UserHostName%2A> property), you must implement a method that chooses the authentication scheme.</span></span> <span data-ttu-id="2bbba-178">有关如何执行此操作的说明，请参阅 <xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A> 属性文档。</span><span class="sxs-lookup"><span data-stu-id="2bbba-178">For instructions about how to do this, see the <xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A> property documentation.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2bbba-179">若要设置此属性以启用 Digest、NTLM 或 Negotiate，需要 <xref:System.Security.Permissions.SecurityPermission> ， <xref:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal> 。</span><span class="sxs-lookup"><span data-stu-id="2bbba-179">To set this property to enable Digest, NTLM, or Negotiate requires the <xref:System.Security.Permissions.SecurityPermission>, <xref:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2bbba-180">下面的代码示例演示如何使用 <xref:System.Net.HttpListener.AuthenticationSchemes%2A> 属性来指定身份验证方案。</span><span class="sxs-lookup"><span data-stu-id="2bbba-180">The following code example demonstrates using the <xref:System.Net.HttpListener.AuthenticationSchemes%2A> property to specify an authentication scheme.</span></span>  
  
 [!code-csharp[Net_listener_Basic#14](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#14)]  
 [!code-vb[Net_Listener_Basic#14](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Net_Listener_Basic/VB/test.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="2bbba-181">此对象已关闭。</span><span class="sxs-lookup"><span data-stu-id="2bbba-181">This object has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AuthenticationSchemeSelectorDelegate">
      <MemberSignature Language="C#" Value="public System.Net.AuthenticationSchemeSelector? AuthenticationSchemeSelectorDelegate { get; set; }" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.AuthenticationSchemeSelector AuthenticationSchemeSelectorDelegate" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate" />
      <MemberSignature Language="VB.NET" Value="Public Property AuthenticationSchemeSelectorDelegate As AuthenticationSchemeSelector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::AuthenticationSchemeSelector ^ AuthenticationSchemeSelectorDelegate { System::Net::AuthenticationSchemeSelector ^ get(); void set(System::Net::AuthenticationSchemeSelector ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AuthenticationSchemeSelectorDelegate : System.Net.AuthenticationSchemeSelector with get, set" Usage="System.Net.HttpListener.AuthenticationSchemeSelectorDelegate" />
      <MemberSignature Language="C#" Value="public System.Net.AuthenticationSchemeSelector AuthenticationSchemeSelectorDelegate { get; set; }" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.AuthenticationSchemeSelector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2bbba-182">获取或设置一个委托，调用它来确定用于客户端身份验证的协议。</span><span class="sxs-lookup"><span data-stu-id="2bbba-182">Gets or sets the delegate called to determine the protocol used to authenticate clients.</span></span></summary>
        <value><span data-ttu-id="2bbba-183"><see cref="T:System.Net.AuthenticationSchemeSelector" /> 委托，它调用用于选择身份验证协议的方法。</span><span class="sxs-lookup"><span data-stu-id="2bbba-183">An <see cref="T:System.Net.AuthenticationSchemeSelector" /> delegate that invokes the method used to select an authentication protocol.</span></span> <span data-ttu-id="2bbba-184">默认值是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="2bbba-184">The default value is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="2bbba-185">如果希望将相同的身份验证协议用于特定实例处理的所有请求 <xref:System.Net.HttpListener> ，则无需设置此属性。</span><span class="sxs-lookup"><span data-stu-id="2bbba-185">If you want the same authentication protocol to be used for all requests handled by a particular instance of <xref:System.Net.HttpListener>, you do not need to set this property.</span></span> <span data-ttu-id="2bbba-186">若要指定用于所有客户端请求的协议，请使用 <xref:System.Net.HttpListener.AuthenticationSchemes%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="2bbba-186">To specify a protocol to be used for all client requests, use the <xref:System.Net.HttpListener.AuthenticationSchemes%2A> property.</span></span>  
  
 <span data-ttu-id="2bbba-187">如果客户端未在其标头中指定身份验证信息，则会 <xref:System.Net.HttpListener> 为每个未经身份验证的传入请求调用指定的委托，以确定用于对客户端进行身份验证的协议（如果有）。</span><span class="sxs-lookup"><span data-stu-id="2bbba-187">If the client has not specified authentication information in its headers, the <xref:System.Net.HttpListener> calls the specified delegate for each unauthenticated incoming request to determine which, if any, protocol to use to authenticate the client.</span></span> <span data-ttu-id="2bbba-188"><xref:System.Net.HttpListener.GetContext%2A> <xref:System.Net.HttpListener.EndGetContext%2A> 仅当 <xref:System.Net.HttpListener> 成功对请求进行了身份验证后，和方法才返回传入的请求。</span><span class="sxs-lookup"><span data-stu-id="2bbba-188">The <xref:System.Net.HttpListener.GetContext%2A> and <xref:System.Net.HttpListener.EndGetContext%2A> methods return an incoming request only if the <xref:System.Net.HttpListener> successfully authenticated the request.</span></span> <span data-ttu-id="2bbba-189">如果请求无法通过身份验证，则 <xref:System.Net.HttpListener> 自动发送回401响应。</span><span class="sxs-lookup"><span data-stu-id="2bbba-189">If a request cannot be authenticated, the <xref:System.Net.HttpListener> automatically sends back a 401 response.</span></span> <span data-ttu-id="2bbba-190">您可以使用属性获取已成功通过身份验证的客户端的标识 <xref:System.Web.HttpRequest.LogonUserIdentity%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="2bbba-190">You can get the identity of a successfully authenticated client using the <xref:System.Web.HttpRequest.LogonUserIdentity%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="2bbba-191">如果希望的实例 <xref:System.Net.HttpListener> 使用不同的身份验证 (协议（例如，请求的 <xref:System.Net.HttpListenerRequest.Url%2A> 或属性) ），则能够将身份验证协议的选择委托给特定于应用程序的方法非常有用 <xref:System.Net.HttpListenerRequest.UserHostAddress%2A> 。</span><span class="sxs-lookup"><span data-stu-id="2bbba-191">The ability to delegate the choice of authentication protocol to an application-specific method is useful if you want an instance of <xref:System.Net.HttpListener> to use different authentication protocols depending on the characteristics of the requests it receives (for example, the request's <xref:System.Net.HttpListenerRequest.Url%2A> or <xref:System.Net.HttpListenerRequest.UserHostAddress%2A> property).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2bbba-192">若要设置此属性以启用 Digest、NTLM 或 Negotiate，需要 <xref:System.Security.Permissions.SecurityPermission> ， <xref:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal> 。</span><span class="sxs-lookup"><span data-stu-id="2bbba-192">To set this property to enable Digest, NTLM, or Negotiate requires the <xref:System.Security.Permissions.SecurityPermission>, <xref:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2bbba-193">下面的代码示例设置此属性的值。</span><span class="sxs-lookup"><span data-stu-id="2bbba-193">The following code example sets the value of this property.</span></span>  
  
 [!code-csharp[NclListener#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLListener/CS/sample.cs#2)]
 [!code-vb[NclListener#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLListener/vb/sample.vb#2)]  
  
 <span data-ttu-id="2bbba-194">下面的代码示例提供委托调用的方法的实现 <xref:System.Net.AuthenticationSchemeSelector> 。</span><span class="sxs-lookup"><span data-stu-id="2bbba-194">The following code example provides an implementation of a method invoked by an <xref:System.Net.AuthenticationSchemeSelector> delegate.</span></span>  
  
 [!code-csharp[NclListener#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLListener/CS/sample.cs#1)]
 [!code-vb[NclListener#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLListener/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="2bbba-195">此对象已关闭。</span><span class="sxs-lookup"><span data-stu-id="2bbba-195">This object has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginGetContext">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginGetContext (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginGetContext(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.BeginGetContext(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginGetContext (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginGetContext(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginGetContext : AsyncCallback * obj -&gt; IAsyncResult" Usage="httpListener.BeginGetContext (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="2bbba-196"><see cref="T:System.AsyncCallback" /> 委托，引用客户端请求可用时要调用的方法。</span><span class="sxs-lookup"><span data-stu-id="2bbba-196">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when a client request is available.</span></span></param>
        <param name="state"><span data-ttu-id="2bbba-197">一个用户定义对象，其中包含操作的相关信息。</span><span class="sxs-lookup"><span data-stu-id="2bbba-197">A user-defined object that contains information about the operation.</span></span> <span data-ttu-id="2bbba-198">操作完成时，此对象传递给 <paramref name="callback" /> 委托。</span><span class="sxs-lookup"><span data-stu-id="2bbba-198">This object is passed to the <paramref name="callback" /> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="2bbba-199">开始异步检索传入的请求。</span><span class="sxs-lookup"><span data-stu-id="2bbba-199">Begins asynchronously retrieving an incoming request.</span></span></summary>
        <returns><span data-ttu-id="2bbba-200">一个指示异步操作状态的 <see cref="T:System.IAsyncResult" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="2bbba-200">An <see cref="T:System.IAsyncResult" /> object that indicates the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bbba-201"><xref:System.Net.HttpListener.BeginGetContext%2A>方法开始异步 (非阻塞) 调用以接收传入的客户端请求。</span><span class="sxs-lookup"><span data-stu-id="2bbba-201">The <xref:System.Net.HttpListener.BeginGetContext%2A> method begins an asynchronous (non-blocking) call to receive incoming client requests.</span></span> <span data-ttu-id="2bbba-202">在调用此方法之前，必须调用 <xref:System.Net.HttpListener.Start%2A> 方法，并添加至少一个统一资源标识符 (uri) 前缀，以便通过将 uri 字符串添加到属性返回的来侦听 <xref:System.Net.HttpListenerPrefixCollection> <xref:System.Net.HttpListener.Prefixes%2A> 。</span><span class="sxs-lookup"><span data-stu-id="2bbba-202">Before calling this method, you must call the <xref:System.Net.HttpListener.Start%2A> method and add at least one Uniform Resource Identifier (URI) prefix to listen for by adding the URI strings to the <xref:System.Net.HttpListenerPrefixCollection> returned by the <xref:System.Net.HttpListener.Prefixes%2A> property.</span></span>  
  
 <span data-ttu-id="2bbba-203">必须通过调用方法完成异步操作 <xref:System.Net.HttpListener.EndGetContext%2A> 。</span><span class="sxs-lookup"><span data-stu-id="2bbba-203">The asynchronous operation must be completed by calling the <xref:System.Net.HttpListener.EndGetContext%2A> method.</span></span> <span data-ttu-id="2bbba-204">通常，方法由 `callback` 委托调用。</span><span class="sxs-lookup"><span data-stu-id="2bbba-204">Typically, the method is invoked by the `callback` delegate.</span></span>  
  
 <span data-ttu-id="2bbba-205">操作完成时，此方法不会被阻止。</span><span class="sxs-lookup"><span data-stu-id="2bbba-205">This method does not block while the operation completes.</span></span> <span data-ttu-id="2bbba-206">若要获取传入请求并在操作完成之前一直阻止，请调用 <xref:System.Net.HttpListener.GetContext%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="2bbba-206">To get an incoming request and block until the operation completes, call the <xref:System.Net.HttpListener.GetContext%2A> method.</span></span>  
  
 <span data-ttu-id="2bbba-207">有关使用异步编程模型的详细信息，请参阅 [以异步方式调用同步方法](/dotnet/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously)</span><span class="sxs-lookup"><span data-stu-id="2bbba-207">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](/dotnet/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2bbba-208">下面的代码示例演示如何使用 <xref:System.Net.HttpListener.BeginGetContext%2A> 方法指定将处理传入客户端请求的回调方法。</span><span class="sxs-lookup"><span data-stu-id="2bbba-208">The following code example demonstrates using the <xref:System.Net.HttpListener.BeginGetContext%2A> method to specify a callback method that will handle incoming client requests.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#12](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#12)]  
 [!code-vb[Net_Listener_Basic#12](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Net_Listener_Basic/VB/test.vb#12)]  
  
 <span data-ttu-id="2bbba-209">下面的代码示例实现了一个回调方法。</span><span class="sxs-lookup"><span data-stu-id="2bbba-209">The following code example implements a callback method.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#13](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#13)]  
 [!code-vb[Net_Listener_Basic#13](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Net_Listener_Basic/VB/test.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.HttpListenerException"><span data-ttu-id="2bbba-210">Win32 函数调用失败。</span><span class="sxs-lookup"><span data-stu-id="2bbba-210">A Win32 function call failed.</span></span> <span data-ttu-id="2bbba-211">检查异常的 <see cref="P:System.Net.HttpListenerException.ErrorCode" /> 属性以确定导致异常的原因。</span><span class="sxs-lookup"><span data-stu-id="2bbba-211">Check the exception's <see cref="P:System.Net.HttpListenerException.ErrorCode" /> property to determine the cause of the exception.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2bbba-212">此对象尚未启动或当前已停止。</span><span class="sxs-lookup"><span data-stu-id="2bbba-212">This object has not been started or is currently stopped.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="2bbba-213">此对象已关闭。</span><span class="sxs-lookup"><span data-stu-id="2bbba-213">This object is closed.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="2bbba-214">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="2bbba-214">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="2bbba-215">有关详细信息，请参阅 [.NET Framework 中的网络跟踪](/dotnet/framework/network-programming/network-tracing)。</span><span class="sxs-lookup"><span data-stu-id="2bbba-215">For more information, see [Network Tracing in the .NET Framework](/dotnet/framework/network-programming/network-tracing).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="httpListener.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2bbba-216">关闭 <see cref="T:System.Net.HttpListener" />。</span><span class="sxs-lookup"><span data-stu-id="2bbba-216">Shuts down the <see cref="T:System.Net.HttpListener" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bbba-217">调用此方法后，您将无法再使用该 <xref:System.Net.HttpListener> 对象。</span><span class="sxs-lookup"><span data-stu-id="2bbba-217">After calling this method, you can no longer use the <xref:System.Net.HttpListener> object.</span></span> <span data-ttu-id="2bbba-218">若要临时暂停 <xref:System.Net.HttpListener> 对象，请使用 <xref:System.Net.HttpListener.Stop%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="2bbba-218">To temporarily pause an <xref:System.Net.HttpListener> object, use the <xref:System.Net.HttpListener.Stop%2A> method.</span></span>  
  
 <span data-ttu-id="2bbba-219">此方法 <xref:System.Net.HttpListener> 会关闭对象，而不会处理排队的请求。</span><span class="sxs-lookup"><span data-stu-id="2bbba-219">This method shut downs the <xref:System.Net.HttpListener> object without processing queued requests.</span></span> <span data-ttu-id="2bbba-220">所有挂起的请求均无法完成。</span><span class="sxs-lookup"><span data-stu-id="2bbba-220">Any pending requests are unable to complete.</span></span>  
  
## Examples  

<span data-ttu-id="2bbba-221">下面的代码示例演示如何调用 `Close` 方法：</span><span class="sxs-lookup"><span data-stu-id="2bbba-221">The following code example demonstrates calling the `Close` method:</span></span>
  
[!code-csharp[Net_Listener_Basic#12](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#12)]  
[!code-vb[Net_Listener_Basic#12](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Net_Listener_Basic/VB/test.vb#12)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="2bbba-222">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="2bbba-222">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="2bbba-223">有关详细信息，请参阅 [.NET Framework 中的网络跟踪](/dotnet/framework/network-programming/network-tracing)。</span><span class="sxs-lookup"><span data-stu-id="2bbba-223">For more information, see [Network Tracing in the .NET Framework](/dotnet/framework/network-programming/network-tracing).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="DefaultServiceNames">
      <MemberSignature Language="C#" Value="public System.Security.Authentication.ExtendedProtection.ServiceNameCollection DefaultServiceNames { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Authentication.ExtendedProtection.ServiceNameCollection DefaultServiceNames" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.DefaultServiceNames" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultServiceNames As ServiceNameCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Authentication::ExtendedProtection::ServiceNameCollection ^ DefaultServiceNames { System::Security::Authentication::ExtendedProtection::ServiceNameCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultServiceNames : System.Security.Authentication.ExtendedProtection.ServiceNameCollection" Usage="System.Net.HttpListener.DefaultServiceNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Authentication.ExtendedProtection.ServiceNameCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2bbba-224">获取由已注册前缀确定的服务提供程序名 (SPN) 的默认列表。</span><span class="sxs-lookup"><span data-stu-id="2bbba-224">Gets a default list of Service Provider Names (SPNs) as determined by registered prefixes.</span></span></summary>
        <value><span data-ttu-id="2bbba-225">一个包含 SPN 列表的 <see cref="T:System.Security.Authentication.ExtendedProtection.ServiceNameCollection" />。</span><span class="sxs-lookup"><span data-stu-id="2bbba-225">A <see cref="T:System.Security.Authentication.ExtendedProtection.ServiceNameCollection" /> that contains a list of SPNs.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bbba-226"><xref:System.Net.HttpListener.DefaultServiceNames%2A>属性与集成的 Windows 身份验证一起使用，以提供扩展保护。</span><span class="sxs-lookup"><span data-stu-id="2bbba-226">The <xref:System.Net.HttpListener.DefaultServiceNames%2A> property is used with integrated Windows authentication to provide extended protection.</span></span> <span data-ttu-id="2bbba-227">Spn 列表 <xref:System.Net.HttpListener.Prefixes%2A> 在访问时从属性进行初始化，并在将新前缀添加到属性时清除 <xref:System.Net.HttpListener.Prefixes%2A> 。</span><span class="sxs-lookup"><span data-stu-id="2bbba-227">The list of SPNs is initialized from the <xref:System.Net.HttpListener.Prefixes%2A> property when accessed and cleared when new prefixes are added to the <xref:System.Net.HttpListener.Prefixes%2A> property.</span></span>  
  
 <span data-ttu-id="2bbba-228"><xref:System.Net.HttpListener.DefaultServiceNames%2A>如果应用程序不 <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames%2A> 在其扩展保护策略上设置属性，则使用属性。</span><span class="sxs-lookup"><span data-stu-id="2bbba-228">The <xref:System.Net.HttpListener.DefaultServiceNames%2A> property is used if an application doesn't set the <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames%2A> property on its extended protection policy.</span></span>  
  
 <span data-ttu-id="2bbba-229"><xref:System.Security.Authentication.ExtendedProtection.ServiceNameCollection>用属性检索的 <xref:System.Net.HttpListener.DefaultServiceNames%2A> 是 <xref:System.Net.HttpListener.Prefixes%2A> 根据以下规则从属性生成的：</span><span class="sxs-lookup"><span data-stu-id="2bbba-229">The <xref:System.Security.Authentication.ExtendedProtection.ServiceNameCollection> that is retrieved with the <xref:System.Net.HttpListener.DefaultServiceNames%2A> property is built from the <xref:System.Net.HttpListener.Prefixes%2A> property according to the following rules:</span></span>  
  
1.  <span data-ttu-id="2bbba-230">如果主机名为 "+"、"\*" 或 IPv4 或 IPv6 文本 (等效于 " \* " 但仅限于特定的本地接口) ，则将添加以下 SPN：</span><span class="sxs-lookup"><span data-stu-id="2bbba-230">If the hostname is "+", "\*", or an IPv4 or IPv6 literal (equivalent to "\*" but restricted to a specific local interface), the following SPN is added:</span></span>  
  
 <span data-ttu-id="2bbba-231">`"HTTP/"` 以及计算机的完全限定的域名。</span><span class="sxs-lookup"><span data-stu-id="2bbba-231">`"HTTP/"` plus the fully qualified domain name of the computer.</span></span>  
  
1.  <span data-ttu-id="2bbba-232">如果主机名不包含任何 (域或子域) 的点，则会尝试使用 DNS 来解析完全限定的域名 () 所使用的相同行为 <xref:System.Net.HttpWebRequest> 。</span><span class="sxs-lookup"><span data-stu-id="2bbba-232">If the hostname contains no dots (no domains or subdomains), an attempt is made to resolve the fully-qualified domain name using DNS (the same behavior used by <xref:System.Net.HttpWebRequest>).</span></span> <span data-ttu-id="2bbba-233">如果可以解析完全限定的域名，则将添加以下 Spn：</span><span class="sxs-lookup"><span data-stu-id="2bbba-233">If the fully-qualified domain name can be resolved, the following SPNs are added:</span></span>  
  
 <span data-ttu-id="2bbba-234">`"HTTP/"` 此外，主机名 (短名称) 。</span><span class="sxs-lookup"><span data-stu-id="2bbba-234">`"HTTP/"` plus the hostname (the short name).</span></span>  
  
 <span data-ttu-id="2bbba-235">`"HTTP/"` 以及主机名的完全限定的域名。</span><span class="sxs-lookup"><span data-stu-id="2bbba-235">`"HTTP/"` plus the fully qualified domain name for the hostname.</span></span>  
  
1.  <span data-ttu-id="2bbba-236">如果主机名不包含点 (没有域或子域) 并且无法解析完全限定的域名，则将添加以下 SPN：</span><span class="sxs-lookup"><span data-stu-id="2bbba-236">If the hostname contains not dots (no domains or subdomains) and a fully-qualified domain name can't be resolved, the following SPN is added:</span></span>  
  
 <span data-ttu-id="2bbba-237">`"HTTP/"` 加上主机名。</span><span class="sxs-lookup"><span data-stu-id="2bbba-237">`"HTTP/"` plus the hostname.</span></span>  
  
1.  <span data-ttu-id="2bbba-238">如果主机名 (域或子域) 包含点，则将添加以下 SPN：</span><span class="sxs-lookup"><span data-stu-id="2bbba-238">If the hostname contains dots (domains or subdomains), the following SPN is added:</span></span>  
  
 <span data-ttu-id="2bbba-239">`"HTTP/"` 加上主机名。</span><span class="sxs-lookup"><span data-stu-id="2bbba-239">`"HTTP/"` plus the hostname.</span></span>  
  
 <span data-ttu-id="2bbba-240"><xref:System.Net.HttpListener.DefaultServiceNames%2A>应用程序可以使用属性来查看默认 spn 列表，如果未提供自定义列表，则将用于身份验证。</span><span class="sxs-lookup"><span data-stu-id="2bbba-240">The <xref:System.Net.HttpListener.DefaultServiceNames%2A> property can be used by an application to review the list of default SPNs which will be used for authentication if no custom list is supplied.</span></span> <span data-ttu-id="2bbba-241">如果需要其他 Spn，应用程序可以使用其中一种方法添加它们 <xref:System.Security.Authentication.ExtendedProtection.ServiceNameCollection.Merge%2A> 。</span><span class="sxs-lookup"><span data-stu-id="2bbba-241">If other SPNs are needed, an application can add them using one of the <xref:System.Security.Authentication.ExtendedProtection.ServiceNameCollection.Merge%2A> methods.</span></span>  
  
 <span data-ttu-id="2bbba-242">使用扩展保护根据请求的 URL 做出策略决策时，这是不安全的，因为这可能是欺骗性的。</span><span class="sxs-lookup"><span data-stu-id="2bbba-242">It is not safe when using extended protection to make policy decisions based on the requested URL, since this can be spoofed.</span></span> <span data-ttu-id="2bbba-243">相反，应用程序应依赖于 <xref:System.Net.HttpListenerRequest.LocalEndPoint%2A> 或 <xref:System.Net.HttpListenerRequest.RemoteEndPoint%2A> 属性来做出此类策略决策。</span><span class="sxs-lookup"><span data-stu-id="2bbba-243">Rather, applications should rely on the <xref:System.Net.HttpListenerRequest.LocalEndPoint%2A> or <xref:System.Net.HttpListenerRequest.RemoteEndPoint%2A> properties to make such policy decisions.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" />
        <altmember cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" />
        <altmember cref="T:System.Net.HttpListener.ExtendedProtectionSelector" />
        <altmember cref="N:System.Security.Authentication.ExtendedProtection" />
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <related type="Article" href="/dotnet/framework/network-programming/integrated-windows-authentication-with-extended-protection"><span data-ttu-id="2bbba-244">带有扩展保护的集成 Windows 身份验证</span><span class="sxs-lookup"><span data-stu-id="2bbba-244">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="EndGetContext">
      <MemberSignature Language="C#" Value="public System.Net.HttpListenerContext EndGetContext (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.HttpListenerContext EndGetContext(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.EndGetContext(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndGetContext (asyncResult As IAsyncResult) As HttpListenerContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::HttpListenerContext ^ EndGetContext(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndGetContext : IAsyncResult -&gt; System.Net.HttpListenerContext" Usage="httpListener.EndGetContext asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.HttpListenerContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="2bbba-245">启动异步操作时获得的 <see cref="T:System.IAsyncResult" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="2bbba-245">An <see cref="T:System.IAsyncResult" /> object that was obtained when the asynchronous operation was started.</span></span></param>
        <summary><span data-ttu-id="2bbba-246">完成检索传入的客户端请求的异步操作。</span><span class="sxs-lookup"><span data-stu-id="2bbba-246">Completes an asynchronous operation to retrieve an incoming client request.</span></span></summary>
        <returns><span data-ttu-id="2bbba-247">表示客户端请求的 <see cref="T:System.Net.HttpListenerContext" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="2bbba-247">An <see cref="T:System.Net.HttpListenerContext" /> object that represents the client request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bbba-248"><xref:System.Net.HttpListener.EndGetContext%2A>方法通常在由委托调用的应用程序定义的回调方法中调用，以获取 <xref:System.Net.HttpListenerContext> 包含传入客户端请求及其关联响应的对象。</span><span class="sxs-lookup"><span data-stu-id="2bbba-248">The <xref:System.Net.HttpListener.EndGetContext%2A> method is called, usually within an application-defined callback method invoked by a delegate, to obtain the <xref:System.Net.HttpListenerContext> object that contains an incoming client request and its associated response.</span></span> <span data-ttu-id="2bbba-249">此方法通过调用方法完成先前启动的操作 <xref:System.Net.HttpListener.BeginGetContext%2A> 。</span><span class="sxs-lookup"><span data-stu-id="2bbba-249">This method completes an operation previously started by calling the <xref:System.Net.HttpListener.BeginGetContext%2A> method.</span></span> <span data-ttu-id="2bbba-250">如果操作尚未完成，则此方法将一直阻止到该操作。</span><span class="sxs-lookup"><span data-stu-id="2bbba-250">If the operation has not completed, this method blocks until it does.</span></span>  
  
 <span data-ttu-id="2bbba-251">由于调用 <xref:System.Net.HttpListener.EndGetContext%2A> 方法需要 <xref:System.Net.HttpListener> 对象，因此通常使用传入方法的状态对象将此对象传递到回调方法 <xref:System.Net.HttpListener.BeginGetContext%2A> 。</span><span class="sxs-lookup"><span data-stu-id="2bbba-251">Because calling the <xref:System.Net.HttpListener.EndGetContext%2A> method requires the <xref:System.Net.HttpListener> object, this object is typically passed into a callback method by using the state object passed into the <xref:System.Net.HttpListener.BeginGetContext%2A> method.</span></span> <span data-ttu-id="2bbba-252">可以使用对象的属性获取此状态对象 <xref:System.IAsyncResult.AsyncState%2A> `asyncResult` 。</span><span class="sxs-lookup"><span data-stu-id="2bbba-252">You can obtain this state object by using the <xref:System.IAsyncResult.AsyncState%2A> property of the `asyncResult` object.</span></span>  
  
 <span data-ttu-id="2bbba-253">有关使用异步编程模型的详细信息，请参阅 [以异步方式调用同步方法](/dotnet/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously)</span><span class="sxs-lookup"><span data-stu-id="2bbba-253">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](/dotnet/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2bbba-254">下面的代码示例演示了调用方法的回调方法的实现 <xref:System.Net.HttpListener.EndGetContext%2A> 。</span><span class="sxs-lookup"><span data-stu-id="2bbba-254">The following code example shows the implementation of a callback method that calls the <xref:System.Net.HttpListener.EndGetContext%2A> method.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#13](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#13)]  
 [!code-vb[Net_Listener_Basic#13](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Net_Listener_Basic/VB/test.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2bbba-255">未通过调用 <see cref="M:System.Net.HttpListener.BeginGetContext(System.AsyncCallback,System.Object)" /> 方法获取 <paramref name="asyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="2bbba-255"><paramref name="asyncResult" /> was not obtained by calling the <see cref="M:System.Net.HttpListener.BeginGetContext(System.AsyncCallback,System.Object)" /> method.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2bbba-256"><paramref name="asyncResult" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="2bbba-256"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.HttpListenerException"><span data-ttu-id="2bbba-257">Win32 函数调用失败。</span><span class="sxs-lookup"><span data-stu-id="2bbba-257">A Win32 function call failed.</span></span> <span data-ttu-id="2bbba-258">检查异常的 <see cref="P:System.Net.HttpListenerException.ErrorCode" /> 属性以确定导致异常的原因。</span><span class="sxs-lookup"><span data-stu-id="2bbba-258">Check the exception's <see cref="P:System.Net.HttpListenerException.ErrorCode" /> property to determine the cause of the exception.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2bbba-259">已为指定的 <paramref name="asyncResult" /> 对象调用 <see cref="M:System.Net.HttpListener.EndGetContext(System.IAsyncResult)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="2bbba-259">The <see cref="M:System.Net.HttpListener.EndGetContext(System.IAsyncResult)" /> method was already called for the specified <paramref name="asyncResult" /> object.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="2bbba-260">此对象已关闭。</span><span class="sxs-lookup"><span data-stu-id="2bbba-260">This object is closed.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="2bbba-261">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="2bbba-261">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="2bbba-262">有关详细信息，请参阅 [.NET Framework 中的网络跟踪](/dotnet/framework/network-programming/network-tracing)。</span><span class="sxs-lookup"><span data-stu-id="2bbba-262">For more information, see [Network Tracing in the .NET Framework](/dotnet/framework/network-programming/network-tracing).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="ExtendedProtectionPolicy">
      <MemberSignature Language="C#" Value="public System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy ExtendedProtectionPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy ExtendedProtectionPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.ExtendedProtectionPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Property ExtendedProtectionPolicy As ExtendedProtectionPolicy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ ExtendedProtectionPolicy { System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ get(); void set(System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ExtendedProtectionPolicy : System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy with get, set" Usage="System.Net.HttpListener.ExtendedProtectionPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.MonoTODO("not used anywhere in the implementation")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.MonoTODO("not used anywhere in the implementation")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2bbba-263">获取或设置用于会话的扩展保护的 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />。</span><span class="sxs-lookup"><span data-stu-id="2bbba-263">Gets or sets the <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> to use for extended protection for a session.</span></span></summary>
        <value><span data-ttu-id="2bbba-264">一个 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />，它指定要用于扩展保护的策略。</span><span class="sxs-lookup"><span data-stu-id="2bbba-264">A <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> that specifies the policy to use for extended protection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bbba-265"><xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A>属性与集成的 Windows 身份验证一起使用，以提供扩展保护。</span><span class="sxs-lookup"><span data-stu-id="2bbba-265">The <xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A> property is used with integrated Windows authentication to provide extended protection.</span></span> <span data-ttu-id="2bbba-266"><xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A>属性允许配置整个会话的扩展保护策略 <xref:System.Net.HttpListener> 。</span><span class="sxs-lookup"><span data-stu-id="2bbba-266">The <xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A> property allows the configuration of the extended protection policy for the whole <xref:System.Net.HttpListener> session.</span></span> <span data-ttu-id="2bbba-267"><xref:System.Net.HttpListener.ExtendedProtectionSelectorDelegate%2A>属性允许配置每个单独请求的扩展保护策略。</span><span class="sxs-lookup"><span data-stu-id="2bbba-267">The <xref:System.Net.HttpListener.ExtendedProtectionSelectorDelegate%2A> property allows the configuration of the extended protection policy for each individual request.</span></span>  
  
 <span data-ttu-id="2bbba-268"><xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding%2A> 属性必须为 `null`。</span><span class="sxs-lookup"><span data-stu-id="2bbba-268">The <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding%2A> property must be `null`.</span></span> <span data-ttu-id="2bbba-269"><xref:System.Net.HttpListener>实例获取 (CBT) 的通道绑定令牌（如果有）。</span><span class="sxs-lookup"><span data-stu-id="2bbba-269">The <xref:System.Net.HttpListener> instance gets the Channel Binding Token (CBT) directly from its own TLS session if there is one.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2bbba-270">尝试设置 <see cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" /> 属性，但 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> 属性不是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="2bbba-270">An attempt was made to set the <see cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" /> property, but the <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> property was not <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2bbba-271">尝试将 <see cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" /> 属性设置为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="2bbba-271">An attempt was made to set the <see cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" /> property to <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2bbba-272">尝试在调用 <see cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" /> 方法后设置 <see cref="M:System.Net.HttpListener.Start" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="2bbba-272">An attempt was made to set the <see cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" /> property after the <see cref="M:System.Net.HttpListener.Start" /> method was already called.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="2bbba-273">此对象已关闭。</span><span class="sxs-lookup"><span data-stu-id="2bbba-273">This object is closed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="2bbba-274"><see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement" /> 属性设置为平台上的 <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" />，其不支持扩展的保护。</span><span class="sxs-lookup"><span data-stu-id="2bbba-274">The <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement" /> property was set to <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> on a platform that does not support extended protection.</span></span></exception>
        <altmember cref="P:System.Net.HttpListener.DefaultServiceNames" />
        <altmember cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" />
        <altmember cref="T:System.Net.HttpListener.ExtendedProtectionSelector" />
        <altmember cref="N:System.Security.Authentication.ExtendedProtection" />
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <related type="Article" href="/dotnet/framework/network-programming/integrated-windows-authentication-with-extended-protection"><span data-ttu-id="2bbba-275">带有扩展保护的集成 Windows 身份验证</span><span class="sxs-lookup"><span data-stu-id="2bbba-275">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ExtendedProtectionSelectorDelegate">
      <MemberSignature Language="C#" Value="public System.Net.HttpListener.ExtendedProtectionSelector? ExtendedProtectionSelectorDelegate { get; set; }" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.HttpListener/ExtendedProtectionSelector ExtendedProtectionSelectorDelegate" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" />
      <MemberSignature Language="VB.NET" Value="Public Property ExtendedProtectionSelectorDelegate As HttpListener.ExtendedProtectionSelector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::HttpListener::ExtendedProtectionSelector ^ ExtendedProtectionSelectorDelegate { System::Net::HttpListener::ExtendedProtectionSelector ^ get(); void set(System::Net::HttpListener::ExtendedProtectionSelector ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ExtendedProtectionSelectorDelegate : System.Net.HttpListener.ExtendedProtectionSelector with get, set" Usage="System.Net.HttpListener.ExtendedProtectionSelectorDelegate" />
      <MemberSignature Language="C#" Value="public System.Net.HttpListener.ExtendedProtectionSelector ExtendedProtectionSelectorDelegate { get; set; }" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.HttpListener+ExtendedProtectionSelector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2bbba-276">获取或设置在确定要用于每个请求的 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 时调用的委托。</span><span class="sxs-lookup"><span data-stu-id="2bbba-276">Gets or sets the delegate called to determine the <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> to use for each request.</span></span></summary>
        <value><span data-ttu-id="2bbba-277">一个 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />，它指定要用于扩展保护的策略。</span><span class="sxs-lookup"><span data-stu-id="2bbba-277">A <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> that specifies the policy to use for extended protection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bbba-278"><xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A>属性与集成的 Windows 身份验证一起使用，以提供扩展保护。</span><span class="sxs-lookup"><span data-stu-id="2bbba-278">The <xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A> property is used with integrated Windows authentication to provide extended protection.</span></span> <span data-ttu-id="2bbba-279"><xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A>属性允许配置整个会话的扩展保护策略 <xref:System.Net.HttpListener> 。</span><span class="sxs-lookup"><span data-stu-id="2bbba-279">The <xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A> property allows the configuration of the extended protection policy for the whole <xref:System.Net.HttpListener> session.</span></span> <span data-ttu-id="2bbba-280"><xref:System.Net.HttpListener.ExtendedProtectionSelectorDelegate%2A>属性允许每个请求的扩展保护策略的配置。</span><span class="sxs-lookup"><span data-stu-id="2bbba-280">The <xref:System.Net.HttpListener.ExtendedProtectionSelectorDelegate%2A> property allows the configuration of the extended protection policy per individual request.</span></span>  
  
 <span data-ttu-id="2bbba-281"><xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding%2A> 属性必须为 `null`。</span><span class="sxs-lookup"><span data-stu-id="2bbba-281">The <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding%2A> property must be `null`.</span></span> <span data-ttu-id="2bbba-282"><xref:System.Net.HttpListener>实例获取 (CBT) 的通道绑定令牌（如果有）。</span><span class="sxs-lookup"><span data-stu-id="2bbba-282">The <xref:System.Net.HttpListener> instance gets the Channel Binding Token (CBT) directly from its own TLS session if there is one.</span></span>  
  
 <span data-ttu-id="2bbba-283">对于每个请求，委托可以选择 <xref:System.Net.HttpListener> 实例将用来提供扩展保护的设置。</span><span class="sxs-lookup"><span data-stu-id="2bbba-283">For each request, the delegate can choose the settings that the <xref:System.Net.HttpListener> instance will use to provide extended protection.</span></span>  
  
 <span data-ttu-id="2bbba-284">如果委托 `null` 为此属性返回，则此属性表示 <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy> <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> 属性设置为的 <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never> 。</span><span class="sxs-lookup"><span data-stu-id="2bbba-284">If a delegate returns `null` for this property, this represents a <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy> which the <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> property set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2bbba-285">尝试设置 <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> 属性，但 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> 属性必须为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="2bbba-285">An attempt was made to set the <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> property, but the <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> property must be <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2bbba-286">尝试将 <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> 属性设置为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="2bbba-286">An attempt was made to set the <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> property to <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2bbba-287">尝试在调用 <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> 方法后设置 <see cref="M:System.Net.HttpListener.Start" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="2bbba-287">An attempt was made to set the <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> property after the <see cref="M:System.Net.HttpListener.Start" /> method was already called.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="2bbba-288">此对象已关闭。</span><span class="sxs-lookup"><span data-stu-id="2bbba-288">This object is closed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="2bbba-289">已试图在不支持扩展的保护的平台上设置 <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="2bbba-289">An attempt was made to set the <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> property on a platform that does not support extended protection.</span></span></exception>
        <altmember cref="P:System.Net.HttpListener.DefaultServiceNames" />
        <altmember cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" />
        <altmember cref="T:System.Net.HttpListener.ExtendedProtectionSelector" />
        <altmember cref="N:System.Security.Authentication.ExtendedProtection" />
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <related type="Article" href="/dotnet/framework/network-programming/integrated-windows-authentication-with-extended-protection"><span data-ttu-id="2bbba-290">带有扩展保护的集成 Windows 身份验证</span><span class="sxs-lookup"><span data-stu-id="2bbba-290">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetContext">
      <MemberSignature Language="C#" Value="public System.Net.HttpListenerContext GetContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.HttpListenerContext GetContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.GetContext" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContext () As HttpListenerContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::HttpListenerContext ^ GetContext();" />
      <MemberSignature Language="F#" Value="member this.GetContext : unit -&gt; System.Net.HttpListenerContext" Usage="httpListener.GetContext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.HttpListenerContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2bbba-291">等待传入的请求，接收到请求时返回。</span><span class="sxs-lookup"><span data-stu-id="2bbba-291">Waits for an incoming request and returns when one is received.</span></span></summary>
        <returns><span data-ttu-id="2bbba-292">表示客户端请求的 <see cref="T:System.Net.HttpListenerContext" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="2bbba-292">An <see cref="T:System.Net.HttpListenerContext" /> object that represents a client request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bbba-293">在调用此方法之前，必须调用 <xref:System.Net.HttpListener.Start%2A> 方法，并添加至少一个要侦听的 uri 前缀，方法是将 uri 字符串添加到 <xref:System.Net.HttpListenerPrefixCollection> 属性返回的 <xref:System.Net.HttpListener.Prefixes%2A> 。</span><span class="sxs-lookup"><span data-stu-id="2bbba-293">Before calling this method, you must call the <xref:System.Net.HttpListener.Start%2A> method and add at least one URI prefix to listen for by adding the URI strings to the <xref:System.Net.HttpListenerPrefixCollection> returned by the <xref:System.Net.HttpListener.Prefixes%2A> property.</span></span> <span data-ttu-id="2bbba-294">有关前缀的详细说明，请参阅 <xref:System.Net.HttpListener> 类概述。</span><span class="sxs-lookup"><span data-stu-id="2bbba-294">For a detailed description of prefixes, see the <xref:System.Net.HttpListener> class overview.</span></span>  
  
 <span data-ttu-id="2bbba-295">等待传入请求时，此方法会阻止。</span><span class="sxs-lookup"><span data-stu-id="2bbba-295">This method blocks while waiting for an incoming request.</span></span> <span data-ttu-id="2bbba-296">如果希望在单独的线程上以异步方式 (处理传入请求) 以便应用程序不会阻止，请使用 <xref:System.Net.HttpListener.BeginGetContext%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="2bbba-296">If you want incoming requests to be processed asynchronously (on separate threads) so that your application does not block, use the <xref:System.Net.HttpListener.BeginGetContext%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2bbba-297">下面的代码示例演示如何调用此方法。</span><span class="sxs-lookup"><span data-stu-id="2bbba-297">The following code example demonstrates calling this method.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#2)]  
 [!code-vb[Net_Listener_Basic#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Net_Listener_Basic/VB/test.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.HttpListenerException"><span data-ttu-id="2bbba-298">Win32 函数调用失败。</span><span class="sxs-lookup"><span data-stu-id="2bbba-298">A Win32 function call failed.</span></span> <span data-ttu-id="2bbba-299">检查异常的 <see cref="P:System.Net.HttpListenerException.ErrorCode" /> 属性以确定导致异常的原因。</span><span class="sxs-lookup"><span data-stu-id="2bbba-299">Check the exception's <see cref="P:System.Net.HttpListenerException.ErrorCode" /> property to determine the cause of the exception.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2bbba-300">此对象尚未启动或当前已停止。</span><span class="sxs-lookup"><span data-stu-id="2bbba-300">This object has not been started or is currently stopped.</span></span>  
  
<span data-ttu-id="2bbba-301">- 或 -</span><span class="sxs-lookup"><span data-stu-id="2bbba-301">-or-</span></span> 
<span data-ttu-id="2bbba-302"><see cref="T:System.Net.HttpListener" /> 没有任何要响应的统一资源标识符 (URI) 前缀。</span><span class="sxs-lookup"><span data-stu-id="2bbba-302">The <see cref="T:System.Net.HttpListener" /> does not have any Uniform Resource Identifier (URI) prefixes to respond to.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="2bbba-303">此对象已关闭。</span><span class="sxs-lookup"><span data-stu-id="2bbba-303">This object is closed.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="2bbba-304">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="2bbba-304">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="2bbba-305">有关详细信息，请参阅 [.NET Framework 中的网络跟踪](/dotnet/framework/network-programming/network-tracing)。</span><span class="sxs-lookup"><span data-stu-id="2bbba-305">For more information, see [Network Tracing in the .NET Framework](/dotnet/framework/network-programming/network-tracing).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="GetContextAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.HttpListenerContext&gt; GetContextAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.HttpListenerContext&gt; GetContextAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.GetContextAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContextAsync () As Task(Of HttpListenerContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::HttpListenerContext ^&gt; ^ GetContextAsync();" />
      <MemberSignature Language="F#" Value="member this.GetContextAsync : unit -&gt; System.Threading.Tasks.Task&lt;System.Net.HttpListenerContext&gt;" Usage="httpListener.GetContextAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.HttpListenerContext&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2bbba-306">等待传入请求以作为异步操作。</span><span class="sxs-lookup"><span data-stu-id="2bbba-306">Waits for an incoming request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="2bbba-307">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="2bbba-307">The task object representing the asynchronous operation.</span></span> <span data-ttu-id="2bbba-308">任务对象上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将返回表示客户端请求的 <see cref="T:System.Net.HttpListenerContext" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="2bbba-308">The <see cref="P:System.Threading.Tasks.Task`1.Result" /> property on the task object returns an <see cref="T:System.Net.HttpListenerContext" /> object that represents a client request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bbba-309">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="2bbba-309">This operation will not block.</span></span> <span data-ttu-id="2bbba-310"><xref:System.Threading.Tasks.Task%601>收到传入请求后，将完成返回的对象。</span><span class="sxs-lookup"><span data-stu-id="2bbba-310">The returned <xref:System.Threading.Tasks.Task%601> object will complete when the incoming request has been received.</span></span>  
  
 <span data-ttu-id="2bbba-311">在调用此方法之前，必须调用 <xref:System.Net.HttpListener.Start%2A> 方法，并添加至少一个要侦听的 uri 前缀，方法是将 uri 字符串添加到 <xref:System.Net.HttpListenerPrefixCollection> 属性返回的 <xref:System.Net.HttpListener.Prefixes%2A> 。</span><span class="sxs-lookup"><span data-stu-id="2bbba-311">Before calling this method, you must call the <xref:System.Net.HttpListener.Start%2A> method and add at least one URI prefix to listen for by adding the URI strings to the <xref:System.Net.HttpListenerPrefixCollection> returned by the <xref:System.Net.HttpListener.Prefixes%2A> property.</span></span> <span data-ttu-id="2bbba-312">有关前缀的详细说明，请参阅 <xref:System.Net.HttpListener> 类概述。</span><span class="sxs-lookup"><span data-stu-id="2bbba-312">For a detailed description of prefixes, see the <xref:System.Net.HttpListener> class overview.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.HttpListenerContext" />
      </Docs>
    </Member>
    <Member MemberName="IgnoreWriteExceptions">
      <MemberSignature Language="C#" Value="public bool IgnoreWriteExceptions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreWriteExceptions" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.IgnoreWriteExceptions" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreWriteExceptions As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreWriteExceptions { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreWriteExceptions : bool with get, set" Usage="System.Net.HttpListener.IgnoreWriteExceptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2bbba-313">获取或设置 <see cref="T:System.Boolean" /> 值，该值指定应用程序是否接收 <see cref="T:System.Net.HttpListener" /> 向客户端发送响应时发生的异常。</span><span class="sxs-lookup"><span data-stu-id="2bbba-313">Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether your application receives exceptions that occur when an <see cref="T:System.Net.HttpListener" /> sends the response to the client.</span></span></summary>
        <value><span data-ttu-id="2bbba-314"><see langword="true" /> 如果这 <see cref="T:System.Net.HttpListener" /> 不应返回向客户端发送响应时发生的异常，则为; 否则为 <see langword="false" /> 。</span><span class="sxs-lookup"><span data-stu-id="2bbba-314"><see langword="true" /> if this <see cref="T:System.Net.HttpListener" /> should not return exceptions that occur when sending the response to the client; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="2bbba-315">默认值是 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2bbba-315">The default value is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bbba-316">`true`如果你的应用程序不要求将响应成功发送到每个客户端，请将此属性设置为。</span><span class="sxs-lookup"><span data-stu-id="2bbba-316">Set this property to `true` if your application does not require that a response is successfully sent to each client.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2bbba-317">下面的代码示例演示如何设置此属性。</span><span class="sxs-lookup"><span data-stu-id="2bbba-317">The following code example demonstrates setting this property.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#14](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#14)]  
 [!code-vb[Net_Listener_Basic#14](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Net_Listener_Basic/VB/test.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="2bbba-318">此对象已关闭。</span><span class="sxs-lookup"><span data-stu-id="2bbba-318">This object has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsListening">
      <MemberSignature Language="C#" Value="public bool IsListening { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsListening" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.IsListening" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsListening As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsListening { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsListening : bool" Usage="System.Net.HttpListener.IsListening" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2bbba-319">获取一个值，指示 <see cref="T:System.Net.HttpListener" /> 是否已启动。</span><span class="sxs-lookup"><span data-stu-id="2bbba-319">Gets a value that indicates whether <see cref="T:System.Net.HttpListener" /> has been started.</span></span></summary>
        <value><span data-ttu-id="2bbba-320">如果已启动 <see cref="T:System.Net.HttpListener" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2bbba-320"><see langword="true" /> if the <see cref="T:System.Net.HttpListener" /> was started; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bbba-321">若要启动 <xref:System.Net.HttpListener> ，请调用 <xref:System.Net.HttpListener.Start%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="2bbba-321">To start an <xref:System.Net.HttpListener>, call the <xref:System.Net.HttpListener.Start%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2bbba-322">下面的代码示例演示如何使用此属性来确定实例的侦听状态。</span><span class="sxs-lookup"><span data-stu-id="2bbba-322">The following code example demonstrates using this property to determine the listening state of an instance.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#1)]  
 [!code-vb[Net_Listener_Basic#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Net_Listener_Basic/VB/test.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSupported">
      <MemberSignature Language="C#" Value="public static bool IsSupported { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsSupported" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.IsSupported" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsSupported As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsSupported { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSupported : bool" Usage="System.Net.HttpListener.IsSupported" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2bbba-323">获取一个值，指示 <see cref="T:System.Net.HttpListener" /> 是否可用于当前操作系统。</span><span class="sxs-lookup"><span data-stu-id="2bbba-323">Gets a value that indicates whether <see cref="T:System.Net.HttpListener" /> can be used with the current operating system.</span></span></summary>
        <value><span data-ttu-id="2bbba-324"><see langword="true" /> 所有平台。</span><span class="sxs-lookup"><span data-stu-id="2bbba-324"><see langword="true" /> on all platforms.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2bbba-325">下面的代码示例演示如何使用 <xref:System.Net.HttpListener.IsSupported%2A> 属性来检测 <xref:System.Net.HttpListener> 对象是否可用于当前操作系统。</span><span class="sxs-lookup"><span data-stu-id="2bbba-325">The following code example demonstrates the use of the <xref:System.Net.HttpListener.IsSupported%2A> property to detect whether an <xref:System.Net.HttpListener> object can be used with the current operating system.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#2)]  
 [!code-vb[Net_Listener_Basic#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Net_Listener_Basic/VB/test.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefixes">
      <MemberSignature Language="C#" Value="public System.Net.HttpListenerPrefixCollection Prefixes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.HttpListenerPrefixCollection Prefixes" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.Prefixes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Prefixes As HttpListenerPrefixCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::HttpListenerPrefixCollection ^ Prefixes { System::Net::HttpListenerPrefixCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Prefixes : System.Net.HttpListenerPrefixCollection" Usage="System.Net.HttpListener.Prefixes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.HttpListenerPrefixCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2bbba-326">获取由此 <see cref="T:System.Net.HttpListener" /> 对象处理的统一资源标识符 (URI) 前缀。</span><span class="sxs-lookup"><span data-stu-id="2bbba-326">Gets the Uniform Resource Identifier (URI) prefixes handled by this <see cref="T:System.Net.HttpListener" /> object.</span></span></summary>
        <value><span data-ttu-id="2bbba-327"><see cref="T:System.Net.HttpListenerPrefixCollection" />，包含此 <see cref="T:System.Net.HttpListener" /> 对象在经配置后要处理的 URI 前缀。</span><span class="sxs-lookup"><span data-stu-id="2bbba-327">An <see cref="T:System.Net.HttpListenerPrefixCollection" /> that contains the URI prefixes that this <see cref="T:System.Net.HttpListener" /> object is configured to handle.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bbba-328">前缀采用规范格式。</span><span class="sxs-lookup"><span data-stu-id="2bbba-328">The prefixes are in canonical form.</span></span> <span data-ttu-id="2bbba-329">有关前缀的详细说明，请参阅 <xref:System.Net.HttpListener> 类概述。</span><span class="sxs-lookup"><span data-stu-id="2bbba-329">For a detailed description of prefixes, see the <xref:System.Net.HttpListener> class overview.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2bbba-330">下面的代码示例演示如何使用 <xref:System.Net.HttpListener.Prefixes%2A> 属性来获取和打印处理的 URI 前缀。</span><span class="sxs-lookup"><span data-stu-id="2bbba-330">The following code example demonstrates using the <xref:System.Net.HttpListener.Prefixes%2A> property to obtain and print the URI prefixes that are handled.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#1)]  
 [!code-vb[Net_Listener_Basic#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Net_Listener_Basic/VB/test.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="2bbba-331">此对象已关闭。</span><span class="sxs-lookup"><span data-stu-id="2bbba-331">This object has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Realm">
      <MemberSignature Language="C#" Value="public string? Realm { get; set; }" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance string Realm" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.Realm" />
      <MemberSignature Language="VB.NET" Value="Public Property Realm As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Realm { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Realm : string with get, set" Usage="System.Net.HttpListener.Realm" />
      <MemberSignature Language="C#" Value="public string Realm { get; set; }" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2bbba-332">获取或设置与此 <see cref="T:System.Net.HttpListener" /> 对象关联的领域或资源分区。</span><span class="sxs-lookup"><span data-stu-id="2bbba-332">Gets or sets the realm, or resource partition, associated with this <see cref="T:System.Net.HttpListener" /> object.</span></span></summary>
        <value><span data-ttu-id="2bbba-333"><see cref="T:System.String" /> 值，包含与 <see cref="T:System.Net.HttpListener" /> 对象关联的领域名。</span><span class="sxs-lookup"><span data-stu-id="2bbba-333">A <see cref="T:System.String" /> value that contains the name of the realm associated with the <see cref="T:System.Net.HttpListener" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bbba-334">服务器使用领域来对受保护的资源进行分区;每个分区都可以有自己的身份验证方案和/或授权数据库。</span><span class="sxs-lookup"><span data-stu-id="2bbba-334">Servers use realms to partition protected resources; each partition can have its own authentication scheme and/or authorization database.</span></span> <span data-ttu-id="2bbba-335">领域仅用于基本和摘要式身份验证。</span><span class="sxs-lookup"><span data-stu-id="2bbba-335">Realms are used only for basic and digest authentication.</span></span> <span data-ttu-id="2bbba-336">在客户端成功进行身份验证之后，该身份验证对给定领域内的所有资源都有效。</span><span class="sxs-lookup"><span data-stu-id="2bbba-336">After a client successfully authenticates, the authentication is valid for all resources in a given realm.</span></span> <span data-ttu-id="2bbba-337">有关领域的详细说明，请参阅 RFC 2617，网址为 [https://www.ietf.org/](https://www.ietf.org/) 。</span><span class="sxs-lookup"><span data-stu-id="2bbba-337">For a detailed description of realms, see RFC 2617 at [https://www.ietf.org/](https://www.ietf.org/).</span></span>  
  
 <span data-ttu-id="2bbba-338">的实例 <xref:System.Net.HttpListener> 只具有一个关联的领域。</span><span class="sxs-lookup"><span data-stu-id="2bbba-338">An instance of <xref:System.Net.HttpListener> has only one associated realm.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2bbba-339">下面的代码示例演示如何设置 <xref:System.Net.HttpListener.Realm%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="2bbba-339">The following code example demonstrates setting the <xref:System.Net.HttpListener.Realm%2A> property.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#10](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#10)]  
 [!code-vb[Net_Listener_Basic#10](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Net_Listener_Basic/VB/test.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="2bbba-340">此对象已关闭。</span><span class="sxs-lookup"><span data-stu-id="2bbba-340">This object has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="httpListener.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2bbba-341">允许此实例接收传入的请求。</span><span class="sxs-lookup"><span data-stu-id="2bbba-341">Allows this instance to receive incoming requests.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bbba-342">在调用或方法之前，必须调用此 <xref:System.Net.HttpListener.GetContext%2A> 方法 <xref:System.Net.HttpListener.BeginGetContext%2A> 。</span><span class="sxs-lookup"><span data-stu-id="2bbba-342">This method must be called before you call the <xref:System.Net.HttpListener.GetContext%2A> or <xref:System.Net.HttpListener.BeginGetContext%2A> method.</span></span>  
  
 <span data-ttu-id="2bbba-343">启动某个 <xref:System.Net.HttpListener> 对象后，可以使用 <xref:System.Net.HttpListener.Stop%2A> 方法将其停止。</span><span class="sxs-lookup"><span data-stu-id="2bbba-343">After you have started an <xref:System.Net.HttpListener> object, you can use the <xref:System.Net.HttpListener.Stop%2A> method to stop it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2bbba-344">如果此侦听器实例使用 https，则必须安装并选择服务器证书。</span><span class="sxs-lookup"><span data-stu-id="2bbba-344">If this listener instance uses https, you must install and select a Server Certificate.</span></span> <span data-ttu-id="2bbba-345">否则， <xref:System.Net.HttpWebRequest> 该连接的查询 <xref:System.Net.HttpListener> 将失败，并出现意外的连接关闭。</span><span class="sxs-lookup"><span data-stu-id="2bbba-345">Otherwise, an <xref:System.Net.HttpWebRequest> query of this <xref:System.Net.HttpListener> will fail with an unexpected close of the connection.</span></span> <span data-ttu-id="2bbba-346">您可以使用 [HttpCfg.exe](/windows/win32/http/httpcfg-exe)配置服务器证书和其他侦听器选项。</span><span class="sxs-lookup"><span data-stu-id="2bbba-346">You can configure Server Certificates and other listener options by using [HttpCfg.exe](/windows/win32/http/httpcfg-exe).</span></span>
  
   
  
## Examples  
 <span data-ttu-id="2bbba-347">下面的代码示例演示如何使用 <xref:System.Net.HttpListener.Start%2A> 方法开始处理传入的请求。</span><span class="sxs-lookup"><span data-stu-id="2bbba-347">The following code example demonstrates using the <xref:System.Net.HttpListener.Start%2A> method to begin processing incoming requests.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#12](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#12)]  
 [!code-vb[Net_Listener_Basic#12](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Net_Listener_Basic/VB/test.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.HttpListenerException"><span data-ttu-id="2bbba-348">Win32 函数调用失败。</span><span class="sxs-lookup"><span data-stu-id="2bbba-348">A Win32 function call failed.</span></span> <span data-ttu-id="2bbba-349">检查异常的 <see cref="P:System.Net.HttpListenerException.ErrorCode" /> 属性以确定导致异常的原因。</span><span class="sxs-lookup"><span data-stu-id="2bbba-349">Check the exception's <see cref="P:System.Net.HttpListenerException.ErrorCode" /> property to determine the cause of the exception.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="2bbba-350">此对象已关闭。</span><span class="sxs-lookup"><span data-stu-id="2bbba-350">This object is closed.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="2bbba-351">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="2bbba-351">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="2bbba-352">有关详细信息，请参阅 [.NET Framework 中的网络跟踪](/dotnet/framework/network-programming/network-tracing)。</span><span class="sxs-lookup"><span data-stu-id="2bbba-352">For more information, see [Network Tracing in the .NET Framework](/dotnet/framework/network-programming/network-tracing).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="httpListener.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2bbba-353">使此实例停止接收新的传入请求，并终止处理所有正在进行的请求。</span><span class="sxs-lookup"><span data-stu-id="2bbba-353">Causes this instance to stop receiving new incoming requests and terminates processing of all ongoing requests.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bbba-354">如果此实例已停止，则调用此方法不起作用。</span><span class="sxs-lookup"><span data-stu-id="2bbba-354">If this instance is already stopped, calling this method has no effect.</span></span>  
  
 <span data-ttu-id="2bbba-355">停止 <xref:System.Net.HttpListener> 对象后，可以使用 <xref:System.Net.HttpListener.Start%2A> 方法来重新启动它。</span><span class="sxs-lookup"><span data-stu-id="2bbba-355">After you have stopped an <xref:System.Net.HttpListener> object, you can use the <xref:System.Net.HttpListener.Start%2A> method to restart it.</span></span>  
  
   
  
## Examples  
 
<span data-ttu-id="2bbba-356">下面的代码示例演示如何使用 <xref:System.Net.HttpListener.Stop%2A> 方法来停止处理传入的请求。</span><span class="sxs-lookup"><span data-stu-id="2bbba-356">The following code example demonstrates using the <xref:System.Net.HttpListener.Stop%2A> method to stop processing incoming requests.</span></span>  
 
[!code-csharp[Net_Listener_Basic#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#2)]  
[!code-vb[Net_Listener_Basic#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Net_Listener_Basic/VB/test.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="2bbba-357">此对象已关闭。</span><span class="sxs-lookup"><span data-stu-id="2bbba-357">This object has been closed.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="2bbba-358">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="2bbba-358">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="2bbba-359">有关详细信息，请参阅 [.NET Framework 中的网络跟踪](/dotnet/framework/network-programming/network-tracing)。</span><span class="sxs-lookup"><span data-stu-id="2bbba-359">For more information, see [Network Tracing in the .NET Framework](/dotnet/framework/network-programming/network-tracing).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberSignature Language="F#" Value="abstract member System.IDisposable.Dispose : unit -&gt; unit&#xA;override this.System.IDisposable.Dispose : unit -&gt; unit" Usage="httpListener.System.IDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2bbba-360">释放此 <see cref="T:System.Net.HttpListener" /> 对象持有的资源。</span><span class="sxs-lookup"><span data-stu-id="2bbba-360">Releases the resources held by this <see cref="T:System.Net.HttpListener" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bbba-361">应用程序应使用 <xref:System.Net.HttpListener.Close%2A> 方法，而不是调用此方法。</span><span class="sxs-lookup"><span data-stu-id="2bbba-361">Applications should use the <xref:System.Net.HttpListener.Close%2A> method instead of calling this method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeoutManager">
      <MemberSignature Language="C#" Value="public System.Net.HttpListenerTimeoutManager TimeoutManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.HttpListenerTimeoutManager TimeoutManager" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.TimeoutManager" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeoutManager As HttpListenerTimeoutManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::HttpListenerTimeoutManager ^ TimeoutManager { System::Net::HttpListenerTimeoutManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeoutManager : System.Net.HttpListenerTimeoutManager" Usage="System.Net.HttpListener.TimeoutManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.MonoTODO]</AttributeName>
          <AttributeName Language="F#">[&lt;System.MonoTODO&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.HttpListenerTimeoutManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2bbba-362">此 <see cref="T:System.Net.HttpListener" /> 实例的超时管理器。</span><span class="sxs-lookup"><span data-stu-id="2bbba-362">The timeout manager for this <see cref="T:System.Net.HttpListener" /> instance.</span></span></summary>
        <value><span data-ttu-id="2bbba-363">此 <see cref="T:System.Net.HttpListener" /> 实例的超时管理器。</span><span class="sxs-lookup"><span data-stu-id="2bbba-363">The timeout manager for this <see cref="T:System.Net.HttpListener" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bbba-364">超时管理器定义此实例的连接超时限制 <xref:System.Net.HttpListener> 。</span><span class="sxs-lookup"><span data-stu-id="2bbba-364">The timeout manager defines the connection timeout limits for this <xref:System.Net.HttpListener> instance.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnsafeConnectionNtlmAuthentication">
      <MemberSignature Language="C#" Value="public bool UnsafeConnectionNtlmAuthentication { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UnsafeConnectionNtlmAuthentication" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.UnsafeConnectionNtlmAuthentication" />
      <MemberSignature Language="VB.NET" Value="Public Property UnsafeConnectionNtlmAuthentication As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UnsafeConnectionNtlmAuthentication { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UnsafeConnectionNtlmAuthentication : bool with get, set" Usage="System.Net.HttpListener.UnsafeConnectionNtlmAuthentication" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.MonoTODO("Support for NTLM needs some loving.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.MonoTODO("Support for NTLM needs some loving.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2bbba-365">获取或设置 <see cref="T:System.Boolean" /> 值，该值控制当使用 NTLM 时是否需要对使用同一传输控制协议 (TCP) 连接的其他请求进行身份验证。</span><span class="sxs-lookup"><span data-stu-id="2bbba-365">Gets or sets a <see cref="T:System.Boolean" /> value that controls whether, when NTLM is used, additional requests using the same Transmission Control Protocol (TCP) connection are required to authenticate.</span></span></summary>
        <value><span data-ttu-id="2bbba-366">如果第一个请求的 <see cref="T:System.Security.Principal.IIdentity" /> 将用于同一连接上的后续请求，则返回 <see langword="true" />；否则返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2bbba-366"><see langword="true" /> if the <see cref="T:System.Security.Principal.IIdentity" /> of the first request will be used for subsequent requests on the same connection; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="2bbba-367">默认值是 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2bbba-367">The default value is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bbba-368">如果将此属性设置为 `true` ，并且通过使用 NTLM 对特定 tcp 连接上的第一个请求进行身份验证，则使用 (<xref:System.Security.Principal.IIdentity> 初始请求) 的身份验证信息处理同一 tcp 连接上的后续请求。</span><span class="sxs-lookup"><span data-stu-id="2bbba-368">When this property is set to `true` and the first request over a particular TCP connection is authenticated using NTLM, subsequent requests over the same TCP connection are processed using the authentication information (<xref:System.Security.Principal.IIdentity>) of the initial request.</span></span>  
  
 <span data-ttu-id="2bbba-369">此属性在 NTLM 不是身份验证协议时无效。</span><span class="sxs-lookup"><span data-stu-id="2bbba-369">This property has no effect when NTLM is not the authentication protocol.</span></span> <span data-ttu-id="2bbba-370">当 Negotiate 指定为身份验证协议时，只有当 NTLM 是用于身份验证的实际协议时，此属性才有效。</span><span class="sxs-lookup"><span data-stu-id="2bbba-370">When Negotiate is specified as the authentication protocol, this property has an effect only if NTLM is the actual protocol used for authentication.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2bbba-371">将此属性设置为 `true` 会提高性能，因为不 <xref:System.Net.HttpListener> 会发送其他 NTLM 身份验证质询，因此，不需要所有请求即可提供身份验证信息存在安全风险。</span><span class="sxs-lookup"><span data-stu-id="2bbba-371">While setting this property to `true` increases performance because the <xref:System.Net.HttpListener> does not send additional NTLM authentication challenges, there is a security risk in not requiring all requests to provide authentication information.</span></span> <span data-ttu-id="2bbba-372">必须确定为提高性能冒此风险是否值得。</span><span class="sxs-lookup"><span data-stu-id="2bbba-372">You must determine whether the increase in performance is worth this risk.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2bbba-373">下面的代码示例演示如何设置此属性。</span><span class="sxs-lookup"><span data-stu-id="2bbba-373">The following code example demonstrates setting this property.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#14](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#14)]  
 [!code-vb[Net_Listener_Basic#14](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Net_Listener_Basic/VB/test.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="2bbba-374">此对象已关闭。</span><span class="sxs-lookup"><span data-stu-id="2bbba-374">This object has been closed.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
