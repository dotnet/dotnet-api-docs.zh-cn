<Type Name="IPEndPoint" FullName="System.Net.IPEndPoint">
  <Metadata><Meta Name="ms.openlocfilehash" Value="be809cc096173de5a3663a077b3c19e0fe194c75" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89786307" /></Metadata><TypeSignature Language="C#" Value="public class IPEndPoint : System.Net.EndPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit IPEndPoint extends System.Net.EndPoint" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.Net.IPEndPoint" />
  <TypeSignature Language="VB.NET" Value="Public Class IPEndPoint&#xA;Inherits EndPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class IPEndPoint : System::Net::EndPoint" />
  <TypeSignature Language="F#" Value="type IPEndPoint = class&#xA;    inherit EndPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit IPEndPoint extends System.Net.EndPoint" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Primitives</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net</AssemblyName>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Net.Primitives" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Net" FromVersion="4.0.0.0" To="System" ToVersion="4.0.0.0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Net.EndPoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="0da87-101">将网络终结点表示为 IP 地址和端口号。</span><span class="sxs-lookup"><span data-stu-id="0da87-101">Represents a network endpoint as an IP address and a port number.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0da87-102"><xref:System.Net.IPEndPoint>类包含应用程序连接到主机上的服务所需的主机和本地或远程端口信息。</span><span class="sxs-lookup"><span data-stu-id="0da87-102">The <xref:System.Net.IPEndPoint> class contains the host and local or remote port information needed by an application to connect to a service on a host.</span></span> <span data-ttu-id="0da87-103">通过将主机的 IP 地址和端口号组合在 <xref:System.Net.IPEndPoint> 一起，该类形成服务的连接点。</span><span class="sxs-lookup"><span data-stu-id="0da87-103">By combining the host's IP address and port number of a service, the <xref:System.Net.IPEndPoint> class forms a connection point to a service.</span></span>  
  
   
  
## Examples  
 [!code-cpp[System.Net.IPEndPoint#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPEndPoint/CPP/ipendpoint.cpp#1)]
 [!code-csharp[System.Net.IPEndPoint#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPEndPoint/CS/ipendpoint.cs#1)]
 [!code-vb[System.Net.IPEndPoint#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPEndPoint/VB/ipendpoint.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0da87-104">初始化 <see cref="T:System.Net.IPEndPoint" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="0da87-104">Initializes a new instance of the <see cref="T:System.Net.IPEndPoint" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IPEndPoint (long address, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 address, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPEndPoint.#ctor(System.Int64,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (address As Long, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IPEndPoint(long address, int port);" />
      <MemberSignature Language="F#" Value="new System.Net.IPEndPoint : int64 * int -&gt; System.Net.IPEndPoint" Usage="new System.Net.IPEndPoint (address, port)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="address" Type="System.Int64" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="0da87-105">Internet 主机的 IP 地址。</span><span class="sxs-lookup"><span data-stu-id="0da87-105">The IP address of the Internet host.</span></span> <span data-ttu-id="0da87-106">例如，大端格式的值 0x2414188f 可能为 IP 地址“143.24.20.36”。</span><span class="sxs-lookup"><span data-stu-id="0da87-106">For example, the value 0x2414188f in big-endian format would be the IP address "143.24.20.36".</span></span></param>
        <param name="port"><span data-ttu-id="0da87-107">与 <paramref name="address" /> 关联的端口号，或为 0 以指定任何可用端口。</span><span class="sxs-lookup"><span data-stu-id="0da87-107">The port number associated with the <paramref name="address" />, or 0 to specify any available port.</span></span> <span data-ttu-id="0da87-108"><paramref name="port" /> 以主机顺序排列。</span><span class="sxs-lookup"><span data-stu-id="0da87-108"><paramref name="port" /> is in host order.</span></span></param>
        <summary><span data-ttu-id="0da87-109">用指定的地址和端口号初始化 <see cref="T:System.Net.IPEndPoint" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="0da87-109">Initializes a new instance of the <see cref="T:System.Net.IPEndPoint" /> class with the specified address and port number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0da87-110">下面的示例使用指定的 IP 地址和端口号来创建 <xref:System.Net.IPEndPoint> 。</span><span class="sxs-lookup"><span data-stu-id="0da87-110">The following example uses the specified IP address and port number to create an <xref:System.Net.IPEndPoint>.</span></span>  
  
 [!code-cpp[IPEndPoint_Properties#4](~/samples/snippets/cpp/VS_Snippets_Remoting/IPEndPoint_Properties/CPP/ipendpoint_properties.cpp#4)]
 [!code-csharp[IPEndPoint_Properties#4](~/samples/snippets/csharp/VS_Snippets_Remoting/IPEndPoint_Properties/CS/ipendpoint_properties.cs#4)]
 [!code-vb[IPEndPoint_Properties#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/IPEndPoint_Properties/VB/ipendpoint_properties.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0da87-111"><paramref name="port" /> 小于 <see cref="F:System.Net.IPEndPoint.MinPort" />。</span><span class="sxs-lookup"><span data-stu-id="0da87-111"><paramref name="port" /> is less than <see cref="F:System.Net.IPEndPoint.MinPort" />.</span></span>  
  
<span data-ttu-id="0da87-112">- 或 -</span><span class="sxs-lookup"><span data-stu-id="0da87-112">-or-</span></span> 
 <span data-ttu-id="0da87-113"><paramref name="port" /> 大于 <see cref="F:System.Net.IPEndPoint.MaxPort" />。</span><span class="sxs-lookup"><span data-stu-id="0da87-113"><paramref name="port" /> is greater than <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span></span>  
  
<span data-ttu-id="0da87-114">- 或 -</span><span class="sxs-lookup"><span data-stu-id="0da87-114">-or-</span></span> 
 <span data-ttu-id="0da87-115"><paramref name="address" /> 小于 0 或大于 0x00000000FFFFFFFF。</span><span class="sxs-lookup"><span data-stu-id="0da87-115"><paramref name="address" /> is less than 0 or greater than 0x00000000FFFFFFFF.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IPEndPoint (System.Net.IPAddress address, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPAddress address, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPEndPoint.#ctor(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (address As IPAddress, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IPEndPoint(System::Net::IPAddress ^ address, int port);" />
      <MemberSignature Language="F#" Value="new System.Net.IPEndPoint : System.Net.IPAddress * int -&gt; System.Net.IPEndPoint" Usage="new System.Net.IPEndPoint (address, port)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="0da87-116"><see cref="T:System.Net.IPAddress" />。</span><span class="sxs-lookup"><span data-stu-id="0da87-116">An <see cref="T:System.Net.IPAddress" />.</span></span></param>
        <param name="port"><span data-ttu-id="0da87-117">与 <paramref name="address" /> 关联的端口号，或为 0 以指定任何可用端口。</span><span class="sxs-lookup"><span data-stu-id="0da87-117">The port number associated with the <paramref name="address" />, or 0 to specify any available port.</span></span> <span data-ttu-id="0da87-118"><paramref name="port" /> 以主机顺序排列。</span><span class="sxs-lookup"><span data-stu-id="0da87-118"><paramref name="port" /> is in host order.</span></span></param>
        <summary><span data-ttu-id="0da87-119">用指定的地址和端口号初始化 <see cref="T:System.Net.IPEndPoint" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="0da87-119">Initializes a new instance of the <see cref="T:System.Net.IPEndPoint" /> class with the specified address and port number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-cpp[System.Net.IPEndPoint#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPEndPoint/CPP/ipendpoint.cpp#2)]
 [!code-csharp[System.Net.IPEndPoint#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPEndPoint/CS/ipendpoint.cs#2)]
 [!code-vb[System.Net.IPEndPoint#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPEndPoint/VB/ipendpoint.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0da87-120"><paramref name="address" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="0da87-120"><paramref name="address" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0da87-121"><paramref name="port" /> 小于 <see cref="F:System.Net.IPEndPoint.MinPort" />。</span><span class="sxs-lookup"><span data-stu-id="0da87-121"><paramref name="port" /> is less than <see cref="F:System.Net.IPEndPoint.MinPort" />.</span></span>  
  
<span data-ttu-id="0da87-122">- 或 -</span><span class="sxs-lookup"><span data-stu-id="0da87-122">-or-</span></span> 
 <span data-ttu-id="0da87-123"><paramref name="port" /> 大于 <see cref="F:System.Net.IPEndPoint.MaxPort" />。</span><span class="sxs-lookup"><span data-stu-id="0da87-123"><paramref name="port" /> is greater than <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span></span>  
  
<span data-ttu-id="0da87-124">- 或 -</span><span class="sxs-lookup"><span data-stu-id="0da87-124">-or-</span></span> 
 <span data-ttu-id="0da87-125"><paramref name="address" /> 小于 0 或大于 0x00000000FFFFFFFF。</span><span class="sxs-lookup"><span data-stu-id="0da87-125"><paramref name="address" /> is less than 0 or greater than 0x00000000FFFFFFFF.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Address">
      <MemberSignature Language="C#" Value="public System.Net.IPAddress Address { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.IPAddress Address" />
      <MemberSignature Language="DocId" Value="P:System.Net.IPEndPoint.Address" />
      <MemberSignature Language="VB.NET" Value="Public Property Address As IPAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::IPAddress ^ Address { System::Net::IPAddress ^ get(); void set(System::Net::IPAddress ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Address : System.Net.IPAddress with get, set" Usage="System.Net.IPEndPoint.Address" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0da87-126">获取或设置终结点的 IP 地址。</span><span class="sxs-lookup"><span data-stu-id="0da87-126">Gets or sets the IP address of the endpoint.</span></span></summary>
        <value><span data-ttu-id="0da87-127">包含终结点的 IP 地址的 <see cref="T:System.Net.IPAddress" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="0da87-127">An <see cref="T:System.Net.IPAddress" /> instance containing the IP address of the endpoint.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0da87-128">下面的示例 <xref:System.Net.IPEndPoint.Address%2A> 使用指定的设置属性 <xref:System.Net.IPAddress> 。</span><span class="sxs-lookup"><span data-stu-id="0da87-128">The following example sets the <xref:System.Net.IPEndPoint.Address%2A> property using the <xref:System.Net.IPAddress> specified.</span></span>  
  
 [!code-cpp[System.Net.IPEndPoint#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPEndPoint/CPP/ipendpoint.cpp#3)]
 [!code-csharp[System.Net.IPEndPoint#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPEndPoint/CS/ipendpoint.cs#3)]
 [!code-vb[System.Net.IPEndPoint#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPEndPoint/VB/ipendpoint.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddressFamily">
      <MemberSignature Language="C#" Value="public override System.Net.Sockets.AddressFamily AddressFamily { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Sockets.AddressFamily AddressFamily" />
      <MemberSignature Language="DocId" Value="P:System.Net.IPEndPoint.AddressFamily" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AddressFamily As AddressFamily" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Net::Sockets::AddressFamily AddressFamily { System::Net::Sockets::AddressFamily get(); };" />
      <MemberSignature Language="F#" Value="member this.AddressFamily : System.Net.Sockets.AddressFamily" Usage="System.Net.IPEndPoint.AddressFamily" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.AddressFamily</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0da87-129">获取网际协议 (IP) 地址族。</span><span class="sxs-lookup"><span data-stu-id="0da87-129">Gets the Internet Protocol (IP) address family.</span></span></summary>
        <value><span data-ttu-id="0da87-130">返回 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" />。</span><span class="sxs-lookup"><span data-stu-id="0da87-130">Returns <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0da87-131">下面的示例使用 <xref:System.Net.IPEndPoint.AddressFamily%2A> 属性返回 <xref:System.Net.Sockets.AddressFamily> 所属的 <xref:System.Net.IPEndPoint> 。</span><span class="sxs-lookup"><span data-stu-id="0da87-131">The following example uses the <xref:System.Net.IPEndPoint.AddressFamily%2A> property to return the <xref:System.Net.Sockets.AddressFamily> to which the <xref:System.Net.IPEndPoint> belongs.</span></span> <span data-ttu-id="0da87-132">在这种情况下，它是 <xref:System.Net.Sockets.AddressFamily.InterNetwork> <xref:System.Net.Sockets.AddressFamily> 。</span><span class="sxs-lookup"><span data-stu-id="0da87-132">In this case it is the <xref:System.Net.Sockets.AddressFamily.InterNetwork><xref:System.Net.Sockets.AddressFamily>.</span></span>  
  
 [!code-cpp[System.Net.IPEndPoint#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPEndPoint/CPP/ipendpoint.cpp#3)]
 [!code-csharp[System.Net.IPEndPoint#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPEndPoint/CS/ipendpoint.cs#3)]
 [!code-vb[System.Net.IPEndPoint#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPEndPoint/VB/ipendpoint.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.EndPoint" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public override System.Net.EndPoint Create (System.Net.SocketAddress socketAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Net.EndPoint Create(class System.Net.SocketAddress socketAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPEndPoint.Create(System.Net.SocketAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Create (socketAddress As SocketAddress) As EndPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Net::EndPoint ^ Create(System::Net::SocketAddress ^ socketAddress);" />
      <MemberSignature Language="F#" Value="override this.Create : System.Net.SocketAddress -&gt; System.Net.EndPoint" Usage="iPEndPoint.Create socketAddress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.EndPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="socketAddress" Type="System.Net.SocketAddress" />
      </Parameters>
      <Docs>
        <param name="socketAddress"><span data-ttu-id="0da87-133">用于终结点的 <see cref="T:System.Net.SocketAddress" />。</span><span class="sxs-lookup"><span data-stu-id="0da87-133">The <see cref="T:System.Net.SocketAddress" /> to use for the endpoint.</span></span></param>
        <summary><span data-ttu-id="0da87-134">从套接字地址创建终结点。</span><span class="sxs-lookup"><span data-stu-id="0da87-134">Creates an endpoint from a socket address.</span></span></summary>
        <returns><span data-ttu-id="0da87-135">使用指定套接字地址的 <see cref="T:System.Net.EndPoint" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="0da87-135">An <see cref="T:System.Net.EndPoint" /> instance using the specified socket address.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0da87-136">下面的示例使用指定的 <xref:System.Net.SocketAddress> 来创建 <xref:System.Net.IPEndPoint> 。</span><span class="sxs-lookup"><span data-stu-id="0da87-136">The following example uses the specified <xref:System.Net.SocketAddress> to create an <xref:System.Net.IPEndPoint>.</span></span>  
  
 [!code-cpp[System.Net.IPEndPoint#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPEndPoint/CPP/ipendpoint.cpp#5)]
 [!code-csharp[System.Net.IPEndPoint#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPEndPoint/CS/ipendpoint.cs#5)]
 [!code-vb[System.Net.IPEndPoint#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPEndPoint/VB/ipendpoint.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0da87-137"><paramref name="socketAddress" /> 的 AddressFamily 与当前实例的 AddressFamily 不相等。</span><span class="sxs-lookup"><span data-stu-id="0da87-137">The AddressFamily of <paramref name="socketAddress" /> is not equal to the AddressFamily of the current instance.</span></span>  
  
<span data-ttu-id="0da87-138">- 或 -</span><span class="sxs-lookup"><span data-stu-id="0da87-138">-or-</span></span> 
 <span data-ttu-id="0da87-139"><paramref name="socketAddress" />.Size &lt; 8。</span><span class="sxs-lookup"><span data-stu-id="0da87-139"><paramref name="socketAddress" />.Size &lt; 8.</span></span></exception>
        <altmember cref="T:System.Net.EndPoint" />
        <altmember cref="T:System.Net.SocketAddress" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object comparand);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object comparand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPEndPoint.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (comparand As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ comparand);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="iPEndPoint.Equals comparand" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparand" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="comparand"><span data-ttu-id="0da87-140">要与当前的 <see cref="T:System.Object" /> 进行比较的 <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="0da87-140">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</span></span></param>
        <summary><span data-ttu-id="0da87-141">确定指定的 <see cref="T:System.Object" /> 是否等同于当前的 <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="0da87-141">Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</span></span></summary>
        <returns><span data-ttu-id="0da87-142">如果指定的 <see langword="true" /> 等于当前的 <see cref="T:System.Object" />，则为 <see cref="T:System.Object" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0da87-142"><see langword="true" /> if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPEndPoint.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="iPEndPoint.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0da87-143">返回 <see cref="T:System.Net.IPEndPoint" /> 实例的哈希值。</span><span class="sxs-lookup"><span data-stu-id="0da87-143">Returns a hash value for a <see cref="T:System.Net.IPEndPoint" /> instance.</span></span></summary>
        <returns><span data-ttu-id="0da87-144">整数哈希值。</span><span class="sxs-lookup"><span data-stu-id="0da87-144">An integer hash value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0da87-145"><xref:System.Net.IPEndPoint.GetHashCode%2A>方法返回 IP 终结点实例的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="0da87-145">The <xref:System.Net.IPEndPoint.GetHashCode%2A> method returns a hash code of the IP endpoint instance.</span></span> <span data-ttu-id="0da87-146">此值可用作哈希表中的键。</span><span class="sxs-lookup"><span data-stu-id="0da87-146">This value can be used as a key in hash tables.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxPort">
      <MemberSignature Language="C#" Value="public const int MaxPort = 65535;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 MaxPort = (65535)" />
      <MemberSignature Language="DocId" Value="F:System.Net.IPEndPoint.MaxPort" />
      <MemberSignature Language="VB.NET" Value="Public Const MaxPort As Integer  = 65535" />
      <MemberSignature Language="C++ CLI" Value="public: int MaxPort = 65535;" />
      <MemberSignature Language="F#" Value="val mutable MaxPort : int" Usage="System.Net.IPEndPoint.MaxPort" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>65535</MemberValue>
      <Docs>
        <summary><span data-ttu-id="0da87-147">指定可以分配给 <see cref="P:System.Net.IPEndPoint.Port" /> 属性的最大值。</span><span class="sxs-lookup"><span data-stu-id="0da87-147">Specifies the maximum value that can be assigned to the <see cref="P:System.Net.IPEndPoint.Port" /> property.</span></span> <span data-ttu-id="0da87-148">MaxPort 值设置为 0x0000FFFF。</span><span class="sxs-lookup"><span data-stu-id="0da87-148">The MaxPort value is set to 0x0000FFFF.</span></span> <span data-ttu-id="0da87-149">此字段为只读。</span><span class="sxs-lookup"><span data-stu-id="0da87-149">This field is read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0da87-150">下面的示例使用 <xref:System.Net.IPEndPoint.MaxPort> 属性打印可分配给该属性的最大值 <xref:System.Net.IPEndPoint.Port%2A> 。</span><span class="sxs-lookup"><span data-stu-id="0da87-150">The following example uses the <xref:System.Net.IPEndPoint.MaxPort> property to print the maximum value that can be assigned to the <xref:System.Net.IPEndPoint.Port%2A> property.</span></span>  
  
 [!code-cpp[IPEndPoint_Properties#4](~/samples/snippets/cpp/VS_Snippets_Remoting/IPEndPoint_Properties/CPP/ipendpoint_properties.cpp#4)]
 [!code-csharp[IPEndPoint_Properties#4](~/samples/snippets/csharp/VS_Snippets_Remoting/IPEndPoint_Properties/CS/ipendpoint_properties.cs#4)]
 [!code-vb[IPEndPoint_Properties#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/IPEndPoint_Properties/VB/ipendpoint_properties.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinPort">
      <MemberSignature Language="C#" Value="public const int MinPort = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 MinPort = (0)" />
      <MemberSignature Language="DocId" Value="F:System.Net.IPEndPoint.MinPort" />
      <MemberSignature Language="VB.NET" Value="Public Const MinPort As Integer  = 0" />
      <MemberSignature Language="C++ CLI" Value="public: int MinPort = 0;" />
      <MemberSignature Language="F#" Value="val mutable MinPort : int" Usage="System.Net.IPEndPoint.MinPort" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary><span data-ttu-id="0da87-151">指定可以分配给 <see cref="P:System.Net.IPEndPoint.Port" /> 属性的最小值。</span><span class="sxs-lookup"><span data-stu-id="0da87-151">Specifies the minimum value that can be assigned to the <see cref="P:System.Net.IPEndPoint.Port" /> property.</span></span> <span data-ttu-id="0da87-152">此字段为只读。</span><span class="sxs-lookup"><span data-stu-id="0da87-152">This field is read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0da87-153">下面的示例使用 <xref:System.Net.IPEndPoint.MinPort> 属性打印可以分配给属性的最小值 <xref:System.Net.IPEndPoint.Port%2A> 。</span><span class="sxs-lookup"><span data-stu-id="0da87-153">The following example uses the <xref:System.Net.IPEndPoint.MinPort> property to print the minimum value that can be assigned to the <xref:System.Net.IPEndPoint.Port%2A> property.</span></span>  
  
 [!code-cpp[IPEndPoint_Properties#4](~/samples/snippets/cpp/VS_Snippets_Remoting/IPEndPoint_Properties/CPP/ipendpoint_properties.cpp#4)]
 [!code-csharp[IPEndPoint_Properties#4](~/samples/snippets/csharp/VS_Snippets_Remoting/IPEndPoint_Properties/CS/ipendpoint_properties.cs#4)]
 [!code-vb[IPEndPoint_Properties#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/IPEndPoint_Properties/VB/ipendpoint_properties.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="0da87-154">每个部件 (的部分数以句点分隔) ， `s` 确定终结点的 IP 地址是如何构造的。</span><span class="sxs-lookup"><span data-stu-id="0da87-154">The number of parts (each part is separated by a period) in `s` determines how the endpoint's IP address is constructed.</span></span> <span data-ttu-id="0da87-155">直接在网络地址中存储由一个部分构成的地址。</span><span class="sxs-lookup"><span data-stu-id="0da87-155">A one-part address is stored directly in the network address.</span></span> <span data-ttu-id="0da87-156">一个由两部分构成的地址，方便于指定 a 类地址，并将前导部分放在第一个字节，并将尾随部分放在网络地址的最右侧三个字节中。</span><span class="sxs-lookup"><span data-stu-id="0da87-156">A two-part address, convenient for specifying a class A address, puts the leading part in the first byte and the trailing part in the right-most three bytes of the network address.</span></span> <span data-ttu-id="0da87-157">由三个部分构成的地址，方便于指定类 B 地址，将第一部分放入第一个字节，第二个部分位于第二个字节，最后一个部分位于网络地址的最右侧两个字节中。</span><span class="sxs-lookup"><span data-stu-id="0da87-157">A three-part address, convenient for specifying a class B address, puts the first part in the first byte, the second part in the second byte, and the final part in the right-most two bytes of the network address.</span></span> <span data-ttu-id="0da87-158">例如：</span><span class="sxs-lookup"><span data-stu-id="0da87-158">For example:</span></span>

|<span data-ttu-id="0da87-159">部分数量和示例 `s`</span><span class="sxs-lookup"><span data-stu-id="0da87-159">Number of parts and example `s`</span></span>|<span data-ttu-id="0da87-160">IPEndPoint 的 IPv4 地址</span><span class="sxs-lookup"><span data-stu-id="0da87-160">IPv4 address for IPEndPoint.Address</span></span>|<span data-ttu-id="0da87-161">Port</span><span class="sxs-lookup"><span data-stu-id="0da87-161">Port</span></span>|
|-------------------------|--------------------------------|-------------------------|  
|<span data-ttu-id="0da87-162">1--"1"</span><span class="sxs-lookup"><span data-stu-id="0da87-162">1 -- "1"</span></span>|<span data-ttu-id="0da87-163">0.0.0.1</span><span class="sxs-lookup"><span data-stu-id="0da87-163">0.0.0.1</span></span>|<span data-ttu-id="0da87-164">0</span><span class="sxs-lookup"><span data-stu-id="0da87-164">0</span></span>|  
|<span data-ttu-id="0da87-165">2--"20.2： 80"</span><span class="sxs-lookup"><span data-stu-id="0da87-165">2 -- "20.2:80"</span></span>|<span data-ttu-id="0da87-166">20.0.0.2</span><span class="sxs-lookup"><span data-stu-id="0da87-166">20.0.0.2</span></span>|<span data-ttu-id="0da87-167">80</span><span class="sxs-lookup"><span data-stu-id="0da87-167">80</span></span>|  
|<span data-ttu-id="0da87-168">2--"20.65535： 23"</span><span class="sxs-lookup"><span data-stu-id="0da87-168">2 -- "20.65535:23"</span></span>|<span data-ttu-id="0da87-169">20.0.255.255</span><span class="sxs-lookup"><span data-stu-id="0da87-169">20.0.255.255</span></span>|<span data-ttu-id="0da87-170">23</span><span class="sxs-lookup"><span data-stu-id="0da87-170">23</span></span>|  
|<span data-ttu-id="0da87-171">3--"128.1.2： 443"</span><span class="sxs-lookup"><span data-stu-id="0da87-171">3 -- "128.1.2:443"</span></span>|<span data-ttu-id="0da87-172">128.1.0.2</span><span class="sxs-lookup"><span data-stu-id="0da87-172">128.1.0.2</span></span>|<span data-ttu-id="0da87-173">443</span><span class="sxs-lookup"><span data-stu-id="0da87-173">443</span></span>|  

> [!IMPORTANT]
> <span data-ttu-id="0da87-174">请注意，此方法接受可分析为的有效值，然后将其 <xref:System.Int64> 视为 <xref:System.Int64> 网络字节顺序中 IP 地址的长值，与 IPAddress 构造函数的作用类似。</span><span class="sxs-lookup"><span data-stu-id="0da87-174">Note that this method accepts as valid a value that can be parsed as an <xref:System.Int64>, and then treats that <xref:System.Int64> as the long value of an IP address in network byte order, similar to the way that the IPAddress constructor does.</span></span> <span data-ttu-id="0da87-175">这意味着，如果 Int64 分析成功，则此方法返回 true，即使它表示的地址不是有效的 IP 地址也是如此。</span><span class="sxs-lookup"><span data-stu-id="0da87-175">This means that this method returns true if the Int64 is parsed successfully, even if it represents an address that's not a valid IP address.</span></span> <span data-ttu-id="0da87-176">例如，如果 s 为 "1"，则此方法返回 true，即使 "1" (或 0.0.0.1) 不是有效的 IP 地址，但你可能希望此方法返回 false。</span><span class="sxs-lookup"><span data-stu-id="0da87-176">For example, if s is "1", this method returns true even though "1" (or 0.0.0.1) is not a valid IP address and you might expect this method to return false.</span></span> <span data-ttu-id="0da87-177">修复此 bug 会破坏现有应用程序，因此不会更改当前行为。</span><span class="sxs-lookup"><span data-stu-id="0da87-177">Fixing this bug would break existing apps, so the current behavior will not be changed.</span></span> <span data-ttu-id="0da87-178">你的代码可以通过确保它只使用此方法来分析以点分隔的十进制格式的 IP 地址，从而避免此行为。</span><span class="sxs-lookup"><span data-stu-id="0da87-178">Your code can avoid this behavior by ensuring that it only uses this method to parse IP addresses in dotted-decimal format.</span></span>
 
<span data-ttu-id="0da87-179">传递指定端口号的终结点时，需要将文本 IPv6 地址括在方括号 [] 中。否则，方括号不是必需的。</span><span class="sxs-lookup"><span data-stu-id="0da87-179">Literal IPv6 addresses require to be enclosed in square brackets [] when passing an endpoint that specifies a port number; otherwise, square braces are not mandatory.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Net.IPEndPoint? Parse (ReadOnlySpan&lt;char&gt; s);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.IPEndPoint Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPEndPoint.Parse(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As ReadOnlySpan(Of Char)) As IPEndPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Net::IPEndPoint ^ Parse(ReadOnlySpan&lt;char&gt; s);" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; -&gt; System.Net.IPEndPoint" Usage="System.Net.IPEndPoint.Parse s" />
      <MemberSignature Language="C#" Value="public static System.Net.IPEndPoint Parse (ReadOnlySpan&lt;char&gt; s);" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPEndPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="0da87-180">包含 IP 终结点（IPv4 使用点分四组表示法或网络字节顺序，IPv6 使用冒号十六进制表示法）的只读范围。</span><span class="sxs-lookup"><span data-stu-id="0da87-180">A read-only span that contains an IP endpoint in dotted-quad notation or network byte order for IPv4 and in colon-hexadecimal notation for IPv6.</span></span></param>
        <summary><span data-ttu-id="0da87-181">将表示为只读范围的 IP 网络终结点（地址和端口）转换为 <see cref="T:System.Net.IPEndPoint" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="0da87-181">Converts an IP network endpoint (address and port) represented as a read-only span to an <see cref="T:System.Net.IPEndPoint" /> instance.</span></span></summary>
        <returns><span data-ttu-id="0da87-182">IP 网络终结点的对象表示形式。</span><span class="sxs-lookup"><span data-stu-id="0da87-182">The object representation of an IP network endpoint.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0da87-183"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="0da87-183"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="0da87-184"><paramref name="s" /> 不是有效的 IP 终结点。</span><span class="sxs-lookup"><span data-stu-id="0da87-184"><paramref name="s" /> is not a valid IP endpoint.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Net.IPEndPoint Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.IPEndPoint Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPEndPoint.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String) As IPEndPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Net::IPEndPoint ^ Parse(System::String ^ s);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; System.Net.IPEndPoint" Usage="System.Net.IPEndPoint.Parse s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPEndPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="0da87-185">包含 IP 终结点（IPv4 使用点分四组表示法或网络字节顺序，IPv6 使用冒号十六进制表示法）的字符串。</span><span class="sxs-lookup"><span data-stu-id="0da87-185">A string that contains an IP endpoint in dotted-quad notation or network byte order for IPv4 and in colon-hexadecimal notation for IPv6.</span></span></param>
        <summary><span data-ttu-id="0da87-186">将表示为字符串的 IP 网络终结点（地址和端口）转换为 <see cref="T:System.Net.IPEndPoint" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="0da87-186">Converts an IP network endpoint (address and port) represented as a string to an <see cref="T:System.Net.IPEndPoint" /> instance.</span></span></summary>
        <returns><span data-ttu-id="0da87-187">IP 网络终结点的对象表示形式。</span><span class="sxs-lookup"><span data-stu-id="0da87-187">The object representation of an IP network endpoint.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0da87-188"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="0da87-188"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="0da87-189"><paramref name="s" /> 不是有效的 IP 终结点。</span><span class="sxs-lookup"><span data-stu-id="0da87-189"><paramref name="s" /> is not a valid IP endpoint.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Port">
      <MemberSignature Language="C#" Value="public int Port { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Port" />
      <MemberSignature Language="DocId" Value="P:System.Net.IPEndPoint.Port" />
      <MemberSignature Language="VB.NET" Value="Public Property Port As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Port { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Port : int with get, set" Usage="System.Net.IPEndPoint.Port" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0da87-190">获取或设置终结点的端口号。</span><span class="sxs-lookup"><span data-stu-id="0da87-190">Gets or sets the port number of the endpoint.</span></span></summary>
        <value><span data-ttu-id="0da87-191">介于 <see cref="F:System.Net.IPEndPoint.MinPort" /> 到 <see cref="F:System.Net.IPEndPoint.MaxPort" /> 之间的整数值，指示终结点的端口号。</span><span class="sxs-lookup"><span data-stu-id="0da87-191">An integer value in the range <see cref="F:System.Net.IPEndPoint.MinPort" /> to <see cref="F:System.Net.IPEndPoint.MaxPort" /> indicating the port number of the endpoint.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0da87-192">下面的示例使用 <xref:System.Net.IPEndPoint.Port%2A> 属性设置的 TCP 端口号 <xref:System.Net.EndPoint> 。</span><span class="sxs-lookup"><span data-stu-id="0da87-192">The following example uses the <xref:System.Net.IPEndPoint.Port%2A> property to set TCP port number of the <xref:System.Net.EndPoint>.</span></span>  
  
 [!code-cpp[System.Net.IPEndPoint#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPEndPoint/CPP/ipendpoint.cpp#3)]
 [!code-csharp[System.Net.IPEndPoint#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPEndPoint/CS/ipendpoint.cs#3)]
 [!code-vb[System.Net.IPEndPoint#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPEndPoint/VB/ipendpoint.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="0da87-193">为设置操作指定的值小于 <see cref="F:System.Net.IPEndPoint.MinPort" /> 或大于 <see cref="F:System.Net.IPEndPoint.MaxPort" />。</span><span class="sxs-lookup"><span data-stu-id="0da87-193">The value that was specified for a set operation is less than <see cref="F:System.Net.IPEndPoint.MinPort" /> or greater than <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public override System.Net.SocketAddress Serialize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Net.SocketAddress Serialize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPEndPoint.Serialize" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Serialize () As SocketAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Net::SocketAddress ^ Serialize();" />
      <MemberSignature Language="F#" Value="override this.Serialize : unit -&gt; System.Net.SocketAddress" Usage="iPEndPoint.Serialize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.SocketAddress</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0da87-194">将终结点信息序列化为 <see cref="T:System.Net.SocketAddress" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="0da87-194">Serializes endpoint information into a <see cref="T:System.Net.SocketAddress" /> instance.</span></span></summary>
        <returns><span data-ttu-id="0da87-195">一个 <see cref="T:System.Net.SocketAddress" /> 实例，包含终结点的套接字地址。</span><span class="sxs-lookup"><span data-stu-id="0da87-195">A <see cref="T:System.Net.SocketAddress" /> instance containing the socket address for the endpoint.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0da87-196">下面的示例使用 <xref:System.Net.IPEndPoint.Serialize%2A> 方法将终结点信息序列化为 <xref:System.Net.SocketAddress> 实例。</span><span class="sxs-lookup"><span data-stu-id="0da87-196">The following example uses the <xref:System.Net.IPEndPoint.Serialize%2A> method to serialize endpoint information into a <xref:System.Net.SocketAddress> instance.</span></span>  
  
 [!code-cpp[System.Net.IPEndPoint#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPEndPoint/CPP/ipendpoint.cpp#4)]
 [!code-csharp[System.Net.IPEndPoint#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPEndPoint/CS/ipendpoint.cs#4)]
 [!code-vb[System.Net.IPEndPoint#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPEndPoint/VB/ipendpoint.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.EndPoint" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPEndPoint.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="iPEndPoint.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0da87-197">返回指定终结点的 IP 地址和端口号。</span><span class="sxs-lookup"><span data-stu-id="0da87-197">Returns the IP address and port number of the specified endpoint.</span></span></summary>
        <returns><span data-ttu-id="0da87-198">包含指定终结点（例如，192.168.1.2:80）的 IP 地址和端口号的字符串。</span><span class="sxs-lookup"><span data-stu-id="0da87-198">A string containing the IP address and the port number of the specified endpoint (for example, 192.168.1.2:80).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0da87-199">下面的示例返回指定的 IP 地址和端口号的字符串表示形式 <xref:System.Net.IPEndPoint> 。</span><span class="sxs-lookup"><span data-stu-id="0da87-199">The following example returns a string representation of the IP address and port number of the specified <xref:System.Net.IPEndPoint>.</span></span>  
  
 [!code-cpp[System.Net.IPEndPoint#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPEndPoint/CPP/ipendpoint.cpp#3)]
 [!code-csharp[System.Net.IPEndPoint#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPEndPoint/CS/ipendpoint.cs#3)]
 [!code-vb[System.Net.IPEndPoint#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPEndPoint/VB/ipendpoint.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="0da87-200">每个部件 (的部分数以句点分隔) ， `s` 确定终结点的 IP 地址是如何构造的。</span><span class="sxs-lookup"><span data-stu-id="0da87-200">The number of parts (each part is separated by a period) in `s` determines how the endpoint's IP address is constructed.</span></span> <span data-ttu-id="0da87-201">直接在网络地址中存储由一个部分构成的地址。</span><span class="sxs-lookup"><span data-stu-id="0da87-201">A one-part address is stored directly in the network address.</span></span> <span data-ttu-id="0da87-202">一个由两部分构成的地址，方便于指定 a 类地址，并将前导部分放在第一个字节，并将尾随部分放在网络地址的最右侧三个字节中。</span><span class="sxs-lookup"><span data-stu-id="0da87-202">A two-part address, convenient for specifying a class A address, puts the leading part in the first byte and the trailing part in the right-most three bytes of the network address.</span></span> <span data-ttu-id="0da87-203">由三个部分构成的地址，方便于指定类 B 地址，将第一部分放入第一个字节，第二个部分位于第二个字节，最后一个部分位于网络地址的最右侧两个字节中。</span><span class="sxs-lookup"><span data-stu-id="0da87-203">A three-part address, convenient for specifying a class B address, puts the first part in the first byte, the second part in the second byte, and the final part in the right-most two bytes of the network address.</span></span> <span data-ttu-id="0da87-204">例如：</span><span class="sxs-lookup"><span data-stu-id="0da87-204">For example:</span></span>

|<span data-ttu-id="0da87-205">部分数量和示例 `s`</span><span class="sxs-lookup"><span data-stu-id="0da87-205">Number of parts and example `s`</span></span>|<span data-ttu-id="0da87-206">IPEndPoint 的 IPv4 地址</span><span class="sxs-lookup"><span data-stu-id="0da87-206">IPv4 address for IPEndPoint.Address</span></span>|<span data-ttu-id="0da87-207">Port</span><span class="sxs-lookup"><span data-stu-id="0da87-207">Port</span></span>|
|-------------------------|--------------------------------|-------------------------|  
|<span data-ttu-id="0da87-208">1--"1"</span><span class="sxs-lookup"><span data-stu-id="0da87-208">1 -- "1"</span></span>|<span data-ttu-id="0da87-209">0.0.0.1</span><span class="sxs-lookup"><span data-stu-id="0da87-209">0.0.0.1</span></span>|<span data-ttu-id="0da87-210">0</span><span class="sxs-lookup"><span data-stu-id="0da87-210">0</span></span>|  
|<span data-ttu-id="0da87-211">2--"20.2： 80"</span><span class="sxs-lookup"><span data-stu-id="0da87-211">2 -- "20.2:80"</span></span>|<span data-ttu-id="0da87-212">20.0.0.2</span><span class="sxs-lookup"><span data-stu-id="0da87-212">20.0.0.2</span></span>|<span data-ttu-id="0da87-213">80</span><span class="sxs-lookup"><span data-stu-id="0da87-213">80</span></span>|  
|<span data-ttu-id="0da87-214">2--"20.65535： 23"</span><span class="sxs-lookup"><span data-stu-id="0da87-214">2 -- "20.65535:23"</span></span>|<span data-ttu-id="0da87-215">20.0.255.255</span><span class="sxs-lookup"><span data-stu-id="0da87-215">20.0.255.255</span></span>|<span data-ttu-id="0da87-216">23</span><span class="sxs-lookup"><span data-stu-id="0da87-216">23</span></span>|  
|<span data-ttu-id="0da87-217">3--"128.1.2： 443"</span><span class="sxs-lookup"><span data-stu-id="0da87-217">3 -- "128.1.2:443"</span></span>|<span data-ttu-id="0da87-218">128.1.0.2</span><span class="sxs-lookup"><span data-stu-id="0da87-218">128.1.0.2</span></span>|<span data-ttu-id="0da87-219">443</span><span class="sxs-lookup"><span data-stu-id="0da87-219">443</span></span>|  

> [!IMPORTANT]
> <span data-ttu-id="0da87-220">请注意，此方法接受可分析为的有效值，然后将其 <xref:System.Int64> 视为 <xref:System.Int64> 网络字节顺序中 IP 地址的长值，与 IPAddress 构造函数的作用类似。</span><span class="sxs-lookup"><span data-stu-id="0da87-220">Note that this method accepts as valid a value that can be parsed as an <xref:System.Int64>, and then treats that <xref:System.Int64> as the long value of an IP address in network byte order, similar to the way that the IPAddress constructor does.</span></span> <span data-ttu-id="0da87-221">这意味着，如果 Int64 分析成功，则此方法返回 true，即使它表示的地址不是有效的 IP 地址也是如此。</span><span class="sxs-lookup"><span data-stu-id="0da87-221">This means that this method returns true if the Int64 is parsed successfully, even if it represents an address that's not a valid IP address.</span></span> <span data-ttu-id="0da87-222">例如，如果 s 为 "1"，则此方法返回 true，即使 "1" (或 0.0.0.1) 不是有效的 IP 地址，但你可能希望此方法返回 false。</span><span class="sxs-lookup"><span data-stu-id="0da87-222">For example, if s is "1", this method returns true even though "1" (or 0.0.0.1) is not a valid IP address and you might expect this method to return false.</span></span> <span data-ttu-id="0da87-223">修复此 bug 会破坏现有应用程序，因此不会更改当前行为。</span><span class="sxs-lookup"><span data-stu-id="0da87-223">Fixing this bug would break existing apps, so the current behavior will not be changed.</span></span> <span data-ttu-id="0da87-224">你的代码可以通过确保它只使用此方法来分析以点分隔的十进制格式的 IP 地址，从而避免此行为。</span><span class="sxs-lookup"><span data-stu-id="0da87-224">Your code can avoid this behavior by ensuring that it only uses this method to parse IP addresses in dotted-decimal format.</span></span>
 
<span data-ttu-id="0da87-225">传递指定端口号的终结点时，需要将文本 IPv6 地址括在方括号 [] 中。否则，方括号不是必需的。</span><span class="sxs-lookup"><span data-stu-id="0da87-225">Literal IPv6 addresses require to be enclosed in square brackets [] when passing an endpoint that specifies a port number; otherwise, square braces are not mandatory.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, out System.Net.IPEndPoint? result);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, [out] class System.Net.IPEndPoint&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPEndPoint.TryParse(System.ReadOnlySpan{System.Char},System.Net.IPEndPoint@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), ByRef result As IPEndPoint) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, [Runtime::InteropServices::Out] System::Net::IPEndPoint ^ % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * IPEndPoint -&gt; bool" Usage="System.Net.IPEndPoint.TryParse (s, result)" />
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, out System.Net.IPEndPoint result);" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="result" Type="System.Net.IPEndPoint" RefType="out" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="0da87-226">要验证的 IP 终结点。</span><span class="sxs-lookup"><span data-stu-id="0da87-226">The IP endpoint to validate.</span></span></param>
        <param name="result"><span data-ttu-id="0da87-227">此方法返回时，为 <paramref name="s" /> 的 <see cref="T:System.Net.IPEndPoint" /> 版本。</span><span class="sxs-lookup"><span data-stu-id="0da87-227">When this method returns, the <see cref="T:System.Net.IPEndPoint" /> version of <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="0da87-228">尝试将表示为只读范围的 IP 网络终结点（地址和端口）转换为其 <see cref="T:System.Net.IPEndPoint" /> 等效项，返回指示转换是否成功的值。</span><span class="sxs-lookup"><span data-stu-id="0da87-228">Tries to convert an IP network endpoint (address and port) represented as a read-only span to its <see cref="T:System.Net.IPEndPoint" /> equivalent, and returns a value that indicates whether the conversion succeeded.</span></span></summary>
        <returns><span data-ttu-id="0da87-229">如果 <paramref name="s" /> 可分析为 IP 终结点，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0da87-229"><see langword="true" /> if <paramref name="s" /> can be parsed as an IP endpoint; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out System.Net.IPEndPoint? result);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, [out] class System.Net.IPEndPoint&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPEndPoint.TryParse(System.String,System.Net.IPEndPoint@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, ByRef result As IPEndPoint) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, [Runtime::InteropServices::Out] System::Net::IPEndPoint ^ % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * IPEndPoint -&gt; bool" Usage="System.Net.IPEndPoint.TryParse (s, result)" />
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out System.Net.IPEndPoint result);" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="result" Type="System.Net.IPEndPoint" RefType="out" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="0da87-230">要验证的 IP 终结点。</span><span class="sxs-lookup"><span data-stu-id="0da87-230">The IP endpoint to validate.</span></span></param>
        <param name="result"><span data-ttu-id="0da87-231">此方法返回时，为 <paramref name="s" /> 的 <see cref="T:System.Net.IPEndPoint" /> 版本。</span><span class="sxs-lookup"><span data-stu-id="0da87-231">When this method returns, the <see cref="T:System.Net.IPEndPoint" /> version of <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="0da87-232">尝试将表示为字符串的 IP 网络终结点（地址和端口）转换为其 <see cref="T:System.Net.IPEndPoint" /> 等效项，返回指示转换是否成功的值。</span><span class="sxs-lookup"><span data-stu-id="0da87-232">Tries to convert an IP network endpoint (address and port) represented as a string to its <see cref="T:System.Net.IPEndPoint" /> equivalent, and returns a value that indicates whether the conversion succeeded.</span></span></summary>
        <returns><span data-ttu-id="0da87-233">如果 <paramref name="s" /> 可分析为 IP 终结点，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0da87-233"><see langword="true" /> if <paramref name="s" /> can be parsed as an IP endpoint; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
