<Type Name="ICredentialPolicy" FullName="System.Net.ICredentialPolicy">
  <Metadata><Meta Name="ms.openlocfilehash" Value="36b48b6fdcf7d6a3a3e21bdc282b57fb5b954f41" /><Meta Name="ms.sourcegitcommit" Value="f828282420515ef705e09bbdb6c22116df98b5e3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="83509327" /></Metadata><TypeSignature Language="C#" Value="public interface ICredentialPolicy" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICredentialPolicy" />
  <TypeSignature Language="DocId" Value="T:System.Net.ICredentialPolicy" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICredentialPolicy" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICredentialPolicy" />
  <TypeSignature Language="F#" Value="type ICredentialPolicy = interface" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net.Requests</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Net.Requests" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Interfaces />
  <Docs>
    <summary>定义凭据策略，该凭据策略将用于使用 <see cref="T:System.Net.WebRequest" /> 及其派生类发出的资源请求。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 凭据策略确定为 <xref:System.Net.WebRequest> 网络资源（如网页的内容）发送时是否发送凭据。 如果发送了凭据，则需要客户端身份验证的服务器可以尝试在收到请求时对客户端进行身份验证，而不是发送指示需要客户端凭据的响应。 尽管这会在服务器上保存一次往返，但这种性能提升必须与通过网络发送凭据的固有安全风险相平衡。 当目标服务器不需要客户端身份验证时，最好不要发送凭据。  
  
> [!NOTE]
>  <xref:System.Net.ICredentialPolicy>仅当 <xref:System.Net.WebRequest> <xref:System.Net.WebProxy> 与请求关联的或具有不具有的凭据时，才会调用策略 `null` 。 设置此策略不会影响未指定凭据的请求。  
  
 使用 <xref:System.Net.AuthenticationManager.CredentialPolicy%2A?displayProperty=nameWithType> 属性设置 <xref:System.Net.ICredentialPolicy> 策略。 <xref:System.Net.IAuthenticationModule>处理请求身份验证的会在 <xref:System.Net.ICredentialPolicy.ShouldSendCredential%2A> 执行身份验证之前调用方法。 如果该方法返回 `false` ，则不执行身份验证。  
  
 <xref:System.Net.ICredentialPolicy>策略影响 <xref:System.Net.WebRequest> 当前应用程序域中具有非 null 凭据的所有实例。 无法在单个请求中重写此策略。  
  
   
  
## Examples  
 下面的代码示例演示了此接口的一个实现，该实现允许只发送针对特定主机的请求的凭据。  
  
 [!code-cpp[NclCredPolicy#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCredPolicy/CPP/NCLCredPolicy.cpp#3)]
 [!code-csharp[NclCredPolicy#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCredPolicy/CS/websample.cs#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ShouldSendCredential">
      <MemberSignature Language="C#" Value="public bool ShouldSendCredential (Uri challengeUri, System.Net.WebRequest request, System.Net.NetworkCredential credential, System.Net.IAuthenticationModule authenticationModule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldSendCredential(class System.Uri challengeUri, class System.Net.WebRequest request, class System.Net.NetworkCredential credential, class System.Net.IAuthenticationModule authenticationModule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.ICredentialPolicy.ShouldSendCredential(System.Uri,System.Net.WebRequest,System.Net.NetworkCredential,System.Net.IAuthenticationModule)" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSendCredential (challengeUri As Uri, request As WebRequest, credential As NetworkCredential, authenticationModule As IAuthenticationModule) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSendCredential(Uri ^ challengeUri, System::Net::WebRequest ^ request, System::Net::NetworkCredential ^ credential, System::Net::IAuthenticationModule ^ authenticationModule);" />
      <MemberSignature Language="F#" Value="abstract member ShouldSendCredential : Uri * System.Net.WebRequest * System.Net.NetworkCredential * System.Net.IAuthenticationModule -&gt; bool" Usage="iCredentialPolicy.ShouldSendCredential (challengeUri, request, credential, authenticationModule)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="challengeUri" Type="System.Uri" />
        <Parameter Name="request" Type="System.Net.WebRequest" />
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="authenticationModule" Type="System.Net.IAuthenticationModule" />
      </Parameters>
      <Docs>
        <param name="challengeUri">将接收该请求的 <see cref="T:System.Uri" />。</param>
        <param name="request">表示被请求的资源的 <see cref="T:System.Net.WebRequest" />。</param>
        <param name="credential">将随请求一起发送的 <see cref="T:System.Net.NetworkCredential" />（如果此方法返回 <see langword="true" />）。</param>
        <param name="authenticationModule">将执行身份验证的 <see cref="T:System.Net.IAuthenticationModule" />（如果要求身份验证）。</param>
        <summary>返回一个 <see cref="T:System.Boolean" />，该值指示客户端的凭据是否随使用 <see cref="T:System.Net.WebRequest" /> 类的实例发出的资源请求一起发送。</summary>
        <returns>如果凭据随请求一起发送，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.ICredentialPolicy>通过设置属性来指定策略后 <xref:System.Net.AuthenticationManager.CredentialPolicy%2A?displayProperty=nameWithType> ，处理的身份验证的将在 <xref:System.Net.IAuthenticationModule> <xref:System.Net.WebRequest> <xref:System.Net.ICredentialPolicy.ShouldSendCredential%2A> 执行身份验证之前调用方法。 如果此方法返回 `false` ，则不执行身份验证。  
  
 如果已重定向原始请求或需要进行代理身份验证，则所标识的资源 `challengeUri` 可能不同于在中指定的请求的资源 <xref:System.Net.WebRequest.RequestUri%2A?displayProperty=nameWithType> 。 如果是重定向，则 `challengeUri` 包含实际目标 <xref:System.Uri> 。 如果需要代理身份验证，则 `challengeUri` 包含需要客户端身份验证的代理服务器的地址。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
