<Type Name="LayoutEngine" FullName="System.Windows.Forms.Layout.LayoutEngine">
  <Metadata><Meta Name="ms.openlocfilehash" Value="80be09525068895d3ba0a820caf07a3840231522" /><Meta Name="ms.sourcegitcommit" Value="a40c6a601bd45917c35e255d860c96b8b3853a79" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="01/05/2021" /><Meta Name="ms.locfileid" Value="97892046" /></Metadata><TypeSignature Language="C#" Value="public abstract class LayoutEngine" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit LayoutEngine extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Layout.LayoutEngine" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class LayoutEngine" />
  <TypeSignature Language="C++ CLI" Value="public ref class LayoutEngine abstract" />
  <TypeSignature Language="F#" Value="type LayoutEngine = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供用于实现布局引擎的基类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Layout.LayoutEngine>如果要在运行时创建自定义布局行为，请使用类。 从类派生你自己的类 <xref:System.Windows.Forms.Layout.LayoutEngine> ，并重写 <xref:System.Windows.Forms.Layout.LayoutEngine.Layout%2A> 方法以定义你的自定义布局行为。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.Windows.Forms.Layout.LayoutEngine> 类来实现自定义布局行为。  
  
 [!code-cpp[System.Windows.Forms.Layout.LayoutEngine#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Layout.LayoutEngine/cpp/DemoFlowLayout.cpp#1)]
 [!code-csharp[System.Windows.Forms.Layout.LayoutEngine#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Layout.LayoutEngine/CS/DemoFlowLayout.cs#1)]
 [!code-vb[System.Windows.Forms.Layout.LayoutEngine#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Layout.LayoutEngine/VB/DemoFlowLayout.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/desktop/winforms/controls/how-to-implement-a-custom-layout-engine">如何：实现自定义布局引擎</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected LayoutEngine ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Layout.LayoutEngine.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; LayoutEngine();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Forms.Layout.LayoutEngine" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>布局引擎关联的容器类的任何实例的布局行为都应该相同。 出于此原因，请考虑声明布局引擎的构造函数 <see langword="protected" /> 或 <see langword="private" /> ，并将布局引擎实现为单独类。</para></block>
      </Docs>
    </Member>
    <Member MemberName="InitLayout">
      <MemberSignature Language="C#" Value="public virtual void InitLayout (object child, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InitLayout(object child, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Layout.LayoutEngine.InitLayout(System.Object,System.Windows.Forms.BoundsSpecified)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub InitLayout (child As Object, specified As BoundsSpecified)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void InitLayout(System::Object ^ child, System::Windows::Forms::BoundsSpecified specified);" />
      <MemberSignature Language="F#" Value="abstract member InitLayout : obj * System.Windows.Forms.BoundsSpecified -&gt; unit&#xA;override this.InitLayout : obj * System.Windows.Forms.BoundsSpecified -&gt; unit" Usage="layoutEngine.InitLayout (child, specified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Object" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" />
      </Parameters>
      <Docs>
        <param name="child">布局引擎将在其上执行操作的容器。</param>
        <param name="specified">用于定义容器大小和位置的边界。</param>
        <summary>初始化布局引擎。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以选择在方法中提供初始化逻辑 <xref:System.Windows.Forms.Layout.LayoutEngine.InitLayout%2A> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><paramref name="child" /> 不是一个 <see cref="T:System.Windows.Forms.Layout.LayoutEngine" /> 可在其上执行布局的类型。</exception>
        <block subset="none" type="overrides"><para>重写 <see cref="M:System.Windows.Forms.Layout.LayoutEngine.InitLayout(System.Object,System.Windows.Forms.BoundsSpecified)" /> 方法以提供自定义初始化行为。</para></block>
        <related type="Article" href="/dotnet/desktop/winforms/controls/how-to-implement-a-custom-layout-engine">如何：实现自定义布局引擎</related>
      </Docs>
    </Member>
    <Member MemberName="Layout">
      <MemberSignature Language="C#" Value="public virtual bool Layout (object container, System.Windows.Forms.LayoutEventArgs layoutEventArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Layout(object container, class System.Windows.Forms.LayoutEventArgs layoutEventArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Layout.LayoutEngine.Layout(System.Object,System.Windows.Forms.LayoutEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Layout (container As Object, layoutEventArgs As LayoutEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Layout(System::Object ^ container, System::Windows::Forms::LayoutEventArgs ^ layoutEventArgs);" />
      <MemberSignature Language="F#" Value="abstract member Layout : obj * System.Windows.Forms.LayoutEventArgs -&gt; bool&#xA;override this.Layout : obj * System.Windows.Forms.LayoutEventArgs -&gt; bool" Usage="layoutEngine.Layout (container, layoutEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="System.Object" />
        <Parameter Name="layoutEventArgs" Type="System.Windows.Forms.LayoutEventArgs" />
      </Parameters>
      <Docs>
        <param name="container">布局引擎将在其上执行操作的容器。</param>
        <param name="layoutEventArgs">来自 <see cref="E:System.Windows.Forms.Control.Layout" /> 事件的事件参数。</param>
        <summary>请求布局引擎执行布局操作。</summary>
        <returns>如果 <paramref name="container" /> 的父容器应重新执行布局，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当布局引擎要对参数执行布局操作时，将调用此方法 `container` 。 您可以检查 <xref:System.Windows.Forms.LayoutEventArgs.AffectedProperty%2A> 上的、和属性的值， <xref:System.Windows.Forms.LayoutEventArgs.AffectedComponent%2A> <xref:System.Windows.Forms.LayoutEventArgs.AffectedControl%2A> `layoutEventArgs` 以确定是否需要布局操作。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.Windows.Forms.Layout.LayoutEngine.Layout%2A> 方法来实现自定义布局行为。 此代码示例是为类提供的更大示例的一部分 <xref:System.Windows.Forms.Layout.LayoutEngine> 。  
  
 [!code-cpp[System.Windows.Forms.Layout.LayoutEngine#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Layout.LayoutEngine/cpp/DemoFlowLayout.cpp#4)]
 [!code-csharp[System.Windows.Forms.Layout.LayoutEngine#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Layout.LayoutEngine/CS/DemoFlowLayout.cs#4)]
 [!code-vb[System.Windows.Forms.Layout.LayoutEngine#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Layout.LayoutEngine/VB/DemoFlowLayout.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><paramref name="container" /> 不是一个 <see cref="T:System.Windows.Forms.Layout.LayoutEngine" /> 可在其上执行布局的类型。</exception>
        <block subset="none" type="overrides"><para>重写 <see cref="M:System.Windows.Forms.Layout.LayoutEngine.Layout(System.Object,System.Windows.Forms.LayoutEventArgs)" /> 方法以提供自定义布局行为。  
  
在布局参数的内容时 <paramref name="container" /> ，请务必检查 <see cref="P:System.Windows.Forms.Control.Visible" /> 每个子控件的属性。  
  
<see langword="true" />如果布局引擎逻辑确定应由容器的父级再次执行布局，则返回。 例如，当布局引擎调整子控件的大小时，并且确定容器必须增加大小以容纳新布局时，可能会发生这种情况。</para></block>
        <altmember cref="T:System.Windows.Forms.LayoutEventArgs" />
        <related type="Article" href="/dotnet/desktop/winforms/controls/how-to-implement-a-custom-layout-engine">如何：实现自定义布局引擎</related>
      </Docs>
    </Member>
  </Members>
</Type>
