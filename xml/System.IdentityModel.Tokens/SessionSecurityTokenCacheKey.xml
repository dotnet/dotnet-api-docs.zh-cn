<Type Name="SessionSecurityTokenCacheKey" FullName="System.IdentityModel.Tokens.SessionSecurityTokenCacheKey">
  <Metadata><Meta Name="ms.openlocfilehash" Value="27af84463c2df1351e3c5f760efee2d9f56dc71e" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="73387352" /></Metadata><TypeSignature Language="C#" Value="public class SessionSecurityTokenCacheKey" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SessionSecurityTokenCacheKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey" />
  <TypeSignature Language="VB.NET" Value="Public Class SessionSecurityTokenCacheKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class SessionSecurityTokenCacheKey" />
  <TypeSignature Language="F#" Value="type SessionSecurityTokenCacheKey = class" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="cc29c-101">表示在 <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenCache" /> 中的某一项的键。</span><span class="sxs-lookup"><span data-stu-id="cc29c-101">Represents the key for an entry in a <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenCache" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc29c-102">缓存时 <xref:System.IdentityModel.Tokens.SessionSecurityToken> ，需要两个索引。</span><span class="sxs-lookup"><span data-stu-id="cc29c-102">When caching a <xref:System.IdentityModel.Tokens.SessionSecurityToken> there are two indexes required.</span></span> <span data-ttu-id="cc29c-103">一种是由属性表示的上下文 ID， <xref:System.IdentityModel.Tokens.SessionSecurityToken.ContextId%2A?displayProperty=nameWithType> 它在所有会话令牌中是唯一的。</span><span class="sxs-lookup"><span data-stu-id="cc29c-103">One is the context ID, represented by the <xref:System.IdentityModel.Tokens.SessionSecurityToken.ContextId%2A?displayProperty=nameWithType> property, that is unique across all session tokens.</span></span> <span data-ttu-id="cc29c-104">另一种是由属性表示的密钥生成， <xref:System.IdentityModel.Tokens.SessionSecurityToken.KeyGeneration%2A?displayProperty=nameWithType> 它在会话令牌中是唯一的。</span><span class="sxs-lookup"><span data-stu-id="cc29c-104">The other is the key generation, represented by the <xref:System.IdentityModel.Tokens.SessionSecurityToken.KeyGeneration%2A?displayProperty=nameWithType> property, which is unique within a session token.</span></span> <span data-ttu-id="cc29c-105">发出会话令牌时，它只有一个上下文 ID。</span><span class="sxs-lookup"><span data-stu-id="cc29c-105">When a session token is issued it has only a context ID.</span></span> <span data-ttu-id="cc29c-106">续订会话令牌后，会添加密钥生成。</span><span class="sxs-lookup"><span data-stu-id="cc29c-106">When the session token is renewed, the key generation is added.</span></span> <span data-ttu-id="cc29c-107">续订后，可通过上下文 ID 和密钥生成唯一识别续订的会话令牌。</span><span class="sxs-lookup"><span data-stu-id="cc29c-107">After renewal, the renewed session token is uniquely identifiable via the context ID and key generation.</span></span>  
  
 <span data-ttu-id="cc29c-108">类型的对象用作 <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey> 会话令牌缓存的索引。</span><span class="sxs-lookup"><span data-stu-id="cc29c-108">Objects of type <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey> are used as the indexes to the session token cache.</span></span> <span data-ttu-id="cc29c-109">索引将始终指定有效的 <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.ContextId%2A> 属性，但该 <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.KeyGeneration%2A> 属性可能是 `null` ，具体取决于是否已续订令牌。</span><span class="sxs-lookup"><span data-stu-id="cc29c-109">An index will always have a valid <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.ContextId%2A> property specified, but the <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.KeyGeneration%2A> property may be `null`, depending on whether the token has been renewed.</span></span> <span data-ttu-id="cc29c-110">还有一个可选的， <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.EndpointId%2A> 它提供了令牌的作用域。</span><span class="sxs-lookup"><span data-stu-id="cc29c-110">There is also an optional <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.EndpointId%2A> which gives the endpoint to which the token is scoped.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SessionSecurityTokenCacheKey (string endpointId, System.Xml.UniqueId contextId, System.Xml.UniqueId keyGeneration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string endpointId, class System.Xml.UniqueId contextId, class System.Xml.UniqueId keyGeneration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.#ctor(System.String,System.Xml.UniqueId,System.Xml.UniqueId)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpointId As String, contextId As UniqueId, keyGeneration As UniqueId)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SessionSecurityTokenCacheKey(System::String ^ endpointId, System::Xml::UniqueId ^ contextId, System::Xml::UniqueId ^ keyGeneration);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.Tokens.SessionSecurityTokenCacheKey : string * System.Xml.UniqueId * System.Xml.UniqueId -&gt; System.IdentityModel.Tokens.SessionSecurityTokenCacheKey" Usage="new System.IdentityModel.Tokens.SessionSecurityTokenCacheKey (endpointId, contextId, keyGeneration)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpointId" Type="System.String" />
        <Parameter Name="contextId" Type="System.Xml.UniqueId" />
        <Parameter Name="keyGeneration" Type="System.Xml.UniqueId" />
      </Parameters>
      <Docs>
        <param name="endpointId"><span data-ttu-id="cc29c-111">缓存输入被限定到终点 ID。</span><span class="sxs-lookup"><span data-stu-id="cc29c-111">The endpoint ID to which the cache entry is scoped.</span></span> <span data-ttu-id="cc29c-112">此应为令牌模拟的 <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId" /> 属性的值。</span><span class="sxs-lookup"><span data-stu-id="cc29c-112">This is should be the value of the <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId" /> property of the cached token.</span></span></param>
        <param name="contextId"><span data-ttu-id="cc29c-113">缓存项的上下文 ID。</span><span class="sxs-lookup"><span data-stu-id="cc29c-113">The context ID of the cache entry.</span></span> <span data-ttu-id="cc29c-114">此应为令牌模拟的 <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.ContextId" /> 属性的值。</span><span class="sxs-lookup"><span data-stu-id="cc29c-114">This is should be the value of the <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.ContextId" /> property of the cached token.</span></span></param>
        <param name="keyGeneration"><span data-ttu-id="cc29c-115">缓存入口的密钥生成</span><span class="sxs-lookup"><span data-stu-id="cc29c-115">The key generation of the cache entry.</span></span> <span data-ttu-id="cc29c-116">此应为令牌模拟的 <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.KeyGeneration" /> 属性的值。</span><span class="sxs-lookup"><span data-stu-id="cc29c-116">This is should be the value of the <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.KeyGeneration" /> property of the cached token.</span></span> <span data-ttu-id="cc29c-117">更新标记后此值可用。</span><span class="sxs-lookup"><span data-stu-id="cc29c-117">This value is available when the token is renewed.</span></span> <span data-ttu-id="cc29c-118">当缓存一个新标记时，它将会 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="cc29c-118">It will be <see langword="null" /> when caching a new token.</span></span></param>
        <summary><span data-ttu-id="cc29c-119">初始化 <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="cc29c-119">Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextId">
      <MemberSignature Language="C#" Value="public System.Xml.UniqueId ContextId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.UniqueId ContextId" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.ContextId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContextId As UniqueId" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::UniqueId ^ ContextId { System::Xml::UniqueId ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ContextId : System.Xml.UniqueId" Usage="System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.ContextId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.UniqueId</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc29c-120">获取缓存键的上下文 ID。</span><span class="sxs-lookup"><span data-stu-id="cc29c-120">Gets the context ID for the cache key.</span></span></summary>
        <value><span data-ttu-id="cc29c-121">缓存键的上下文 ID。</span><span class="sxs-lookup"><span data-stu-id="cc29c-121">The context ID for the cache key.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc29c-122">这对应于 <xref:System.IdentityModel.Tokens.SessionSecurityToken.ContextId%2A> 缓存的标记的属性。</span><span class="sxs-lookup"><span data-stu-id="cc29c-122">This corresponds to the <xref:System.IdentityModel.Tokens.SessionSecurityToken.ContextId%2A> property of the cached token.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndpointId">
      <MemberSignature Language="C#" Value="public string EndpointId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EndpointId" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.EndpointId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EndpointId As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ EndpointId { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EndpointId : string" Usage="System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.EndpointId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc29c-123">获取该缓存输入被限定到的 Endpoint ID。</span><span class="sxs-lookup"><span data-stu-id="cc29c-123">Gets the Endpoint ID to which this cache entry is scoped.</span></span></summary>
        <value><span data-ttu-id="cc29c-124">该缓存输入被限定到终点 ID。</span><span class="sxs-lookup"><span data-stu-id="cc29c-124">The Endpoint ID to which this cache entry is scoped.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc29c-125">这对应于 <xref:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId%2A> 缓存的标记的属性。</span><span class="sxs-lookup"><span data-stu-id="cc29c-125">This corresponds to the <xref:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId%2A> property of the cached token.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="sessionSecurityTokenCacheKey.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="cc29c-126">要与当前缓存键进行比较的对象。</span><span class="sxs-lookup"><span data-stu-id="cc29c-126">The object to be compared to the current cache key.</span></span> <span data-ttu-id="cc29c-127">应从 <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey" />中赋值的。</span><span class="sxs-lookup"><span data-stu-id="cc29c-127">Should be assignable from <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey" />.</span></span></param>
        <summary><span data-ttu-id="cc29c-128">确定指定的对象是否与当前缓存键相同。</span><span class="sxs-lookup"><span data-stu-id="cc29c-128">Determines whether the specified object is the same as the current cache key.</span></span></summary>
        <returns><span data-ttu-id="cc29c-129">如果指定的对象与当前的缓存键相同，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="cc29c-129"><see langword="true" /> if the specified object is the same as the current cache key; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc29c-130">如果 <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.IgnoreKeyGeneration%2A> 为，则在 `true` <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.KeyGeneration%2A> 比较中不使用属性。</span><span class="sxs-lookup"><span data-stu-id="cc29c-130">If the <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.IgnoreKeyGeneration%2A> is `true`, the <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.KeyGeneration%2A> property is not used in the comparison.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="sessionSecurityTokenCacheKey.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cc29c-131">返回当前缓存键的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="cc29c-131">Returns a hash code for the current cache key.</span></span></summary>
        <returns><span data-ttu-id="cc29c-132">当前缓存键的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="cc29c-132">The hash code for the current cache key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc29c-133">如果 <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.IgnoreKeyGeneration%2A> 为 `true` ，则 <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.KeyGeneration%2A> 在生成哈希代码时不使用属性。</span><span class="sxs-lookup"><span data-stu-id="cc29c-133">If the <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.IgnoreKeyGeneration%2A> is `true`, the <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.KeyGeneration%2A> property is not used in generating the hash code.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnoreKeyGeneration">
      <MemberSignature Language="C#" Value="public bool IgnoreKeyGeneration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreKeyGeneration" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.IgnoreKeyGeneration" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreKeyGeneration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreKeyGeneration { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreKeyGeneration : bool with get, set" Usage="System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.IgnoreKeyGeneration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc29c-134">获取或设置指示执行索引比较时是否应忽略键生成的值。</span><span class="sxs-lookup"><span data-stu-id="cc29c-134">Gets or sets a value that indicates whether key generation can be ignored when doing index comparison.</span></span></summary>
        <value><span data-ttu-id="cc29c-135">忽略关键字生成，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="cc29c-135"><see langword="true" /> to ignore key generation; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc29c-136">此属性将影响 <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.KeyGeneration%2A> 以下方法和运算符处理属性的方式： <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.Equals%2A> 、 <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.GetHashCode%2A> 、 <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.op_Equality%2A> 、 <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.op_Inequality%2A> 和 <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.ToString%2A> 。</span><span class="sxs-lookup"><span data-stu-id="cc29c-136">This property affects the manner in which the <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.KeyGeneration%2A> property is treated by the following methods and operators: <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.Equals%2A>, <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.GetHashCode%2A>, <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.op_Equality%2A>, <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.op_Inequality%2A>, and <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.ToString%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyGeneration">
      <MemberSignature Language="C#" Value="public System.Xml.UniqueId KeyGeneration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.UniqueId KeyGeneration" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.KeyGeneration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeyGeneration As UniqueId" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::UniqueId ^ KeyGeneration { System::Xml::UniqueId ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyGeneration : System.Xml.UniqueId" Usage="System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.KeyGeneration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.UniqueId</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc29c-137">获取缓存键的键生成。</span><span class="sxs-lookup"><span data-stu-id="cc29c-137">Gets the key generation for the cache key.</span></span></summary>
        <value><span data-ttu-id="cc29c-138">缓存键的密钥生成</span><span class="sxs-lookup"><span data-stu-id="cc29c-138">The key generation for the cache key</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc29c-139">这对应于 <xref:System.IdentityModel.Tokens.SessionSecurityToken.KeyGeneration%2A> 缓存的标记的属性。</span><span class="sxs-lookup"><span data-stu-id="cc29c-139">This corresponds to the <xref:System.IdentityModel.Tokens.SessionSecurityToken.KeyGeneration%2A> property of the cached token.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.IdentityModel.Tokens.SessionSecurityTokenCacheKey first, System.IdentityModel.Tokens.SessionSecurityTokenCacheKey second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.IdentityModel.Tokens.SessionSecurityTokenCacheKey first, class System.IdentityModel.Tokens.SessionSecurityTokenCacheKey second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.op_Equality(System.IdentityModel.Tokens.SessionSecurityTokenCacheKey,System.IdentityModel.Tokens.SessionSecurityTokenCacheKey)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (first As SessionSecurityTokenCacheKey, second As SessionSecurityTokenCacheKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::IdentityModel::Tokens::SessionSecurityTokenCacheKey ^ first, System::IdentityModel::Tokens::SessionSecurityTokenCacheKey ^ second);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.IdentityModel.Tokens.SessionSecurityTokenCacheKey * System.IdentityModel.Tokens.SessionSecurityTokenCacheKey -&gt; bool" Usage="first = second" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.IdentityModel.Tokens.SessionSecurityTokenCacheKey" />
        <Parameter Name="second" Type="System.IdentityModel.Tokens.SessionSecurityTokenCacheKey" />
      </Parameters>
      <Docs>
        <param name="first"><span data-ttu-id="cc29c-140">要比较的第一个缓存键。</span><span class="sxs-lookup"><span data-stu-id="cc29c-140">The first cache key to compare.</span></span></param>
        <param name="second"><span data-ttu-id="cc29c-141">要比较的第二个缓存键。</span><span class="sxs-lookup"><span data-stu-id="cc29c-141">The second cache key to compare.</span></span></param>
        <summary><span data-ttu-id="cc29c-142">实现 <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey" /> 类的相等运算符。</span><span class="sxs-lookup"><span data-stu-id="cc29c-142">Implements the equality operator for the <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey" /> class.</span></span></summary>
        <returns><span data-ttu-id="cc29c-143">如果缓存键相等，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="cc29c-143"><see langword="true" /> if the cache keys are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc29c-144">如果 <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.IgnoreKeyGeneration%2A> 为，则在 `true` <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.KeyGeneration%2A> 比较中不使用属性。</span><span class="sxs-lookup"><span data-stu-id="cc29c-144">If the <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.IgnoreKeyGeneration%2A> is `true`, the <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.KeyGeneration%2A> property is not used in the comparison.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.IdentityModel.Tokens.SessionSecurityTokenCacheKey first, System.IdentityModel.Tokens.SessionSecurityTokenCacheKey second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.IdentityModel.Tokens.SessionSecurityTokenCacheKey first, class System.IdentityModel.Tokens.SessionSecurityTokenCacheKey second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.op_Inequality(System.IdentityModel.Tokens.SessionSecurityTokenCacheKey,System.IdentityModel.Tokens.SessionSecurityTokenCacheKey)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (first As SessionSecurityTokenCacheKey, second As SessionSecurityTokenCacheKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::IdentityModel::Tokens::SessionSecurityTokenCacheKey ^ first, System::IdentityModel::Tokens::SessionSecurityTokenCacheKey ^ second);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.IdentityModel.Tokens.SessionSecurityTokenCacheKey * System.IdentityModel.Tokens.SessionSecurityTokenCacheKey -&gt; bool" Usage="System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.op_Inequality (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.IdentityModel.Tokens.SessionSecurityTokenCacheKey" />
        <Parameter Name="second" Type="System.IdentityModel.Tokens.SessionSecurityTokenCacheKey" />
      </Parameters>
      <Docs>
        <param name="first"><span data-ttu-id="cc29c-145">要比较的第一个缓存键。</span><span class="sxs-lookup"><span data-stu-id="cc29c-145">The first cache key to compare.</span></span></param>
        <param name="second"><span data-ttu-id="cc29c-146">要比较的第二个缓存键。</span><span class="sxs-lookup"><span data-stu-id="cc29c-146">The second cache key to compare.</span></span></param>
        <summary><span data-ttu-id="cc29c-147">实现 <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey" /> 类的相等运算符。</span><span class="sxs-lookup"><span data-stu-id="cc29c-147">Implements the equality operator for the <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey" /> class.</span></span></summary>
        <returns><span data-ttu-id="cc29c-148">如果缓存键不相等，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="cc29c-148"><see langword="true" /> if the cache keys are not equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc29c-149">如果 <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.IgnoreKeyGeneration%2A> 为，则在 `true` <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.KeyGeneration%2A> 比较中不使用属性。</span><span class="sxs-lookup"><span data-stu-id="cc29c-149">If the <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.IgnoreKeyGeneration%2A> is `true`, the <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.KeyGeneration%2A> property is not used in the comparison.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="sessionSecurityTokenCacheKey.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cc29c-150">重写 <see cref="M:System.Object.ToString" /> 以提供唯一标识符。</span><span class="sxs-lookup"><span data-stu-id="cc29c-150">Overrides <see cref="M:System.Object.ToString" /> to provide a unique identifier.</span></span></summary>
        <returns><span data-ttu-id="cc29c-151">字符串形式的键。</span><span class="sxs-lookup"><span data-stu-id="cc29c-151">The key in string form.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc29c-152">如果 <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.IgnoreKeyGeneration%2A> 为 `true` ，则 <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.KeyGeneration%2A> 不使用属性。</span><span class="sxs-lookup"><span data-stu-id="cc29c-152">If the <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.IgnoreKeyGeneration%2A> is `true`, the <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.KeyGeneration%2A> property is not used.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
