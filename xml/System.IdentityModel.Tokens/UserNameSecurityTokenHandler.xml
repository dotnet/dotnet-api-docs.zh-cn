<Type Name="UserNameSecurityTokenHandler" FullName="System.IdentityModel.Tokens.UserNameSecurityTokenHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="31552b92035f477fb6cb03e8538b7657ffc77893" /><Meta Name="ms.sourcegitcommit" Value="397961a0164281b579f68064c3bb66c071f374d9" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/14/2020" /><Meta Name="ms.locfileid" Value="69119163" /></Metadata><TypeSignature Language="C#" Value="public abstract class UserNameSecurityTokenHandler : System.IdentityModel.Tokens.SecurityTokenHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit UserNameSecurityTokenHandler extends System.IdentityModel.Tokens.SecurityTokenHandler" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Tokens.UserNameSecurityTokenHandler" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class UserNameSecurityTokenHandler&#xA;Inherits SecurityTokenHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class UserNameSecurityTokenHandler abstract : System::IdentityModel::Tokens::SecurityTokenHandler" />
  <TypeSignature Language="F#" Value="type UserNameSecurityTokenHandler = class&#xA;    inherit SecurityTokenHandler" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IdentityModel.Tokens.SecurityTokenHandler</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="2229e-101">定义抽象基类 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> 进行安全标记类 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" />。</span><span class="sxs-lookup"><span data-stu-id="2229e-101">Defines an abstract base class for a <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> that processes security tokens of type <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" />.</span></span></summary>
    <remarks>To be added.</remarks>
    <altmember cref="T:System.IdentityModel.Tokens.WindowsUserNameSecurityTokenHandler" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UserNameSecurityTokenHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.UserNameSecurityTokenHandler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; UserNameSecurityTokenHandler();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2229e-102">从派生类中的构造函数中调用，用于初始化 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityTokenHandler" /> 类。</span><span class="sxs-lookup"><span data-stu-id="2229e-102">Called from constructors in derived classes to initialize the <see cref="T:System.IdentityModel.Tokens.UserNameSecurityTokenHandler" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanReadToken">
      <MemberSignature Language="C#" Value="public override bool CanReadToken (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanReadToken(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.UserNameSecurityTokenHandler.CanReadToken(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CanReadToken (reader As XmlReader) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool CanReadToken(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="override this.CanReadToken : System.Xml.XmlReader -&gt; bool" Usage="userNameSecurityTokenHandler.CanReadToken reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="2229e-103">在开始元素上指定的 XML 读取器。</span><span class="sxs-lookup"><span data-stu-id="2229e-103">An XML reader positioned at a start element.</span></span> <span data-ttu-id="2229e-104">不能将读取器前移。</span><span class="sxs-lookup"><span data-stu-id="2229e-104">The reader should not be advanced.</span></span></param>
        <summary><span data-ttu-id="2229e-105">指示当前的 ML 元素是否可读作 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" />。</span><span class="sxs-lookup"><span data-stu-id="2229e-105">Indicates whether the current XML element can be read as a <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" />.</span></span></summary>
        <returns><span data-ttu-id="2229e-106">如果读取器正指向 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2229e-106"><see langword="true" /> if the reader is pointing to a <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWriteToken">
      <MemberSignature Language="C#" Value="public override bool CanWriteToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWriteToken" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.UserNameSecurityTokenHandler.CanWriteToken" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanWriteToken As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanWriteToken { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanWriteToken : bool" Usage="System.IdentityModel.Tokens.UserNameSecurityTokenHandler.CanWriteToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2229e-107">获取指示此处理程序能否写入 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> 类型的标记的值。</span><span class="sxs-lookup"><span data-stu-id="2229e-107">Gets a value that indicates whether this handler can write tokens of type <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" />.</span></span></summary>
        <value><span data-ttu-id="2229e-108">如果处理程序现在可以写入类型 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> 的标记，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2229e-108"><see langword="true" /> if the handler can write tokens of type <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" />; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="2229e-109">总是为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="2229e-109">Always <see langword="true" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenTypeIdentifiers">
      <MemberSignature Language="C#" Value="public override string[] GetTokenTypeIdentifiers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string[] GetTokenTypeIdentifiers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.UserNameSecurityTokenHandler.GetTokenTypeIdentifiers" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetTokenTypeIdentifiers () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::String ^&gt; ^ GetTokenTypeIdentifiers();" />
      <MemberSignature Language="F#" Value="override this.GetTokenTypeIdentifiers : unit -&gt; string[]" Usage="userNameSecurityTokenHandler.GetTokenTypeIdentifiers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2229e-110">返回用于请求辨认可由该管理器处理的标记类型的 URIs。</span><span class="sxs-lookup"><span data-stu-id="2229e-110">Returns the URIs used in requests to identify a token of the type that can be processed by this handler.</span></span></summary>
        <returns><span data-ttu-id="2229e-111">识别该处理程序支持的标识种类 URIs 集合。</span><span class="sxs-lookup"><span data-stu-id="2229e-111">The set of URIs that identify the token type that this handler supports.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadToken">
      <MemberSignature Language="C#" Value="public override System.IdentityModel.Tokens.SecurityToken ReadToken (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IdentityModel.Tokens.SecurityToken ReadToken(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.UserNameSecurityTokenHandler.ReadToken(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadToken (reader As XmlReader) As SecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::IdentityModel::Tokens::SecurityToken ^ ReadToken(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="override this.ReadToken : System.Xml.XmlReader -&gt; System.IdentityModel.Tokens.SecurityToken" Usage="userNameSecurityTokenHandler.ReadToken reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="2229e-112">在标记的开始元素上指定的 XML 读取器。</span><span class="sxs-lookup"><span data-stu-id="2229e-112">An XML reader positioned at the start element of the token.</span></span></param>
        <summary><span data-ttu-id="2229e-113">从指定读取器读取 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" />。</span><span class="sxs-lookup"><span data-stu-id="2229e-113">Reads a <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> from the specified reader.</span></span></summary>
        <returns><span data-ttu-id="2229e-114">从 XML 反序列化的用户名安全标记。</span><span class="sxs-lookup"><span data-stu-id="2229e-114">The username security token that was deserialized from the XML.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2229e-115"><paramref name="reader" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="2229e-115"><paramref name="reader" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Xml.XmlException"><span data-ttu-id="2229e-116">标记无法读取。</span><span class="sxs-lookup"><span data-stu-id="2229e-116">The token cannot be read.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="2229e-117">该密码不是纯文本格式。</span><span class="sxs-lookup"><span data-stu-id="2229e-117">The password was not in plain text format.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2229e-118">在安全标志中找到一个未知元素，或未指定用户名。</span><span class="sxs-lookup"><span data-stu-id="2229e-118">An unknown element was found in the security token or the username was not specified.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RetainPassword">
      <MemberSignature Language="C#" Value="public virtual bool RetainPassword { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RetainPassword" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.UserNameSecurityTokenHandler.RetainPassword" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RetainPassword As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool RetainPassword { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.RetainPassword : bool with get, set" Usage="System.IdentityModel.Tokens.UserNameSecurityTokenHandler.RetainPassword" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2229e-119">获取或设置指定是否在附加到由 <see cref="T:System.Security.Claims.ClaimsIdentity" /> 方法返回的 <see cref="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)" /> 的启动标记中保留密码的值。</span><span class="sxs-lookup"><span data-stu-id="2229e-119">Gets or sets a value that specifies whether the password will be retained in the bootstrap token that is attached to the <see cref="T:System.Security.Claims.ClaimsIdentity" /> that is returned by the <see cref="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)" /> method.</span></span></summary>
        <value><span data-ttu-id="2229e-120">如果该密码应在引导标记中保留，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2229e-120"><see langword="true" /> if the password should be retained in the bootstrap token; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="2229e-121">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2229e-121">The default is <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenType">
      <MemberSignature Language="C#" Value="public override Type TokenType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type TokenType" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.UserNameSecurityTokenHandler.TokenType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property TokenType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ TokenType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TokenType : Type" Usage="System.IdentityModel.Tokens.UserNameSecurityTokenHandler.TokenType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2229e-122">获取此处理程序处理的 <see cref="T:System.Type" /> 的标记。</span><span class="sxs-lookup"><span data-stu-id="2229e-122">Gets the <see cref="T:System.Type" /> of the tokens that this handler processes.</span></span></summary>
        <value><span data-ttu-id="2229e-123"><see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="2229e-123">The type of <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToken">
      <MemberSignature Language="C#" Value="public override void WriteToken (System.Xml.XmlWriter writer, System.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteToken(class System.Xml.XmlWriter writer, class System.IdentityModel.Tokens.SecurityToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.UserNameSecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteToken (writer As XmlWriter, token As SecurityToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteToken(System::Xml::XmlWriter ^ writer, System::IdentityModel::Tokens::SecurityToken ^ token);" />
      <MemberSignature Language="F#" Value="override this.WriteToken : System.Xml.XmlWriter * System.IdentityModel.Tokens.SecurityToken -&gt; unit" Usage="userNameSecurityTokenHandler.WriteToken (writer, token)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="2229e-124">用于序列化令牌的 XML 编写器。</span><span class="sxs-lookup"><span data-stu-id="2229e-124">The XML writer to use to serialize the token.</span></span></param>
        <param name="token"><span data-ttu-id="2229e-125">要序列化的标记。</span><span class="sxs-lookup"><span data-stu-id="2229e-125">The token to serialize.</span></span></param>
        <summary><span data-ttu-id="2229e-126">将指定的 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> 序列化为 XML。</span><span class="sxs-lookup"><span data-stu-id="2229e-126">Serializes the specified <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> to XML.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2229e-127"><paramref name="writer" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="2229e-127"><paramref name="writer" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2229e-128">- 或 -</span><span class="sxs-lookup"><span data-stu-id="2229e-128">-or-</span></span> 
 <span data-ttu-id="2229e-129"><paramref name="token" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="2229e-129"><paramref name="token" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2229e-130"><paramref name="token" /> 不可从 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> 中指定。</span><span class="sxs-lookup"><span data-stu-id="2229e-130"><paramref name="token" /> is not assignable from <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" />.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
