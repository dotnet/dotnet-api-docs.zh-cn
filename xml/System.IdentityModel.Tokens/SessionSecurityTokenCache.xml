<Type Name="SessionSecurityTokenCache" FullName="System.IdentityModel.Tokens.SessionSecurityTokenCache">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b4100f57d975c3782ca042aabb9284f1d7430fd0" /><Meta Name="ms.sourcegitcommit" Value="397961a0164281b579f68064c3bb66c071f374d9" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/14/2020" /><Meta Name="ms.locfileid" Value="69119288" /></Metadata><TypeSignature Language="C#" Value="public abstract class SessionSecurityTokenCache : System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SessionSecurityTokenCache extends System.Object implements class System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Tokens.SessionSecurityTokenCache" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SessionSecurityTokenCache&#xA;Implements ICustomIdentityConfiguration" />
  <TypeSignature Language="C++ CLI" Value="public ref class SessionSecurityTokenCache abstract : System::IdentityModel::Configuration::ICustomIdentityConfiguration" />
  <TypeSignature Language="F#" Value="type SessionSecurityTokenCache = class&#xA;    interface ICustomIdentityConfiguration" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IdentityModel.Configuration.ICustomIdentityConfiguration</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>定义会话标记缓冲抽象类。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SessionSecurityTokenCache ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenCache.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SessionSecurityTokenCache();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>从派生类中的构造函数中调用，用于初始化 <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenCache" /> 类。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOrUpdate">
      <MemberSignature Language="C#" Value="public abstract void AddOrUpdate (System.IdentityModel.Tokens.SessionSecurityTokenCacheKey key, System.IdentityModel.Tokens.SessionSecurityToken value, DateTime expiryTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddOrUpdate(class System.IdentityModel.Tokens.SessionSecurityTokenCacheKey key, class System.IdentityModel.Tokens.SessionSecurityToken value, valuetype System.DateTime expiryTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenCache.AddOrUpdate(System.IdentityModel.Tokens.SessionSecurityTokenCacheKey,System.IdentityModel.Tokens.SessionSecurityToken,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub AddOrUpdate (key As SessionSecurityTokenCacheKey, value As SessionSecurityToken, expiryTime As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void AddOrUpdate(System::IdentityModel::Tokens::SessionSecurityTokenCacheKey ^ key, System::IdentityModel::Tokens::SessionSecurityToken ^ value, DateTime expiryTime);" />
      <MemberSignature Language="F#" Value="abstract member AddOrUpdate : System.IdentityModel.Tokens.SessionSecurityTokenCacheKey * System.IdentityModel.Tokens.SessionSecurityToken * DateTime -&gt; unit" Usage="sessionSecurityTokenCache.AddOrUpdate (key, value, expiryTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.IdentityModel.Tokens.SessionSecurityTokenCacheKey" />
        <Parameter Name="value" Type="System.IdentityModel.Tokens.SessionSecurityToken" />
        <Parameter Name="expiryTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="key">要添加或更新的项的键。</param>
        <param name="value">与入口关联的标记。</param>
        <param name="expiryTime">输入的过期时间。</param>
        <summary>当在派生类中重写时，尝试将词条添加到缓存或更新现有词条。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public abstract System.IdentityModel.Tokens.SessionSecurityToken Get (System.IdentityModel.Tokens.SessionSecurityTokenCacheKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SessionSecurityToken Get(class System.IdentityModel.Tokens.SessionSecurityTokenCacheKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenCache.Get(System.IdentityModel.Tokens.SessionSecurityTokenCacheKey)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Get (key As SessionSecurityTokenCacheKey) As SessionSecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::IdentityModel::Tokens::SessionSecurityToken ^ Get(System::IdentityModel::Tokens::SessionSecurityTokenCacheKey ^ key);" />
      <MemberSignature Language="F#" Value="abstract member Get : System.IdentityModel.Tokens.SessionSecurityTokenCacheKey -&gt; System.IdentityModel.Tokens.SessionSecurityToken" Usage="sessionSecurityTokenCache.Get key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SessionSecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.IdentityModel.Tokens.SessionSecurityTokenCacheKey" />
      </Parameters>
      <Docs>
        <param name="key">要检索的项的键。</param>
        <summary>在派生类中重写时，尝试从缓存中检索词条。</summary>
        <returns>会话标识与密钥联系或在未找到匹配时为 <see langword="null" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAll">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IEnumerable&lt;System.IdentityModel.Tokens.SessionSecurityToken&gt; GetAll (string endpointId, System.Xml.UniqueId contextId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.IdentityModel.Tokens.SessionSecurityToken&gt; GetAll(string endpointId, class System.Xml.UniqueId contextId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenCache.GetAll(System.String,System.Xml.UniqueId)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetAll (endpointId As String, contextId As UniqueId) As IEnumerable(Of SessionSecurityToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Collections::Generic::IEnumerable&lt;System::IdentityModel::Tokens::SessionSecurityToken ^&gt; ^ GetAll(System::String ^ endpointId, System::Xml::UniqueId ^ contextId);" />
      <MemberSignature Language="F#" Value="abstract member GetAll : string * System.Xml.UniqueId -&gt; seq&lt;System.IdentityModel.Tokens.SessionSecurityToken&gt;" Usage="sessionSecurityTokenCache.GetAll (endpointId, contextId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.IdentityModel.Tokens.SessionSecurityToken&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpointId" Type="System.String" />
        <Parameter Name="contextId" Type="System.Xml.UniqueId" />
      </Parameters>
      <Docs>
        <param name="endpointId">要搜索的终点 ID。</param>
        <param name="contextId">要搜索的上下文 ID。</param>
        <summary>当在派生类中重写时，将检索所有与键的标记。</summary>
        <returns>与密钥关联的会话表达式的集合。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCustomConfiguration">
      <MemberSignature Language="C#" Value="public virtual void LoadCustomConfiguration (System.Xml.XmlNodeList nodelist);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadCustomConfiguration(class System.Xml.XmlNodeList nodelist) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenCache.LoadCustomConfiguration(System.Xml.XmlNodeList)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub LoadCustomConfiguration (nodelist As XmlNodeList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void LoadCustomConfiguration(System::Xml::XmlNodeList ^ nodelist);" />
      <MemberSignature Language="F#" Value="abstract member LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit&#xA;override this.LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit" Usage="sessionSecurityTokenCache.LoadCustomConfiguration nodelist" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IdentityModel.Configuration.ICustomIdentityConfiguration.LoadCustomConfiguration(System.Xml.XmlNodeList)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodelist" Type="System.Xml.XmlNodeList" />
      </Parameters>
      <Docs>
        <param name="nodelist">自定义配置元素。</param>
        <summary>在派生类中重写时，将从 XML 中加载自定义配置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，此方法将引发 <xref:System.NotImplementedException> 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public abstract void Remove (System.IdentityModel.Tokens.SessionSecurityTokenCacheKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(class System.IdentityModel.Tokens.SessionSecurityTokenCacheKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenCache.Remove(System.IdentityModel.Tokens.SessionSecurityTokenCacheKey)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Remove (key As SessionSecurityTokenCacheKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Remove(System::IdentityModel::Tokens::SessionSecurityTokenCacheKey ^ key);" />
      <MemberSignature Language="F#" Value="abstract member Remove : System.IdentityModel.Tokens.SessionSecurityTokenCacheKey -&gt; unit" Usage="sessionSecurityTokenCache.Remove key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.IdentityModel.Tokens.SessionSecurityTokenCacheKey" />
      </Parameters>
      <Docs>
        <param name="key">要移除的条目的键。</param>
        <summary>在派生类中实现时，尝试从缓存中移除任何词条。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RemoveAll">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>在派生类中实现时，尝试移除所有与指定标识符关联的词条。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public abstract void RemoveAll (string endpointId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAll(string endpointId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenCache.RemoveAll(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub RemoveAll (endpointId As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void RemoveAll(System::String ^ endpointId);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAll : string -&gt; unit" Usage="sessionSecurityTokenCache.RemoveAll endpointId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpointId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="endpointId">要为其移除条目的终点 ID。</param>
        <summary>在派生类中实现时，尝试使用匹配终结点 ID 从缓存中移除所有词条。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public abstract void RemoveAll (string endpointId, System.Xml.UniqueId contextId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAll(string endpointId, class System.Xml.UniqueId contextId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenCache.RemoveAll(System.String,System.Xml.UniqueId)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub RemoveAll (endpointId As String, contextId As UniqueId)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void RemoveAll(System::String ^ endpointId, System::Xml::UniqueId ^ contextId);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAll : string * System.Xml.UniqueId -&gt; unit" Usage="sessionSecurityTokenCache.RemoveAll (endpointId, contextId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpointId" Type="System.String" />
        <Parameter Name="contextId" Type="System.Xml.UniqueId" />
      </Parameters>
      <Docs>
        <param name="endpointId">要为其移除条目的终点 ID。</param>
        <param name="contextId">要为其移除项的上下文。</param>
        <summary>在派生类中实现时，尝试从缓存中移除所有匹配词条。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
