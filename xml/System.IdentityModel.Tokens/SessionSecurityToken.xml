<Type Name="SessionSecurityToken" FullName="System.IdentityModel.Tokens.SessionSecurityToken">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0cf6e610d277c54c85eae56d91ede3e5c2fa0c9d" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83967603" /></Metadata><TypeSignature Language="C#" Value="public class SessionSecurityToken : System.IdentityModel.Tokens.SecurityToken, System.Runtime.Serialization.ISerializable" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit SessionSecurityToken extends System.IdentityModel.Tokens.SecurityToken implements class System.Runtime.Serialization.ISerializable" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Tokens.SessionSecurityToken" />
  <TypeSignature Language="VB.NET" Value="Public Class SessionSecurityToken&#xA;Inherits SecurityToken&#xA;Implements ISerializable" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="C++ CLI" Value="public ref class SessionSecurityToken : System::IdentityModel::Tokens::SecurityToken, System::Runtime::Serialization::ISerializable" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="F#" Value="type SessionSecurityToken = class&#xA;    inherit SecurityToken&#xA;    interface ISerializable" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="C#" Value="public class SessionSecurityToken : System.IdentityModel.Tokens.SecurityToken" FrameworkAlternate="xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit SessionSecurityToken extends System.IdentityModel.Tokens.SecurityToken" FrameworkAlternate="xamarinmac-3.0" />
  <TypeSignature Language="VB.NET" Value="Public Class SessionSecurityToken&#xA;Inherits SecurityToken" FrameworkAlternate="xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class SessionSecurityToken : System::IdentityModel::Tokens::SecurityToken" FrameworkAlternate="xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type SessionSecurityToken = class&#xA;    inherit SecurityToken" FrameworkAlternate="xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IdentityModel.Tokens.SecurityToken</BaseTypeName>
  </Base>
  <Interfaces>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>定义包含数据与会话相关的安全标记。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 会话令牌存储与会话关联的用户 <xref:System.Security.Claims.ClaimsPrincipal>，以及用于定义会话的其他参数;例如会话的开始时间和结束时间。  
  
 在被动方案中，<xref:System.IdentityModel.Services.WSFederationAuthenticationModule> 从身份验证管道调用到 <xref:System.IdentityModel.Services.SessionAuthenticationModule> （SAM），以从表示经过身份验证的用户的 <xref:System.Security.Claims.ClaimsPrincipal> 创建会话令牌。 SAM 使用其配置的 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> 来创建令牌并将其序列化为 cookie （并在后续请求中从 cookie 反序列化令牌）。 SAM 使用其配置的 <xref:System.IdentityModel.Services.CookieHandler> 类的实例将 cookie 写回 HTTP 响应。 然后，将此 cookie 返回给客户端，并在后续的请求中，客户端可以提供 cookie，而不是向标识提供程序重新获取安全令牌。 有关会话如何与 WIF 操作的详细信息，请参阅[WIF 会话管理](/dotnet/framework/security/wif-session-management)。 有关在 Web 场方案中使用会话的信息，请参阅[WIF 和 Web 场](/dotnet/framework/security/wif-and-web-farms)。  
  
 会话令牌可以在引用模式下运行。 如果会话令牌不是在引用模式下操作，则会将整个令牌序列化为存储在客户端上的会话 cookie。 序列化会话令牌可能相当大，因此，存储在客户端上的 cookie 也可能非常就前往。 在引用模式下，不会将整个会话令牌序列化为 cookie，而是将令牌存储在会话安全令牌缓存中，而只有用于生成从缓存中检索令牌所必需的密钥的信息存储在 cookie 中。 这样可以极大地减少 cookie 的大小。 会话令牌缓存由派生自 <xref:System.IdentityModel.Tokens.SessionSecurityTokenCache> 的类实现，缓存键由 <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey> 类实现。 <xref:System.IdentityModel.Tokens.SessionSecurityToken.ContextId%2A> 和 <xref:System.IdentityModel.Tokens.SessionSecurityToken.KeyGeneration%2A> 属性在 <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey> 类中用于生成缓存密钥。  
  
 <xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A> 属性确定会话令牌是否处于引用模式。  
  
> [!IMPORTANT]
>  若要在引用模式下操作，Microsoft 建议为 global.asax.cs 文件中的 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SessionSecurityTokenCreated?displayProperty=nameWithType> 事件提供处理程序，并在 <xref:System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs.SessionToken%2A?displayProperty=nameWithType> 属性中传递的标记上设置 <xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A> 属性。 这将确保会话令牌在每个请求的引用模式下运行，并且优于仅设置会话身份验证模块上的 <xref:System.IdentityModel.Services.SessionAuthenticationModule.IsReferenceMode%2A?displayProperty=nameWithType> 属性。  
  
 WIF 提供的 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> 类将会话令牌序列化为 WS 安全对话 `<wsc:SecurityContextToken>` 元素。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey" />
    <altmember cref="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler" />
    <altmember cref="T:System.IdentityModel.Tokens.SessionSecurityTokenCache" />
    <altmember cref="T:System.IdentityModel.Services.SessionAuthenticationModule" />
    <related type="Article" href="https://msdn.microsoft.com/library/98bce126-18a9-401b-b20d-67ee462a5f8a">WIF 会话管理</related>
    <related type="Article" href="https://msdn.microsoft.com/library/fc3cd7fa-2b45-4614-a44f-8fa9b9d15284">WIF 和 Web 场</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SessionSecurityToken (System.Security.Claims.ClaimsPrincipal claimsPrincipal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Claims.ClaimsPrincipal claimsPrincipal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityToken.#ctor(System.Security.Claims.ClaimsPrincipal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (claimsPrincipal As ClaimsPrincipal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SessionSecurityToken(System::Security::Claims::ClaimsPrincipal ^ claimsPrincipal);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.Tokens.SessionSecurityToken : System.Security.Claims.ClaimsPrincipal -&gt; System.IdentityModel.Tokens.SessionSecurityToken" Usage="new System.IdentityModel.Tokens.SessionSecurityToken claimsPrincipal" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="claimsPrincipal" Type="System.Security.Claims.ClaimsPrincipal" />
      </Parameters>
      <Docs>
        <param name="claimsPrincipal">初始化标记的声明主体。</param>
        <summary>从指定的主体初始化 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表显示了 <xref:System.IdentityModel.Tokens.SessionSecurityToken> 类的某个实例的初始属性值。  
  
|属性|初始值|  
|--------------|-------------------|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.ClaimsPrincipal%2A>|`claimsPrincipal`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.Context%2A>|`null`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.ContextId%2A>|设置为生成的唯一 ID。|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId%2A>|<xref:System.String.Empty?displayProperty=nameWithType>|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.Id%2A>|设置为生成的唯一 ID。|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.IsPersistent%2A>|`false`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A>|`false`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.KeyEffectiveTime%2A>|<xref:System.DateTime.UtcNow%2A>|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.KeyExpirationTime%2A>|<xref:System.DateTime.UtcNow%2A> 加上 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime%2A?displayProperty=nameWithType> 属性。|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.KeyGeneration%2A>|`null`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.SecurityKeys%2A>|包含生成的128位对称密钥。 **注意：** 默认实现不使用此属性。 签名和加密密钥由处理令牌的 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> 应用的 cookie 转换决定。|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.ValidFrom%2A>|<xref:System.DateTime.UtcNow%2A>|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.ValidTo%2A>|<xref:System.DateTime.UtcNow%2A> 加上 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime%2A?displayProperty=nameWithType> 属性。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="claimsPrincipal" /> 为 <see langword="null" />。  
  
- 或 - 
<paramref name="claimsPrincipal" /> 的 <see cref="P:System.Security.Claims.ClaimsPrincipal.Identities" /> 属性为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SessionSecurityToken (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityToken.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SessionSecurityToken(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.Tokens.SessionSecurityToken : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; System.IdentityModel.Tokens.SessionSecurityToken" Usage="new System.IdentityModel.Tokens.SessionSecurityToken (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">序列化的对象数据。</param>
        <param name="context">有关源的上下文信息。</param>
        <summary>使用序列化数据初始化 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SessionSecurityToken (System.Security.Claims.ClaimsPrincipal claimsPrincipal, string context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Claims.ClaimsPrincipal claimsPrincipal, string context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityToken.#ctor(System.Security.Claims.ClaimsPrincipal,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (claimsPrincipal As ClaimsPrincipal, context As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SessionSecurityToken(System::Security::Claims::ClaimsPrincipal ^ claimsPrincipal, System::String ^ context);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.Tokens.SessionSecurityToken : System.Security.Claims.ClaimsPrincipal * string -&gt; System.IdentityModel.Tokens.SessionSecurityToken" Usage="new System.IdentityModel.Tokens.SessionSecurityToken (claimsPrincipal, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="claimsPrincipal" Type="System.Security.Claims.ClaimsPrincipal" />
        <Parameter Name="context" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="claimsPrincipal">从引导标记生成的声明主体。</param>
        <param name="context">一个应用程序特定的可选上下文字符串。</param>
        <summary>用指定的主体和启动令牌初始化 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表显示了 <xref:System.IdentityModel.Tokens.SessionSecurityToken> 类的某个实例的初始属性值。  
  
|属性|初始值|  
|--------------|-------------------|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.ClaimsPrincipal%2A>|`claimsPrincipal`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.Context%2A>|`context`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.ContextId%2A>|设置为生成的唯一 ID。|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId%2A>|<xref:System.String.Empty?displayProperty=nameWithType>|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.Id%2A>|设置为生成的唯一 ID。|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.IsPersistent%2A>|`false`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A>|`false`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.KeyEffectiveTime%2A>|<xref:System.DateTime.UtcNow%2A>|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.KeyExpirationTime%2A>|<xref:System.DateTime.UtcNow%2A> 加上 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime%2A?displayProperty=nameWithType> 属性。|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.KeyGeneration%2A>|`null`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.SecurityKeys%2A>|包含生成的128位对称密钥。 **注意：** 默认实现不使用此属性。 签名和加密密钥由处理令牌的 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> 应用的 cookie 转换决定。|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.ValidFrom%2A>|<xref:System.DateTime.UtcNow%2A>|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.ValidTo%2A>|<xref:System.DateTime.UtcNow%2A> 加上 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime%2A?displayProperty=nameWithType> 属性。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="claimsPrincipal" /> 为 <see langword="null" />。  
  
- 或 - 
<paramref name="claimsPrincipal" /> 的 <see cref="P:System.Security.Claims.ClaimsPrincipal.Identities" /> 属性为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SessionSecurityToken (System.Security.Claims.ClaimsPrincipal claimsPrincipal, TimeSpan lifetime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Claims.ClaimsPrincipal claimsPrincipal, valuetype System.TimeSpan lifetime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityToken.#ctor(System.Security.Claims.ClaimsPrincipal,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (claimsPrincipal As ClaimsPrincipal, lifetime As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SessionSecurityToken(System::Security::Claims::ClaimsPrincipal ^ claimsPrincipal, TimeSpan lifetime);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.Tokens.SessionSecurityToken : System.Security.Claims.ClaimsPrincipal * TimeSpan -&gt; System.IdentityModel.Tokens.SessionSecurityToken" Usage="new System.IdentityModel.Tokens.SessionSecurityToken (claimsPrincipal, lifetime)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="claimsPrincipal" Type="System.Security.Claims.ClaimsPrincipal" />
        <Parameter Name="lifetime" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="claimsPrincipal">初始化标记的声明主体。</param>
        <param name="lifetime">当令牌有效期间从当前时间开始的期间。 <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.ValidFrom" /> 属性将设置为 <see cref="P:System.DateTime.UtcNow" /> ，并且 <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.ValidTo" /> 属性将设置为 <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.ValidFrom" /> 加上该参数指定的时期。</param>
        <summary>从指定的主体初始化 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 类的新实例。 在指定生命期间从 <see cref="P:System.DateTime.UtcNow" /> 开始是合法的新的标识。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表显示了 <xref:System.IdentityModel.Tokens.SessionSecurityToken> 类的某个实例的初始属性值。  
  
|属性|初始值|  
|--------------|-------------------|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.ClaimsPrincipal%2A>|`claimsPrincipal`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.Context%2A>|`null`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.ContextId%2A>|设置为生成的唯一 ID。|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId%2A>|<xref:System.String.Empty?displayProperty=nameWithType>|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.Id%2A>|设置为生成的唯一 ID。|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.IsPersistent%2A>|`false`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A>|`false`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.KeyEffectiveTime%2A>|<xref:System.DateTime.UtcNow%2A>|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.KeyExpirationTime%2A>|<xref:System.DateTime.UtcNow%2A> 加 `lifetime`。|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.KeyGeneration%2A>|`null`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.SecurityKeys%2A>|包含生成的128位对称密钥。 **注意：** 默认实现不使用此属性。 签名和加密密钥由处理令牌的 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> 应用的 cookie 转换决定。|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.ValidFrom%2A>|<xref:System.DateTime.UtcNow%2A>|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.ValidTo%2A>|<xref:System.DateTime.UtcNow%2A> 加 `lifetime`。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="claimsPrincipal" /> 为 <see langword="null" />。  
  
- 或 - 
<paramref name="claimsPrincipal" /> 的 <see cref="P:System.Security.Claims.ClaimsPrincipal.Identities" /> 属性为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="lifetime" /> 小于或等于 <see cref="F:System.TimeSpan.Zero" />。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SessionSecurityToken (System.Security.Claims.ClaimsPrincipal claimsPrincipal, string context, DateTime? validFrom, DateTime? validTo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Claims.ClaimsPrincipal claimsPrincipal, string context, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; validFrom, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; validTo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityToken.#ctor(System.Security.Claims.ClaimsPrincipal,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (claimsPrincipal As ClaimsPrincipal, context As String, validFrom As Nullable(Of DateTime), validTo As Nullable(Of DateTime))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SessionSecurityToken(System::Security::Claims::ClaimsPrincipal ^ claimsPrincipal, System::String ^ context, Nullable&lt;DateTime&gt; validFrom, Nullable&lt;DateTime&gt; validTo);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.Tokens.SessionSecurityToken : System.Security.Claims.ClaimsPrincipal * string * Nullable&lt;DateTime&gt; * Nullable&lt;DateTime&gt; -&gt; System.IdentityModel.Tokens.SessionSecurityToken" Usage="new System.IdentityModel.Tokens.SessionSecurityToken (claimsPrincipal, context, validFrom, validTo)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="claimsPrincipal" Type="System.Security.Claims.ClaimsPrincipal" />
        <Parameter Name="context" Type="System.String" />
        <Parameter Name="validFrom" Type="System.Nullable&lt;System.DateTime&gt;" />
        <Parameter Name="validTo" Type="System.Nullable&lt;System.DateTime&gt;" />
      </Parameters>
      <Docs>
        <param name="claimsPrincipal">从引导标记生成的声明主体。</param>
        <param name="context">一个应用程序特定的可选上下文字符串。</param>
        <param name="validFrom">标记变为有效的时间时刻。 如果为 <see langword="null" />，则指定 <see cref="P:System.DateTime.UtcNow" /></param>
        <param name="validTo">其后时间不再有效的时间时刻。 如果为 <see langword="null" />，则指定应通过将 <see cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime" /> 属性的值添加到 <paramref name="validFrom" /> 参数指定的时间来确定值。</param>
        <summary>用指定的主体和启动令牌，并结合指定的开始时间和过期时间来初始化 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表显示了 <xref:System.IdentityModel.Tokens.SessionSecurityToken> 类的某个实例的初始属性值。  
  
|属性|初始值|  
|--------------|-------------------|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.ClaimsPrincipal%2A>|`claimsPrincipal`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.Context%2A>|`context`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.ContextId%2A>|设置为生成的唯一 ID。|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId%2A>|<xref:System.String.Empty?displayProperty=nameWithType>|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.Id%2A>|设置为生成的唯一 ID。|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.IsPersistent%2A>|`false`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A>|`false`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.KeyEffectiveTime%2A>|设置为由 `ValidFrom` 参数确定的 <xref:System.IdentityModel.Tokens.SessionSecurityToken.ValidFrom%2A> 属性的值。|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.KeyExpirationTime%2A>|由 `ValidTo` 参数确定的 <xref:System.IdentityModel.Tokens.SessionSecurityToken.ValidTo%2A> 属性的值。|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.KeyGeneration%2A>|`null`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.SecurityKeys%2A>|包含生成的128位对称密钥。 **注意：** 默认实现不使用此属性。 签名和加密密钥由处理令牌的 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> 应用的 cookie 转换决定。|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.ValidFrom%2A>|`validFrom` 参数的值，或者，如果 `validFrom` `null`<xref:System.DateTime.UtcNow%2A>，则为。|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.ValidTo%2A>|`validFrom` 参数的值。 如果 `validFrom` `null`，则 <xref:System.IdentityModel.Tokens.SessionSecurityToken.ValidFrom%2A> 属性的值（由 `validFrom` 参数确定）加上 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime%2A?displayProperty=nameWithType> 属性。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="claimsPrincipal" /> 为 <see langword="null" />。  
  
- 或 - 
<paramref name="claimsPrincipal" /> 的 <see cref="P:System.Security.Claims.ClaimsPrincipal.Identities" /> 属性为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">无法验证 <paramref name="validFrom" /> 和 <paramref name="validTo" /> 参数；例如，<paramref name="validTo" /> 指定早于 <paramref name="validFrom" /> 发生的时间。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SessionSecurityToken (System.Security.Claims.ClaimsPrincipal claimsPrincipal, string context, string endpointId, DateTime? validFrom, DateTime? validTo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Claims.ClaimsPrincipal claimsPrincipal, string context, string endpointId, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; validFrom, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; validTo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityToken.#ctor(System.Security.Claims.ClaimsPrincipal,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (claimsPrincipal As ClaimsPrincipal, context As String, endpointId As String, validFrom As Nullable(Of DateTime), validTo As Nullable(Of DateTime))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SessionSecurityToken(System::Security::Claims::ClaimsPrincipal ^ claimsPrincipal, System::String ^ context, System::String ^ endpointId, Nullable&lt;DateTime&gt; validFrom, Nullable&lt;DateTime&gt; validTo);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.Tokens.SessionSecurityToken : System.Security.Claims.ClaimsPrincipal * string * string * Nullable&lt;DateTime&gt; * Nullable&lt;DateTime&gt; -&gt; System.IdentityModel.Tokens.SessionSecurityToken" Usage="new System.IdentityModel.Tokens.SessionSecurityToken (claimsPrincipal, context, endpointId, validFrom, validTo)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="claimsPrincipal" Type="System.Security.Claims.ClaimsPrincipal" />
        <Parameter Name="context" Type="System.String" />
        <Parameter Name="endpointId" Type="System.String" />
        <Parameter Name="validFrom" Type="System.Nullable&lt;System.DateTime&gt;" />
        <Parameter Name="validTo" Type="System.Nullable&lt;System.DateTime&gt;" />
      </Parameters>
      <Docs>
        <param name="claimsPrincipal">从引导标记生成的声明主体。</param>
        <param name="context">一个应用程序特定的可选上下文字符串。</param>
        <param name="endpointId">此标记所绑定的终点结。 空字符串将创建未区分范围的标记。</param>
        <param name="validFrom">标记变为有效的时间时刻。 如果为 <see langword="null" />，则指定 <see cref="P:System.DateTime.UtcNow" />。</param>
        <param name="validTo">其后时间不再有效的时间时刻。 如果为 <see langword="null" />，则指定应通过将 <see cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime" /> 属性的值添加到 <paramref name="validFrom" /> 参数指定的时间来确定值。</param>
        <summary>用指定的主体和启动令牌，并结合指定的开始时间和过期时间来初始化 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 类的新实例。 限定范围为指定的终点的新的标识。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表显示了 <xref:System.IdentityModel.Tokens.SessionSecurityToken> 类的某个实例的初始属性值。  
  
|属性|初始值|  
|--------------|-------------------|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.ClaimsPrincipal%2A>|`claimsPrincipal`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.Context%2A>|`context`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.ContextId%2A>|设置为生成的唯一 ID。|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId%2A>|`endpointId`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.Id%2A>|设置为生成的唯一 ID。|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.IsPersistent%2A>|`false`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A>|`false`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.KeyEffectiveTime%2A>|设置为由 `ValidFrom` 参数确定的 <xref:System.IdentityModel.Tokens.SessionSecurityToken.ValidFrom%2A> 属性的值。|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.KeyExpirationTime%2A>|由 `ValidTo` 参数确定的 <xref:System.IdentityModel.Tokens.SessionSecurityToken.ValidTo%2A> 属性的值。|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.KeyGeneration%2A>|`null`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.SecurityKeys%2A>|包含生成的128位对称密钥。 **注意：** 默认实现不使用此属性。 签名和加密密钥由处理令牌的 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> 应用的 cookie 转换决定。|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.ValidFrom%2A>|`validFrom` 参数的值，或者，如果 `validFrom` `null`<xref:System.DateTime.UtcNow%2A>，则为。|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.ValidTo%2A>|`validFrom` 参数的值。 如果 `validFrom` `null`，则 <xref:System.IdentityModel.Tokens.SessionSecurityToken.ValidFrom%2A> 属性的值（由 `validFrom` 参数确定）加上 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime%2A?displayProperty=nameWithType> 属性。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="claimsPrincipal" /> 为 <see langword="null" />。  
  
- 或 - 
<paramref name="claimsPrincipal" /> 的 <see cref="P:System.Security.Claims.ClaimsPrincipal.Identities" /> 属性为 <see langword="null" />。  
  
- 或 - 
 <paramref name="endpointId" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">无法验证 <paramref name="validFrom" /> 和 <paramref name="validTo" /> 参数；例如，<paramref name="validTo" /> 指定早于 <paramref name="validFrom" /> 发生的时间。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SessionSecurityToken (System.Security.Claims.ClaimsPrincipal claimsPrincipal, System.Xml.UniqueId contextId, string context, string endpointId, TimeSpan lifetime, System.IdentityModel.Tokens.SymmetricSecurityKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Claims.ClaimsPrincipal claimsPrincipal, class System.Xml.UniqueId contextId, string context, string endpointId, valuetype System.TimeSpan lifetime, class System.IdentityModel.Tokens.SymmetricSecurityKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityToken.#ctor(System.Security.Claims.ClaimsPrincipal,System.Xml.UniqueId,System.String,System.String,System.TimeSpan,System.IdentityModel.Tokens.SymmetricSecurityKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (claimsPrincipal As ClaimsPrincipal, contextId As UniqueId, context As String, endpointId As String, lifetime As TimeSpan, key As SymmetricSecurityKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SessionSecurityToken(System::Security::Claims::ClaimsPrincipal ^ claimsPrincipal, System::Xml::UniqueId ^ contextId, System::String ^ context, System::String ^ endpointId, TimeSpan lifetime, System::IdentityModel::Tokens::SymmetricSecurityKey ^ key);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.Tokens.SessionSecurityToken : System.Security.Claims.ClaimsPrincipal * System.Xml.UniqueId * string * string * TimeSpan * System.IdentityModel.Tokens.SymmetricSecurityKey -&gt; System.IdentityModel.Tokens.SessionSecurityToken" Usage="new System.IdentityModel.Tokens.SessionSecurityToken (claimsPrincipal, contextId, context, endpointId, lifetime, key)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="claimsPrincipal" Type="System.Security.Claims.ClaimsPrincipal" />
        <Parameter Name="contextId" Type="System.Xml.UniqueId" />
        <Parameter Name="context" Type="System.String" />
        <Parameter Name="endpointId" Type="System.String" />
        <Parameter Name="lifetime" Type="System.TimeSpan" />
        <Parameter Name="key" Type="System.IdentityModel.Tokens.SymmetricSecurityKey" />
      </Parameters>
      <Docs>
        <param name="claimsPrincipal">与此会话关联的声明主体。</param>
        <param name="contextId">与此标志关联的一个上下文标识符。</param>
        <param name="context">一个应用程序特定的可选上下文字符串。</param>
        <param name="endpointId">此标记所绑定的终点结。 空字符串将创建未区分范围的标记。</param>
        <param name="lifetime">会话令牌的生存期。 <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.ValidFrom" /> 属性将设置为 <see cref="P:System.DateTime.UtcNow" /> ，并且 <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.ValidTo" /> 属性将设置为 <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.ValidFrom" /> 加上该参数指定的时期。</param>
        <param name="key">一个可选的对称会话密钥。</param>
        <summary>使用指定的主体、上下文 ID、上下文、终结点、生存期和密钥初始化 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表显示了 <xref:System.IdentityModel.Tokens.SessionSecurityToken> 类的某个实例的初始属性值。  
  
|属性|初始值|  
|--------------|-------------------|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.ClaimsPrincipal%2A>|`claimsPrincipal`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.Context%2A>|`context`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.ContextId%2A>|`contextId`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId%2A>|`endpointId`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.Id%2A>|设置为生成的唯一 ID。|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.IsPersistent%2A>|`false`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A>|`false`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.KeyEffectiveTime%2A>|<xref:System.DateTime.UtcNow%2A>|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.KeyExpirationTime%2A>|<xref:System.DateTime.UtcNow%2A> 加 `lifetime`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.KeyGeneration%2A>|`null`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.SecurityKeys%2A>|包含 `key` 的单个元素，如果 `key` `null`，则为生成的128位对称密钥。 **注意：** 默认实现不使用此属性。 签名和加密密钥由处理令牌的 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> 应用的 cookie 转换决定。|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.ValidFrom%2A>|<xref:System.DateTime.UtcNow%2A>|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.ValidTo%2A>|<xref:System.DateTime.UtcNow%2A> 加 `lifetime`|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="claimsPrincipal" /> 为 <see langword="null" />。  
  
- 或 - 
<paramref name="claimsPrincipal" /> 的 <see cref="P:System.Security.Claims.ClaimsPrincipal.Identities" /> 属性为 <see langword="null" />。  
  
- 或 - 
 <paramref name="contextId" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="endpointId" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="lifetime" /> 小于或等于 <see cref="F:System.TimeSpan.Zero" />。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SessionSecurityToken (System.Security.Claims.ClaimsPrincipal claimsPrincipal, System.Xml.UniqueId contextId, string context, string endpointId, DateTime validFrom, TimeSpan lifetime, System.IdentityModel.Tokens.SymmetricSecurityKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Claims.ClaimsPrincipal claimsPrincipal, class System.Xml.UniqueId contextId, string context, string endpointId, valuetype System.DateTime validFrom, valuetype System.TimeSpan lifetime, class System.IdentityModel.Tokens.SymmetricSecurityKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityToken.#ctor(System.Security.Claims.ClaimsPrincipal,System.Xml.UniqueId,System.String,System.String,System.DateTime,System.TimeSpan,System.IdentityModel.Tokens.SymmetricSecurityKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (claimsPrincipal As ClaimsPrincipal, contextId As UniqueId, context As String, endpointId As String, validFrom As DateTime, lifetime As TimeSpan, key As SymmetricSecurityKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SessionSecurityToken(System::Security::Claims::ClaimsPrincipal ^ claimsPrincipal, System::Xml::UniqueId ^ contextId, System::String ^ context, System::String ^ endpointId, DateTime validFrom, TimeSpan lifetime, System::IdentityModel::Tokens::SymmetricSecurityKey ^ key);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.Tokens.SessionSecurityToken : System.Security.Claims.ClaimsPrincipal * System.Xml.UniqueId * string * string * DateTime * TimeSpan * System.IdentityModel.Tokens.SymmetricSecurityKey -&gt; System.IdentityModel.Tokens.SessionSecurityToken" Usage="new System.IdentityModel.Tokens.SessionSecurityToken (claimsPrincipal, contextId, context, endpointId, validFrom, lifetime, key)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="claimsPrincipal" Type="System.Security.Claims.ClaimsPrincipal" />
        <Parameter Name="contextId" Type="System.Xml.UniqueId" />
        <Parameter Name="context" Type="System.String" />
        <Parameter Name="endpointId" Type="System.String" />
        <Parameter Name="validFrom" Type="System.DateTime" />
        <Parameter Name="lifetime" Type="System.TimeSpan" />
        <Parameter Name="key" Type="System.IdentityModel.Tokens.SymmetricSecurityKey" />
      </Parameters>
      <Docs>
        <param name="claimsPrincipal">与此会话关联的声明主体。</param>
        <param name="contextId">与此标志关联的一个上下文标识符。</param>
        <param name="context">一个应用程序特定的可选上下文字符串。</param>
        <param name="endpointId">此标记所绑定的终点结。 空字符串将创建未区分范围的标记。</param>
        <param name="validFrom">标记变为有效的时间。</param>
        <param name="lifetime">会话令牌的生存期。 <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.ValidTo" /> 属性将设置为 <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.ValidFrom" /> 加上该参数指定的时期。</param>
        <param name="key">一个可选的对称会话密钥。</param>
        <summary>使用指定的主体、上下文 ID、上下文、终结点、有效时间戳、生存期和密钥初始化 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表显示了 <xref:System.IdentityModel.Tokens.SessionSecurityToken> 类的某个实例的初始属性值。  
  
|属性|初始值|  
|--------------|-------------------|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.ClaimsPrincipal%2A>|`claimsPrincipal`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.Context%2A>|`context`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.ContextId%2A>|如果 `contextId` 为 `null`，则为 `contextId` 或生成的唯一 ID。|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId%2A>|`endpointId`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.Id%2A>|设置为生成的唯一 ID。|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.IsPersistent%2A>|`false`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A>|`false`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.KeyEffectiveTime%2A>|`validFrom`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.KeyExpirationTime%2A>|`validFrom` 加 `lifetime`。|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.KeyGeneration%2A>|`null`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.SecurityKeys%2A>|包含 `key` 的单个元素，如果 `key` `null`，则为生成的128位对称密钥。 **注意：** 默认实现不使用此属性。 签名和加密密钥由处理令牌的 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> 应用的 cookie 转换决定。|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.ValidFrom%2A>|`validFrom`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.ValidTo%2A>|`validFrom` 加 `lifetime`。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="claimsPrincipal" /> 为 <see langword="null" />。  
  
- 或 - 
<paramref name="claimsPrincipal" /> 的 <see cref="P:System.Security.Claims.ClaimsPrincipal.Identities" /> 属性为 <see langword="null" />。  
  
- 或 - 
 <paramref name="contextId" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="endpointId" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="lifetime" /> 小于或等于 <see cref="F:System.TimeSpan.Zero" />。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SessionSecurityToken (System.Security.Claims.ClaimsPrincipal claimsPrincipal, System.Xml.UniqueId contextId, string context, string endpointId, DateTime? validFrom, DateTime? validTo, System.IdentityModel.Tokens.SymmetricSecurityKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Claims.ClaimsPrincipal claimsPrincipal, class System.Xml.UniqueId contextId, string context, string endpointId, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; validFrom, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; validTo, class System.IdentityModel.Tokens.SymmetricSecurityKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityToken.#ctor(System.Security.Claims.ClaimsPrincipal,System.Xml.UniqueId,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.IdentityModel.Tokens.SymmetricSecurityKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (claimsPrincipal As ClaimsPrincipal, contextId As UniqueId, context As String, endpointId As String, validFrom As Nullable(Of DateTime), validTo As Nullable(Of DateTime), key As SymmetricSecurityKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SessionSecurityToken(System::Security::Claims::ClaimsPrincipal ^ claimsPrincipal, System::Xml::UniqueId ^ contextId, System::String ^ context, System::String ^ endpointId, Nullable&lt;DateTime&gt; validFrom, Nullable&lt;DateTime&gt; validTo, System::IdentityModel::Tokens::SymmetricSecurityKey ^ key);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.Tokens.SessionSecurityToken : System.Security.Claims.ClaimsPrincipal * System.Xml.UniqueId * string * string * Nullable&lt;DateTime&gt; * Nullable&lt;DateTime&gt; * System.IdentityModel.Tokens.SymmetricSecurityKey -&gt; System.IdentityModel.Tokens.SessionSecurityToken" Usage="new System.IdentityModel.Tokens.SessionSecurityToken (claimsPrincipal, contextId, context, endpointId, validFrom, validTo, key)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="claimsPrincipal" Type="System.Security.Claims.ClaimsPrincipal" />
        <Parameter Name="contextId" Type="System.Xml.UniqueId" />
        <Parameter Name="context" Type="System.String" />
        <Parameter Name="endpointId" Type="System.String" />
        <Parameter Name="validFrom" Type="System.Nullable&lt;System.DateTime&gt;" />
        <Parameter Name="validTo" Type="System.Nullable&lt;System.DateTime&gt;" />
        <Parameter Name="key" Type="System.IdentityModel.Tokens.SymmetricSecurityKey" />
      </Parameters>
      <Docs>
        <param name="claimsPrincipal">与此会话关联的声明主体。</param>
        <param name="contextId">与此标志关联的一个上下文标识符。</param>
        <param name="context">一个应用程序特定的可选上下文字符串。</param>
        <param name="endpointId">此标记所绑定的终点结。 空字符串将创建未区分范围的标记。</param>
        <param name="validFrom">标记变为有效的时间时刻。 如果为 <see langword="null" />，则指定 <see cref="P:System.DateTime.UtcNow" /></param>
        <param name="validTo">其后时间不再有效的时间时刻。 如果为 <see langword="null" />，则指定应通过将 <see cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime" /> 属性的值添加到 <paramref name="validFrom" /> 参数指定的时间来确定值。</param>
        <param name="key">一个可选的对称会话密钥。</param>
        <summary>使用指定的主体、上下文 ID、上下文、终结点、开始时间、过期时间和密钥初始化 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表显示了 <xref:System.IdentityModel.Tokens.SessionSecurityToken> 类的某个实例的初始属性值。  
  
|属性|初始值|  
|--------------|-------------------|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.ClaimsPrincipal%2A>|`claimsPrincipal`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.Context%2A>|`context`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.ContextId%2A>|`contextId`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId%2A>|`endpointId`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.Id%2A>|设置为生成的唯一 ID。|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.IsPersistent%2A>|`false`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A>|`false`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.KeyEffectiveTime%2A>|设置为由 `ValidFrom` 参数确定的 <xref:System.IdentityModel.Tokens.SessionSecurityToken.ValidFrom%2A> 属性的值。|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.KeyExpirationTime%2A>|由 `ValidTo` 参数确定的 <xref:System.IdentityModel.Tokens.SessionSecurityToken.ValidTo%2A> 属性的值。|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.KeyGeneration%2A>|`null`|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.SecurityKeys%2A>|包含 `key` 的单个元素，如果 `key` `null`，则为生成的128位对称密钥。 **注意：** 默认实现不使用此属性。 签名和加密密钥由处理令牌的 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> 应用的 cookie 转换决定。|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.ValidFrom%2A>|`validFrom` 参数的值，或者，如果 `validFrom` `null`<xref:System.DateTime.UtcNow%2A>，则为。|  
|<xref:System.IdentityModel.Tokens.SessionSecurityToken.ValidTo%2A>|`validFrom` 参数的值。 如果 `validFrom` `null`，则 <xref:System.IdentityModel.Tokens.SessionSecurityToken.ValidFrom%2A> 属性的值（由 `validFrom` 参数确定）加上 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime%2A?displayProperty=nameWithType> 属性。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="claimsPrincipal" /> 为 <see langword="null" />。  
  
- 或 - 
<paramref name="claimsPrincipal" /> 的 <see cref="P:System.Security.Claims.ClaimsPrincipal.Identities" /> 属性为 <see langword="null" />。  
  
- 或 - 
 <paramref name="contextId" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="validFrom" /> 大于或等于 <paramref name="validTo" />。  
  
- 或 - 
 当前时间小于 <paramref name="validTo" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="ClaimsPrincipal">
      <MemberSignature Language="C#" Value="public System.Security.Claims.ClaimsPrincipal ClaimsPrincipal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Claims.ClaimsPrincipal ClaimsPrincipal" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SessionSecurityToken.ClaimsPrincipal" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClaimsPrincipal As ClaimsPrincipal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Claims::ClaimsPrincipal ^ ClaimsPrincipal { System::Security::Claims::ClaimsPrincipal ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ClaimsPrincipal : System.Security.Claims.ClaimsPrincipal" Usage="System.IdentityModel.Tokens.SessionSecurityToken.ClaimsPrincipal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Claims.ClaimsPrincipal</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取与此会话关联的声明主体。</summary>
        <value>声明主体。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public string Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Context" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SessionSecurityToken.Context" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Context As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Context { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Context : string" Usage="System.IdentityModel.Tokens.SessionSecurityToken.Context" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用户指定上下文的值。</summary>
        <value>用户指定上下文的值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用此属性来存储特定于应用程序的上下文。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextId">
      <MemberSignature Language="C#" Value="public System.Xml.UniqueId ContextId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.UniqueId ContextId" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SessionSecurityToken.ContextId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContextId As UniqueId" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::UniqueId ^ ContextId { System::Xml::UniqueId ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ContextId : System.Xml.UniqueId" Usage="System.IdentityModel.Tokens.SessionSecurityToken.ContextId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.UniqueId</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取会话上下文标识符。</summary>
        <value>会话上下文标识符。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 上下文标识符在所有会话令牌中是唯一的。  
  
 <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey> 类使用上下文 ID 和密钥生成来生成 <xref:System.IdentityModel.Tokens.SessionSecurityTokenCache>中的令牌的密钥。  
  
 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> 类将此属性序列化为 `<wsc:SecurityContextToken>` 元素的 `<Identifier>` 子元素。 有关详细信息，请参阅 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%2A?displayProperty=nameWithType> 方法的文档。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey" />
      </Docs>
    </Member>
    <Member MemberName="EndpointId">
      <MemberSignature Language="C#" Value="public string EndpointId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EndpointId" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EndpointId As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ EndpointId { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EndpointId : string" Usage="System.IdentityModel.Tokens.SessionSecurityToken.EndpointId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取限定此标识范围的终点 ID。</summary>
        <value>终点的 ID。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  如果 `null`<xref:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId%2A> 属性，则会按 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> 类处理会话令牌的全局作用域。 这可能会带来潜在的安全风险。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityToken.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="sessionSecurityToken.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">序列化的对象数据。</param>
        <param name="context">与源或目标有关的上下文信息。</param>
        <summary>设置需要序列化会话安全标记的信息 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public override string Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SessionSecurityToken.Id" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Id As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Id { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Id : string" Usage="System.IdentityModel.Tokens.SessionSecurityToken.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取此标记的唯一标识符。</summary>
        <value>令牌 ID。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> 类将此属性序列化为 `<wsc:SecurityContextToken>` 元素的 `Id` 属性。 有关详细信息，请参阅 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%2A?displayProperty=nameWithType> 方法的文档。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPersistent">
      <MemberSignature Language="C#" Value="public bool IsPersistent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPersistent" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SessionSecurityToken.IsPersistent" />
      <MemberSignature Language="VB.NET" Value="Public Property IsPersistent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPersistent { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsPersistent : bool with get, set" Usage="System.IdentityModel.Tokens.SessionSecurityToken.IsPersistent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置指示是否保留此标记表示的 Cookie 的值。</summary>
        <value>如果 cookie 为持久的，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 `true`<xref:System.IdentityModel.Tokens.SessionSecurityToken.IsPersistent%2A> 属性，则会将 cookie 编写为永久性 cookie。 永久性 cookie 在关闭浏览器后保持有效状态，直到其过期。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReferenceMode">
      <MemberSignature Language="C#" Value="public bool IsReferenceMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReferenceMode" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode" />
      <MemberSignature Language="VB.NET" Value="Public Property IsReferenceMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReferenceMode { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsReferenceMode : bool with get, set" Usage="System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置指示引用安全令牌是否在会话模式下运行的值。</summary>
        <value>如果标记在会话模式操作，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在引用模式下，在序列化过程中生成一个简单的项目，令牌材料存储在与令牌处理程序关联的令牌缓存中。 令牌缓存是派生自 <xref:System.IdentityModel.Tokens.SessionSecurityTokenCache>的类的实例。 对于 Web 场方案，令牌缓存必须在场中的所有节点上运行。  
  
> [!IMPORTANT]
>  若要在引用模式下操作，Microsoft 建议为 global.asax.cs 文件中的 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SessionSecurityTokenCreated?displayProperty=nameWithType> 事件提供处理程序，并在 <xref:System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs.SessionToken%2A?displayProperty=nameWithType> 属性中传递的标记上设置 <xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A> 属性。 这将确保会话令牌在每个请求的引用模式下运行，并且优于仅设置会话身份验证模块上的 <xref:System.IdentityModel.Services.SessionAuthenticationModule.IsReferenceMode%2A?displayProperty=nameWithType> 属性。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IdentityModel.Tokens.SessionSecurityTokenCache" />
        <altmember cref="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler" />
        <altmember cref="P:System.IdentityModel.Services.SessionAuthenticationModule.IsReferenceMode" />
      </Docs>
    </Member>
    <Member MemberName="KeyEffectiveTime">
      <MemberSignature Language="C#" Value="public DateTime KeyEffectiveTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime KeyEffectiveTime" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SessionSecurityToken.KeyEffectiveTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeyEffectiveTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime KeyEffectiveTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyEffectiveTime : DateTime" Usage="System.IdentityModel.Tokens.SessionSecurityToken.KeyEffectiveTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取此安全令牌有效的时间。</summary>
        <value>密钥生效的有效时间。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyExpirationTime">
      <MemberSignature Language="C#" Value="public DateTime KeyExpirationTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime KeyExpirationTime" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SessionSecurityToken.KeyExpirationTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeyExpirationTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime KeyExpirationTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyExpirationTime : DateTime" Usage="System.IdentityModel.Tokens.SessionSecurityToken.KeyExpirationTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取此安全令牌失效之后的有效的时间。</summary>
        <value>密钥到期的有效时间。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyGeneration">
      <MemberSignature Language="C#" Value="public System.Xml.UniqueId KeyGeneration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.UniqueId KeyGeneration" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SessionSecurityToken.KeyGeneration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeyGeneration As UniqueId" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::UniqueId ^ KeyGeneration { System::Xml::UniqueId ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyGeneration : System.Xml.UniqueId" Usage="System.IdentityModel.Tokens.SessionSecurityToken.KeyGeneration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.UniqueId</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取该标记中用于密钥生成的标识符。</summary>
        <value>标记中生成密钥的唯一标识符。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IdentityModel.Tokens.SessionSecurityToken.KeyGeneration%2A> 属性在会话令牌中是唯一的。 发出会话令牌时，它只有上下文 ID，可以通过 <xref:System.IdentityModel.Tokens.SessionSecurityToken.ContextId%2A> 属性访问该 ID。 续订会话令牌后，会添加密钥生成。  
  
 <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey> 类使用上下文 ID 和密钥生成来生成 <xref:System.IdentityModel.Tokens.SessionSecurityTokenCache>中的令牌的密钥。  
  
 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> 类将此属性序列化为 `<wsc:SecurityContextToken>` 元素的 `<Instance>` 子元素。 有关详细信息，请参阅 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%2A?displayProperty=nameWithType> 方法的文档。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey" />
      </Docs>
    </Member>
    <Member MemberName="SecureConversationVersion">
      <MemberSignature Language="C#" Value="public Uri SecureConversationVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri SecureConversationVersion" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SessionSecurityToken.SecureConversationVersion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SecureConversationVersion As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ SecureConversationVersion { Uri ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SecureConversationVersion : Uri" Usage="System.IdentityModel.Tokens.SessionSecurityToken.SecureConversationVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 URI，标识用于序列化此会话安全令牌的 WS 安全会话的版本。</summary>
        <value>一个 URI，标识用于序列化此令牌的 WS 安全会话的版本。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> 基类支持 WS 安全会话 Feb2005 和 WS 安全会话1.3。 这些版本的 WS 安全会话的 Uri 分别为 "<http://schemas.xmlsoap.org/ws/2005/02/sc>" 和 "<http://docs.oasis-open.org/ws-sx/ws-secureconversation/200512>"。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SecurityKeys">
      <MemberSignature Language="C#" Value="public override System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Tokens.SecurityKey&gt; SecurityKeys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.IdentityModel.Tokens.SecurityKey&gt; SecurityKeys" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SessionSecurityToken.SecurityKeys" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property SecurityKeys As ReadOnlyCollection(Of SecurityKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IdentityModel::Tokens::SecurityKey ^&gt; ^ SecurityKeys { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IdentityModel::Tokens::SecurityKey ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SecurityKeys : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Tokens.SecurityKey&gt;" Usage="System.IdentityModel.Tokens.SessionSecurityToken.SecurityKeys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Tokens.SecurityKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取与此会话关联的键 。 这通常是一个唯一密钥。</summary>
        <value>与会话关联的密钥。 这通常是一个唯一密钥。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  默认实现不使用此属性。 签名和加密密钥由处理令牌的 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> 应用的 cookie 转换决定。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidFrom">
      <MemberSignature Language="C#" Value="public override DateTime ValidFrom { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime ValidFrom" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SessionSecurityToken.ValidFrom" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ValidFrom As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property DateTime ValidFrom { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.ValidFrom : DateTime" Usage="System.IdentityModel.Tokens.SessionSecurityToken.ValidFrom" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取此标记有效的时间。</summary>
        <value>从标记变为有效的时间。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidTo">
      <MemberSignature Language="C#" Value="public override DateTime ValidTo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime ValidTo" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SessionSecurityToken.ValidTo" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ValidTo As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property DateTime ValidTo { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.ValidTo : DateTime" Usage="System.IdentityModel.Tokens.SessionSecurityToken.ValidTo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取时间不再有效之后的有效的时间。</summary>
        <value>标记之后的时间不再有效。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
