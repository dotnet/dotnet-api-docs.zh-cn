<Type Name="ProfileOptimization" FullName="System.Runtime.ProfileOptimization">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8b4c7a4dd015bf9da84ee6726affc4348bfece0e" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86754295" /></Metadata><TypeSignature Language="C#" Value="public static class ProfileOptimization" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ProfileOptimization extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.ProfileOptimization" />
  <TypeSignature Language="VB.NET" Value="Public Class ProfileOptimization" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProfileOptimization abstract sealed" />
  <TypeSignature Language="F#" Value="type ProfileOptimization = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System.Runtime.Extensions" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="8635d-101">通过基于以前编译中创建的配置文件，执行可能执行的方法的后台编译，提高了需要实时 (JIT) 编译器的应用程序中应用程序域的启动性能。</span><span class="sxs-lookup"><span data-stu-id="8635d-101">Improves the startup performance of application domains in applications that require the just-in-time (JIT) compiler by performing background compilation of methods that are likely to be executed, based on profiles created during previous compilations.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="8635d-102">配置文件优化需要多核计算机。</span><span class="sxs-lookup"><span data-stu-id="8635d-102">Profile optimization requires a multicore computer.</span></span> <span data-ttu-id="8635d-103">这些方法在其他计算机上被忽略。</span><span class="sxs-lookup"><span data-stu-id="8635d-103">The methods are ignored on other computers.</span></span>  
  
 <span data-ttu-id="8635d-104">每次在应用程序域中启动配置文件优化时，都将读取在上一个使用过程中创建的配置文件。</span><span class="sxs-lookup"><span data-stu-id="8635d-104">Each time you initiate profile optimization in an application domain, the profile that was created during the previous use is read.</span></span> <span data-ttu-id="8635d-105">配置文件中的信息用于通过标识在启动过程中最可能执行的方法来指导后台编译。</span><span class="sxs-lookup"><span data-stu-id="8635d-105">The information in the profile is used to guide background compilation by identifying the methods that are most likely to be executed during startup.</span></span> <span data-ttu-id="8635d-106">在多核计算机上，这会增加方法在需要时已编译的机会，使主应用程序线程不必调用 JIT 编译器。</span><span class="sxs-lookup"><span data-stu-id="8635d-106">On multicore computers, this increases the chances that a method is already compiled by the time it is needed so that the main application thread does not have to call the JIT compiler.</span></span>  
  
 <span data-ttu-id="8635d-107">配置文件将在每次使用时被覆盖，因此它始终包含有关启动过程中使用的方法的最新信息。</span><span class="sxs-lookup"><span data-stu-id="8635d-107">The profile file is overwritten on each use, so it always contains the most recent information about which methods are used during startup.</span></span>  
  
 <span data-ttu-id="8635d-108">优化配置文件并不限于应用程序域启动。</span><span class="sxs-lookup"><span data-stu-id="8635d-108">Optimization profiles are not restricted to application domain startup.</span></span> <span data-ttu-id="8635d-109">它们可用于需要大量使用 JIT 编译器的任何活动。</span><span class="sxs-lookup"><span data-stu-id="8635d-109">They can be used for any activity that will require heavy use of the JIT compiler.</span></span> <span data-ttu-id="8635d-110">您可以为应用程序域维护多个配置文件，以便每个此类活动都有其自己的配置文件。</span><span class="sxs-lookup"><span data-stu-id="8635d-110">You can maintain multiple profiles for an application domain so that each such activity has its own profile.</span></span>  
  
 <span data-ttu-id="8635d-111">若要在应用程序域中使用优化配置文件，则必须调用 <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> 方法并指定存储配置文件的文件夹。</span><span class="sxs-lookup"><span data-stu-id="8635d-111">To use optimization profiles in an application domain, you must call the <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> method and specify the folder where profiles are stored.</span></span> <span data-ttu-id="8635d-112">此文件夹必须已存在。</span><span class="sxs-lookup"><span data-stu-id="8635d-112">The folder must already exist.</span></span> <span data-ttu-id="8635d-113">若要开始使用配置文件，请调用 <xref:System.Runtime.ProfileOptimization.StartProfile%2A> 方法并指定配置文件的文件名。</span><span class="sxs-lookup"><span data-stu-id="8635d-113">To begin using a profile, call the <xref:System.Runtime.ProfileOptimization.StartProfile%2A> method and specify the file name of the profile.</span></span> <span data-ttu-id="8635d-114">如果先前未记录该文件，则在第一次使用时创建文件。</span><span class="sxs-lookup"><span data-stu-id="8635d-114">If the file was not recorded previously, it is created on first use.</span></span> <span data-ttu-id="8635d-115">首次创建配置文件时，不会产生任何性能优势。</span><span class="sxs-lookup"><span data-stu-id="8635d-115">There is no performance benefit the first time a profile is created.</span></span>  
  
 <span data-ttu-id="8635d-116">配置文件优化不会更改执行方法的顺序。</span><span class="sxs-lookup"><span data-stu-id="8635d-116">Profile optimization does not change the order in which methods are executed.</span></span> <span data-ttu-id="8635d-117">不会在后台线程上执行方法;如果编译但从不调用方法，则不会使用该方法。</span><span class="sxs-lookup"><span data-stu-id="8635d-117">Methods are not executed on the background thread; if a method is compiled but never called, it is simply not used.</span></span> <span data-ttu-id="8635d-118">例如，如果配置文件已损坏或无法写入指定文件夹 (例如，因为文件夹不存在) ，程序将继续执行，而不进行优化分析。</span><span class="sxs-lookup"><span data-stu-id="8635d-118">If a profile file is corrupt or cannot be written to the specified folder (for example, because the folder does not exist), program execution continues without optimization profiling.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="SetProfileRoot">
      <MemberSignature Language="C#" Value="public static void SetProfileRoot (string directoryPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetProfileRoot(string directoryPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.ProfileOptimization.SetProfileRoot(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetProfileRoot (directoryPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetProfileRoot(System::String ^ directoryPath);" />
      <MemberSignature Language="F#" Value="static member SetProfileRoot : string -&gt; unit" Usage="System.Runtime.ProfileOptimization.SetProfileRoot directoryPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directoryPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directoryPath"><span data-ttu-id="8635d-119">指向某个文件夹的完整路径，其中存储了用于当前应用程序域的配置文件。</span><span class="sxs-lookup"><span data-stu-id="8635d-119">The full path to the folder where profile files are stored for the current application domain.</span></span></param>
        <summary><span data-ttu-id="8635d-120">启用当前应用程序域的优化配置，并设置存储优化配置文件的文件夹。</span><span class="sxs-lookup"><span data-stu-id="8635d-120">Enables optimization profiling for the current application domain, and sets the folder where the optimization profile files are stored.</span></span> <span data-ttu-id="8635d-121">在单核计算机上，此方法被忽略。</span><span class="sxs-lookup"><span data-stu-id="8635d-121">On a single-core computer, the method is ignored.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8635d-122"><xref:System.Runtime.ProfileOptimization.StartProfile%2A>在当前应用程序域中首次调用方法之前，必须先调用此方法。</span><span class="sxs-lookup"><span data-stu-id="8635d-122">You must call this method before you call the <xref:System.Runtime.ProfileOptimization.StartProfile%2A> method for the first time in the current application domain.</span></span> <span data-ttu-id="8635d-123">如果 <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> 在同一个应用程序域中调用多次，则将忽略第一个应用程序域中的所有调用。</span><span class="sxs-lookup"><span data-stu-id="8635d-123">If you call <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> more than once in the same application domain, all calls after the first are ignored.</span></span>  
  
 <span data-ttu-id="8635d-124">指定的文件夹必须已经存在。</span><span class="sxs-lookup"><span data-stu-id="8635d-124">The specified folder must already exist.</span></span> <span data-ttu-id="8635d-125">如果该方法不存在，则调用此方法不会创建它，也不会进行分析。</span><span class="sxs-lookup"><span data-stu-id="8635d-125">If it does not exist, calling this method does not create it, and no profiling occurs.</span></span>  
  
 <span data-ttu-id="8635d-126">在不具有多个内核的计算机上，此方法将被忽略。</span><span class="sxs-lookup"><span data-stu-id="8635d-126">On computers that do not have multiple cores, this method is ignored.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartProfile">
      <MemberSignature Language="C#" Value="public static void StartProfile (string profile);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void StartProfile(string profile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.ProfileOptimization.StartProfile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub StartProfile (profile As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void StartProfile(System::String ^ profile);" />
      <MemberSignature Language="F#" Value="static member StartProfile : string -&gt; unit" Usage="System.Runtime.ProfileOptimization.StartProfile profile" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="profile" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="profile"><span data-ttu-id="8635d-127">要使用的配置文件的文件名。</span><span class="sxs-lookup"><span data-stu-id="8635d-127">The file name of the profile to use.</span></span></param>
        <summary><span data-ttu-id="8635d-128">启动方法的实时 (JIT) 编译，这些方法记录在后台线程上的指定配置文件中。</span><span class="sxs-lookup"><span data-stu-id="8635d-128">Starts just-in-time (JIT) compilation of the methods that were previously recorded in the specified profile file, on a background thread.</span></span> <span data-ttu-id="8635d-129">开始记录当前方法的使用，此记录过程之后将覆盖指定的配置文件。</span><span class="sxs-lookup"><span data-stu-id="8635d-129">Starts the process of recording current method use, which later overwrites the specified profile file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8635d-130">如果指定的配置文件存在于方法指定的文件夹中 <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> ，则使用它所包含的信息来确定在后台线程上编译方法的顺序。</span><span class="sxs-lookup"><span data-stu-id="8635d-130">If the specified profile exists in the folder specified by the <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> method, the information it contains is used to determine the order in which methods are compiled on the background thread.</span></span> <span data-ttu-id="8635d-131"><xref:System.Runtime.ProfileOptimization.StartProfile%2A>方法创建配置文件（如果尚未存在），并启动方法使用的记录。</span><span class="sxs-lookup"><span data-stu-id="8635d-131">The <xref:System.Runtime.ProfileOptimization.StartProfile%2A> method creates the profile if it does not already exist, and initiates the recording of method use.</span></span>  
  
 <span data-ttu-id="8635d-132">仅记录实际调用的方法，而不管它们是在后台线程上还是在主应用程序线程上编译的。</span><span class="sxs-lookup"><span data-stu-id="8635d-132">Only methods that are actually called are recorded, regardless of whether they were compiled on the background thread or on the main application thread.</span></span> <span data-ttu-id="8635d-133">在主应用程序线程上编译方法，前提是该应用程序需要在后台线程编译它之前调用它。</span><span class="sxs-lookup"><span data-stu-id="8635d-133">A method is compiled on the main application thread if the application needs to call it before the background thread has compiled it.</span></span>  
  
 <span data-ttu-id="8635d-134">执行记录的代码跟踪方法的编译速率，包括在后台线程和主线程上编译的方法。</span><span class="sxs-lookup"><span data-stu-id="8635d-134">The code that performs the recording tracks the rate at which methods are compiled, including methods that are compiled on both the background thread and on the main thread.</span></span> <span data-ttu-id="8635d-135">当速率降到预先确定的级别时，记录将停止。</span><span class="sxs-lookup"><span data-stu-id="8635d-135">When the rate falls below a predetermined level, recording stops.</span></span> <span data-ttu-id="8635d-136">如果 JIT 编译速率超过预先确定的上限，则记录也会停止。</span><span class="sxs-lookup"><span data-stu-id="8635d-136">Recording also stops if the rate of JIT compilation exceeds a predetermined upper limit.</span></span>  
  
 <span data-ttu-id="8635d-137">调用此方法将停止以前正在进行的任何记录。</span><span class="sxs-lookup"><span data-stu-id="8635d-137">Calling this method stops any previous recording in progress.</span></span> <span data-ttu-id="8635d-138">使用空配置文件名称调用此方法会停止正在进行的任何记录，并且不会启动新的记录。</span><span class="sxs-lookup"><span data-stu-id="8635d-138">Calling this method with a null profile file name stops any recording in progress and does not start a new recording.</span></span>
  
 <span data-ttu-id="8635d-139">如果 <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> 尚未为当前应用程序域调用方法，或者如果计算机不具有多个内核，则该 <xref:System.Runtime.ProfileOptimization.StartProfile%2A> 方法不起作用。</span><span class="sxs-lookup"><span data-stu-id="8635d-139">If the <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> method has not been called for the current application domain, or if the computer does not have multiple cores, the <xref:System.Runtime.ProfileOptimization.StartProfile%2A> method has no effect.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
