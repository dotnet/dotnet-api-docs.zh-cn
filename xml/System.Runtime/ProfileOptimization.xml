<Type Name="ProfileOptimization" FullName="System.Runtime.ProfileOptimization">
  <Metadata><Meta Name="ms.openlocfilehash" Value="372f6384da76bd4767cdcdf9e6638d6488bb3ef2" /><Meta Name="ms.sourcegitcommit" Value="a8ca33e500a87229bed50d12e09b1347df519648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="10/09/2020" /><Meta Name="ms.locfileid" Value="91917433" /></Metadata><TypeSignature Language="C#" Value="public static class ProfileOptimization" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ProfileOptimization extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.ProfileOptimization" />
  <TypeSignature Language="VB.NET" Value="Public Class ProfileOptimization" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProfileOptimization abstract sealed" />
  <TypeSignature Language="F#" Value="type ProfileOptimization = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Runtime.Extensions" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>通过基于以前编译中创建的配置文件，执行可能执行的方法的后台编译，提高了需要实时 (JIT) 编译器的应用程序中应用程序域的启动性能。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  配置文件优化需要多核计算机。 这些方法在其他计算机上被忽略。  
  
 每次在应用程序域中启动配置文件优化时，都将读取在上一个使用过程中创建的配置文件。 配置文件中的信息用于通过标识在启动过程中最可能执行的方法来指导后台编译。 在多核计算机上，这会增加方法在需要时已编译的机会，使主应用程序线程不必调用 JIT 编译器。  
  
 配置文件将在每次使用时被覆盖，因此它始终包含有关启动过程中使用的方法的最新信息。  
  
 优化配置文件并不限于应用程序域启动。 它们可用于需要大量使用 JIT 编译器的任何活动。 您可以为应用程序域维护多个配置文件，以便每个此类活动都有其自己的配置文件。  
  
 若要在应用程序域中使用优化配置文件，则必须调用 <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> 方法并指定存储配置文件的文件夹。 此文件夹必须已存在。 若要开始使用配置文件，请调用 <xref:System.Runtime.ProfileOptimization.StartProfile%2A> 方法并指定配置文件的文件名。 如果先前未记录该文件，则在第一次使用时创建文件。 首次创建配置文件时，不会产生任何性能优势。  
  
 配置文件优化不会更改执行方法的顺序。 不会在后台线程上执行方法;如果编译但从不调用方法，则不会使用该方法。 例如，如果配置文件已损坏或无法写入指定文件夹 (例如，因为文件夹不存在) ，程序将继续执行，而不进行优化分析。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="SetProfileRoot">
      <MemberSignature Language="C#" Value="public static void SetProfileRoot (string directoryPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetProfileRoot(string directoryPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.ProfileOptimization.SetProfileRoot(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetProfileRoot (directoryPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetProfileRoot(System::String ^ directoryPath);" />
      <MemberSignature Language="F#" Value="static member SetProfileRoot : string -&gt; unit" Usage="System.Runtime.ProfileOptimization.SetProfileRoot directoryPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directoryPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directoryPath">指向某个文件夹的完整路径，其中存储了用于当前应用程序域的配置文件。</param>
        <summary>启用当前应用程序域的优化配置，并设置存储优化配置文件的文件夹。 在单核计算机上，此方法被忽略。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.ProfileOptimization.StartProfile%2A>在当前应用程序域中首次调用方法之前，必须先调用此方法。 如果 <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> 在同一个应用程序域中调用多次，则将忽略第一个应用程序域中的所有调用。  
  
 指定的文件夹必须已经存在。 如果该方法不存在，则调用此方法不会创建它，也不会进行分析。  
  
 在不具有多个内核的计算机上，此方法将被忽略。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartProfile">
      <MemberSignature Language="C#" Value="public static void StartProfile (string profile);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void StartProfile(string profile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.ProfileOptimization.StartProfile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub StartProfile (profile As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void StartProfile(System::String ^ profile);" />
      <MemberSignature Language="F#" Value="static member StartProfile : string -&gt; unit" Usage="System.Runtime.ProfileOptimization.StartProfile profile" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="profile" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="profile">要使用的配置文件的文件名。</param>
        <summary>启动方法的实时 (JIT) 编译，这些方法记录在后台线程上的指定配置文件中。 开始记录当前方法的使用，此记录过程之后将覆盖指定的配置文件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果指定的配置文件存在于方法指定的文件夹中 <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> ，则使用它所包含的信息来确定在后台线程上编译方法的顺序。 <xref:System.Runtime.ProfileOptimization.StartProfile%2A>方法创建配置文件（如果尚未存在），并启动方法使用的记录。  
  
 仅记录实际调用的方法，而不管它们是在后台线程上还是在主应用程序线程上编译的。 在主应用程序线程上编译方法，前提是该应用程序需要在后台线程编译它之前调用它。  
  
 执行记录的代码跟踪方法的编译速率，包括在后台线程和主线程上编译的方法。 当速率降到预先确定的级别时，记录将停止。 如果 JIT 编译速率超过预先确定的上限，则记录也会停止。  
  
 调用此方法将停止以前正在进行的任何记录。 使用空配置文件名称调用此方法会停止正在进行的任何记录，并且不会启动新的记录。
  
 如果 <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> 尚未为当前应用程序域调用方法，或者如果计算机不具有多个内核，则该 <xref:System.Runtime.ProfileOptimization.StartProfile%2A> 方法不起作用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
