<Type Name="MemoryFailPoint" FullName="System.Runtime.MemoryFailPoint">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c1d1da247ada4b7f811a61b4e195c5d5ddf46ace" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83936072" /></Metadata><TypeSignature Language="C#" Value="public sealed class MemoryFailPoint : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MemoryFailPoint extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject implements class System.IDisposable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.MemoryFailPoint" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MemoryFailPoint&#xA;Inherits CriticalFinalizerObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MemoryFailPoint sealed : System::Runtime::ConstrainedExecution::CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="F#" Value="type MemoryFailPoint = class&#xA;    inherit CriticalFinalizerObject&#xA;    interface IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed MemoryFailPoint extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject implements class System.IDisposable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Runtime.ConstrainedExecution.CriticalFinalizerObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="046fc-101">执行一个操作之前检查是否有足够的内存资源。</span><span class="sxs-lookup"><span data-stu-id="046fc-101">Checks for sufficient memory resources before executing an operation.</span></span> <span data-ttu-id="046fc-102">无法继承此类。</span><span class="sxs-lookup"><span data-stu-id="046fc-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="046fc-103">此类用于高级开发。</span><span class="sxs-lookup"><span data-stu-id="046fc-103">This class is intended for use in advanced development.</span></span>  
  
 <span data-ttu-id="046fc-104">创建 <xref:System.Runtime.MemoryFailPoint> 类的实例将创建内存入口。</span><span class="sxs-lookup"><span data-stu-id="046fc-104">Creating an instance of the <xref:System.Runtime.MemoryFailPoint> class creates a memory gate.</span></span> <span data-ttu-id="046fc-105">内存入口在启动需要大量内存的活动之前检查是否有足够的资源。</span><span class="sxs-lookup"><span data-stu-id="046fc-105">A memory gate checks for sufficient resources before initiating an activity that requires a large amount of memory.</span></span> <span data-ttu-id="046fc-106">如果检查失败，将导致引发 <xref:System.InsufficientMemoryException> 异常。</span><span class="sxs-lookup"><span data-stu-id="046fc-106">Failing the check results in an <xref:System.InsufficientMemoryException> exception being thrown.</span></span> <span data-ttu-id="046fc-107">此例外会阻止操作启动，并降低因资源不足而失败的可能性。</span><span class="sxs-lookup"><span data-stu-id="046fc-107">This exception prevents an operation from being started and reduces the possibility of failure due to lack of resources.</span></span> <span data-ttu-id="046fc-108">这使你可以降低性能，避免在代码中的任意位置不正确地处理异常所导致的 <xref:System.OutOfMemoryException> 异常和任何状态损坏。</span><span class="sxs-lookup"><span data-stu-id="046fc-108">This enables you decrease performance to avoid an <xref:System.OutOfMemoryException> exception and any state corruption that may result from improper handling of the exception in arbitrary locations in your code.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="046fc-109">此类型实现 <xref:System.IDisposable> 接口。</span><span class="sxs-lookup"><span data-stu-id="046fc-109">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="046fc-110">在使用完类型后，您应直接或间接释放类型。</span><span class="sxs-lookup"><span data-stu-id="046fc-110">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="046fc-111">若要直接释放类型，请在 `try`/`catch` 块中调用其 <xref:System.IDisposable.Dispose%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="046fc-111">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="046fc-112">若要间接释放类型，请使用 `using`（在 C# 中）或 `Using`（在 Visual Basic 中）等语言构造。</span><span class="sxs-lookup"><span data-stu-id="046fc-112">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="046fc-113">有关详细信息，请参阅 <xref:System.IDisposable> 接口主题中的“使用实现 IDisposable 的对象”一节。</span><span class="sxs-lookup"><span data-stu-id="046fc-113">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="046fc-114">通过引发 <xref:System.InsufficientMemoryException> 异常，应用程序可以区分某个操作将无法完成的估计值和可能已损坏应用程序状态的部分完成操作。</span><span class="sxs-lookup"><span data-stu-id="046fc-114">By throwing an <xref:System.InsufficientMemoryException> exception, an application can distinguish between an estimate that an operation will not be able to complete and  a partially completed operation that may have corrupted the application state.</span></span> <span data-ttu-id="046fc-115">这使应用程序可以降低悲观升级策略的频率，这可能需要卸载当前 <xref:System.AppDomain> 或回收该过程。</span><span class="sxs-lookup"><span data-stu-id="046fc-115">This allows an application to reduce the frequency of a pessimistic escalation policy, which may require unloading the current <xref:System.AppDomain> or recycling the process.</span></span>  
  
 <span data-ttu-id="046fc-116"><xref:System.Runtime.MemoryFailPoint> 检查所有垃圾回收堆中是否有足够的内存和连续的虚拟地址空间，并且可能会增加交换文件的大小。</span><span class="sxs-lookup"><span data-stu-id="046fc-116"><xref:System.Runtime.MemoryFailPoint> checks to see whether sufficient memory and consecutive virtual address space are available in all garbage collection heaps, and may increase the size of the swap file.</span></span>  <span data-ttu-id="046fc-117"><xref:System.Runtime.MemoryFailPoint> 在入口生存期内对内存的长期可用性无保证，但调用方应始终使用 <xref:System.Runtime.MemoryFailPoint.Dispose%2A> 方法来确保释放与 <xref:System.Runtime.MemoryFailPoint> 关联的资源。</span><span class="sxs-lookup"><span data-stu-id="046fc-117"><xref:System.Runtime.MemoryFailPoint> makes no guarantees regarding the long-term availability of the memory during the lifetime of the gate, but callers should always use the <xref:System.Runtime.MemoryFailPoint.Dispose%2A> method to ensure that resources associated with <xref:System.Runtime.MemoryFailPoint> are released.</span></span>  
  
 <span data-ttu-id="046fc-118">若要使用内存入口，必须创建一个 <xref:System.Runtime.MemoryFailPoint> 对象，并指定下一操作应使用的内存量（MB）。</span><span class="sxs-lookup"><span data-stu-id="046fc-118">To use a memory gate, you must create a <xref:System.Runtime.MemoryFailPoint> object and specify the number of megabytes (MB) of memory that the next operation is expected to use.</span></span> <span data-ttu-id="046fc-119">如果没有足够的内存可用，则会引发 <xref:System.InsufficientMemoryException> 异常。</span><span class="sxs-lookup"><span data-stu-id="046fc-119">If enough memory is not available, an <xref:System.InsufficientMemoryException> exception is thrown.</span></span>  
  
 <span data-ttu-id="046fc-120">构造函数的参数必须是一个正整数。</span><span class="sxs-lookup"><span data-stu-id="046fc-120">The parameter of the constructor must be a positive integer.</span></span> <span data-ttu-id="046fc-121">负值引发 <xref:System.ArgumentOutOfRangeException> 异常。</span><span class="sxs-lookup"><span data-stu-id="046fc-121">A negative value raises an <xref:System.ArgumentOutOfRangeException> exception.</span></span>  
  
 <span data-ttu-id="046fc-122"><xref:System.Runtime.MemoryFailPoint> 以 16 MB 的粒度运行。</span><span class="sxs-lookup"><span data-stu-id="046fc-122"><xref:System.Runtime.MemoryFailPoint> operates at a granularity of 16 MB.</span></span> <span data-ttu-id="046fc-123">小于 16 MB 的任何值将被视为 16 MB，其他值将被视为 16 MB 的下一个最大值。</span><span class="sxs-lookup"><span data-stu-id="046fc-123">Any values smaller than 16 MB are treated as 16 MB, and other values are treated as the next largest multiple of 16 MB.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="046fc-124"><xref:System.Runtime.MemoryFailPoint> 使应用程序的速度缓慢，以避免因损坏而导致内存不足。</span><span class="sxs-lookup"><span data-stu-id="046fc-124"><xref:System.Runtime.MemoryFailPoint> enables an application to slow itself to avoid running out of memory in a corrupting manner.</span></span>  <span data-ttu-id="046fc-125">它应在词法范围内使用。</span><span class="sxs-lookup"><span data-stu-id="046fc-125">It should be used within a lexical scope.</span></span>  <span data-ttu-id="046fc-126">下面的示例启动线程以处理工作队列中的项。</span><span class="sxs-lookup"><span data-stu-id="046fc-126">The following example launches threads to process items in a work queue.</span></span>  <span data-ttu-id="046fc-127">在启动每个线程之前，将使用 <xref:System.Runtime.MemoryFailPoint>来检查可用内存资源。</span><span class="sxs-lookup"><span data-stu-id="046fc-127">Before each thread is launched, the available memory resources are checked using <xref:System.Runtime.MemoryFailPoint>.</span></span>  <span data-ttu-id="046fc-128">如果引发了异常，则在启动下一个线程之前，main 方法会一直等待，直到有可用的内存。</span><span class="sxs-lookup"><span data-stu-id="046fc-128">If an exception is thrown, the main method waits until memory is available before launching the next thread.</span></span>  
  
 [!code-csharp[MemoryFailPoint#1](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MemoryFailPoint (int sizeInMegabytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 sizeInMegabytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sizeInMegabytes As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MemoryFailPoint(int sizeInMegabytes);" />
      <MemberSignature Language="F#" Value="new System.Runtime.MemoryFailPoint : int -&gt; System.Runtime.MemoryFailPoint" Usage="new System.Runtime.MemoryFailPoint sizeInMegabytes" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="sizeInMegabytes" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sizeInMegabytes"><span data-ttu-id="046fc-129">需要的内存大小（以兆字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="046fc-129">The required memory size, in megabytes.</span></span> <span data-ttu-id="046fc-130">这必须是一正值。</span><span class="sxs-lookup"><span data-stu-id="046fc-130">This must be a positive value.</span></span></param>
        <summary><span data-ttu-id="046fc-131">初始化 <see cref="T:System.Runtime.MemoryFailPoint" /> 类的新实例，指定成功执行所需的内存量。</span><span class="sxs-lookup"><span data-stu-id="046fc-131">Initializes a new instance of the <see cref="T:System.Runtime.MemoryFailPoint" /> class, specifying the amount of memory required for successful execution.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="046fc-132">应用程序处理工作项所用的内存量可以确定凭经验。</span><span class="sxs-lookup"><span data-stu-id="046fc-132">The amount of memory used by your application to process a work item can be determined empirically.</span></span>  <span data-ttu-id="046fc-133">若要估计应用程序处理请求所需的内存量，请考虑使用 <xref:System.GC.GetTotalMemory%2A?displayProperty=nameWithType> 方法来确定调用处理工作项的方法之前和之后可用的内存量。</span><span class="sxs-lookup"><span data-stu-id="046fc-133">To estimate the amount of memory your application needs to process a request, consider using the <xref:System.GC.GetTotalMemory%2A?displayProperty=nameWithType> method to determine the amount of memory available before and after calling the method that processes the work item.</span></span> <span data-ttu-id="046fc-134">请参阅 <xref:System.Runtime.MemoryFailPoint> 类，了解用于动态确定 `sizeInMegabytes` 参数的值的代码示例。</span><span class="sxs-lookup"><span data-stu-id="046fc-134">See the <xref:System.Runtime.MemoryFailPoint> class for a code example that dynamically determines the value for the `sizeInMegabytes` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="046fc-135">下面的示例演示如何在执行时确定方法所需的内存量。</span><span class="sxs-lookup"><span data-stu-id="046fc-135">The following example demonstrates how to determine the amount of memory a method requires when executing.</span></span> <span data-ttu-id="046fc-136">此代码示例是为 <xref:System.Runtime.MemoryFailPoint> 类提供的更大示例的一部分。</span><span class="sxs-lookup"><span data-stu-id="046fc-136">This code example is part of a larger example provided for the <xref:System.Runtime.MemoryFailPoint> class.</span></span>  
  
 [!code-csharp[MemoryFailPoint#2](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="046fc-137">指定的内存大小为负数。</span><span class="sxs-lookup"><span data-stu-id="046fc-137">The specified memory size is negative.</span></span></exception>
        <exception cref="T:System.InsufficientMemoryException"><span data-ttu-id="046fc-138">没有足够的内存来开始执行由门保护的代码。</span><span class="sxs-lookup"><span data-stu-id="046fc-138">There is insufficient memory to begin execution of the code protected by the gate.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="memoryFailPoint.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="046fc-139">释放 <see cref="T:System.Runtime.MemoryFailPoint" /> 使用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="046fc-139">Releases all resources used by the <see cref="T:System.Runtime.MemoryFailPoint" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="046fc-140">在完成使用 <xref:System.Runtime.MemoryFailPoint.Dispose%2A> 后，应调用 <xref:System.Runtime.MemoryFailPoint>。</span><span class="sxs-lookup"><span data-stu-id="046fc-140">Call <xref:System.Runtime.MemoryFailPoint.Dispose%2A> when you are finished using the <xref:System.Runtime.MemoryFailPoint>.</span></span> <span data-ttu-id="046fc-141"><xref:System.Runtime.MemoryFailPoint.Dispose%2A> 方法使 <xref:System.Runtime.MemoryFailPoint> 处于不可用状态。</span><span class="sxs-lookup"><span data-stu-id="046fc-141">The <xref:System.Runtime.MemoryFailPoint.Dispose%2A> method leaves the <xref:System.Runtime.MemoryFailPoint> in an unusable state.</span></span> <span data-ttu-id="046fc-142">调用 <xref:System.Runtime.MemoryFailPoint>后，必须释放对 <xref:System.Runtime.MemoryFailPoint> 的所有引用，以便垃圾回收器可以回收 <xref:System.Runtime.MemoryFailPoint> 占用的内存。</span><span class="sxs-lookup"><span data-stu-id="046fc-142">After calling <xref:System.Runtime.MemoryFailPoint>, you must release all references to the <xref:System.Runtime.MemoryFailPoint> so the garbage collector can reclaim the memory that the <xref:System.Runtime.MemoryFailPoint> was occupying.</span></span> <span data-ttu-id="046fc-143">有关详细信息，请参阅[清理非托管资源](/dotnet/standard/garbage-collection/unmanaged)和[实现 Dispose 方法](/dotnet/standard/garbage-collection/implementing-dispose)。</span><span class="sxs-lookup"><span data-stu-id="046fc-143">For more information, see [Cleaning Up Unmanaged Resources](/dotnet/standard/garbage-collection/unmanaged) and [Implementing a Dispose Method](/dotnet/standard/garbage-collection/implementing-dispose).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="046fc-144">每次释放对 <xref:System.Runtime.MemoryFailPoint.Dispose%2A> 的最后一个引用前，均应调用 <xref:System.Runtime.MemoryFailPoint>。</span><span class="sxs-lookup"><span data-stu-id="046fc-144">Always call <xref:System.Runtime.MemoryFailPoint.Dispose%2A> before you release your last reference to the <xref:System.Runtime.MemoryFailPoint>.</span></span> <span data-ttu-id="046fc-145">否则，在垃圾回收器调用 <xref:System.Runtime.MemoryFailPoint> 对象的 `Finalize` 方法之前，该对象正在使用的资源不会被释放。</span><span class="sxs-lookup"><span data-stu-id="046fc-145">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Runtime.MemoryFailPoint> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MemoryFailPoint ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MemoryFailPoint ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="memoryFailPoint.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="046fc-146">确保垃圾回收器回收 <see cref="T:System.Runtime.MemoryFailPoint" /> 对象时释放资源并执行其他清理操作。</span><span class="sxs-lookup"><span data-stu-id="046fc-146">Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <see cref="T:System.Runtime.MemoryFailPoint" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="046fc-147">当当前对象准备好完成时，垃圾回收器将调用 <xref:System.Runtime.MemoryFailPoint.Finalize%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="046fc-147">The garbage collector calls the <xref:System.Runtime.MemoryFailPoint.Finalize%2A> method when the current object is ready to be finalized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Finalize" />
      </Docs>
    </Member>
  </Members>
</Type>
