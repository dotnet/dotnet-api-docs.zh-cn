<Type Name="IEndpointBehavior" FullName="System.ServiceModel.Description.IEndpointBehavior">
  <Metadata><Meta Name="ms.openlocfilehash" Value="283b414fd4ccba347996041278c44133845b9d7e" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83933399" /></Metadata><TypeSignature Language="C#" Value="public interface IEndpointBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEndpointBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IEndpointBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEndpointBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IEndpointBehavior" />
  <TypeSignature Language="F#" Value="type IEndpointBehavior = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
    <AssemblyVersion>4.5.0.3</AssemblyVersion>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
    <AssemblyVersion>4.7.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System.ServiceModel" FromVersion="4.0.0.0" To="System.ServiceModel.Primitives" ToVersion="4.6.0.0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0" />
    <TypeForwarding From="System.ServiceModel" FromVersion="4.0.0.0" To="System.ServiceModel.Primitives" ToVersion="4.7.0.0" FrameworkAlternate="dotnet-plat-ext-3.1;dotnet-plat-ext-5.0" />
    <TypeForwarding From="System.ServiceModel" FromVersion="4.0.0.0" To="System.ServiceModel.Primitives" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
  </TypeForwardingChain>
  <Interfaces />
  <Docs>
    <summary>实现可用于扩展服务或客户端应用程序中终结点的运行时行为的方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 实现 <xref:System.ServiceModel.Description.IEndpointBehavior> 接口可以在应用程序级别，为客户端或服务应用程序修改、检查或扩展终结点范围内的某些执行方面。  
  
-   使用 <xref:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters%2A> 方法可以在运行时传递自定义数据，从而使绑定支持自定义行为。  
  
-   使用 <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> 方法可以在客户端应用程序中修改、检查或插入对终结点中的扩展。  
  
-   使用 <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> 方法可以在服务应用程序中修改、检查或插入对终结点范围执行的扩展。  
  
-   使用 <xref:System.ServiceModel.Description.IEndpointBehavior.Validate%2A> 方法可以确认 <xref:System.ServiceModel.Description.ServiceEndpoint> 是否满足特定需求。 这可用于确保终结点启用某一配置设置、支持特定功能和其他要求。  
  
 <xref:System.ServiceModel.Description.IEndpointBehavior> 对象可以利用这些方法中的任何一种，但通常只有一种方法是重要的;在这种情况下，未使用的方法可以返回，而不执行任何操作。  
  
> [!NOTE]
>  所有 <xref:System.ServiceModel.Description.IEndpointBehavior> 方法会将 <xref:System.ServiceModel.Description.ServiceEndpoint> 对象作为参数传递。 此参数只用于检查；如果您修改了 <xref:System.ServiceModel.Description.ServiceEndpoint> 对象，则执行行为将是不确定的。  
  
 通常，<xref:System.ServiceModel.Description.IEndpointBehavior> 对象用于访问服务应用程序中的 <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType>、<xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType>、<xref:System.ServiceModel.Dispatcher.EndpointDispatcher?displayProperty=nameWithType> 和 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher?displayProperty=nameWithType> 对象的各个属性，以及客户端应用程序中的 <xref:System.ServiceModel.Dispatcher.ClientRuntime?displayProperty=nameWithType> 和 <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType> 对象的各个属性。 此外，您还可分别通过使用 <xref:System.ServiceModel.Dispatcher.ClientRuntime.CallbackDispatchRuntime%2A?displayProperty=nameWithType> 和 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.CallbackClientRuntime%2A?displayProperty=nameWithType> 属性来访问双向客户端和服务的属性。  
  
 有关可用的各种属性和自定义的说明，请参阅[扩展 ServiceHost 和服务模型层](/dotnet/framework/wcf/extending/extending-servicehost-and-the-service-model-layer)。  
  
 确定自定义后（并在必要时实现的自定义接口），并且 <xref:System.ServiceModel.Description.IEndpointBehavior> 确定为适当的自定义范围后，必须通过实现 <xref:System.ServiceModel.Description.IEndpointBehavior> 并将终结点行为添加到运行时，将自定义插入到 Windows Communication Foundation （WCF）运行时。  
  
 有两种方法可以将该行为添加到运行时：  
  
-   以编程方式，先将自定义终结点行为添加到 <xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A> 属性，然后打开服务主机（位于服务应用程序中）或通道工厂（位于客户端应用程序中）。  
  
-   使用应用程序配置文件配置该行为。 有关详细信息，请参阅[&lt;behaviorExtensions&gt;](/dotnet/framework/configure-apps/file-schema/wcf/behaviorextensions)。  
  
 若要执行服务自定义计划任务，则必须先将 <xref:System.ServiceModel.Description.IEndpointBehavior> 对象添加到 <xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A?displayProperty=nameWithType> 属性，然后构造服务运行时，该构造操作是在对 <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> 调用 <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType> 方法时执行的。 若要执行客户端自定义任务，则必须对 <xref:System.ServiceModel.Description.IEndpointBehavior> 调用 <xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A?displayProperty=nameWithType> 方法或 <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> 方法之前，先将 <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> 对象添加到 <xref:System.ServiceModel.ChannelFactory%601> 属性。  
  
   
  
## Examples  
 下面的代码示例演示了在服务应用程序中添加 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> 对象的终结点行为的实现。 在此情况下，`EndpointBehaviorMessageInspector` 类将通过使用应用程序配置文件，实现 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> 以检查入站和出站消息，实现 <xref:System.ServiceModel.Description.IEndpointBehavior> 接口以将检查器类插入该行为应用到的所有终结点的检查系统，以及实现 <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> 以启用消息检查器行为。  
  
 第一步是实现消息检查器。  
  
 [!code-csharp[IEndpointBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#2)]  
  
 下面的代码示例演示了如何使用 <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> 方法将消息检查器添加到 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> 属性。  
  
 [!code-csharp[IEndpointBehavior#4](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#4)]  
  
 下面的代码示例演示了如何实现 <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>，以便从配置文件使用消息检查器行为。  
  
 [!code-csharp[IEndpointBehavior#3](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#3)]  
  
 最后，下面的配置文件演示了如何从配置使用前面的示例。  
  
 [!code-xml[IEndpointBehavior#5](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/hostapplication.exe.config#5)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddBindingParameters (endpoint As ServiceEndpoint, bindingParameters As BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberSignature Language="F#" Value="abstract member AddBindingParameters : System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit" Usage="iEndpointBehavior.AddBindingParameters (endpoint, bindingParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="endpoint">要修改的终结点。</param>
        <param name="bindingParameters">绑定元素支持该行为所需的对象。</param>
        <summary>实现此方法可以在运行时将数据传递给绑定，从而支持自定义行为。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 实现 <xref:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters%2A> 方法可以向绑定元素提供其支持终结点行为所需的其他对象。 如果在此处添加绑定参数，则在创建通道侦听器或通道工厂时，绑定将会查找这些对象。 通常，你可通过实现 <xref:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters%2A> 方法，来将有关终结点的信息传递给自定义绑定元素，以使其能正确生成支持通道。 如果无需任何修改，则不返回值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyClientBehavior">
      <MemberSignature Language="C#" Value="public void ApplyClientBehavior (System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.ClientRuntime clientRuntime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyClientBehavior(class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.ClientRuntime clientRuntime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyClientBehavior (endpoint As ServiceEndpoint, clientRuntime As ClientRuntime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyClientBehavior(System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::ClientRuntime ^ clientRuntime);" />
      <MemberSignature Language="F#" Value="abstract member ApplyClientBehavior : System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.ClientRuntime -&gt; unit" Usage="iEndpointBehavior.ApplyClientBehavior (endpoint, clientRuntime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="clientRuntime" Type="System.ServiceModel.Dispatcher.ClientRuntime" />
      </Parameters>
      <Docs>
        <param name="endpoint">要自定义的终结点。</param>
        <param name="clientRuntime">要自定义的客户端运行时。</param>
        <summary>在终结点范围内实现客户端的修改或扩展。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 实现 <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> 方法可以在通过特定终结点使用的所有消息范围内或针对特定操作，查看、修改或插入对客户端运行时的自定义扩展。 有关利用客户端运行时对象可进行的自定义的详细信息，请参见 <xref:System.ServiceModel.Dispatcher.ClientRuntime> 和 <xref:System.ServiceModel.Dispatcher.ClientOperation>。  
  
 如果该行为仅用于服务应用程序中，则建议 <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> 方法引发 <xref:System.NotImplementedException>。  
  
 由于其他行为可能已经在运行时中添加或移除了某些操作，所以无法保证说明中的操作的数目与 <xref:System.ServiceModel.Dispatcher.DispatchOperation> 属性中的<xref:System.ServiceModel.Dispatcher.DispatchRuntime.Operations%2A>{3} 对象数目相等。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.EndpointDispatcher endpointDispatcher);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.EndpointDispatcher endpointDispatcher) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyDispatchBehavior (endpoint As ServiceEndpoint, endpointDispatcher As EndpointDispatcher)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::EndpointDispatcher ^ endpointDispatcher);" />
      <MemberSignature Language="F#" Value="abstract member ApplyDispatchBehavior : System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.EndpointDispatcher -&gt; unit" Usage="iEndpointBehavior.ApplyDispatchBehavior (endpoint, endpointDispatcher)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="endpointDispatcher" Type="System.ServiceModel.Dispatcher.EndpointDispatcher" />
      </Parameters>
      <Docs>
        <param name="endpoint">公开协定的终结点。</param>
        <param name="endpointDispatcher">要修改或扩展的终结点调度程序。</param>
        <summary>在终结点范围内实现服务的修改或扩展。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 实现 <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> 方法可以在所有消息范围内或针对特定操作，查看、修改或扩展服务运行时。 有关可在服务应用程序中进行的自定义的详细信息，请参见 <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType> 和 <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType>。  
  
 如果该行为仅用于客户端应用程序中，则建议 <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> 方法引发 <xref:System.NotImplementedException> 异常。  
  
 注意，使用回调协定时，说明中可能会存在两个同名的操作（每个方向一个操作）。 如果您要循环执行操作，则就必须在终结点 <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType> 和 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.CallbackClientRuntime%2A?displayProperty=nameWithType> 属性返回的内容之间关联消息方向。  
  
 此外，由于其他行为可能已经在运行时中添加或移除了某些操作，所以无法保证说明中的操作数目同 <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> 属性中的 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.Operations%2A?displayProperty=nameWithType> 对象数目相等。  
  
   
  
## Examples  
 下面的代码示例演示了在服务应用程序中添加 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> 对象的终结点行为的实现。 在此情况下，`EndpointBehaviorMessageInspector` 类将通过使用应用程序配置文件，实现 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> 以检查入站和出站消息，实现 <xref:System.ServiceModel.Description.IEndpointBehavior> 接口以将检查器类插入该行为应用到的所有终结点的检查系统，以及实现 <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> 以启用消息检查器行为。  
  
 第一步是实现消息检查器。  
  
 [!code-csharp[IEndpointBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#2)]  
  
 下面的代码示例演示了如何使用 <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> 方法将消息检查器添加到 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> 属性。  
  
 [!code-csharp[IEndpointBehavior#4](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#4)]  
  
 下面的代码示例演示了如何实现 <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>，以便从配置文件使用消息检查器行为。  
  
 [!code-csharp[IEndpointBehavior#3](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#3)]  
  
 最后，下面的配置文件演示了如何从配置使用前面的示例。  
  
 [!code-xml[IEndpointBehavior#5](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/hostapplication.exe.config#5)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.ServiceEndpoint endpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.ServiceEndpoint endpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.Validate(System.ServiceModel.Description.ServiceEndpoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Validate (endpoint As ServiceEndpoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::ServiceEndpoint ^ endpoint);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.ServiceModel.Description.ServiceEndpoint -&gt; unit" Usage="iEndpointBehavior.Validate endpoint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
      </Parameters>
      <Docs>
        <param name="endpoint">要验证的终结点。</param>
        <summary>实现此方法可以确认终结点是否满足某些设定条件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 实现 <xref:System.ServiceModel.Description.IEndpointBehavior.Validate%2A> 方法可以检查结构，从而可以确认所有条件集。 要使用此方法，并不一定要在 <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> 或 <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> 中执行自定义。 如果终结点通过验证，则返回；否则，引发异常。  
  
 例如，可以使用 <xref:System.ServiceModel.Description.IEndpointBehavior.Validate%2A> 方法以确保所有终结点都使用一个已批准的合作绑定。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
