<Type Name="WebServiceEndpoint" FullName="System.ServiceModel.Description.WebServiceEndpoint">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6b37da97e0f71519b65ae61a9cf520718376a87f" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="70496663" /></Metadata><TypeSignature Language="C#" Value="public abstract class WebServiceEndpoint : System.ServiceModel.Description.ServiceEndpoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit WebServiceEndpoint extends System.ServiceModel.Description.ServiceEndpoint" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.WebServiceEndpoint" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WebServiceEndpoint&#xA;Inherits ServiceEndpoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebServiceEndpoint abstract : System::ServiceModel::Description::ServiceEndpoint" />
  <TypeSignature Language="F#" Value="type WebServiceEndpoint = class&#xA;    inherit ServiceEndpoint" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ServiceModel.Description.ServiceEndpoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>带有固定 <see cref="T:System.ServiceModel.WebHttpBinding" /> 绑定的标准终结点。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 这是一个没有公共构造函数或受保护构造函数的抽象基类，不应由开发人员扩展。 它是 <xref:System.ServiceModel.Description.WebHttpEndpoint> 和 <xref:System.ServiceModel.Description.WebScriptEndpoint> 类的基类。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ContentTypeMapper">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.WebContentTypeMapper ContentTypeMapper { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Channels.WebContentTypeMapper ContentTypeMapper" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Description.WebServiceEndpoint.ContentTypeMapper" />
      <MemberSignature Language="VB.NET" Value="Public Property ContentTypeMapper As WebContentTypeMapper" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::Channels::WebContentTypeMapper ^ ContentTypeMapper { System::ServiceModel::Channels::WebContentTypeMapper ^ get(); void set(System::ServiceModel::Channels::WebContentTypeMapper ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContentTypeMapper : System.ServiceModel.Channels.WebContentTypeMapper with get, set" Usage="System.ServiceModel.Description.WebServiceEndpoint.ContentTypeMapper" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.WebContentTypeMapper</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置与 <see cref="T:System.ServiceModel.Channels.WebContentTypeMapper" /> 关联的 <see cref="T:System.ServiceModel.Description.WebServiceEndpoint" />。</summary>
        <value>Web 内容类型映射器。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CrossDomainScriptAccessEnabled">
      <MemberSignature Language="C#" Value="public bool CrossDomainScriptAccessEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CrossDomainScriptAccessEnabled" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Description.WebServiceEndpoint.CrossDomainScriptAccessEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property CrossDomainScriptAccessEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CrossDomainScriptAccessEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CrossDomainScriptAccessEnabled : bool with get, set" Usage="System.ServiceModel.Description.WebServiceEndpoint.CrossDomainScriptAccessEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否为 <see cref="T:System.ServiceModel.Description.WebServiceEndpoint" /> 启用了跨域脚本访问。</summary>
        <value>如果启用跨域脚本访问，则为 <see langword="true" />，否则为 <see langword="false" />。 </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HostNameComparisonMode">
      <MemberSignature Language="C#" Value="public System.ServiceModel.HostNameComparisonMode HostNameComparisonMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceModel.HostNameComparisonMode HostNameComparisonMode" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Description.WebServiceEndpoint.HostNameComparisonMode" />
      <MemberSignature Language="VB.NET" Value="Public Property HostNameComparisonMode As HostNameComparisonMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::HostNameComparisonMode HostNameComparisonMode { System::ServiceModel::HostNameComparisonMode get(); void set(System::ServiceModel::HostNameComparisonMode value); };" />
      <MemberSignature Language="F#" Value="member this.HostNameComparisonMode : System.ServiceModel.HostNameComparisonMode with get, set" Usage="System.ServiceModel.Description.WebServiceEndpoint.HostNameComparisonMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.HostNameComparisonMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示在对 URI 进行匹配时，是否使用主机名来访问服务。</summary>
        <value>一个值，该值指示在对 URI 进行匹配时，是否使用主机名来访问服务。 默认值为 <see cref="F:System.ServiceModel.HostNameComparisonMode.StrongWildcard" />，表示忽略匹配项中的主机名。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">所设置的值不是有效的 <see cref="P:System.ServiceModel.Configuration.WSDualHttpBindingElement.HostNameComparisonMode" /> 值。</exception>
      </Docs>
    </Member>
    <Member MemberName="MaxBufferPoolSize">
      <MemberSignature Language="C#" Value="public long MaxBufferPoolSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxBufferPoolSize" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Description.WebServiceEndpoint.MaxBufferPoolSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxBufferPoolSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxBufferPoolSize { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaxBufferPoolSize : int64 with get, set" Usage="System.ServiceModel.Description.WebServiceEndpoint.MaxBufferPoolSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置可为缓冲区管理器分配的最大内存量，该管理器管理使用此绑定的终结点所需的缓冲区。</summary>
        <value>配置了此绑定的终结点所使用的缓冲池的最大大小（以字节为单位）。 默认值为 65,536 字节。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Channels.BufferManager> 尝试利用缓冲池将使用缓冲区的成本降至最低。 当消息离开通道时，服务需要使用缓冲区来处理这些消息。 如果缓冲池中的内存不足，无法处理消息负载，则 <xref:System.ServiceModel.Channels.BufferManager> 必须从 CLR 堆分配更多内存，而这会增加垃圾回收的系统开销。 从 CLR 垃圾堆进行大量分配表明缓冲池太小，可以通过提高 <xref:System.ServiceModel.WebHttpBinding.MaxBufferPoolSize%2A> 限制来实现更大的内存分配，从而提高性能。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxBufferSize">
      <MemberSignature Language="C#" Value="public int MaxBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Description.WebServiceEndpoint.MaxBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxBufferSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxBufferSize : int with get, set" Usage="System.ServiceModel.Description.WebServiceEndpoint.MaxBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置为从通道接收消息的消息缓冲区管理器分配并供其使用的最大内存量。</summary>
        <value>可供消息缓冲区管理器使用的最大内存量（以字节为单位）。 默认值为 524,288 (0x80000) 字节。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通过使用缓冲池，<xref:System.ServiceModel.Channels.BufferManager> 将使用缓冲区的成本降至最低。 当消息离开通道时，服务需要使用缓冲区来处理这些消息。 如果缓冲池中的内存不足，无法处理消息负载，则 <xref:System.ServiceModel.Channels.BufferManager> 必须从 CLR 堆分配更多内存，而这会增加垃圾回收的系统开销。 从 CLR 垃圾堆进行大量分配表明缓冲池太小，可以通过提高 <xref:System.ServiceModel.HttpBindingBase.MaxBufferPoolSize%2A> 限制来实现更大的内存分配，从而提高性能。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">设置的值小于或等于零。</exception>
      </Docs>
    </Member>
    <Member MemberName="MaxReceivedMessageSize">
      <MemberSignature Language="C#" Value="public long MaxReceivedMessageSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxReceivedMessageSize" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Description.WebServiceEndpoint.MaxReceivedMessageSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxReceivedMessageSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxReceivedMessageSize { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaxReceivedMessageSize : int64 with get, set" Usage="System.ServiceModel.Description.WebServiceEndpoint.MaxReceivedMessageSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置绑定可处理的消息的最大大小。</summary>
        <value>绑定可处理的最大消息大小（以字节为单位）。 默认值为 65,536 字节。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.ServiceModel.WebHttpBinding> 的服务能够在网络上接收的消息的大小受为每个消息分配的内存量的限制。 对消息大小进行的此限制旨在降低遭受拒绝服务 (DoS) 攻击的可能性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">值小于零。</exception>
        <exception cref="T:System.ServiceModel.QuotaExceededException">消息超出分配的最大大小。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReaderQuotas">
      <MemberSignature Language="C#" Value="public System.Xml.XmlDictionaryReaderQuotas ReaderQuotas { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlDictionaryReaderQuotas ReaderQuotas" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Description.WebServiceEndpoint.ReaderQuotas" />
      <MemberSignature Language="VB.NET" Value="Public Property ReaderQuotas As XmlDictionaryReaderQuotas" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlDictionaryReaderQuotas ^ ReaderQuotas { System::Xml::XmlDictionaryReaderQuotas ^ get(); void set(System::Xml::XmlDictionaryReaderQuotas ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ReaderQuotas : System.Xml.XmlDictionaryReaderQuotas with get, set" Usage="System.ServiceModel.Description.WebServiceEndpoint.ReaderQuotas" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDictionaryReaderQuotas</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置可由配置了此绑定的终结点处理的 SOAP 消息的复杂性约束。</summary>
        <value>复杂性约束。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 这些复杂性约束可以抵御某种类型的拒绝服务 (DOS) 攻击，这些攻击试图利用消息复杂性来占用终结点处理资源。 表示这些约束的属性及其默认值（以字节表示）如下所示：  
  
-   <xref:System.Xml.XmlDictionaryReaderQuotas.MaxDepth%2A> = 32  
  
-   <xref:System.Xml.XmlDictionaryReaderQuotas.MaxStringContentLength%2A> = 8192  
  
-   <xref:System.Xml.XmlDictionaryReaderQuotas.MaxArrayLength%2A> = 16384  
  
-   <xref:System.Xml.XmlDictionaryReaderQuotas.MaxBytesPerRead%2A> = 4096  
  
-   <xref:System.Xml.XmlDictionaryReaderQuotas.MaxNameTableCharCount%2A> = 16384  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该值设置为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> 的配额值为只读。</exception>
        <exception cref="T:System.ArgumentException">设置的配额必须为正数。</exception>
      </Docs>
    </Member>
    <Member MemberName="Security">
      <MemberSignature Language="C#" Value="public System.ServiceModel.WebHttpSecurity Security { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.WebHttpSecurity Security" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Description.WebServiceEndpoint.Security" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Security As WebHttpSecurity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::WebHttpSecurity ^ Security { System::ServiceModel::WebHttpSecurity ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Security : System.ServiceModel.WebHttpSecurity" Usage="System.ServiceModel.Description.WebServiceEndpoint.Security" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.WebHttpSecurity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取与此绑定一起使用的安全设置。</summary>
        <value>与此绑定一起使用的 <see cref="T:System.ServiceModel.WebHttpSecurity" />。 默认值是 <see cref="F:System.ServiceModel.WebHttpSecurityMode.None" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要使用非默认的安全类型，请使用 <xref:System.ServiceModel.WebHttpBinding.%23ctor%28System.ServiceModel.WebHttpSecurityMode%29> 构造函数。  
  
> [!NOTE]
>  如果您将此属性设置为 <xref:System.ServiceModel.WebHttpSecurityMode.TransportCredentialOnly> 且正在使用 HTTP，请注意将通过网络在纯文本中发送凭据。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransferMode">
      <MemberSignature Language="C#" Value="public System.ServiceModel.TransferMode TransferMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceModel.TransferMode TransferMode" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Description.WebServiceEndpoint.TransferMode" />
      <MemberSignature Language="VB.NET" Value="Public Property TransferMode As TransferMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::TransferMode TransferMode { System::ServiceModel::TransferMode get(); void set(System::ServiceModel::TransferMode value); };" />
      <MemberSignature Language="F#" Value="member this.TransferMode : System.ServiceModel.TransferMode with get, set" Usage="System.ServiceModel.Description.WebServiceEndpoint.TransferMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.TransferMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示使用此绑定配置的服务是使用消息传输的流处理模式、缓冲模式还是同时使用这两种模式。</summary>
        <value><see cref="T:System.ServiceModel.TransferMode" /> 值，指示使用此绑定配置的服务是使用消息传输的流处理模式、缓冲模式还是同时使用这两种模式。 默认值是 <see cref="F:System.ServiceModel.TransferMode.Buffered" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.TransferMode> 指示通道是使用流处理模式还是使用缓冲模式来进行消息传输。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">所设置的值不是有效的 <see cref="T:System.ServiceModel.TransferMode" /> 值。</exception>
      </Docs>
    </Member>
    <Member MemberName="WebEndpointType">
      <MemberSignature Language="C#" Value="protected abstract Type WebEndpointType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type WebEndpointType" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Description.WebServiceEndpoint.WebEndpointType" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride ReadOnly Property WebEndpointType As Type" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract property Type ^ WebEndpointType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WebEndpointType : Type" Usage="System.ServiceModel.Description.WebServiceEndpoint.WebEndpointType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 Web 服务终结点的类型。</summary>
        <value>Web 服务终结点的类型。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteEncoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding WriteEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding WriteEncoding" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Description.WebServiceEndpoint.WriteEncoding" />
      <MemberSignature Language="VB.NET" Value="Public Property WriteEncoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ WriteEncoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberSignature Language="F#" Value="member this.WriteEncoding : System.Text.Encoding with get, set" Usage="System.ServiceModel.Description.WebServiceEndpoint.WriteEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于消息文本的字符编码。</summary>
        <value>所使用的字符编码。 默认值为 <see cref="T:System.Text.UTF8Encoding" />。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">该值设置为 <see langword="null" />。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
