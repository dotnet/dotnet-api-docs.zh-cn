<Type Name="MetadataImporter" FullName="System.ServiceModel.Description.MetadataImporter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3e7c7bc1a79c471fadcd0bb4f66ad8c1b239e0c0" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89920221" /></Metadata><TypeSignature Language="C#" Value="public abstract class MetadataImporter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MetadataImporter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.MetadataImporter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MetadataImporter" />
  <TypeSignature Language="C++ CLI" Value="public ref class MetadataImporter abstract" />
  <TypeSignature Language="F#" Value="type MetadataImporter = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="2fd14-101">将元数据导入 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="2fd14-101">Imports metadata into <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> objects.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fd14-102">使用 <xref:System.ServiceModel.Description.MetadataImporter> 抽象类的实现导入服务元数据。</span><span class="sxs-lookup"><span data-stu-id="2fd14-102">Use an implementation of the <xref:System.ServiceModel.Description.MetadataImporter> abstract class to import service metadata.</span></span> <span data-ttu-id="2fd14-103">派生自类的类型 <xref:System.ServiceModel.Description.MetadataImporter> 实现了在 Windows Communication Foundation (WCF) 中导入利用 WS 策略导入逻辑的元数据格式。</span><span class="sxs-lookup"><span data-stu-id="2fd14-103">Types that derive from the <xref:System.ServiceModel.Description.MetadataImporter> class implement support for importing metadata formats that take advantage of the WS-Policy import logic in Windows Communication Foundation (WCF).</span></span>  
  
 <span data-ttu-id="2fd14-104"><xref:System.ServiceModel.Description.MetadataImporter> 实现收集附加到 <xref:System.ServiceModel.Description.PolicyConversionContext?displayProperty=nameWithType> 对象中服务元数据的策略表达式。</span><span class="sxs-lookup"><span data-stu-id="2fd14-104">A <xref:System.ServiceModel.Description.MetadataImporter> implementation collects the policy expressions attached to the service metadata in a <xref:System.ServiceModel.Description.PolicyConversionContext?displayProperty=nameWithType> object.</span></span> <span data-ttu-id="2fd14-105">然后，通过在 <xref:System.ServiceModel.Description.MetadataImporter> 属性中调用 <xref:System.ServiceModel.Description.IPolicyImportExtension?displayProperty=nameWithType> 接口的实现，<xref:System.ServiceModel.Description.MetadataImporter.PolicyImportExtensions%2A?displayProperty=nameWithType> 在导入元数据的过程中处理策略。</span><span class="sxs-lookup"><span data-stu-id="2fd14-105">The <xref:System.ServiceModel.Description.MetadataImporter> then processes the policies as part of importing the metadata by calling the implementations of the <xref:System.ServiceModel.Description.IPolicyImportExtension?displayProperty=nameWithType> interface in the <xref:System.ServiceModel.Description.MetadataImporter.PolicyImportExtensions%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="2fd14-106">您可以将导入新策略断言的支持添加到 <xref:System.ServiceModel.Description.MetadataImporter>，方法是将您自己的 <xref:System.ServiceModel.Description.IPolicyImportExtension?displayProperty=nameWithType> 接口的实现添加到 <xref:System.ServiceModel.Description.MetadataImporter.PolicyImportExtensions%2A?displayProperty=nameWithType> 实例的 <xref:System.ServiceModel.Description.MetadataImporter> 属性。</span><span class="sxs-lookup"><span data-stu-id="2fd14-106">You can add support for importing new policy assertions to a <xref:System.ServiceModel.Description.MetadataImporter> by adding your own implementation of the <xref:System.ServiceModel.Description.IPolicyImportExtension?displayProperty=nameWithType> interface to the <xref:System.ServiceModel.Description.MetadataImporter.PolicyImportExtensions%2A?displayProperty=nameWithType> property on a <xref:System.ServiceModel.Description.MetadataImporter> instance.</span></span> <span data-ttu-id="2fd14-107">或者，可以在应用程序配置文件中注册策略导入扩展。</span><span class="sxs-lookup"><span data-stu-id="2fd14-107">Alternatively, you can register your policy import extension in your application configuration file.</span></span>  
  
 <span data-ttu-id="2fd14-108"><xref:System.ServiceModel.Description.WsdlImporter?displayProperty=nameWithType>类型是 <xref:System.ServiceModel.Description.MetadataImporter> WCF 中包含的抽象类的实现。</span><span class="sxs-lookup"><span data-stu-id="2fd14-108">The <xref:System.ServiceModel.Description.WsdlImporter?displayProperty=nameWithType> type is the implementation of the <xref:System.ServiceModel.Description.MetadataImporter> abstract class included with WCF.</span></span> <span data-ttu-id="2fd14-109"><xref:System.ServiceModel.Description.WsdlImporter?displayProperty=nameWithType> 类型可以导入含有附加策略（这些策略捆绑在 <xref:System.ServiceModel.Description.MetadataSet?displayProperty=nameWithType> 对象中）的 WSDL 元数据。</span><span class="sxs-lookup"><span data-stu-id="2fd14-109">The <xref:System.ServiceModel.Description.WsdlImporter?displayProperty=nameWithType> type imports WSDL metadata with attached policies that are bundled in a <xref:System.ServiceModel.Description.MetadataSet?displayProperty=nameWithType> object.</span></span>  
  
 <span data-ttu-id="2fd14-110">通过实现 <xref:System.ServiceModel.Description.IWsdlImportExtension?displayProperty=nameWithType> 接口，然后将实现添加到 <xref:System.ServiceModel.Description.WsdlImporter.WsdlImportExtensions%2A?displayProperty=nameWithType> 实例上的 <xref:System.ServiceModel.Description.WsdlImporter?displayProperty=nameWithType> 属性，可以添加对导入 WSDL 扩展的支持。</span><span class="sxs-lookup"><span data-stu-id="2fd14-110">You can add support for importing WSDL extensions by implementing the <xref:System.ServiceModel.Description.IWsdlImportExtension?displayProperty=nameWithType> interface and then adding your implementation to the <xref:System.ServiceModel.Description.WsdlImporter.WsdlImportExtensions%2A?displayProperty=nameWithType> property on your <xref:System.ServiceModel.Description.WsdlImporter?displayProperty=nameWithType> instance.</span></span> <span data-ttu-id="2fd14-111"><xref:System.ServiceModel.Description.WsdlImporter?displayProperty=nameWithType> 还可以加载应用程序配置文件中注册的 <xref:System.ServiceModel.Description.IWsdlImportExtension?displayProperty=nameWithType> 接口的实现。</span><span class="sxs-lookup"><span data-stu-id="2fd14-111">The <xref:System.ServiceModel.Description.WsdlImporter?displayProperty=nameWithType> can also load implementations of the <xref:System.ServiceModel.Description.IWsdlImportExtension?displayProperty=nameWithType> interface registered in your application configuration file.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2fd14-112">由于 <xref:System.ServiceModel.Description.MetadataImporter> 为内部构造函数，因此在此版本中，无法从 <xref:System.ServiceModel.Description.MetadataImporter> 派生。</span><span class="sxs-lookup"><span data-stu-id="2fd14-112">Because the <xref:System.ServiceModel.Description.MetadataImporter> constructor is internal, you cannot derive from <xref:System.ServiceModel.Description.MetadataImporter> in this version.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2fd14-113">下面的示例演示如何通过使用自定义语句、检查 <xref:System.ServiceModel.Description.WsdlImporter?displayProperty=nameWithType> 属性、将导入元数据编译为托管类型，并将结果保存到代码文件来使用 <xref:System.ServiceModel.Description.MetadataImporter.Errors%2A> 派生类导入元数据。</span><span class="sxs-lookup"><span data-stu-id="2fd14-113">The following example shows the use of the <xref:System.ServiceModel.Description.WsdlImporter?displayProperty=nameWithType> derived class to import metadata using custom state, checking the <xref:System.ServiceModel.Description.MetadataImporter.Errors%2A> property, compiling imported metadata to managed types and saving the result to a code file.</span></span>  
  
 [!code-csharp[C_CustomWSDLExtensions#8](~/samples/snippets/csharp/VS_Snippets_CFX/c_customwsdlextensions/cs/client.cs#8)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Errors">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.MetadataConversionError&gt; Errors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;class System.ServiceModel.Description.MetadataConversionError&gt; Errors" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Description.MetadataImporter.Errors" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Errors As Collection(Of MetadataConversionError)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::ServiceModel::Description::MetadataConversionError ^&gt; ^ Errors { System::Collections::ObjectModel::Collection&lt;System::ServiceModel::Description::MetadataConversionError ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Errors : System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.MetadataConversionError&gt;" Usage="System.ServiceModel.Description.MetadataImporter.Errors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.MetadataConversionError&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2fd14-114">获取指示是否在导入元数据时出现错误的值。</span><span class="sxs-lookup"><span data-stu-id="2fd14-114">Gets a value that indicates whether there were errors importing the metadata.</span></span></summary>
        <value><span data-ttu-id="2fd14-115"><see cref="T:System.ServiceModel.Description.MetadataConversionError" /> 对象的集合。</span><span class="sxs-lookup"><span data-stu-id="2fd14-115">A collection of <see cref="T:System.ServiceModel.Description.MetadataConversionError" /> objects.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fd14-116">始终在导入元数据后和使用元数据前检查 <xref:System.ServiceModel.Description.MetadataImporter.Errors%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="2fd14-116">Always check the <xref:System.ServiceModel.Description.MetadataImporter.Errors%2A> property after importing metadata and before using the metadata.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportAllContracts">
      <MemberSignature Language="C#" Value="public abstract System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ContractDescription&gt; ImportAllContracts ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.ObjectModel.Collection`1&lt;class System.ServiceModel.Description.ContractDescription&gt; ImportAllContracts() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.MetadataImporter.ImportAllContracts" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ImportAllContracts () As Collection(Of ContractDescription)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Collections::ObjectModel::Collection&lt;System::ServiceModel::Description::ContractDescription ^&gt; ^ ImportAllContracts();" />
      <MemberSignature Language="F#" Value="abstract member ImportAllContracts : unit -&gt; System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ContractDescription&gt;" Usage="metadataImporter.ImportAllContracts " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ContractDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2fd14-117">在派生类中重写时，会返回从元数据导入的协定的集合。</span><span class="sxs-lookup"><span data-stu-id="2fd14-117">When overridden in a derived class, returns a collection of contracts imported from the metadata.</span></span></summary>
        <returns><span data-ttu-id="2fd14-118">从元数据导入的协定。</span><span class="sxs-lookup"><span data-stu-id="2fd14-118">The contracts imported from the metadata.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportAllEndpoints">
      <MemberSignature Language="C#" Value="public abstract System.ServiceModel.Description.ServiceEndpointCollection ImportAllEndpoints ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Description.ServiceEndpointCollection ImportAllEndpoints() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.MetadataImporter.ImportAllEndpoints" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ImportAllEndpoints () As ServiceEndpointCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::ServiceModel::Description::ServiceEndpointCollection ^ ImportAllEndpoints();" />
      <MemberSignature Language="F#" Value="abstract member ImportAllEndpoints : unit -&gt; System.ServiceModel.Description.ServiceEndpointCollection" Usage="metadataImporter.ImportAllEndpoints " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.ServiceEndpointCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2fd14-119">在派生类中重写时，会返回元数据中的所有终结点。</span><span class="sxs-lookup"><span data-stu-id="2fd14-119">When overridden in a derived class, returns all endpoints in the metadata.</span></span></summary>
        <returns><span data-ttu-id="2fd14-120">由服务发布的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 对象的集合。</span><span class="sxs-lookup"><span data-stu-id="2fd14-120">A collection of <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> objects that are published by a service.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fd14-121">实现 <xref:System.ServiceModel.Description.MetadataImporter.ImportAllEndpoints%2A> 方法以返回导入元数据中的所有终结点。</span><span class="sxs-lookup"><span data-stu-id="2fd14-121">Implement the <xref:System.ServiceModel.Description.MetadataImporter.ImportAllEndpoints%2A> method to return all endpoints in the imported metadata.</span></span> <span data-ttu-id="2fd14-122">已作为服务终结点导入的元数据无法用于创建运行时或导出元数据，因为导入的终结点不包含托管类型信息。</span><span class="sxs-lookup"><span data-stu-id="2fd14-122">Metadata that has been imported as service endpoints cannot be used to create a runtime or export metadata because the imported endpoints contain no managed type information.</span></span> <span data-ttu-id="2fd14-123">若要使用元数据创建客户端或服务运行时，或者若要生成元数据，您必须先从元数据中生成和编译代码，然后使用该类型信息创建使用 <xref:System.ServiceModel.Description.ContractDescription?displayProperty=nameWithType> 的新 <xref:System.ServiceModel.Description.ContractDescription.GetContract%2A> 对象。</span><span class="sxs-lookup"><span data-stu-id="2fd14-123">To use the metadata to create a client or service runtime or to generate metadata, you must first generate and compile code from the metadata and use that type information to create a new <xref:System.ServiceModel.Description.ContractDescription?displayProperty=nameWithType> object using <xref:System.ServiceModel.Description.ContractDescription.GetContract%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KnownContracts">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.Dictionary&lt;System.Xml.XmlQualifiedName,System.ServiceModel.Description.ContractDescription&gt; KnownContracts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.Dictionary`2&lt;class System.Xml.XmlQualifiedName, class System.ServiceModel.Description.ContractDescription&gt; KnownContracts" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Description.MetadataImporter.KnownContracts" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KnownContracts As Dictionary(Of XmlQualifiedName, ContractDescription)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::Dictionary&lt;System::Xml::XmlQualifiedName ^, System::ServiceModel::Description::ContractDescription ^&gt; ^ KnownContracts { System::Collections::Generic::Dictionary&lt;System::Xml::XmlQualifiedName ^, System::ServiceModel::Description::ContractDescription ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.KnownContracts : System.Collections.Generic.Dictionary&lt;System.Xml.XmlQualifiedName, System.ServiceModel.Description.ContractDescription&gt;" Usage="System.ServiceModel.Description.MetadataImporter.KnownContracts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;System.Xml.XmlQualifiedName,System.ServiceModel.Description.ContractDescription&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2fd14-124">获取按导入程序了解的名称排列的协定字典。</span><span class="sxs-lookup"><span data-stu-id="2fd14-124">Gets a dictionary of contracts by name that the importer knows about.</span></span></summary>
        <value><span data-ttu-id="2fd14-125">按 XML 限定名称列出的协定字典。</span><span class="sxs-lookup"><span data-stu-id="2fd14-125">A dictionary of contracts listed by XML qualified name.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fd14-126">使用 <xref:System.ServiceModel.Description.MetadataImporter.KnownContracts%2A> 属性可添加或移除协定说明和导入程序可引用的其关联 XML 名称。</span><span class="sxs-lookup"><span data-stu-id="2fd14-126">Use the <xref:System.ServiceModel.Description.MetadataImporter.KnownContracts%2A> property to add or remove contract descriptions and their associated XML names that the importer can reference.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PolicyImportExtensions">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.KeyedByTypeCollection&lt;System.ServiceModel.Description.IPolicyImportExtension&gt; PolicyImportExtensions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.KeyedByTypeCollection`1&lt;class System.ServiceModel.Description.IPolicyImportExtension&gt; PolicyImportExtensions" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Description.MetadataImporter.PolicyImportExtensions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PolicyImportExtensions As KeyedByTypeCollection(Of IPolicyImportExtension)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::KeyedByTypeCollection&lt;System::ServiceModel::Description::IPolicyImportExtension ^&gt; ^ PolicyImportExtensions { System::Collections::Generic::KeyedByTypeCollection&lt;System::ServiceModel::Description::IPolicyImportExtension ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PolicyImportExtensions : System.Collections.Generic.KeyedByTypeCollection&lt;System.ServiceModel.Description.IPolicyImportExtension&gt;" Usage="System.ServiceModel.Description.MetadataImporter.PolicyImportExtensions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.KeyedByTypeCollection&lt;System.ServiceModel.Description.IPolicyImportExtension&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2fd14-127">获取导入程序调用的用于处理策略断言的策略导入程序的集合。</span><span class="sxs-lookup"><span data-stu-id="2fd14-127">Gets a collection of policy importers that the importer calls to process policy assertions.</span></span></summary>
        <value><span data-ttu-id="2fd14-128"><see cref="T:System.ServiceModel.Description.MetadataImporter" /> 用于处理策略断言的策略导入程序的集合。</span><span class="sxs-lookup"><span data-stu-id="2fd14-128">A collection of policy importers that the <see cref="T:System.ServiceModel.Description.MetadataImporter" /> uses to process policy assertions.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fd14-129">使用 <xref:System.ServiceModel.Description.MetadataImporter.PolicyImportExtensions%2A> 属性可添加或移除调用以处理元数据中的策略断言的策略导入程序。</span><span class="sxs-lookup"><span data-stu-id="2fd14-129">Use the <xref:System.ServiceModel.Description.MetadataImporter.PolicyImportExtensions%2A> property to add or remove policy importers that are invoked to process policy assertions in the metadata.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.Dictionary&lt;object,object&gt; State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.Dictionary`2&lt;object, object&gt; State" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Description.MetadataImporter.State" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property State As Dictionary(Of Object, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::Dictionary&lt;System::Object ^, System::Object ^&gt; ^ State { System::Collections::Generic::Dictionary&lt;System::Object ^, System::Object ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.State : System.Collections.Generic.Dictionary&lt;obj, obj&gt;" Usage="System.ServiceModel.Description.MetadataImporter.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;System.Object,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2fd14-130">获取或设置在导入元数据过程中使用的对象的集合。</span><span class="sxs-lookup"><span data-stu-id="2fd14-130">Gets or sets a collection of objects used in the importing of metadata.</span></span></summary>
        <value><span data-ttu-id="2fd14-131">类型键控的对象字典。</span><span class="sxs-lookup"><span data-stu-id="2fd14-131">A dictionary of objects keyed by type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fd14-132">使用 `State` 属性可添加或移除在导入元数据过程中使用的对象。</span><span class="sxs-lookup"><span data-stu-id="2fd14-132">Use the `State` property to add or remove objects used in the importing of metadata.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2fd14-133">下面的示例演示如何使用 <xref:System.ServiceModel.Description.MetadataImporter.State%2A> 属性添加自定义 <xref:System.Runtime.Serialization.XsdDataContractImporter?displayProperty=nameWithType>，从而以特定方式导入数据结构。</span><span class="sxs-lookup"><span data-stu-id="2fd14-133">The following example shows the use of the <xref:System.ServiceModel.Description.MetadataImporter.State%2A> property to add a custom <xref:System.Runtime.Serialization.XsdDataContractImporter?displayProperty=nameWithType> to import data structures in a particular way.</span></span>  
  
 [!code-csharp[C_CustomWSDLExtensions#8](~/samples/snippets/csharp/VS_Snippets_CFX/c_customwsdlextensions/cs/client.cs#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
