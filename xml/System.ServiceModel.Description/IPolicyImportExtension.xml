<Type Name="IPolicyImportExtension" FullName="System.ServiceModel.Description.IPolicyImportExtension">
  <Metadata><Meta Name="ms.openlocfilehash" Value="21c1955720f84c83ad644148e7bc9cddad175775" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83960880" /></Metadata><TypeSignature Language="C#" Value="public interface IPolicyImportExtension" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPolicyImportExtension" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IPolicyImportExtension" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPolicyImportExtension" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPolicyImportExtension" />
  <TypeSignature Language="F#" Value="type IPolicyImportExtension = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="864c6-101">为可导入有关绑定的自定义策略断言的对象定义一个方法。</span><span class="sxs-lookup"><span data-stu-id="864c6-101">Defines a method for objects that import custom policy assertions about bindings.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="864c6-102">实现 <xref:System.ServiceModel.Description.IPolicyImportExtension> 接口可以搜索有关终结点功能或需求的自定义策略断言的特殊终结点公开的 WSDL 信息。</span><span class="sxs-lookup"><span data-stu-id="864c6-102">Implement the <xref:System.ServiceModel.Description.IPolicyImportExtension> interface to search WSDL information exposed by a particular endpoint for custom policy assertions about endpoint capabilities or requirements.</span></span> <span data-ttu-id="864c6-103">通常，策略导入程序会先搜索特定断言，然后插入绑定元素并配置绑定元素，或者修改协定以支持该断言的需求。</span><span class="sxs-lookup"><span data-stu-id="864c6-103">Typically, a policy importer searches for a specific assertion and either inserts a binding element, configures a binding element, or modifies the contract to support the requirements of the assertion.</span></span>  
  
 <span data-ttu-id="864c6-104">与其副本 <xref:System.ServiceModel.Description.IPolicyExportExtension> 不同，<xref:System.ServiceModel.Description.IPolicyImportExtension> 不要求通过 <xref:System.ServiceModel.Channels.BindingElement> 对象实现；您既可以通过使用“示例”一节中阐示的客户端配置节来加载它，也可以通过编程方式将其添加到 <xref:System.ServiceModel.Description.WsdlImporter?displayProperty=nameWithType> 构造函数来加载它。</span><span class="sxs-lookup"><span data-stu-id="864c6-104">Unlike its counterpart, <xref:System.ServiceModel.Description.IPolicyExportExtension>, <xref:System.ServiceModel.Description.IPolicyImportExtension> does not require implementation by a <xref:System.ServiceModel.Channels.BindingElement> object; you can load it using the client configuration section shown in the Examples section or programmatically by adding it to the <xref:System.ServiceModel.Description.WsdlImporter?displayProperty=nameWithType> constructor.</span></span>  
  
 <span data-ttu-id="864c6-105">Windows Communication Foundation （WCF）将两个对象传递到 <xref:System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy%2A> 方法、<xref:System.ServiceModel.Description.MetadataImporter> 和 <xref:System.ServiceModel.Description.PolicyConversionContext>。</span><span class="sxs-lookup"><span data-stu-id="864c6-105">Windows Communication Foundation (WCF) passes two objects to the <xref:System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy%2A> method, a <xref:System.ServiceModel.Description.MetadataImporter> and a <xref:System.ServiceModel.Description.PolicyConversionContext>.</span></span> <span data-ttu-id="864c6-106">通常，<xref:System.ServiceModel.Description.PolicyConversionContext> 对象包含每个绑定范围的策略断言。</span><span class="sxs-lookup"><span data-stu-id="864c6-106">Typically the <xref:System.ServiceModel.Description.PolicyConversionContext> object already contains the policy assertions for each binding scope.</span></span>  
  
 <span data-ttu-id="864c6-107"><xref:System.ServiceModel.Description.IPolicyImportExtension> 实现会完成以下操作步骤：</span><span class="sxs-lookup"><span data-stu-id="864c6-107">An <xref:System.ServiceModel.Description.IPolicyImportExtension> implementation performs the following steps:</span></span>  
  
1.  <span data-ttu-id="864c6-108">调用 <xref:System.ServiceModel.Description.PolicyConversionContext.GetBindingAssertions%2A>、<xref:System.ServiceModel.Description.PolicyConversionContext.GetMessageBindingAssertions%2A> 或 <xref:System.ServiceModel.Description.PolicyConversionContext.GetOperationBindingAssertions%2A> 方法，依据范围查找其所负责的自定义策略断言。</span><span class="sxs-lookup"><span data-stu-id="864c6-108">Locates the custom policy assertion for which it is responsible by calling either the <xref:System.ServiceModel.Description.PolicyConversionContext.GetBindingAssertions%2A>, <xref:System.ServiceModel.Description.PolicyConversionContext.GetMessageBindingAssertions%2A>, or <xref:System.ServiceModel.Description.PolicyConversionContext.GetOperationBindingAssertions%2A> methods, depending upon the scope.</span></span>  
  
2.  <span data-ttu-id="864c6-109">从断言集合中移除策略断言。</span><span class="sxs-lookup"><span data-stu-id="864c6-109">Removes the policy assertion from the assertion collection.</span></span> <span data-ttu-id="864c6-110"><xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=nameWithType> 方法在一个步骤中就可以完成断言的查找、返回和移除操作。</span><span class="sxs-lookup"><span data-stu-id="864c6-110">The <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=nameWithType> method locates, returns, and removes the assertion in one step.</span></span>  
  
3.  <span data-ttu-id="864c6-111">通过将所要求的自定义 <xref:System.ServiceModel.Channels.BindingElement> 添加到 <xref:System.ServiceModel.Description.PolicyConversionContext.BindingElements%2A> 属性或修改 <xref:System.ServiceModel.Description.PolicyConversionContext.Contract%2A?displayProperty=nameWithType> 属性来修改绑定堆栈或协定。</span><span class="sxs-lookup"><span data-stu-id="864c6-111">Modify the binding stack or the contract by either adding a required custom <xref:System.ServiceModel.Channels.BindingElement> to the <xref:System.ServiceModel.Description.PolicyConversionContext.BindingElements%2A> property or by modifying the <xref:System.ServiceModel.Description.PolicyConversionContext.Contract%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="864c6-112">步骤 2 非常重要。</span><span class="sxs-lookup"><span data-stu-id="864c6-112">Step 2 is important.</span></span> <span data-ttu-id="864c6-113">调用完所有策略导入程序后，WCF 将检查是否存在任何策略断言。</span><span class="sxs-lookup"><span data-stu-id="864c6-113">After all policy importers have been called, WCF checks for the existence of any policy assertions that remain.</span></span> <span data-ttu-id="864c6-114">如果存在，WCF 将假定策略导入不成功，且不导入关联的绑定。</span><span class="sxs-lookup"><span data-stu-id="864c6-114">If one exists, WCF assumes that the policy import was unsuccessful and does not import the associated binding.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="864c6-115">恶意的元数据供应商可将格式错误的 XML 作为元数据的一部分进行发送，从而尝试利用策略导入程序。</span><span class="sxs-lookup"><span data-stu-id="864c6-115">A malicious metadata supplier can attempt to send malformed XML as part of metadata in an attempt to exploit a policy importer.</span></span> <span data-ttu-id="864c6-116">强烈建议使用安全可靠的自定义策略导入程序，以处理发送给它的所有格式的 XML。</span><span class="sxs-lookup"><span data-stu-id="864c6-116">It is strongly recommended that custom policy importers be robust to all forms of XML that can be passed to it.</span></span>  
  
 <span data-ttu-id="864c6-117">自定义 <xref:System.ServiceModel.Description.MetadataImporter> 实现必须实现自己的 <xref:System.ServiceModel.Description.PolicyConversionContext> 对象，以提取附加到自定义元数据格式的策略断言。</span><span class="sxs-lookup"><span data-stu-id="864c6-117">Custom <xref:System.ServiceModel.Description.MetadataImporter> implementations must implement their own <xref:System.ServiceModel.Description.PolicyConversionContext> object to extract the policy assertions attached to the custom metadata format.</span></span>  
  
 <span data-ttu-id="864c6-118">如果要导入和导出非策略断言的自定义 WSDL 元素，请参见 <xref:System.ServiceModel.Description.IWsdlExportExtension?displayProperty=nameWithType> 和 <xref:System.ServiceModel.Description.IWsdlImportExtension?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="864c6-118">If you want to export and import custom WSDL elements that are not policy assertions, see <xref:System.ServiceModel.Description.IWsdlExportExtension?displayProperty=nameWithType> and <xref:System.ServiceModel.Description.IWsdlImportExtension?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="864c6-119">可以通过在配置文件中使用相同的配置元素和 `/svcutilConfig:<configFile>` 选项，将自定义策略导入程序和导出程序与配置文件的[元数据实用工具（svcutil.exe）](/dotnet/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe)结合使用。</span><span class="sxs-lookup"><span data-stu-id="864c6-119">You can use custom policy importers and exporters with the [ServiceModel Metadata Utility Tool (Svcutil.exe)](/dotnet/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe) by using the same configuration elements in a configuration file and the `/svcutilConfig:<configFile>` option.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="864c6-120">下面的代码示例演示了如何使用 <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=nameWithType> 方法在一个步骤内完成断言的查找、返回和移除操作。</span><span class="sxs-lookup"><span data-stu-id="864c6-120">The following code example shows the use of the <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=nameWithType> method to locate, return, and remove the assertion in one step.</span></span>  
  
 [!code-csharp[CustomPolicySample#1](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/policyimporter.cs#1)]
 [!code-vb[CustomPolicySample#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/custompolicysample/vb/policyimporter.vb#1)]  
  
 <span data-ttu-id="864c6-121">下面的代码示例演示了客户端应用程序配置文件是如何在调用 <xref:System.ServiceModel.Description.MetadataResolver?displayProperty=nameWithType> 时加载自定义策略导入程序的。</span><span class="sxs-lookup"><span data-stu-id="864c6-121">The following code example shows the client application configuration file to load the custom policy importer when the <xref:System.ServiceModel.Description.MetadataResolver?displayProperty=nameWithType> is invoked.</span></span>  
  
 [!code-xml[CustomPolicySample#7](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/client.exe.config#7)]   
  
 <span data-ttu-id="864c6-122">下面的代码示例演示了如何使用 <xref:System.ServiceModel.Description.MetadataResolver> 下载元数据，并将其解析到说明对象中。</span><span class="sxs-lookup"><span data-stu-id="864c6-122">The following code example shows the use of the <xref:System.ServiceModel.Description.MetadataResolver> to download and resolve metadata into description objects.</span></span>  
  
 [!code-csharp[CustomPolicySample#10](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/client.cs#10)]
 [!code-vb[CustomPolicySample#10](~/samples/snippets/visualbasic/VS_Snippets_CFX/custompolicysample/vb/client.vb#10)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ImportPolicy">
      <MemberSignature Language="C#" Value="public void ImportPolicy (System.ServiceModel.Description.MetadataImporter importer, System.ServiceModel.Description.PolicyConversionContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ImportPolicy(class System.ServiceModel.Description.MetadataImporter importer, class System.ServiceModel.Description.PolicyConversionContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy(System.ServiceModel.Description.MetadataImporter,System.ServiceModel.Description.PolicyConversionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ImportPolicy (importer As MetadataImporter, context As PolicyConversionContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ImportPolicy(System::ServiceModel::Description::MetadataImporter ^ importer, System::ServiceModel::Description::PolicyConversionContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ImportPolicy : System.ServiceModel.Description.MetadataImporter * System.ServiceModel.Description.PolicyConversionContext -&gt; unit" Usage="iPolicyImportExtension.ImportPolicy (importer, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importer" Type="System.ServiceModel.Description.MetadataImporter" Index="0" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="context" Type="System.ServiceModel.Description.PolicyConversionContext" Index="1" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="importer"><span data-ttu-id="864c6-123">正在使用的 <see cref="T:System.ServiceModel.Description.MetadataImporter" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="864c6-123">The <see cref="T:System.ServiceModel.Description.MetadataImporter" /> object in use.</span></span></param>
        <param name="context"><span data-ttu-id="864c6-124"><see cref="T:System.ServiceModel.Description.PolicyConversionContext" />，其中既包含可以导入的策略断言，也包含可向其添加实现绑定元素的绑定元素集合。</span><span class="sxs-lookup"><span data-stu-id="864c6-124">The <see cref="T:System.ServiceModel.Description.PolicyConversionContext" /> that contains both the policy assertions that can be imported and the collections of binding elements to which implementing binding elements can be added.</span></span></param>
        <summary><span data-ttu-id="864c6-125">定义一个可导入自定义策略断言和添加实现绑定元素的方法。</span><span class="sxs-lookup"><span data-stu-id="864c6-125">Defines a method that can import custom policy assertions and add implementing binding elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="864c6-126">实现 `ImportPolicy` 方法可以获取策略断言，并修改某些导入协定或绑定，以支持该断言。</span><span class="sxs-lookup"><span data-stu-id="864c6-126">Implement the `ImportPolicy` method to obtain policy assertions and perform some modification of the imported contract or binding to support the assertion.</span></span> <span data-ttu-id="864c6-127">通常，策略导入程序可通过配置绑定元素或将其插入到正在导入的绑定，来对查找自定义策略断言作出响应。</span><span class="sxs-lookup"><span data-stu-id="864c6-127">Typically, a policy importer responds to finding a custom policy assertion by configuring or inserting a binding element into the binding being imported.</span></span>  
  
 <span data-ttu-id="864c6-128">Windows Communication Foundation （WCF）将两个对象传递到 <xref:System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy%2A> 方法、<xref:System.ServiceModel.Description.MetadataImporter> 和 <xref:System.ServiceModel.Description.PolicyConversionContext>。</span><span class="sxs-lookup"><span data-stu-id="864c6-128">Windows Communication Foundation (WCF) passes two objects to the <xref:System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy%2A> method, a <xref:System.ServiceModel.Description.MetadataImporter> and a <xref:System.ServiceModel.Description.PolicyConversionContext>.</span></span> <span data-ttu-id="864c6-129">通常，<xref:System.ServiceModel.Description.PolicyConversionContext> 对象包含每个绑定范围的策略断言。</span><span class="sxs-lookup"><span data-stu-id="864c6-129">Typically the <xref:System.ServiceModel.Description.PolicyConversionContext> object already contains the policy assertions for each binding scope.</span></span>  
  
 <span data-ttu-id="864c6-130"><xref:System.ServiceModel.Description.IPolicyImportExtension> 实现会完成以下操作步骤：</span><span class="sxs-lookup"><span data-stu-id="864c6-130">An <xref:System.ServiceModel.Description.IPolicyImportExtension> implementation performs the following steps:</span></span>  
  
1.  <span data-ttu-id="864c6-131">调用 <xref:System.ServiceModel.Description.PolicyConversionContext.GetBindingAssertions%2A>、<xref:System.ServiceModel.Description.PolicyConversionContext.GetMessageBindingAssertions%2A> 或 <xref:System.ServiceModel.Description.PolicyConversionContext.GetOperationBindingAssertions%2A> 方法，依据范围查找其所负责的自定义策略断言。</span><span class="sxs-lookup"><span data-stu-id="864c6-131">Locates the custom policy assertion for which it is responsible by calling either the <xref:System.ServiceModel.Description.PolicyConversionContext.GetBindingAssertions%2A>, <xref:System.ServiceModel.Description.PolicyConversionContext.GetMessageBindingAssertions%2A>, or <xref:System.ServiceModel.Description.PolicyConversionContext.GetOperationBindingAssertions%2A> methods, depending upon the scope.</span></span>  
  
2.  <span data-ttu-id="864c6-132">从断言集合中移除策略断言。</span><span class="sxs-lookup"><span data-stu-id="864c6-132">Removes the policy assertion from the assertion collection.</span></span> <span data-ttu-id="864c6-133"><xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=nameWithType> 方法在一个步骤中就可以完成断言的查找、返回和移除操作。</span><span class="sxs-lookup"><span data-stu-id="864c6-133">The <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=nameWithType> method locates, returns, and removes the assertion in one step.</span></span>  
  
3.  <span data-ttu-id="864c6-134">通过将所需的自定义 <xref:System.ServiceModel.Channels.BindingElement> 添加到 <xref:System.ServiceModel.Description.PolicyConversionContext.BindingElements%2A> 属性，或修改 <xref:System.ServiceModel.Description.PolicyConversionContext.Contract%2A?displayProperty=nameWithType> 属性，可以修改绑定堆栈或协定。</span><span class="sxs-lookup"><span data-stu-id="864c6-134">Modifies the binding stack or the contract by either adding a required custom <xref:System.ServiceModel.Channels.BindingElement> to the <xref:System.ServiceModel.Description.PolicyConversionContext.BindingElements%2A> property or by modifying the <xref:System.ServiceModel.Description.PolicyConversionContext.Contract%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="864c6-135">步骤 2 非常重要。</span><span class="sxs-lookup"><span data-stu-id="864c6-135">Step 2 is important.</span></span> <span data-ttu-id="864c6-136">调用完所有策略导入程序后，WCF 将检查是否存在任何策略断言。</span><span class="sxs-lookup"><span data-stu-id="864c6-136">After all policy importers have been called, WCF checks for the existence of any policy assertions that remain.</span></span> <span data-ttu-id="864c6-137">如果存在，WCF 将假定策略导入不成功，且不导入关联的绑定。</span><span class="sxs-lookup"><span data-stu-id="864c6-137">If one exists, WCF assumes that the policy import was unsuccessful and does not import the associated binding.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="864c6-138">下面的代码示例演示了如何使用 <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=nameWithType> 方法在一个步骤内完成断言的查找、返回和移除操作。</span><span class="sxs-lookup"><span data-stu-id="864c6-138">The following code example shows the use of the <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=nameWithType> method to locate, return, and remove the assertion in one step.</span></span>  
  
 [!code-csharp[CustomPolicySample#1](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/policyimporter.cs#1)]
 [!code-vb[CustomPolicySample#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/custompolicysample/vb/policyimporter.vb#1)]  
  
 <span data-ttu-id="864c6-139">下面的代码示例演示了客户端应用程序配置文件是如何在调用 <xref:System.ServiceModel.Description.MetadataResolver?displayProperty=nameWithType> 时加载自定义策略导入程序的。</span><span class="sxs-lookup"><span data-stu-id="864c6-139">The following code example shows the client application configuration file to load the custom policy importer when the <xref:System.ServiceModel.Description.MetadataResolver?displayProperty=nameWithType> is invoked.</span></span>  
  
 [!code-xml[CustomPolicySample#7](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/client.exe.config#7)]   
  
 <span data-ttu-id="864c6-140">下面的代码示例演示了如何使用 <xref:System.ServiceModel.Description.MetadataResolver> 下载元数据，并将其解析到说明对象中。</span><span class="sxs-lookup"><span data-stu-id="864c6-140">The following code example shows the use of the <xref:System.ServiceModel.Description.MetadataResolver> to download and resolve metadata into description objects.</span></span>  
  
 [!code-csharp[CustomPolicySample#10](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/client.cs#10)]
 [!code-vb[CustomPolicySample#10](~/samples/snippets/visualbasic/VS_Snippets_CFX/custompolicysample/vb/client.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
