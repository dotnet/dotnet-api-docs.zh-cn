<Type Name="IContractBehaviorAttribute" FullName="System.ServiceModel.Description.IContractBehaviorAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d98ff403de26732d88aea7bc74a9c88ea4ddddac" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="70669309" /></Metadata><TypeSignature Language="C#" Value="public interface IContractBehaviorAttribute" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IContractBehaviorAttribute" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IContractBehaviorAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Interface IContractBehaviorAttribute" />
  <TypeSignature Language="C++ CLI" Value="public interface class IContractBehaviorAttribute" />
  <TypeSignature Language="F#" Value="type IContractBehaviorAttribute = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="18600-101">指定其实现 <see cref="T:System.ServiceModel.Description.IContractBehavior" /> 接口的属性处于活动状态的协定。</span><span class="sxs-lookup"><span data-stu-id="18600-101">Specifies the contract for which an attribute that implements the <see cref="T:System.ServiceModel.Description.IContractBehavior" /> interface is active.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18600-102">对一个同时为 <xref:System.ServiceModel.Description.IContractBehaviorAttribute> 对象的属性实现 <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType> 接口可以对服务类型使用该协定行为属性，但会将此属性的使用限定为 <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A> 属性中指定的协定。</span><span class="sxs-lookup"><span data-stu-id="18600-102">Implement the <xref:System.ServiceModel.Description.IContractBehaviorAttribute> interface on an attribute that is also an <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType> object to enable the use of that contract behavior attribute on a service type but restrict its application to the contract specified in the <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A> property.</span></span>  
  
 <span data-ttu-id="18600-103">不要求在自定义协定行为属性上实现 <xref:System.ServiceModel.Description.IContractBehaviorAttribute>，如果该属性应用到协定接口或双向回调类，则将忽略 <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A> 属性的值。</span><span class="sxs-lookup"><span data-stu-id="18600-103">There is no requirement to implement <xref:System.ServiceModel.Description.IContractBehaviorAttribute> on custom contract behavior attributes, and if the attribute is applied either to a contract interface or to a duplex callback class the value of the <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A> property is ignored.</span></span>  
  
 <span data-ttu-id="18600-104">有关详细信息，请参阅 <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="18600-104">For more information, see <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18600-105">下面的代码示例假定自定义 <xref:System.ServiceModel.Dispatcher.IInstanceProvider?displayProperty=nameWithType> 实现调用了可提供“单一实例”行为的 `ObjectProviderBehavior`，它始终返回同一服务实例，且不回收该服务实例。</span><span class="sxs-lookup"><span data-stu-id="18600-105">The following code example assumes a custom <xref:System.ServiceModel.Dispatcher.IInstanceProvider?displayProperty=nameWithType> implementation called `ObjectProviderBehavior` that provides a "singleton" behavior; it always returns the same service instance and does not recycle it.</span></span>  
  
 <span data-ttu-id="18600-106">对于实例提供程序自定义的插入，该示例演示了如何实现一个自定义属性 (`SingletonBehaviorAttribute`)，该自定义属性可实现 <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType>，从而插入自定义服务实例提供程序。</span><span class="sxs-lookup"><span data-stu-id="18600-106">To insert the instance provider customization, the example shows how to implement a custom attribute (`SingletonBehaviorAttribute`) that implements <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType> to insert the custom service instance provider.</span></span> <span data-ttu-id="18600-107">它还实现了 <xref:System.ServiceModel.Description.IContractBehaviorAttribute>，这会将其应用程序绑定到 `ISampleService` 协定。</span><span class="sxs-lookup"><span data-stu-id="18600-107">It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its application to the `ISampleService` contract.</span></span>  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="TargetContract">
      <MemberSignature Language="C#" Value="public Type TargetContract { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type TargetContract" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TargetContract As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ TargetContract { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TargetContract : Type" Usage="System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18600-108">获取可用该协定行为的协定的类型。</span><span class="sxs-lookup"><span data-stu-id="18600-108">Gets the type of the contract to which the contract behavior is applicable.</span></span></summary>
        <value><span data-ttu-id="18600-109">适用于该协定行为的协定。</span><span class="sxs-lookup"><span data-stu-id="18600-109">The contract to which the contract behavior is applicable.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18600-110">实现 <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A> 属性可以在将实现 <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType> 属性应用到服务类时，指定该协定行为要应用到的协定。</span><span class="sxs-lookup"><span data-stu-id="18600-110">Implement the <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A> property to specify the contract to which the contract behavior is applied when the implementing <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType> attribute is applied to a service class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18600-111">下面的代码示例假定自定义 <xref:System.ServiceModel.Dispatcher.IInstanceProvider?displayProperty=nameWithType> 实现调用了可提供“单一实例”行为的 `ObjectProviderBehavior`，它始终返回同一服务实例，且不回收该服务实例。</span><span class="sxs-lookup"><span data-stu-id="18600-111">The following code example assumes a custom <xref:System.ServiceModel.Dispatcher.IInstanceProvider?displayProperty=nameWithType> implementation called `ObjectProviderBehavior` that provides a "singleton" behavior; it always returns the same service instance and does not recycle it.</span></span>  
  
 <span data-ttu-id="18600-112">对于实例提供程序自定义的插入，该示例演示了如何实现一个自定义属性 (`SingletonBehaviorAttribute`)，该自定义属性可实现 <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType>，从而插入自定义服务实例提供程序。</span><span class="sxs-lookup"><span data-stu-id="18600-112">To insert the instance provider customization, the example shows how to implement a custom attribute (`SingletonBehaviorAttribute`) that implements <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType> to insert the custom service instance provider.</span></span> <span data-ttu-id="18600-113">它还实现了 <xref:System.ServiceModel.Description.IContractBehaviorAttribute>，这会将其应用程序绑定到 `ISampleService` 协定。</span><span class="sxs-lookup"><span data-stu-id="18600-113">It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its application to the `ISampleService` contract.</span></span>  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
