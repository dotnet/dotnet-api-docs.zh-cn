<Type Name="IServiceBehavior" FullName="System.ServiceModel.Description.IServiceBehavior">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c0a4e8c5f3fffe6e99d8bc2a49451c67e14f4d1a" /><Meta Name="ms.sourcegitcommit" Value="397961a0164281b579f68064c3bb66c071f374d9" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/14/2020" /><Meta Name="ms.locfileid" Value="78748948" /></Metadata><TypeSignature Language="C#" Value="public interface IServiceBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IServiceBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IServiceBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IServiceBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IServiceBehavior" />
  <TypeSignature Language="F#" Value="type IServiceBehavior = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="9f6c0-101">提供一种在整个服务内修改或插入自定义扩展的机制，包括 <see cref="T:System.ServiceModel.ServiceHostBase" />。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-101">Provides a mechanism to modify or insert custom extensions across an entire service, including the <see cref="T:System.ServiceModel.ServiceHostBase" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f6c0-102">实现 <xref:System.ServiceModel.Description.IServiceBehavior> 可以在应用程序级别，修改、检查或扩展服务范围的某些执行方面：</span><span class="sxs-lookup"><span data-stu-id="9f6c0-102">Implement <xref:System.ServiceModel.Description.IServiceBehavior> to modify, examine, or extend some aspect of service-wide execution at the application level:</span></span>  
  
-   <span data-ttu-id="9f6c0-103">使用 <xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A> 方法可以更改运行时属性值或插入自定义扩展对象，例如错误处理程序、消息或参数拦截器、安全扩展以及其他自定义扩展对象。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-103">Use the <xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A> method to change run-time property values or insert custom extension objects such as error handlers, message or parameter interceptors, security extensions, and other custom extension objects.</span></span>  
  
-   <span data-ttu-id="9f6c0-104">使用 <xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A> 方法可在 Windows Communication Foundation （WCF）构造执行服务之前检查说明，以确认它可以正常执行。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-104">Use the <xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A> method to examine the description before Windows Communication Foundation (WCF) constructs the executing service to confirm that it can execute properly.</span></span>  
  
-   <span data-ttu-id="9f6c0-105">使用 <xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A> 方法可以向绑定元素传递服务的自定义信息，这样绑定元素就可向服务提供正确的支持。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-105">Use the <xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A> method to pass to a binding element the custom information for the service so that it can support the service correctly.</span></span>  
  
 <span data-ttu-id="9f6c0-106"><xref:System.ServiceModel.Description.IServiceBehavior> 对象可使用所有这些方法，但通常只有一种方法是重要的，在这种情况下，未被使用的方法可不带值返回。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-106"><xref:System.ServiceModel.Description.IServiceBehavior> objects can make use of any of these methods, but often only one is important; in such cases the unused methods can return without a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9f6c0-107">所有 <xref:System.ServiceModel.Description.IServiceBehavior> 方法会将 <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> 和 <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> 对象作为参数传递。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-107">All of the <xref:System.ServiceModel.Description.IServiceBehavior> methods pass <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> and <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> objects as a parameters.</span></span> <span data-ttu-id="9f6c0-108"><xref:System.ServiceModel.Description.ServiceDescription> 参数只用于检查；如果您修改了这些对象，则执行行为将不确定。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-108">The <xref:System.ServiceModel.Description.ServiceDescription> parameter is for examination only; if you modify these objects the execution behavior is undefined.</span></span>  
  
 <span data-ttu-id="9f6c0-109">若要执行 <xref:System.ServiceModel.Description.IServiceBehavior> 对象的自定义任务，则必须在构造服务运行时前，将该对象添加到 <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-109">To perform the customization task for which it is intended, the <xref:System.ServiceModel.Description.IServiceBehavior> object must be added to the <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> property prior to the construction of the service runtime.</span></span> <span data-ttu-id="9f6c0-110">有三种方法可以实现此操作：</span><span class="sxs-lookup"><span data-stu-id="9f6c0-110">There are three ways to do this:</span></span>  
  
-   <span data-ttu-id="9f6c0-111">以编程方式，先将自定义服务行为添加到 <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> 属性，然后对 <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> 对象调用 <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-111">Programmatically add the custom service behavior to the <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> property prior to the point where the <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> method is called on the <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType> object.</span></span>  
  
-   <span data-ttu-id="9f6c0-112">创建一个可实现 <xref:System.ServiceModel.Description.IServiceBehavior> 的自定义属性，并利用它来标记要修改的服务类。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-112">Create a custom attribute that implements <xref:System.ServiceModel.Description.IServiceBehavior> and use it to mark service classes that are to be modified.</span></span> <span data-ttu-id="9f6c0-113"><xref:System.ServiceModel.ServiceHost>构造对象时，WCF 使用反射来发现服务类型上的属性。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-113">When a <xref:System.ServiceModel.ServiceHost> object is constructed, WCF uses reflection to discover the attributes on the service type.</span></span> <span data-ttu-id="9f6c0-114">如果有属性实现 <xref:System.ServiceModel.Description.IServiceBehavior>，则它们将会被添加到 <xref:System.ServiceModel.Description.ServiceDescription> 上的行为集合中。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-114">If any attributes implement <xref:System.ServiceModel.Description.IServiceBehavior>, they are added to the behaviors collection on <xref:System.ServiceModel.Description.ServiceDescription>.</span></span>  
  
-   <span data-ttu-id="9f6c0-115">扩展 <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> 类，以支持应用程序配置文件或计算机配置文件中的行为规范。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-115">Extend the <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> class to support the specification of the behavior in an application or machine configuration file.</span></span> <span data-ttu-id="9f6c0-116">有关更多信息，请参见“示例”一节。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-116">See the Example section for more information.</span></span>  
  
 <span data-ttu-id="9f6c0-117">WCF 中服务行为的示例包括 <xref:System.ServiceModel.ServiceBehaviorAttribute> 属性、 <xref:System.ServiceModel.Description.ServiceThrottlingBehavior?displayProperty=nameWithType> <xref:System.ServiceModel.Description.ServiceDebugBehavior?displayProperty=nameWithType> 和 <xref:System.ServiceModel.Description.ServiceMetadataBehavior?displayProperty=nameWithType> 行为。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-117">Examples of service behaviors in WCF include the <xref:System.ServiceModel.ServiceBehaviorAttribute> attribute, the <xref:System.ServiceModel.Description.ServiceThrottlingBehavior?displayProperty=nameWithType>, the <xref:System.ServiceModel.Description.ServiceDebugBehavior?displayProperty=nameWithType> and the <xref:System.ServiceModel.Description.ServiceMetadataBehavior?displayProperty=nameWithType> behavior.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9f6c0-118">下面的代码示例演示了如何使用配置文件中所指定的服务行为来向服务应用程序中插入自定义错误处理程序。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-118">The following code example shows the use of a service behavior specified in a configuration file to insert a custom error handler in a service application.</span></span> <span data-ttu-id="9f6c0-119">在该示例中，错误处理程序捕获所有异常，并将它们转换为一个自定义 `GreetingFault` SOAP 错误，该自定义错误会随后返回给客户端。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-119">In this example, the error handler catches all exceptions and converts them into a custom `GreetingFault` SOAP fault that is then returned to the client.</span></span>  
  
 <span data-ttu-id="9f6c0-120">下面的 <xref:System.ServiceModel.Description.IServiceBehavior> 实现不添加任何绑定参数对象，而会将自定义 <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> 对象添加到所有 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> 属性，并会验证服务行为所应用到的、<xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> 类型为 `GreetingFault` 的服务的每个操作。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-120">The following <xref:System.ServiceModel.Description.IServiceBehavior> implementation adds no binding parameter objects, adds the custom <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> object to each <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> property, and validates that each operation of the service to which the service behavior is applied and has a <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> of type `GreetingFault`.</span></span>  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 <span data-ttu-id="9f6c0-121">在该示例中，行为类还可实现 <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>，这样就可通过在应用程序配置文件中使用服务行为来插入服务行为，具体请参见下面的代码示例。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-121">In this example, the behavior class also implements <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, which enables the service behavior to be inserted by using it in an application configuration file, as the following code example demonstrates.</span></span>  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase, System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt; endpoints, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.ServiceDescription serviceDescription, class System.ServiceModel.ServiceHostBase serviceHostBase, class System.Collections.ObjectModel.Collection`1&lt;class System.ServiceModel.Description.ServiceEndpoint&gt; endpoints, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddBindingParameters (serviceDescription As ServiceDescription, serviceHostBase As ServiceHostBase, endpoints As Collection(Of ServiceEndpoint), bindingParameters As BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::ServiceDescription ^ serviceDescription, System::ServiceModel::ServiceHostBase ^ serviceHostBase, System::Collections::ObjectModel::Collection&lt;System::ServiceModel::Description::ServiceEndpoint ^&gt; ^ endpoints, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberSignature Language="F#" Value="abstract member AddBindingParameters : System.ServiceModel.Description.ServiceDescription * System.ServiceModel.ServiceHostBase * System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt; * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit" Usage="iServiceBehavior.AddBindingParameters (serviceDescription, serviceHostBase, endpoints, bindingParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceDescription" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
        <Parameter Name="endpoints" Type="System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt;" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="serviceDescription"><span data-ttu-id="9f6c0-122">服务的服务说明。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-122">The service description of the service.</span></span></param>
        <param name="serviceHostBase"><span data-ttu-id="9f6c0-123">服务的宿主。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-123">The host of the service.</span></span></param>
        <param name="endpoints"><span data-ttu-id="9f6c0-124">服务终结点。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-124">The service endpoints.</span></span></param>
        <param name="bindingParameters"><span data-ttu-id="9f6c0-125">绑定元素可访问的自定义对象。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-125">Custom objects to which binding elements have access.</span></span></param>
        <summary><span data-ttu-id="9f6c0-126">用于向绑定元素传递自定义数据，以支持协定实现。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-126">Provides the ability to pass custom data to binding elements to support the contract implementation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f6c0-127">使用 <xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A> 方法可以将自定义对象添加到 `parameters` 集合，绑定元素可利用该集合获取额外信息，从而向协定提供支持。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-127">Use the <xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A> method to add custom data objects to the `parameters` collection that binding elements can use to acquire extra information to enable them to support the contract.</span></span>  
  
 <span data-ttu-id="9f6c0-128">对每个侦听 URI 都调用一次该方法。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-128">This method is called once for each listen URI.</span></span> <span data-ttu-id="9f6c0-129">例如，如果一个服务有四个终结点，其中两个终结点的侦听 URI 相同，则此方法将会被调用三次。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-129">For example, if a service has four endpoints, and two of them have the same listen URI, then this method gets called three times.</span></span> <span data-ttu-id="9f6c0-130">原因是，`bindingParameters` 要定位所有通道堆栈，每个侦听 URI 都有一个通道堆栈。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-130">The reason is that the `bindingParameters` target each channel stack and there is one channel stack for each listen URI.</span></span> <span data-ttu-id="9f6c0-131">因为每个调用都要在侦听 URI 接收这些终结点，所以有两个调用将会各自获得一个单独的 <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType>，另一个调用将会获得两个 <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType> 对象的集合。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-131">Because each call receives those endpoints at that listen URI, two calls each get a single <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType>, and one call gets a collection of two <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType> objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9f6c0-132">所有 <xref:System.ServiceModel.Description.IServiceBehavior> 方法会将 <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> 和 <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> 对象作为参数传递。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-132">All of the <xref:System.ServiceModel.Description.IServiceBehavior> methods pass <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> and <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> objects as a parameters.</span></span> <span data-ttu-id="9f6c0-133"><xref:System.ServiceModel.Description.ServiceDescription> 参数仅用于自定义检查和插入；如果您修改了这些对象，则执行行为将不确定。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-133">The <xref:System.ServiceModel.Description.ServiceDescription> parameter is for examination and insertion of customizations only; if you otherwise modify these objects the execution behavior is undefined.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.ServiceDescription serviceDescription, class System.ServiceModel.ServiceHostBase serviceHostBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyDispatchBehavior (serviceDescription As ServiceDescription, serviceHostBase As ServiceHostBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::ServiceDescription ^ serviceDescription, System::ServiceModel::ServiceHostBase ^ serviceHostBase);" />
      <MemberSignature Language="F#" Value="abstract member ApplyDispatchBehavior : System.ServiceModel.Description.ServiceDescription * System.ServiceModel.ServiceHostBase -&gt; unit" Usage="iServiceBehavior.ApplyDispatchBehavior (serviceDescription, serviceHostBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceDescription" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
      </Parameters>
      <Docs>
        <param name="serviceDescription"><span data-ttu-id="9f6c0-134">服务说明。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-134">The service description.</span></span></param>
        <param name="serviceHostBase"><span data-ttu-id="9f6c0-135">当前正在生成的宿主。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-135">The host that is currently being built.</span></span></param>
        <summary><span data-ttu-id="9f6c0-136">用于更改运行时属性值或插入自定义扩展对象（例如错误处理程序、消息或参数拦截器、安全扩展以及其他自定义扩展对象）。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-136">Provides the ability to change run-time property values or insert custom extension objects such as error handlers, message or parameter interceptors, security extensions, and other custom extension objects.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f6c0-137">实现 <xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A> 方法可以检查或修改正在构建的 <xref:System.ServiceModel.ServiceHostBase> 对象，从而支持某些自定义执行方案。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-137">Implement the <xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A> method to inspect or modify the <xref:System.ServiceModel.ServiceHostBase> object that is being constructed in order to support some custom execution scenario.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9f6c0-138">所有 <xref:System.ServiceModel.Description.IServiceBehavior> 方法会将 <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> 和 <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> 对象作为参数传递。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-138">All of the <xref:System.ServiceModel.Description.IServiceBehavior> methods pass <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> and <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> objects as a parameters.</span></span> <span data-ttu-id="9f6c0-139"><xref:System.ServiceModel.Description.ServiceDescription> 参数仅用于自定义检查和插入；如果您修改了这些对象，则执行行为将不确定。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-139">The <xref:System.ServiceModel.Description.ServiceDescription> parameter is for examination and insertion of customizations only; if you otherwise modify these objects the execution behavior is undefined.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9f6c0-140">下面的代码示例演示了如何使用配置文件中所指定的服务行为来向服务应用程序中插入自定义错误处理程序。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-140">The following code example shows the use of a service behavior specified in a configuration file to insert a custom error handler in a service application.</span></span> <span data-ttu-id="9f6c0-141">在该示例中，错误处理程序捕获所有异常，并将它们转换为一个自定义 `GreetingFault` SOAP 错误，该自定义错误会随后返回给客户端。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-141">In this example, the error handler catches all exceptions and converts them into a custom `GreetingFault` SOAP fault that is then returned to the client.</span></span>  
  
 <span data-ttu-id="9f6c0-142">下面的 <xref:System.ServiceModel.Description.IServiceBehavior> 实现不添加任何绑定参数对象，而会将自定义 <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> 对象添加到所有 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> 属性，并会验证服务行为所应用到的、<xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> 类型为 `GreetingFault` 的服务的每个操作。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-142">The following <xref:System.ServiceModel.Description.IServiceBehavior> implementation adds no binding parameter objects, adds the custom <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> object to each <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> property, and validates that each operation of the service to which the service behavior is applied and has a <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> of type `GreetingFault`.</span></span>  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 <span data-ttu-id="9f6c0-143">在该示例中，行为类还可实现 <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>，这样就可通过在应用程序配置文件中使用服务行为来插入服务行为，具体请参见下面的代码示例。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-143">In this example, the behavior class also implements <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, which enables the service behavior to be inserted by using it in an application configuration file, as the following code example demonstrates.</span></span>  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.ServiceDescription serviceDescription, class System.ServiceModel.ServiceHostBase serviceHostBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Validate (serviceDescription As ServiceDescription, serviceHostBase As ServiceHostBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::ServiceDescription ^ serviceDescription, System::ServiceModel::ServiceHostBase ^ serviceHostBase);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.ServiceModel.Description.ServiceDescription * System.ServiceModel.ServiceHostBase -&gt; unit" Usage="iServiceBehavior.Validate (serviceDescription, serviceHostBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceDescription" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
      </Parameters>
      <Docs>
        <param name="serviceDescription"><span data-ttu-id="9f6c0-144">服务说明。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-144">The service description.</span></span></param>
        <param name="serviceHostBase"><span data-ttu-id="9f6c0-145">当前正在构建的服务主机。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-145">The service host that is currently being constructed.</span></span></param>
        <summary><span data-ttu-id="9f6c0-146">用于检查服务主机和服务说明，从而确定服务是否可成功运行。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-146">Provides the ability to inspect the service host and the service description to confirm that the service can run successfully.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f6c0-147">使用 <xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A> 方法以确定当前服务是否会依照方案正确执行。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-147">Use the <xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A> method to confirm whether the current service can execute properly according to your scenario.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9f6c0-148">所有 <xref:System.ServiceModel.Description.IServiceBehavior> 方法会将 <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> 和 <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> 对象作为参数传递。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-148">All of the <xref:System.ServiceModel.Description.IServiceBehavior> methods pass <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> and <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> objects as a parameters.</span></span> <span data-ttu-id="9f6c0-149"><xref:System.ServiceModel.Description.ServiceDescription> 参数仅用于自定义检查和插入；如果您修改了这些对象，则执行行为将不确定。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-149">The <xref:System.ServiceModel.Description.ServiceDescription> parameter is for examination and insertion of customizations only; if you otherwise modify these objects the execution behavior is undefined.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9f6c0-150">下面的代码示例演示了如何使用配置文件中所指定的服务行为来向服务应用程序中插入自定义错误处理程序。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-150">The following code example shows the use of a service behavior specified in a configuration file to insert a custom error handler in a service application.</span></span> <span data-ttu-id="9f6c0-151">在该示例中，错误处理程序捕获所有异常，并将它们转换为一个自定义 `GreetingFault` SOAP 错误，该自定义错误会随后返回给客户端。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-151">In this example, the error handler catches all exceptions and converts them into a custom `GreetingFault` SOAP fault that is then returned to the client.</span></span>  
  
 <span data-ttu-id="9f6c0-152">下面的 <xref:System.ServiceModel.Description.IServiceBehavior> 实现不添加任何绑定参数对象，而会将自定义 <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> 对象添加到所有 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> 属性，并会验证服务行为所应用到的、<xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> 类型为 `GreetingFault` 的服务的每个操作。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-152">The following <xref:System.ServiceModel.Description.IServiceBehavior> implementation adds no binding parameter objects, adds the custom <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> object to each <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> property, and validates that each operation of the service to which the service behavior is applied and has a <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> of type `GreetingFault`.</span></span>  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 <span data-ttu-id="9f6c0-153">在该示例中，行为类还可实现 <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>，这样就可通过在应用程序配置文件中使用服务行为来插入服务行为，具体请参见下面的代码示例。</span><span class="sxs-lookup"><span data-stu-id="9f6c0-153">In this example, the behavior class also implements <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, which enables the service behavior to be inserted by using it in an application configuration file, as the following code example demonstrates.</span></span>  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
