<Type Name="ServiceMetadataBehavior" FullName="System.ServiceModel.Description.ServiceMetadataBehavior">
  <Metadata><Meta Name="ms.openlocfilehash" Value="07054cb8a57386c434d7bb49dc87f5a476deff13" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83970944" /></Metadata><TypeSignature Language="C#" Value="public class ServiceMetadataBehavior : System.ServiceModel.Description.IServiceBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceMetadataBehavior extends System.Object implements class System.ServiceModel.Description.IServiceBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.ServiceMetadataBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceMetadataBehavior&#xA;Implements IServiceBehavior" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceMetadataBehavior : System::ServiceModel::Description::IServiceBehavior" />
  <TypeSignature Language="F#" Value="type ServiceMetadataBehavior = class&#xA;    interface IServiceBehavior" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ServiceModel.Description.IServiceBehavior</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>控制服务元数据和相关信息的发布。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将 <xref:System.ServiceModel.Description.ServiceMetadataBehavior> 对象添加到 <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A?displayProperty=nameWithType> 集合（或应用程序配置文件中的[&lt;serviceMetadata&gt;](/dotnet/framework/configure-apps/file-schema/wcf/servicemetadata)元素），以启用或禁用服务元数据的发布。 但是，向服务添加行为并不足以启用元数据发布：  
  
-   要启用 WS-Transfer GET 元数据检索，还必须向您的服务添加终结点，其中协定为 `IMetadataExchange`。 有关示例，请参阅[如何：使用代码发布服务的元数据](/dotnet/framework/wcf/feature-details/how-to-publish-metadata-for-a-service-using-code)。 `IMetadataExchange` 终结点可以按配置任何其他终结点的方式进行配置。  
  
-   要启用 HTTP GET 元数据检索，请将 <xref:System.ServiceModel.Description.ServiceMetadataBehavior.HttpGetEnabled%2A> 属性设置为 `true`。 有关 HTTP GET 元数据的地址的详细信息，请参阅 <xref:System.ServiceModel.Description.ServiceMetadataBehavior.HttpGetEnabled%2A>。  
  
 `IMetadataExchange` 终结点的地址遵循关于基址和终结点地址相结合的常规规则。 有关详细信息，请参阅[发布元数据](/dotnet/framework/wcf/feature-details/publishing-metadata)。  
  
 若要使用配置文件启用元数据的发布，请将[&lt;serviceMetadata&gt;](/dotnet/framework/configure-apps/file-schema/wcf/servicemetadata)元素添加到[&lt;serviceBehaviors&gt;](/dotnet/framework/configure-apps/file-schema/wcf/servicebehaviors)元素，并将元素与要发布元数据的[&lt;服务&gt;](/dotnet/framework/configure-apps/file-schema/wcf/service)元素相关联。 有关示例，请参阅[如何：使用配置文件发布服务的元数据](/dotnet/framework/wcf/feature-details/how-to-publish-metadata-for-a-service-using-a-configuration-file)。 该类包含以下成员：  
  
-   <xref:System.ServiceModel.Description.ServiceMetadataBehavior.HttpGetEnabled%2A> 属性指定是否为 HTTP/GET 请求返回元数据。  
  
-   <xref:System.ServiceModel.Description.ServiceMetadataBehavior.HttpGetUrl%2A> 属性（与基址结合使用）可指定 HTTP/GET 地址。  
  
-   <xref:System.ServiceModel.Description.ServiceMetadataBehavior.HttpsGetEnabled%2A> 属性指定是否为 HTTPS/GET 请求返回元数据。  
  
-   <xref:System.ServiceModel.Description.ServiceMetadataBehavior.HttpsGetUrl%2A> 属性（与基址结合使用）可指定 HTTPS/GET 地址。  
  
-   <xref:System.ServiceModel.Description.ServiceMetadataBehavior.MetadataExporter%2A> 属性返回基础导出程序。  
  
 通常，从应用程序配置文件使用 <xref:System.ServiceModel.Description.ServiceMetadataBehavior>。 有关代码示例，请参见“示例”部分。  
  
   
  
## Examples  
 下面的代码示例演示如何在配置文件中使用 <xref:System.ServiceModel.Description.ServiceMetadataBehavior>，以便启用进行 HTTP GET 和 WS-Transfer GET 请求的元数据支持。  
  
 [!code-csharp[ServiceMetadataBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/servicemetadatabehavior/cs/hostapplication.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceMetadataBehavior ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.ServiceMetadataBehavior.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceMetadataBehavior();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.ServiceModel.Description.ServiceMetadataBehavior" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用以下值创建 <xref:System.ServiceModel.Description.ServiceMetadataBehavior>：  
  
-   <xref:System.ServiceModel.Description.ServiceMetadataBehavior.HttpGetEnabled%2A> 属性为 `false`。  
  
-   <xref:System.ServiceModel.Description.ServiceMetadataBehavior.HttpsGetEnabled%2A> 属性为 `false`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExternalMetadataLocation">
      <MemberSignature Language="C#" Value="public Uri ExternalMetadataLocation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri ExternalMetadataLocation" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Description.ServiceMetadataBehavior.ExternalMetadataLocation" />
      <MemberSignature Language="VB.NET" Value="Public Property ExternalMetadataLocation As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ ExternalMetadataLocation { Uri ^ get(); void set(Uri ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ExternalMetadataLocation : Uri with get, set" Usage="System.ServiceModel.Description.ServiceMetadataBehavior.ExternalMetadataLocation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.UriTypeConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置作为服务元数据的位置的值。</summary>
        <value>服务元数据的位置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将对外部元数据位置的引用返回到客户端。 <xref:System.ServiceModel.Description.ServiceMetadataBehavior.ExternalMetadataLocation%2A> 属性可以是相对的，也可以是绝对的。 如果是相对的，则由与 <xref:System.ServiceModel.Description.ServiceMetadataBehavior.HttpGetUrl%2A> 或 <xref:System.ServiceModel.Description.ServiceMetadataBehavior.HttpsGetUrl%2A> 相对的客户端来解析地址，具体取决于该客户端检索元数据的方式。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">该值为绝对值，且架构既不是 http，也不是 https。</exception>
      </Docs>
    </Member>
    <Member MemberName="HttpGetBinding">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.Binding HttpGetBinding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Channels.Binding HttpGetBinding" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Description.ServiceMetadataBehavior.HttpGetBinding" />
      <MemberSignature Language="VB.NET" Value="Public Property HttpGetBinding As Binding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::Channels::Binding ^ HttpGetBinding { System::ServiceModel::Channels::Binding ^ get(); void set(System::ServiceModel::Channels::Binding ^ value); };" />
      <MemberSignature Language="F#" Value="member this.HttpGetBinding : System.ServiceModel.Channels.Binding with get, set" Usage="System.ServiceModel.Description.ServiceMetadataBehavior.HttpGetBinding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.Binding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置当传输为 HTTP 时用于配置元数据检索的绑定。</summary>
        <value>一个 <see cref="T:System.ServiceModel.Channels.Binding" />，可用于通过 HTTP 协议检索元数据。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在以前版本的 WCF 中，使用 HTTP GET 完成元数据检索，以通过 Web 浏览器访问服务帮助页。 仅支持 <xref:System.ServiceModel.Channels.HttpTransportBindingElement>。  对于使用 HTTPS GET 的元数据检索，仅支持 <xref:System.ServiceModel.Channels.HttpsTransportBindingElement>。   HttpGetBinding 和 HttpsGetBinding 属性支持以编程方式或通过配置文件，使用绑定进行元数据检索（使用 HTTP GET 或 HTTPS GET），以及使用绑定访问可配置的服务网页。  
  
 有关检索帮助页的详细信息，请使用 "<xref:System.ServiceModel.Description.ServiceDebugBehavior.HttpHelpPageBinding%2A>" 和 "<xref:System.ServiceModel.Description.ServiceDebugBehavior.HttpsHelpPageBinding%2A>" 属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HttpGetEnabled">
      <MemberSignature Language="C#" Value="public bool HttpGetEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HttpGetEnabled" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Description.ServiceMetadataBehavior.HttpGetEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property HttpGetEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HttpGetEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.HttpGetEnabled : bool with get, set" Usage="System.ServiceModel.Description.ServiceMetadataBehavior.HttpGetEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否发布服务元数据以便使用 HTTP/GET 请求进行检索。</summary>
        <value>如果发布 WSDL，则为 <see langword="true" />；否则为 <see langword="false" />。 默认为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 <xref:System.ServiceModel.Description.ServiceMetadataBehavior.HttpGetUrl%2A> 的值是相对值，则发布元数据的地址为基址和服务地址加上 `?wsdl` querystring。  
  
 如果 <xref:System.ServiceModel.Description.ServiceMetadataBehavior.HttpGetUrl%2A> 的值是绝对值，则发布元数据的地址为 <xref:System.ServiceModel.Description.ServiceMetadataBehavior.HttpGetUrl%2A> 值的值加上 `?wsdl` querystring。  
  
 例如，如果服务地址为 `http://localhost:8080/CalculatorService` 且 <xref:System.ServiceModel.Description.ServiceMetadataBehavior.HttpGetUrl%2A> 为空字符串，则 HTTP/GET 元数据地址为 `http://localhost:8080/CalculatorService?wsdl`。  
  
 如果不启用此属性且不更改 <xref:System.ServiceModel.Description.ServiceMetadataBehavior.HttpGetUrl%2A> 或将其设置为相对地址，则在不使用 HTTP 基址打开服务主机的情况下会在运行时引发异常。  
  
   
  
## Examples  
 以下代码示例演示如何在配置文件中使用 <xref:System.ServiceModel.Description.ServiceMetadataBehavior>，以便启用进行 HTTP/GET 和 WS-Transfer/GET 请求的元数据支持。  
  
 [!code-csharp[ServiceMetadataBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/servicemetadatabehavior/cs/hostapplication.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HttpGetUrl">
      <MemberSignature Language="C#" Value="public Uri HttpGetUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri HttpGetUrl" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Description.ServiceMetadataBehavior.HttpGetUrl" />
      <MemberSignature Language="VB.NET" Value="Public Property HttpGetUrl As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ HttpGetUrl { Uri ^ get(); void set(Uri ^ value); };" />
      <MemberSignature Language="F#" Value="member this.HttpGetUrl : Uri with get, set" Usage="System.ServiceModel.Description.ServiceMetadataBehavior.HttpGetUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.UriTypeConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置进行 HTTP/GET 请求的元数据发布的位置。</summary>
        <value>元数据的绝对位置或相对位置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 <xref:System.ServiceModel.Description.ServiceMetadataBehavior.HttpGetUrl%2A> 的值是相对值，则发布元数据的地址为基址和服务地址加上 `?wsdl` querystring。  
  
 如果 <xref:System.ServiceModel.Description.ServiceMetadataBehavior.HttpGetUrl%2A> 的值是绝对值，则发布元数据的地址为此值加上 `?wsdl` querystring。  
  
 例如，如果服务地址为 `http://localhost:8080/CalculatorService` 且 <xref:System.ServiceModel.Description.ServiceMetadataBehavior.HttpGetUrl%2A> 为空字符串，则 HTTP/GET 元数据地址为 `http://localhost:8080/CalculatorService?wsdl`。  
  
   
  
## Examples  
 以下代码示例演示如何在配置文件中使用 <xref:System.ServiceModel.Description.ServiceMetadataBehavior>，以便启用进行 HTTP/GET 和 WS-Transfer/GET 请求的元数据支持。  
  
 [!code-csharp[ServiceMetadataBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/servicemetadatabehavior/cs/hostapplication.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HttpsGetBinding">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.Binding HttpsGetBinding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Channels.Binding HttpsGetBinding" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Description.ServiceMetadataBehavior.HttpsGetBinding" />
      <MemberSignature Language="VB.NET" Value="Public Property HttpsGetBinding As Binding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::Channels::Binding ^ HttpsGetBinding { System::ServiceModel::Channels::Binding ^ get(); void set(System::ServiceModel::Channels::Binding ^ value); };" />
      <MemberSignature Language="F#" Value="member this.HttpsGetBinding : System.ServiceModel.Channels.Binding with get, set" Usage="System.ServiceModel.Description.ServiceMetadataBehavior.HttpsGetBinding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.Binding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置当传输为 HTTPS 时用于配置元数据检索的绑定。</summary>
        <value>一个 <see cref="T:System.ServiceModel.Channels.Binding" />，可用于通过 HTTPS 协议检索元数据。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在以前版本的 WCF 中，使用 HTTP GET 完成元数据检索，以通过 Web 浏览器访问服务帮助页。 仅支持 <xref:System.ServiceModel.Channels.HttpTransportBindingElement>。  对于使用 HTTPS GET 的元数据检索，仅支持 <xref:System.ServiceModel.Channels.HttpsTransportBindingElement>。   HttpGetBinding 和 HttpsGetBinding 属性支持以编程方式或通过配置文件，使用绑定进行元数据检索（使用 HTTP GET 或 HTTPS GET），以及使用绑定访问可配置的服务网页。  
  
 有关检索帮助页的详细信息，请使用 "<xref:System.ServiceModel.Description.ServiceDebugBehavior.HttpHelpPageBinding%2A>" 和 "<xref:System.ServiceModel.Description.ServiceDebugBehavior.HttpsHelpPageBinding%2A>" 属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HttpsGetEnabled">
      <MemberSignature Language="C#" Value="public bool HttpsGetEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HttpsGetEnabled" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Description.ServiceMetadataBehavior.HttpsGetEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property HttpsGetEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HttpsGetEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.HttpsGetEnabled : bool with get, set" Usage="System.ServiceModel.Description.ServiceMetadataBehavior.HttpsGetEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否发布服务元数据以便使用 HTTPS/GET 请求进行检索。</summary>
        <value>如果发布 WSDL，则为 <see langword="true" />；否则为 <see langword="false" />。 默认为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 <xref:System.ServiceModel.Description.ServiceMetadataBehavior.HttpsGetUrl%2A> 的值是相对值，则发布元数据的地址为基址和服务地址加上 `?wsdl` querystring。  
  
 如果 <xref:System.ServiceModel.Description.ServiceMetadataBehavior.HttpsGetUrl%2A> 的值是绝对值，则发布元数据的地址为 <xref:System.ServiceModel.Description.ServiceMetadataBehavior.HttpsGetUrl%2A> 值的值加上 `?wsdl` querystring。  
  
 例如，如果服务地址为 `https://localhost:8080/CalculatorService` 且 <xref:System.ServiceModel.Description.ServiceMetadataBehavior.HttpsGetUrl%2A> 为空字符串，则 HTTPS/GET 元数据地址为 `https://localhost:8080/CalculatorService?wsdl`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HttpsGetUrl">
      <MemberSignature Language="C#" Value="public Uri HttpsGetUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri HttpsGetUrl" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Description.ServiceMetadataBehavior.HttpsGetUrl" />
      <MemberSignature Language="VB.NET" Value="Public Property HttpsGetUrl As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ HttpsGetUrl { Uri ^ get(); void set(Uri ^ value); };" />
      <MemberSignature Language="F#" Value="member this.HttpsGetUrl : Uri with get, set" Usage="System.ServiceModel.Description.ServiceMetadataBehavior.HttpsGetUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.UriTypeConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置进行 HTTPS/GET 请求的元数据发布的位置。</summary>
        <value>HTTPS 元数据的地址。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 <xref:System.ServiceModel.Description.ServiceMetadataBehavior.HttpsGetUrl%2A> 的值是相对值，则发布元数据的地址为基址和服务地址加上 `?wsdl` querystring。  
  
 如果 <xref:System.ServiceModel.Description.ServiceMetadataBehavior.HttpsGetUrl%2A> 的值是绝对值，则发布元数据的地址为 <xref:System.ServiceModel.Description.ServiceMetadataBehavior.HttpsGetUrl%2A> 值的值加上 `?wsdl` querystring。  
  
 例如，如果服务地址为 `https://localhost:8080/CalculatorService` 且 <xref:System.ServiceModel.Description.ServiceMetadataBehavior.HttpsGetUrl%2A> 为空字符串，则 HTTPS/GET 元数据地址为 `https://localhost:8080/CalculatorService?wsdl`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MetadataExporter">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Description.MetadataExporter MetadataExporter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Description.MetadataExporter MetadataExporter" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Description.ServiceMetadataBehavior.MetadataExporter" />
      <MemberSignature Language="VB.NET" Value="Public Property MetadataExporter As MetadataExporter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::Description::MetadataExporter ^ MetadataExporter { System::ServiceModel::Description::MetadataExporter ^ get(); void set(System::ServiceModel::Description::MetadataExporter ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MetadataExporter : System.ServiceModel.Description.MetadataExporter with get, set" Usage="System.ServiceModel.Description.ServiceMetadataBehavior.MetadataExporter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.MetadataExporter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于发布服务元数据的内部 <see cref="T:System.ServiceModel.Description.MetadataExporter" /> 对象。</summary>
        <value>内部 <see cref="T:System.ServiceModel.Description.MetadataExporter" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.ServiceModel.Description.MetadataExporter> 对象可以修改服务元数据的发布。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MexContractName">
      <MemberSignature Language="C#" Value="public const string MexContractName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string MexContractName" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.Description.ServiceMetadataBehavior.MexContractName" />
      <MemberSignature Language="VB.NET" Value="Public Const MexContractName As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ MexContractName;" />
      <MemberSignature Language="F#" Value="val mutable MexContractName : string" Usage="System.ServiceModel.Description.ServiceMetadataBehavior.MexContractName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回字符串 <c>IMetadataContract</c>。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ServiceModel.Description.IServiceBehavior.AddBindingParameters">
      <MemberSignature Language="C#" Value="void IServiceBehavior.AddBindingParameters (System.ServiceModel.Description.ServiceDescription description, System.ServiceModel.ServiceHostBase serviceHostBase, System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt; endpoints, System.ServiceModel.Channels.BindingParameterCollection parameters);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(class System.ServiceModel.Description.ServiceDescription description, class System.ServiceModel.ServiceHostBase serviceHostBase, class System.Collections.ObjectModel.Collection`1&lt;class System.ServiceModel.Description.ServiceEndpoint&gt; endpoints, class System.ServiceModel.Channels.BindingParameterCollection parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.ServiceMetadataBehavior.System#ServiceModel#Description#IServiceBehavior#AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="VB.NET" Value="Sub AddBindingParameters (description As ServiceDescription, serviceHostBase As ServiceHostBase, endpoints As Collection(Of ServiceEndpoint), parameters As BindingParameterCollection) Implements IServiceBehavior.AddBindingParameters" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System::ServiceModel::Description::ServiceDescription ^ description, System::ServiceModel::ServiceHostBase ^ serviceHostBase, System::Collections::ObjectModel::Collection&lt;System::ServiceModel::Description::ServiceEndpoint ^&gt; ^ endpoints, System::ServiceModel::Channels::BindingParameterCollection ^ parameters) = System::ServiceModel::Description::IServiceBehavior::AddBindingParameters;" />
      <MemberSignature Language="F#" Value="abstract member System.ServiceModel.Description.IServiceBehavior.AddBindingParameters : System.ServiceModel.Description.ServiceDescription * System.ServiceModel.ServiceHostBase * System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt; * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit&#xA;override this.System.ServiceModel.Description.IServiceBehavior.AddBindingParameters : System.ServiceModel.Description.ServiceDescription * System.ServiceModel.ServiceHostBase * System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt; * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit" Usage="serviceMetadataBehavior.System.ServiceModel.Description.IServiceBehavior.AddBindingParameters (description, serviceHostBase, endpoints, parameters)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
        <Parameter Name="endpoints" Type="System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt;" />
        <Parameter Name="parameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="description">要配置的服务说明。</param>
        <param name="serviceHostBase">服务的宿主。</param>
        <param name="endpoints">要配置的终结点。</param>
        <param name="parameters">要配置的绑定参数。</param>
        <summary>配置基础绑定以支持该行为的 <see cref="T:System.ServiceModel.Description.IServiceBehavior" /> 的实现。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="void IServiceBehavior.ApplyDispatchBehavior (System.ServiceModel.Description.ServiceDescription description, System.ServiceModel.ServiceHostBase serviceHostBase);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(class System.ServiceModel.Description.ServiceDescription description, class System.ServiceModel.ServiceHostBase serviceHostBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.ServiceMetadataBehavior.System#ServiceModel#Description#IServiceBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" />
      <MemberSignature Language="VB.NET" Value="Sub ApplyDispatchBehavior (description As ServiceDescription, serviceHostBase As ServiceHostBase) Implements IServiceBehavior.ApplyDispatchBehavior" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System::ServiceModel::Description::ServiceDescription ^ description, System::ServiceModel::ServiceHostBase ^ serviceHostBase) = System::ServiceModel::Description::IServiceBehavior::ApplyDispatchBehavior;" />
      <MemberSignature Language="F#" Value="abstract member System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior : System.ServiceModel.Description.ServiceDescription * System.ServiceModel.ServiceHostBase -&gt; unit&#xA;override this.System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior : System.ServiceModel.Description.ServiceDescription * System.ServiceModel.ServiceHostBase -&gt; unit" Usage="serviceMetadataBehavior.System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior (description, serviceHostBase)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
      </Parameters>
      <Docs>
        <param name="description">要修改的服务说明。</param>
        <param name="serviceHostBase">服务的宿主。</param>
        <summary>配置基础绑定以支持服务行为的 <see cref="T:System.ServiceModel.Description.IServiceBehavior" /> 的实现。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="description" /> 或 <paramref name="serviceHostBase" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="serviceHostBase" /> 的目标地址为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.ServiceModel.Description.IServiceBehavior.Validate">
      <MemberSignature Language="C#" Value="void IServiceBehavior.Validate (System.ServiceModel.Description.ServiceDescription description, System.ServiceModel.ServiceHostBase serviceHostBase);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ServiceModel.Description.IServiceBehavior.Validate(class System.ServiceModel.Description.ServiceDescription description, class System.ServiceModel.ServiceHostBase serviceHostBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.ServiceMetadataBehavior.System#ServiceModel#Description#IServiceBehavior#Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" />
      <MemberSignature Language="VB.NET" Value="Sub Validate (description As ServiceDescription, serviceHostBase As ServiceHostBase) Implements IServiceBehavior.Validate" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.ServiceModel.Description.IServiceBehavior.Validate(System::ServiceModel::Description::ServiceDescription ^ description, System::ServiceModel::ServiceHostBase ^ serviceHostBase) = System::ServiceModel::Description::IServiceBehavior::Validate;" />
      <MemberSignature Language="F#" Value="abstract member System.ServiceModel.Description.IServiceBehavior.Validate : System.ServiceModel.Description.ServiceDescription * System.ServiceModel.ServiceHostBase -&gt; unit&#xA;override this.System.ServiceModel.Description.IServiceBehavior.Validate : System.ServiceModel.Description.ServiceDescription * System.ServiceModel.ServiceHostBase -&gt; unit" Usage="serviceMetadataBehavior.System.ServiceModel.Description.IServiceBehavior.Validate (description, serviceHostBase)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
      </Parameters>
      <Docs>
        <param name="description">要验证的服务说明。</param>
        <param name="serviceHostBase">服务的宿主。</param>
        <summary>验证服务说明是否可以支持该行为的 <see cref="T:System.ServiceModel.Description.IServiceBehavior" /> 的实现。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
