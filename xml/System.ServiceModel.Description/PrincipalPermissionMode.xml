<Type Name="PrincipalPermissionMode" FullName="System.ServiceModel.Description.PrincipalPermissionMode">
  <Metadata><Meta Name="ms.openlocfilehash" Value="642b8006d8c484e16ed368d752f6637e5cbb750c" /><Meta Name="ms.sourcegitcommit" Value="9f423345753728e8cad38d4a22663a109e69ea91" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/04/2021" /><Meta Name="ms.locfileid" Value="102088116" /></Metadata><TypeSignature Language="C#" Value="public enum PrincipalPermissionMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed PrincipalPermissionMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.PrincipalPermissionMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum PrincipalPermissionMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class PrincipalPermissionMode" />
  <TypeSignature Language="F#" Value="type PrincipalPermissionMode = " />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>设置使用 <see cref="T:System.Security.Permissions.PrincipalPermissionAttribute" /> 对方法访问进行控制时所执行的授权检查的模式。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果将 <xref:System.Security.Permissions.PrincipalPermissionAttribute> 应用到方法，此模式将会指定授权访问时要用的一组角色。 默认情况下，该属性使用 Windows 组（例如 `Administrator` 或 `Users`）来指定用户必须所属的角色。  
  
 若要通过编程方式设置该模式，请创建 `ServiceHost` 类的实例，然后在它的行为集合中查找 <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior>，并将 <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior.PrincipalPermissionMode%2A> 设置为相应的枚举。 下面的示例将属性设置为 UseAspNetRoles。  
  
 [!code-csharp[PrincipalPermissionMode#1](~/samples/snippets/csharp/VS_Snippets_CFX/principalpermissionmode/cs/source.cs#1)]
 [!code-vb[PrincipalPermissionMode#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/principalpermissionmode/vb/source.vb#1)]  
  
 还可以通过将[ &lt; serviceAuthorization &gt; ](/dotnet/framework/configure-apps/file-schema/wcf/serviceauthorization-element)添加到配置文件的[ &lt; serviceBehaviors &gt; ](/dotnet/framework/configure-apps/file-schema/wcf/servicebehaviors)来设置配置中的行为，如以下代码所示。  
  
 [!code-csharp[PrincipalPermissionMode#10](~/samples/snippets/csharp/VS_Snippets_CFX/principalpermissionmode/cs/source.cs#10)]
 [!code-vb[PrincipalPermissionMode#10](~/samples/snippets/visualbasic/VS_Snippets_CFX/principalpermissionmode/vb/source.vb#10)]  
  
 当 <xref:System.Security.Permissions.PrincipalPermissionAttribute> 属性应用到方法时，枚举会影响该属性向用户授权的方式。 下面的示例将该属性应用到了方法，并且要求用户属于该计算机上的 Users 组。 只有将 <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior.PrincipalPermissionMode%2A> 设置为 `UseWindowsGroup`（默认设置）时，此代码才起作用。  
  
 [!code-csharp[PrincipalPermissionMode#2](~/samples/snippets/csharp/VS_Snippets_CFX/principalpermissionmode/cs/source.cs#2)]
 [!code-vb[PrincipalPermissionMode#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/principalpermissionmode/vb/source.vb#2)]  
  
## <a name="useaspnetroles"></a>UseAspNetRoles  
 UseAspNetRoles 值用于所有凭据类型。 此模式使 Windows Communication Foundation (WCF) 可以使用 ASP.NET 角色提供程序来做出授权决策。  
  
 如果服务的凭据为 X.509 证书，则可以将 `Name` 的 <xref:System.Security.Permissions.PrincipalPermissionAttribute> 属性设置为由“主题”字段和“指纹”字段的串联值组成的字符串，如下面的示例所示。  
  
 [!code-csharp[PrincipalPermissionMode#3](~/samples/snippets/csharp/VS_Snippets_CFX/principalpermissionmode/cs/source.cs#3)]
 [!code-vb[PrincipalPermissionMode#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/principalpermissionmode/vb/source.vb#3)]  
  
 该串联字符串由用分号和空格分隔的主题值和指纹值组成。  
  
 还可以将证书的“主题”字段设置为空字符串。 在这种情况下，可以将 `Name` 属性设置为分号，后跟空格，然后是指纹，如下面的示例所示。  
  
 [!code-csharp[PrincipalPermissionMode#4](~/samples/snippets/csharp/VS_Snippets_CFX/principalpermissionmode/cs/source.cs#4)]
 [!code-vb[PrincipalPermissionMode#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/principalpermissionmode/vb/source.vb#4)]  
  
 如果存在 ASP.NET 角色提供程序，则还可以将 <xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A> 属性设置为数据库中的角色。 默认情况下，数据库由 <xref:System.Web.Security.SqlRoleProvider> 表示。 您还可以利用 <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior.RoleProvider%2A> 类的 <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior> 属性来设置自定义角色提供程序。 下面的代码将该角色设置为了 `Administrators`。 请注意，角色提供程序必须将用户帐户映射到该角色。  
  
 [!code-csharp[PrincipalPermissionMode#13](~/samples/snippets/csharp/VS_Snippets_CFX/principalpermissionmode/cs/source.cs#13)]
 [!code-vb[PrincipalPermissionMode#13](~/samples/snippets/visualbasic/VS_Snippets_CFX/principalpermissionmode/vb/source.vb#13)]  
  
 有关 ASP.NET 角色提供程序的详细信息，请参阅 [如何：使用 ASP.NET 2.0 中的角色管理器](https://go.microsoft.com/fwlink/?LinkId=96692)。  
  
 有关使用 WCF 和角色提供程序的详细信息，请参阅 [如何：将 ASP.NET 角色提供程序用于服务](/dotnet/framework/wcf/feature-details/how-to-use-the-aspnet-role-provider-with-a-service)。  
  
## <a name="custom"></a>“自定义”  
 当属性设置为 Custom 时，还必须提供实现类的自定义类 <xref:System.IdentityModel.Policy.IAuthorizationPolicy> 。 此类负责提供 `IPrincipal` 集合内调用方的 <xref:System.IdentityModel.Policy.EvaluationContext.Properties%2A> 表示形式。 它必须使用“Principal”字符串关键字将 `IPrincipal` 实例存储到属性集合中，如下面的示例所示。  
  
```  
evaluationContext.Properties["Principal"]=new CustomPrincipal(identity);  
```  
  
## <a name="background"></a>背景  
 .NET Framework 中的基于角色的安全性使应用程序能够通过代码指定授权。 指定 <xref:System.Security.Permissions.PrincipalPermission> 请求后，<xref:System.Threading.Thread.CurrentPrincipal%2A> 必须满足 `PrincipalPermission` 要求。 例如，用户必须为特定的角色或位于特定的组中。 否则，线程将无权执行代码，这会导致异常。 WCF 提供了一组 <xref:System.ServiceModel.Description.PrincipalPermissionMode> 选项，用于根据 <xref:System.Threading.Thread.CurrentPrincipal%2A> 相应的具体情况指定 <xref:System.Security.SecurityContext> 。  
  
   
  
## Examples  
 下面的示例演示如何指定 UseAspNetRoles。  
  
 [!code-csharp[PrincipalPermissionMode#7](~/samples/snippets/csharp/VS_Snippets_CFX/principalpermissionmode/cs/source.cs#7)]
 [!code-vb[PrincipalPermissionMode#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/principalpermissionmode/vb/source.vb#7)]  
  
 下面的示例演示如何指定自定义。  
  
 [!code-csharp[PrincipalPermissionMode#8](~/samples/snippets/csharp/VS_Snippets_CFX/principalpermissionmode/cs/source.cs#8)]
 [!code-vb[PrincipalPermissionMode#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/principalpermissionmode/vb/source.vb#8)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Always">
      <MemberSignature Language="C#" Value="Always" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.Description.PrincipalPermissionMode Always = int32(4)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.Description.PrincipalPermissionMode.Always" />
      <MemberSignature Language="VB.NET" Value="Always" />
      <MemberSignature Language="C++ CLI" Value="Always" />
      <MemberSignature Language="F#" Value="Always = 4" Usage="System.ServiceModel.Description.PrincipalPermissionMode.Always" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.PrincipalPermissionMode</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>始终允许用户为 <see cref="T:System.Security.Principal.IPrincipal" /> 指定 <see cref="P:System.Threading.Thread.CurrentPrincipal" /> 类。</summary>
      </Docs>
    </Member>
    <Member MemberName="Custom">
      <MemberSignature Language="C#" Value="Custom" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.Description.PrincipalPermissionMode Custom = int32(3)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.Description.PrincipalPermissionMode.Custom" />
      <MemberSignature Language="VB.NET" Value="Custom" />
      <MemberSignature Language="C++ CLI" Value="Custom" />
      <MemberSignature Language="F#" Value="Custom = 3" Usage="System.ServiceModel.Description.PrincipalPermissionMode.Custom" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.PrincipalPermissionMode</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary>使用户能够为 <see cref="T:System.Security.Principal.IPrincipal" /> 指定自定义 <see cref="P:System.Threading.Thread.CurrentPrincipal" /> 类。</summary>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="None" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.Description.PrincipalPermissionMode None = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.Description.PrincipalPermissionMode.None" />
      <MemberSignature Language="VB.NET" Value="None" />
      <MemberSignature Language="C++ CLI" Value="None" />
      <MemberSignature Language="F#" Value="None = 0" Usage="System.ServiceModel.Description.PrincipalPermissionMode.None" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.PrincipalPermissionMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>未设置 <see cref="P:System.Threading.Thread.CurrentPrincipal" />。</summary>
      </Docs>
    </Member>
    <Member MemberName="UseAspNetRoles">
      <MemberSignature Language="C#" Value="UseAspNetRoles" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.Description.PrincipalPermissionMode UseAspNetRoles = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.Description.PrincipalPermissionMode.UseAspNetRoles" />
      <MemberSignature Language="VB.NET" Value="UseAspNetRoles" />
      <MemberSignature Language="C++ CLI" Value="UseAspNetRoles" />
      <MemberSignature Language="F#" Value="UseAspNetRoles = 2" Usage="System.ServiceModel.Description.PrincipalPermissionMode.UseAspNetRoles" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.PrincipalPermissionMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary><see cref="P:System.Threading.Thread.CurrentPrincipal" /> 是基于 ASP.NET 角色提供程序设置的 (<see cref="T:System.Web.Security.RoleProvider" />) 。</summary>
      </Docs>
    </Member>
    <Member MemberName="UseWindowsGroups">
      <MemberSignature Language="C#" Value="UseWindowsGroups" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.Description.PrincipalPermissionMode UseWindowsGroups = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.Description.PrincipalPermissionMode.UseWindowsGroups" />
      <MemberSignature Language="VB.NET" Value="UseWindowsGroups" />
      <MemberSignature Language="C++ CLI" Value="UseWindowsGroups" />
      <MemberSignature Language="F#" Value="UseWindowsGroups = 1" Usage="System.ServiceModel.Description.PrincipalPermissionMode.UseWindowsGroups" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.PrincipalPermissionMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary><see cref="P:System.Threading.Thread.CurrentPrincipal" /> 的设置是基于 Windows (<see cref="T:System.Security.Principal.WindowsPrincipal" />) 进行的。 如果用户标识不与 Windows 帐户关联，则将使用匿名 Windows 用户。</summary>
      </Docs>
    </Member>
  </Members>
</Type>
