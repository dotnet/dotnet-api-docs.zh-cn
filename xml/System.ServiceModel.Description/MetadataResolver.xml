<Type Name="MetadataResolver" FullName="System.ServiceModel.Description.MetadataResolver">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1e73d59ea52f83adccf032114fdb8598f2c160d6" /><Meta Name="ms.sourcegitcommit" Value="397961a0164281b579f68064c3bb66c071f374d9" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/14/2020" /><Meta Name="ms.locfileid" Value="69152331" /></Metadata><TypeSignature Language="C#" Value="public static class MetadataResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit MetadataResolver extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.MetadataResolver" />
  <TypeSignature Language="VB.NET" Value="Public Class MetadataResolver" />
  <TypeSignature Language="C++ CLI" Value="public ref class MetadataResolver abstract sealed" />
  <TypeSignature Language="F#" Value="type MetadataResolver = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>将元数据作为 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 对象进行检索和导入。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.ServiceModel.Description.MetadataResolver> 类可快速从元数据中导入服务的终结点。 此类可下载元数据并将其转换为 <xref:System.ServiceModel.Description.ServiceEndpoint> 对象。 若要下载元数据并将该信息作为 <xref:System.ServiceModel.Description.MetadataSet?displayProperty=nameWithType> 进行处理，请参见 <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.ServiceModel.Description.MetadataResolver> 类返回作为 <xref:System.ServiceModel.Description.ServiceEndpoint> 对象的集合的元数据，稍后这些对象将用于连接服务实例。  
  
 [!code-csharp[MetadataResolver#1](~/samples/snippets/csharp/VS_Snippets_CFX/metadataresolver/cs/client.cs#1)]  
  
 下面的代码示例演示如何使用 <xref:System.ServiceModel.Description.MetadataResolver> 下载和返回作为 <xref:System.ServiceModel.Description.ServiceEndpoint> 对象的集合的元数据，这些对象使用 HTTP GET 请求而不是 WS-Transfer。  
  
 [!code-csharp[MetadataResolver#2](~/samples/snippets/csharp/VS_Snippets_CFX/metadataresolver/cs/client.cs#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="BeginResolve">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>开始一个异步调用，该调用可将元数据地址解析为该服务的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 对象的集合。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 这些方法可开始 <xref:System.ServiceModel.Description.MetadataResolver.Resolve%2A> 方法的异步版本。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginResolve">
      <MemberSignature Language="C#" Value="public static IAsyncResult BeginResolve (System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt; contracts, System.ServiceModel.EndpointAddress address, AsyncCallback callback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IAsyncResult BeginResolve(class System.Collections.Generic.IEnumerable`1&lt;class System.ServiceModel.Description.ContractDescription&gt; contracts, class System.ServiceModel.EndpointAddress address, class System.AsyncCallback callback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.MetadataResolver.BeginResolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.ServiceModel.EndpointAddress,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BeginResolve (contracts As IEnumerable(Of ContractDescription), address As EndpointAddress, callback As AsyncCallback, asyncState As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IAsyncResult ^ BeginResolve(System::Collections::Generic::IEnumerable&lt;System::ServiceModel::Description::ContractDescription ^&gt; ^ contracts, System::ServiceModel::EndpointAddress ^ address, AsyncCallback ^ callback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="static member BeginResolve : seq&lt;System.ServiceModel.Description.ContractDescription&gt; * System.ServiceModel.EndpointAddress * AsyncCallback * obj -&gt; IAsyncResult" Usage="System.ServiceModel.Description.MetadataResolver.BeginResolve (contracts, address, callback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contracts" Type="System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt;" />
        <Parameter Name="address" Type="System.ServiceModel.EndpointAddress" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="contracts">要为其下载和解析元数据的协定。</param>
        <param name="address">元数据地址。</param>
        <param name="callback">在调用完成时调用的异步回调委托。</param>
        <param name="asyncState">与异步调用关联的状态。</param>
        <summary>使用指定地址和异步语句和委托，开始一个可将元数据地址解析为指定协定的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 对象的异步调用。</summary>
        <returns>引用异步解析操作的 <see cref="T:System.IAsyncResult" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType> 上的默认设置用于检索元数据，并且默认 <xref:System.ServiceModel.Description.MetadataExchangeClientMode?displayProperty=nameWithType> 为 <xref:System.ServiceModel.Description.MetadataExchangeClientMode.MetadataExchange?displayProperty=nameWithType>。  
  
 若要下载元数据，而不是将信息解析为 <xref:System.ServiceModel.Description.ServiceEndpoint> 对象，请直接使用 <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType>。  
  
> [!NOTE]
>  如果没有导入终结点或者没有与协定匹配的终结点，则返回一个空集合。 如果返回了空集合，则写入一个警告跟踪。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">地址、协定或回调为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="contracts" /> 为空，<paramref name="contracts" /> 至少有一个成员为 <see langword="null" />，或者 <paramref name="contracts" /> 包含多个具有相同名称和命名空间的协定。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginResolve">
      <MemberSignature Language="C#" Value="public static IAsyncResult BeginResolve (Type contract, System.ServiceModel.EndpointAddress address, AsyncCallback callback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IAsyncResult BeginResolve(class System.Type contract, class System.ServiceModel.EndpointAddress address, class System.AsyncCallback callback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.MetadataResolver.BeginResolve(System.Type,System.ServiceModel.EndpointAddress,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BeginResolve (contract As Type, address As EndpointAddress, callback As AsyncCallback, asyncState As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IAsyncResult ^ BeginResolve(Type ^ contract, System::ServiceModel::EndpointAddress ^ address, AsyncCallback ^ callback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="static member BeginResolve : Type * System.ServiceModel.EndpointAddress * AsyncCallback * obj -&gt; IAsyncResult" Usage="System.ServiceModel.Description.MetadataResolver.BeginResolve (contract, address, callback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contract" Type="System.Type" />
        <Parameter Name="address" Type="System.ServiceModel.EndpointAddress" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="contract">要为其下载和解析元数据的协定。</param>
        <param name="address">元数据地址。</param>
        <param name="callback">在调用完成时调用的异步回调委托。</param>
        <param name="asyncState">与异步调用关联的状态。</param>
        <summary>使用指定地址和异步语句和委托，开始一个可将元数据地址解析为指定协定的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 对象的异步调用。</summary>
        <returns>引用异步解析操作的 <see cref="T:System.IAsyncResult" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType> 上的默认设置用于检索元数据，并且默认 <xref:System.ServiceModel.Description.MetadataExchangeClientMode?displayProperty=nameWithType> 为 <xref:System.ServiceModel.Description.MetadataExchangeClientMode.MetadataExchange?displayProperty=nameWithType>。  
  
 若要下载元数据，而不是将信息解析为 <xref:System.ServiceModel.Description.ServiceEndpoint> 对象，请直接使用 <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType>。  
  
> [!NOTE]
>  如果没有导入终结点或者没有与协定匹配的终结点，则返回一个空集合。 如果返回了空集合，则写入一个警告跟踪。  
  
 此方法要求您指定协定类型。 可以通过在客户端代码中声明服务接口或使用由 Svcutil.exe 生成的 WCF 客户端来指定协定。 如果接口发生更改（例如，添加新操作），则必须在客户端代码中更新该接口或生成新的 WCF 客户端。 否则，将引发异常。 例如，您有一个可实现称为 ICalculator 的服务协定的服务，该协定可定义 Add()、Sub()、Mult() 和 Div()。 您将创建一个客户端应用程序并生成 WCF 客户端。 然后您向 ICalculator 添加了一个方法，称为 Echo()。 如果随后编写一个调用 <xref:System.ServiceModel.Description.MetadataResolver.Resolve%28System.Type%2CSystem.ServiceModel.EndpointAddress%29> 而不生成新 WCF 客户端的应用程序，则会出现以下异常。  
  
 `Unhandled Exception: System.ServiceModel.Description.WsdlImporter+WsdlImportException: Cannot locate operation Echo in Contract ICalculator`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">地址、协定或回调为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginResolve">
      <MemberSignature Language="C#" Value="public static IAsyncResult BeginResolve (System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt; contracts, System.ServiceModel.EndpointAddress address, System.ServiceModel.Description.MetadataExchangeClient client, AsyncCallback callback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IAsyncResult BeginResolve(class System.Collections.Generic.IEnumerable`1&lt;class System.ServiceModel.Description.ContractDescription&gt; contracts, class System.ServiceModel.EndpointAddress address, class System.ServiceModel.Description.MetadataExchangeClient client, class System.AsyncCallback callback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.MetadataResolver.BeginResolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.ServiceModel.EndpointAddress,System.ServiceModel.Description.MetadataExchangeClient,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BeginResolve (contracts As IEnumerable(Of ContractDescription), address As EndpointAddress, client As MetadataExchangeClient, callback As AsyncCallback, asyncState As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IAsyncResult ^ BeginResolve(System::Collections::Generic::IEnumerable&lt;System::ServiceModel::Description::ContractDescription ^&gt; ^ contracts, System::ServiceModel::EndpointAddress ^ address, System::ServiceModel::Description::MetadataExchangeClient ^ client, AsyncCallback ^ callback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="static member BeginResolve : seq&lt;System.ServiceModel.Description.ContractDescription&gt; * System.ServiceModel.EndpointAddress * System.ServiceModel.Description.MetadataExchangeClient * AsyncCallback * obj -&gt; IAsyncResult" Usage="System.ServiceModel.Description.MetadataResolver.BeginResolve (contracts, address, client, callback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contracts" Type="System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt;" />
        <Parameter Name="address" Type="System.ServiceModel.EndpointAddress" />
        <Parameter Name="client" Type="System.ServiceModel.Description.MetadataExchangeClient" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="contracts">要为其下载和解析元数据的协定。</param>
        <param name="address">元数据地址。</param>
        <param name="client">用于解析元数据的 <see cref="T:System.ServiceModel.Description.MetadataExchangeClient" />。</param>
        <param name="callback">在调用完成时调用的异步回调委托。</param>
        <param name="asyncState">与异步调用关联的状态。</param>
        <summary>使用指定的地址、<see cref="T:System.ServiceModel.Description.ServiceEndpoint" />、异步状态和委托，开始一个可将元数据地址解析为指定协定的 <see cref="T:System.ServiceModel.Description.MetadataExchangeClient" /> 对象的异步调用。</summary>
        <returns>引用异步解析操作的 <see cref="T:System.IAsyncResult" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认的 <xref:System.ServiceModel.Description.MetadataExchangeClientMode?displayProperty=nameWithType> 为 <xref:System.ServiceModel.Description.MetadataExchangeClientMode.MetadataExchange?displayProperty=nameWithType>。  
  
 若要下载元数据，而不是将信息解析为 <xref:System.ServiceModel.Description.ServiceEndpoint> 对象，请直接使用 <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType>。  
  
> [!NOTE]
>  如果没有导入终结点或者没有与协定匹配的终结点，则返回一个空集合。 如果返回了空集合，则写入一个警告跟踪。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">地址、协定、客户端或回调为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="contracts" /> 为空，<paramref name="contracts" /> 的至少一个成员为 Null，或者 <paramref name="contracts" /> 包含多个具有相同名称和命名空间的协定。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginResolve">
      <MemberSignature Language="C#" Value="public static IAsyncResult BeginResolve (System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt; contracts, Uri address, System.ServiceModel.Description.MetadataExchangeClientMode mode, AsyncCallback callback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IAsyncResult BeginResolve(class System.Collections.Generic.IEnumerable`1&lt;class System.ServiceModel.Description.ContractDescription&gt; contracts, class System.Uri address, valuetype System.ServiceModel.Description.MetadataExchangeClientMode mode, class System.AsyncCallback callback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.MetadataResolver.BeginResolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BeginResolve (contracts As IEnumerable(Of ContractDescription), address As Uri, mode As MetadataExchangeClientMode, callback As AsyncCallback, asyncState As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IAsyncResult ^ BeginResolve(System::Collections::Generic::IEnumerable&lt;System::ServiceModel::Description::ContractDescription ^&gt; ^ contracts, Uri ^ address, System::ServiceModel::Description::MetadataExchangeClientMode mode, AsyncCallback ^ callback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="static member BeginResolve : seq&lt;System.ServiceModel.Description.ContractDescription&gt; * Uri * System.ServiceModel.Description.MetadataExchangeClientMode * AsyncCallback * obj -&gt; IAsyncResult" Usage="System.ServiceModel.Description.MetadataResolver.BeginResolve (contracts, address, mode, callback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contracts" Type="System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt;" />
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="mode" Type="System.ServiceModel.Description.MetadataExchangeClientMode" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="contracts">要为其下载和解析元数据的协定。</param>
        <param name="address">元数据地址。</param>
        <param name="mode">检索的模式。</param>
        <param name="callback">在调用完成时调用的异步回调委托。</param>
        <param name="asyncState">与异步调用关联的状态。</param>
        <summary>使用指定地址、<see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 值和异步语句和委托，开始一个可将元数据地址解析为指定协定的 <see cref="T:System.ServiceModel.Description.MetadataExchangeClientMode" /> 对象的异步调用。</summary>
        <returns>引用异步解析操作的 <see cref="T:System.IAsyncResult" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType> 上的默认设置用于检索元数据。  
  
 若要下载元数据，而不是将信息解析为 <xref:System.ServiceModel.Description.ServiceEndpoint> 对象，请直接使用 <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType>。  
  
> [!NOTE]
>  如果没有导入终结点或者没有与协定匹配的终结点，则返回一个空集合。 如果返回了空集合，则写入一个警告跟踪。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">地址、协定或回调为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="contracts" /> 为空，<paramref name="contracts" /> 的至少一个成员为 Null，或者 <paramref name="contracts" /> 包含多个具有相同名称和命名空间的协定。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginResolve">
      <MemberSignature Language="C#" Value="public static IAsyncResult BeginResolve (Type contract, Uri address, System.ServiceModel.Description.MetadataExchangeClientMode mode, AsyncCallback callback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IAsyncResult BeginResolve(class System.Type contract, class System.Uri address, valuetype System.ServiceModel.Description.MetadataExchangeClientMode mode, class System.AsyncCallback callback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.MetadataResolver.BeginResolve(System.Type,System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BeginResolve (contract As Type, address As Uri, mode As MetadataExchangeClientMode, callback As AsyncCallback, asyncState As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IAsyncResult ^ BeginResolve(Type ^ contract, Uri ^ address, System::ServiceModel::Description::MetadataExchangeClientMode mode, AsyncCallback ^ callback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="static member BeginResolve : Type * Uri * System.ServiceModel.Description.MetadataExchangeClientMode * AsyncCallback * obj -&gt; IAsyncResult" Usage="System.ServiceModel.Description.MetadataResolver.BeginResolve (contract, address, mode, callback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contract" Type="System.Type" />
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="mode" Type="System.ServiceModel.Description.MetadataExchangeClientMode" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="contract">要为其下载和解析元数据的协定。</param>
        <param name="address">元数据地址。</param>
        <param name="mode">检索的模式。</param>
        <param name="callback">在调用完成时调用的异步回调委托。</param>
        <param name="asyncState">与异步调用关联的状态。</param>
        <summary>使用指定地址、<see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 和异步语句和委托，开始一个可将元数据地址解析为指定协定的 <see cref="T:System.ServiceModel.Description.MetadataExchangeClientMode" /> 对象的异步调用。</summary>
        <returns>引用异步解析操作的 <see cref="T:System.IAsyncResult" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType> 上的默认设置用于检索元数据。  
  
 若要下载元数据，而不是将信息解析为 <xref:System.ServiceModel.Description.ServiceEndpoint> 对象，请直接使用 <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType>。  
  
> [!NOTE]
>  如果没有导入终结点或者没有与协定匹配的终结点，则返回一个空集合。 如果返回了空集合，则写入一个警告跟踪。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">地址、协定或回调为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginResolve">
      <MemberSignature Language="C#" Value="public static IAsyncResult BeginResolve (System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt; contracts, Uri address, System.ServiceModel.Description.MetadataExchangeClientMode mode, System.ServiceModel.Description.MetadataExchangeClient client, AsyncCallback callback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IAsyncResult BeginResolve(class System.Collections.Generic.IEnumerable`1&lt;class System.ServiceModel.Description.ContractDescription&gt; contracts, class System.Uri address, valuetype System.ServiceModel.Description.MetadataExchangeClientMode mode, class System.ServiceModel.Description.MetadataExchangeClient client, class System.AsyncCallback callback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.MetadataResolver.BeginResolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode,System.ServiceModel.Description.MetadataExchangeClient,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BeginResolve (contracts As IEnumerable(Of ContractDescription), address As Uri, mode As MetadataExchangeClientMode, client As MetadataExchangeClient, callback As AsyncCallback, asyncState As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IAsyncResult ^ BeginResolve(System::Collections::Generic::IEnumerable&lt;System::ServiceModel::Description::ContractDescription ^&gt; ^ contracts, Uri ^ address, System::ServiceModel::Description::MetadataExchangeClientMode mode, System::ServiceModel::Description::MetadataExchangeClient ^ client, AsyncCallback ^ callback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="static member BeginResolve : seq&lt;System.ServiceModel.Description.ContractDescription&gt; * Uri * System.ServiceModel.Description.MetadataExchangeClientMode * System.ServiceModel.Description.MetadataExchangeClient * AsyncCallback * obj -&gt; IAsyncResult" Usage="System.ServiceModel.Description.MetadataResolver.BeginResolve (contracts, address, mode, client, callback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contracts" Type="System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt;" />
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="mode" Type="System.ServiceModel.Description.MetadataExchangeClientMode" />
        <Parameter Name="client" Type="System.ServiceModel.Description.MetadataExchangeClient" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="contracts">要为其下载和解析元数据的协定。</param>
        <param name="address">元数据地址。</param>
        <param name="mode">检索的模式。</param>
        <param name="client">用于解析元数据的 <see cref="T:System.ServiceModel.Description.MetadataExchangeClient" />。</param>
        <param name="callback">在调用完成时调用的异步回调委托。</param>
        <param name="asyncState">与异步调用关联的状态。</param>
        <summary>使用指定地址、<see cref="T:System.ServiceModel.Description.ServiceEndpoint" />、<see cref="T:System.ServiceModel.Description.MetadataExchangeClient" />、异步语句和委托，开始一个可将元数据地址解析为指定协定的 <see cref="T:System.ServiceModel.Description.MetadataExchangeClientMode" /> 对象的异步调用。</summary>
        <returns>引用异步解析操作的 <see cref="T:System.IAsyncResult" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要下载元数据，而不是将信息解析为 <xref:System.ServiceModel.Description.ServiceEndpoint> 对象，请直接使用 <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType>。  
  
> [!NOTE]
>  如果没有导入终结点或者没有与协定匹配的终结点，则返回一个空集合。 如果返回了空集合，则写入一个警告跟踪。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">地址、协定或回调为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="contracts" /> 为空，<paramref name="contracts" /> 的至少一个成员为 Null，或者 <paramref name="contracts" /> 包含多个具有相同名称和命名空间的协定。</exception>
      </Docs>
    </Member>
    <Member MemberName="EndResolve">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Description.ServiceEndpointCollection EndResolve (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ServiceModel.Description.ServiceEndpointCollection EndResolve(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.MetadataResolver.EndResolve(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndResolve (result As IAsyncResult) As ServiceEndpointCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ServiceModel::Description::ServiceEndpointCollection ^ EndResolve(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="static member EndResolve : IAsyncResult -&gt; System.ServiceModel.Description.ServiceEndpointCollection" Usage="System.ServiceModel.Description.MetadataResolver.EndResolve result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.ServiceEndpointCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">从对 <see cref="T:System.IAsyncResult" /> 方法的调用中接收的 <see cref="Overload:System.ServiceModel.Description.MetadataResolver.BeginResolve" /> 对象。</param>
        <summary>完成异步调用可将元数据解析为终结点的集合。</summary>
        <returns>元数据中包含的终结点的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 对象的集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 结束对任一 <xref:System.ServiceModel.Description.MetadataResolver.BeginResolve%2A> 方法的异步调用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Resolve">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>下载元数据地址并将其解析为该服务的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要下载元数据，而不是将信息解析为 <xref:System.ServiceModel.Description.ServiceEndpoint> 对象，请直接使用 <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType>。  
  
 对于所有同步和异步 `Resolve` 方法，如果未导入终结点或没有与约定相匹配的终结点，则返回空集合。 如果返回了空集合，则写入一个警告跟踪。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Resolve">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Description.ServiceEndpointCollection Resolve (System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt; contracts, System.ServiceModel.EndpointAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ServiceModel.Description.ServiceEndpointCollection Resolve(class System.Collections.Generic.IEnumerable`1&lt;class System.ServiceModel.Description.ContractDescription&gt; contracts, class System.ServiceModel.EndpointAddress address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.MetadataResolver.Resolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.ServiceModel.EndpointAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Resolve (contracts As IEnumerable(Of ContractDescription), address As EndpointAddress) As ServiceEndpointCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ServiceModel::Description::ServiceEndpointCollection ^ Resolve(System::Collections::Generic::IEnumerable&lt;System::ServiceModel::Description::ContractDescription ^&gt; ^ contracts, System::ServiceModel::EndpointAddress ^ address);" />
      <MemberSignature Language="F#" Value="static member Resolve : seq&lt;System.ServiceModel.Description.ContractDescription&gt; * System.ServiceModel.EndpointAddress -&gt; System.ServiceModel.Description.ServiceEndpointCollection" Usage="System.ServiceModel.Description.MetadataResolver.Resolve (contracts, address)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.ServiceEndpointCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contracts" Type="System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt;" />
        <Parameter Name="address" Type="System.ServiceModel.EndpointAddress" />
      </Parameters>
      <Docs>
        <param name="contracts">要为其下载和解析元数据的协定。</param>
        <param name="address">元数据地址。</param>
        <summary>使用指定元数据地址，将元数据地址解析为指定协定的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 对象。</summary>
        <returns>指定协定的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 对象的集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType> 上的默认设置用于检索元数据，并且默认 <xref:System.ServiceModel.Description.MetadataExchangeClientMode?displayProperty=nameWithType> 为 <xref:System.ServiceModel.Description.MetadataExchangeClientMode.MetadataExchange?displayProperty=nameWithType>。  
  
 若要下载元数据，而不是将信息解析为 <xref:System.ServiceModel.Description.ServiceEndpoint> 对象，请直接使用 <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType>。  
  
> [!NOTE]
>  如果没有导入终结点或者没有与协定匹配的终结点，则返回一个空集合。 如果返回了空集合，则写入一个警告跟踪。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">地址或协定集合为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="contracts" /> 为空，<paramref name="contracts" /> 的至少一个成员为 Null，或者 <paramref name="contracts" /> 包含多个具有相同名称和命名空间的协定。</exception>
      </Docs>
    </Member>
    <Member MemberName="Resolve">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Description.ServiceEndpointCollection Resolve (Type contract, System.ServiceModel.EndpointAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ServiceModel.Description.ServiceEndpointCollection Resolve(class System.Type contract, class System.ServiceModel.EndpointAddress address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.MetadataResolver.Resolve(System.Type,System.ServiceModel.EndpointAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Resolve (contract As Type, address As EndpointAddress) As ServiceEndpointCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ServiceModel::Description::ServiceEndpointCollection ^ Resolve(Type ^ contract, System::ServiceModel::EndpointAddress ^ address);" />
      <MemberSignature Language="F#" Value="static member Resolve : Type * System.ServiceModel.EndpointAddress -&gt; System.ServiceModel.Description.ServiceEndpointCollection" Usage="System.ServiceModel.Description.MetadataResolver.Resolve (contract, address)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.ServiceEndpointCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contract" Type="System.Type" />
        <Parameter Name="address" Type="System.ServiceModel.EndpointAddress" />
      </Parameters>
      <Docs>
        <param name="contract">要为其下载和解析元数据的协定。</param>
        <param name="address">元数据地址。</param>
        <summary>下载元数据地址并将其解析为指定地址处的指定协定的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 对象的集合。</summary>
        <returns>指定协定的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 对象的集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.ServiceModel.Description.MetadataResolver.Resolve%2A> 方法可指定下载和解析元数据时要使用的协定和元数据地址。  
  
 <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType> 上的默认设置用于检索元数据，并且默认 <xref:System.ServiceModel.Description.MetadataExchangeClientMode?displayProperty=nameWithType> 为 <xref:System.ServiceModel.Description.MetadataExchangeClientMode.MetadataExchange?displayProperty=nameWithType>。  
  
 若要下载元数据，而不是将信息解析为 <xref:System.ServiceModel.Description.ServiceEndpoint> 对象，请直接使用 <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType>。  
  
> [!NOTE]
>  如果没有导入终结点或者没有与协定匹配的终结点，则返回一个空集合。 如果返回了空集合，则写入一个警告跟踪。  
  
 此方法要求您指定协定类型。 可以通过在客户端代码中声明服务接口或使用由 Svcutil.exe 生成的 WCF 客户端来指定协定。 如果接口发生更改（例如，添加新操作），则必须在客户端代码中更新该接口或生成新的 WCF 客户端。 否则，将引发异常。 例如，您有一个可实现称为 ICalculator 的服务协定的服务，该协定可定义 Add()、Sub()、Mult() 和 Div()。 您将创建一个客户端应用程序并生成 WCF 客户端。 然后您向 ICalculator 添加了一个方法，称为 Echo()。 如果随后编写一个调用 <xref:System.ServiceModel.Description.MetadataResolver.Resolve%28System.Type%2CSystem.ServiceModel.EndpointAddress%29> 而不生成新 WCF 客户端的应用程序，则会出现以下异常。  
  
 `Unhandled Exception: System.ServiceModel.Description.WsdlImporter+WsdlImportException: Cannot locate operation Echo in Contract ICalculator`。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.ServiceModel.Description.MetadataResolver> 类返回作为 <xref:System.ServiceModel.Description.ServiceEndpoint> 对象的集合的元数据，稍后这些对象将用于连接服务实例。  
  
 [!code-csharp[MetadataResolver#1](~/samples/snippets/csharp/VS_Snippets_CFX/metadataresolver/cs/client.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">地址或协定为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Resolve">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Description.ServiceEndpointCollection Resolve (System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt; contracts, System.ServiceModel.EndpointAddress address, System.ServiceModel.Description.MetadataExchangeClient client);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ServiceModel.Description.ServiceEndpointCollection Resolve(class System.Collections.Generic.IEnumerable`1&lt;class System.ServiceModel.Description.ContractDescription&gt; contracts, class System.ServiceModel.EndpointAddress address, class System.ServiceModel.Description.MetadataExchangeClient client) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.MetadataResolver.Resolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.ServiceModel.EndpointAddress,System.ServiceModel.Description.MetadataExchangeClient)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Resolve (contracts As IEnumerable(Of ContractDescription), address As EndpointAddress, client As MetadataExchangeClient) As ServiceEndpointCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ServiceModel::Description::ServiceEndpointCollection ^ Resolve(System::Collections::Generic::IEnumerable&lt;System::ServiceModel::Description::ContractDescription ^&gt; ^ contracts, System::ServiceModel::EndpointAddress ^ address, System::ServiceModel::Description::MetadataExchangeClient ^ client);" />
      <MemberSignature Language="F#" Value="static member Resolve : seq&lt;System.ServiceModel.Description.ContractDescription&gt; * System.ServiceModel.EndpointAddress * System.ServiceModel.Description.MetadataExchangeClient -&gt; System.ServiceModel.Description.ServiceEndpointCollection" Usage="System.ServiceModel.Description.MetadataResolver.Resolve (contracts, address, client)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.ServiceEndpointCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contracts" Type="System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt;" />
        <Parameter Name="address" Type="System.ServiceModel.EndpointAddress" />
        <Parameter Name="client" Type="System.ServiceModel.Description.MetadataExchangeClient" />
      </Parameters>
      <Docs>
        <param name="contracts">要为其下载和解析元数据的协定。</param>
        <param name="address">元数据地址。</param>
        <param name="client">用于解析元数据的 <see cref="T:System.ServiceModel.Description.MetadataExchangeClient" />。</param>
        <summary>使用指定元数据地址和 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />，将元数据地址解析为指定协定的 <see cref="T:System.ServiceModel.Description.MetadataExchangeClient" /> 对象。</summary>
        <returns>指定协定的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 对象的集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认的 <xref:System.ServiceModel.Description.MetadataExchangeClientMode?displayProperty=nameWithType> 为 <xref:System.ServiceModel.Description.MetadataExchangeClientMode.MetadataExchange?displayProperty=nameWithType>。  
  
 若要下载元数据，而不是将信息解析为 <xref:System.ServiceModel.Description.ServiceEndpoint> 对象，请直接使用 <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType>。  
  
> [!NOTE]
>  如果没有导入终结点或者没有与协定匹配的终结点，则返回一个空集合。 如果返回了空集合，则写入一个警告跟踪。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">地址、协定集合或客户端为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="contracts" /> 为空，<paramref name="contracts" /> 的至少一个成员为 Null，或者 <paramref name="contracts" /> 包含多个具有相同名称和命名空间的协定。</exception>
      </Docs>
    </Member>
    <Member MemberName="Resolve">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Description.ServiceEndpointCollection Resolve (System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt; contracts, Uri address, System.ServiceModel.Description.MetadataExchangeClientMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ServiceModel.Description.ServiceEndpointCollection Resolve(class System.Collections.Generic.IEnumerable`1&lt;class System.ServiceModel.Description.ContractDescription&gt; contracts, class System.Uri address, valuetype System.ServiceModel.Description.MetadataExchangeClientMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.MetadataResolver.Resolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Resolve (contracts As IEnumerable(Of ContractDescription), address As Uri, mode As MetadataExchangeClientMode) As ServiceEndpointCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ServiceModel::Description::ServiceEndpointCollection ^ Resolve(System::Collections::Generic::IEnumerable&lt;System::ServiceModel::Description::ContractDescription ^&gt; ^ contracts, Uri ^ address, System::ServiceModel::Description::MetadataExchangeClientMode mode);" />
      <MemberSignature Language="F#" Value="static member Resolve : seq&lt;System.ServiceModel.Description.ContractDescription&gt; * Uri * System.ServiceModel.Description.MetadataExchangeClientMode -&gt; System.ServiceModel.Description.ServiceEndpointCollection" Usage="System.ServiceModel.Description.MetadataResolver.Resolve (contracts, address, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.ServiceEndpointCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contracts" Type="System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt;" />
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="mode" Type="System.ServiceModel.Description.MetadataExchangeClientMode" />
      </Parameters>
      <Docs>
        <param name="contracts">要为其下载和解析元数据的协定。</param>
        <param name="address">元数据地址。</param>
        <param name="mode">检索的模式。</param>
        <summary>使用指定地址和传输模式，将元数据地址解析为指定协定的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 对象。</summary>
        <returns>指定协定的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 对象的集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType> 上的默认设置用于检索元数据。  
  
 若要下载元数据，而不是将信息解析为 <xref:System.ServiceModel.Description.ServiceEndpoint> 对象，请直接使用 <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType>。  
  
> [!NOTE]
>  如果没有导入终结点或者没有与协定匹配的终结点，则返回一个空集合。 如果返回了空集合，则写入一个警告跟踪。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">地址或协定集合为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="contracts" /> 为空，<paramref name="contracts" /> 的至少一个成员为 Null，或者 <paramref name="contracts" /> 包含多个具有相同名称和命名空间的协定。</exception>
      </Docs>
    </Member>
    <Member MemberName="Resolve">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Description.ServiceEndpointCollection Resolve (Type contract, Uri address, System.ServiceModel.Description.MetadataExchangeClientMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ServiceModel.Description.ServiceEndpointCollection Resolve(class System.Type contract, class System.Uri address, valuetype System.ServiceModel.Description.MetadataExchangeClientMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.MetadataResolver.Resolve(System.Type,System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Resolve (contract As Type, address As Uri, mode As MetadataExchangeClientMode) As ServiceEndpointCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ServiceModel::Description::ServiceEndpointCollection ^ Resolve(Type ^ contract, Uri ^ address, System::ServiceModel::Description::MetadataExchangeClientMode mode);" />
      <MemberSignature Language="F#" Value="static member Resolve : Type * Uri * System.ServiceModel.Description.MetadataExchangeClientMode -&gt; System.ServiceModel.Description.ServiceEndpointCollection" Usage="System.ServiceModel.Description.MetadataResolver.Resolve (contract, address, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.ServiceEndpointCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contract" Type="System.Type" />
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="mode" Type="System.ServiceModel.Description.MetadataExchangeClientMode" />
      </Parameters>
      <Docs>
        <param name="contract">要为其下载和解析元数据的协定。</param>
        <param name="address">元数据地址。</param>
        <param name="mode">检索的模式。</param>
        <summary>使用指定地址和传输模式，将元数据地址解析为指定协定的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 对象。</summary>
        <returns>指定协定的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 对象的集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.ServiceModel.Description.MetadataResolver.Resolve%2A> 方法可指定协定、地址和要使用的下载机制。  
  
 <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType> 上的默认设置用于检索元数据。  
  
 若要下载元数据，而不是将信息解析为 <xref:System.ServiceModel.Description.ServiceEndpoint> 对象，请直接使用 <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType>。  
  
> [!NOTE]
>  如果没有导入终结点或者没有与协定匹配的终结点，则返回一个空集合。 如果返回了空集合，则写入一个警告跟踪。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.ServiceModel.Description.MetadataResolver> 下载和返回作为 <xref:System.ServiceModel.Description.ServiceEndpoint> 对象的集合的元数据，这些对象使用 HTTP GET 请求而不是 WS-Transfer。  
  
 [!code-csharp[MetadataResolver#2](~/samples/snippets/csharp/VS_Snippets_CFX/metadataresolver/cs/client.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">地址或协定为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Resolve">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Description.ServiceEndpointCollection Resolve (System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt; contracts, Uri address, System.ServiceModel.Description.MetadataExchangeClientMode mode, System.ServiceModel.Description.MetadataExchangeClient client);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ServiceModel.Description.ServiceEndpointCollection Resolve(class System.Collections.Generic.IEnumerable`1&lt;class System.ServiceModel.Description.ContractDescription&gt; contracts, class System.Uri address, valuetype System.ServiceModel.Description.MetadataExchangeClientMode mode, class System.ServiceModel.Description.MetadataExchangeClient client) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.MetadataResolver.Resolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode,System.ServiceModel.Description.MetadataExchangeClient)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Resolve (contracts As IEnumerable(Of ContractDescription), address As Uri, mode As MetadataExchangeClientMode, client As MetadataExchangeClient) As ServiceEndpointCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ServiceModel::Description::ServiceEndpointCollection ^ Resolve(System::Collections::Generic::IEnumerable&lt;System::ServiceModel::Description::ContractDescription ^&gt; ^ contracts, Uri ^ address, System::ServiceModel::Description::MetadataExchangeClientMode mode, System::ServiceModel::Description::MetadataExchangeClient ^ client);" />
      <MemberSignature Language="F#" Value="static member Resolve : seq&lt;System.ServiceModel.Description.ContractDescription&gt; * Uri * System.ServiceModel.Description.MetadataExchangeClientMode * System.ServiceModel.Description.MetadataExchangeClient -&gt; System.ServiceModel.Description.ServiceEndpointCollection" Usage="System.ServiceModel.Description.MetadataResolver.Resolve (contracts, address, mode, client)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.ServiceEndpointCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contracts" Type="System.Collections.Generic.IEnumerable&lt;System.ServiceModel.Description.ContractDescription&gt;" />
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="mode" Type="System.ServiceModel.Description.MetadataExchangeClientMode" />
        <Parameter Name="client" Type="System.ServiceModel.Description.MetadataExchangeClient" />
      </Parameters>
      <Docs>
        <param name="contracts">要为其下载和解析元数据的协定。</param>
        <param name="address">元数据地址。</param>
        <param name="mode">检索的模式。</param>
        <param name="client">用于解析元数据的 <see cref="T:System.ServiceModel.Description.MetadataExchangeClient" />。</param>
        <summary>使用指定地址、传输模式和传输客户端，将元数据地址解析为指定协定的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 对象。</summary>
        <returns>指定协定的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 对象的集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要下载元数据，而不是将信息解析为 <xref:System.ServiceModel.Description.ServiceEndpoint> 对象，请直接使用 <xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=nameWithType>。  
  
> [!NOTE]
>  如果没有导入终结点或者没有与协定匹配的终结点，则返回一个空集合。 如果返回了空集合，则写入一个警告跟踪。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">地址、协定集合或客户端为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="contracts" /> 为空，<paramref name="contracts" /> 的至少一个成员为 Null，或者 <paramref name="contracts" /> 包含多个具有相同名称和命名空间的协定。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
