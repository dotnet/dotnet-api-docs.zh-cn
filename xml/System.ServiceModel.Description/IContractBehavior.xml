<Type Name="IContractBehavior" FullName="System.ServiceModel.Description.IContractBehavior">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2043f31fe1abf73436d5759d11bdd465da825fa4" /><Meta Name="ms.sourcegitcommit" Value="397961a0164281b579f68064c3bb66c071f374d9" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/14/2020" /><Meta Name="ms.locfileid" Value="86322047" /></Metadata><TypeSignature Language="C#" Value="public interface IContractBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IContractBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IContractBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IContractBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IContractBehavior" />
  <TypeSignature Language="F#" Value="type IContractBehavior = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
    <AssemblyVersion>4.5.0.3</AssemblyVersion>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
    <AssemblyVersion>4.7.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System.ServiceModel" FromVersion="4.0.0.0" To="System.ServiceModel.Primitives" ToVersion="4.6.0.0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0" />
    <TypeForwarding From="System.ServiceModel" FromVersion="4.0.0.0" To="System.ServiceModel.Primitives" ToVersion="4.7.0.0" FrameworkAlternate="dotnet-plat-ext-3.1" />
    <TypeForwarding From="System.ServiceModel" FromVersion="4.0.0.0" To="System.ServiceModel.Primitives" ToVersion="5.0.0.0" FrameworkAlternate="dotnet-plat-ext-5.0" />
    <TypeForwarding From="System.ServiceModel" FromVersion="4.0.0.0" To="System.ServiceModel.Primitives" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
  </TypeForwardingChain>
  <Interfaces />
  <Docs>
    <summary>实现可用于扩展服务或客户端应用程序中的协定的运行时行为的方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 实现 <xref:System.ServiceModel.Description.IContractBehavior> 接口可以在应用程序级别修改、检查或扩展协定范围内的执行的某个方面。 与 <xref:System.ServiceModel.Description.IServiceBehavior> 和 <xref:System.ServiceModel.Description.IEndpointBehavior> 对象不同，<xref:System.ServiceModel.Description.IContractBehavior> 对象是不能通过使用应用程序配置文件添加到运行时的，而只能通过编程方式或使用属性来添加。  
  
 有关在服务、终结点和协定行为之间进行选择的详细信息，请参阅 [配置和扩展运行时的行为](/dotnet/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors)。  
  
-   使用 <xref:System.ServiceModel.Description.IContractBehavior.AddBindingParameters%2A> 方法可以向绑定元素提供自定义数据，从而支持该行为。  
  
-   使用 <xref:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior%2A> 方法可以修改、检查客户端应用程序的协定中的扩展，或向该协定中插入扩展。  
  
-   使用 <xref:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior%2A> 方法可以修改、检查服务应用程序的协定中的扩展，或向该协定中插入扩展。  
  
-   使用 <xref:System.ServiceModel.Description.IContractBehavior.Validate%2A> 方法可以确保协定可以支持特定功能。  
  
 <xref:System.ServiceModel.Description.IContractBehavior> 对象可使用所有这些方法，但通常只有一种方法是重要的，在这种情况下，未被使用的方法可不带值返回。  
  
> [!NOTE]
>  所有 <xref:System.ServiceModel.Description.IContractBehavior> 方法会将 <xref:System.ServiceModel.Description.ContractDescription?displayProperty=nameWithType> 和 <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType> 作为参数传递。 这些参数只用于检查；如果您修改了这些对象，则执行行为将是不确定的。  
  
 <xref:System.ServiceModel.Description.IContractBehavior> 类型可以在服务或客户端上使用，也可以同时用于这两者。 若要在服务上执行自定义任务，则必须先将 <xref:System.ServiceModel.Description.IContractBehavior> 对象添加到 <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> 属性，然后构造服务运行时，该构造操作是在对 <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> 对象调用 <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType> 方法时进行的。 可通过两种方式来执行此操作。  
  
 第一种方法是通过编程方式，对 <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> 对象调用 <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> 方法前，将自定义协定行为添加到 <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType> 属性。 应用此方法时，该行为将应用于流经任何终结点的该协定的所有消息。  
  
> [!NOTE]
>  该行为会应用到同一类型的所有协定。 例如，如果通过编程方式将同一协定类型添加到多个终结点，则该行为将修改引用同一协定对象的所有终结点。  
  
 第二种方法是创建可实现 <xref:System.ServiceModel.Description.IContractBehavior> 的自定义属性，并将其应用到：  
  
-   一个协定接口。 在此情况下，该行为将应用到所有终结点中该类型的所有协定。  
  
-   一个服务类。  在此情况下，该行为将应用到所有终结点，而不管协定类型如何。  
  
-   一个回调类。  在此情况下，该行为将应用到双向客户端的终结点。  
  
 对于第二种方法，如果自定义属性还要实现 <xref:System.ServiceModel.Description.IContractBehaviorAttribute?displayProperty=nameWithType>，则其行为将会稍有不同。 在此情况下，该行为如下：  
  
-   一个协定接口。 在这种情况下，该行为将应用到任何终结点中该类型的所有协定，并 Windows Communication Foundation (WCF) 忽略该属性的值 <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType> 。  
  
-   一个服务类。  在此情况下，该行为只应用到其协定是 <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType> 属性的值的终结点。  
  
-   一个回调类。  在这种情况下，该行为将应用到双工客户端的终结点，WCF 将忽略属性的值 <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType> 。  
  
 若要在客户端执行自定义计划任务，则必须先将 <xref:System.ServiceModel.Description.IContractBehavior> 对象添加到 <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> 属性，然后构造客户端运行时，该构造操作是在调用 <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> 时进行的。 有两种方法可以实现此目的：  
  
-   通过编程方式，在调用 <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> 之前，先将自定义协定行为添加到 <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> 属性。  
  
-   创建同时还可实现 <xref:System.ServiceModel.Description.IContractBehavior> 的自定义属性。  
  
 有关以编程方式将 <xref:System.ServiceModel.Description.IContractBehavior> 类型添加到客户端或服务应用程序的详细信息，请参阅 [配置和扩展运行时的行为](/dotnet/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors)。  
  
   
  
## Examples  
 下面的代码示例假定自定义 <xref:System.ServiceModel.Dispatcher.IInstanceProvider> 实现调用了可提供“单一实例”行为的 `ObjectProviderBehavior`，它始终返回同一服务实例，且不回收该服务实例。  
  
 对于实例提供程序自定义的插入，该示例演示了如何实现一个自定义属性 (`SingletonBehaviorAttribute`)，该自定义属性可实现 <xref:System.ServiceModel.Description.IContractBehavior>，从而插入自定义服务实例提供程序。 它还可实现 <xref:System.ServiceModel.Description.IContractBehaviorAttribute>，这会将其使用绑定到 `ISampleService` 协定。  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.AddBindingParameters(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddBindingParameters (contractDescription As ContractDescription, endpoint As ServiceEndpoint, bindingParameters As BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberSignature Language="F#" Value="abstract member AddBindingParameters : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit" Usage="iContractBehavior.AddBindingParameters (contractDescription, endpoint, bindingParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="contractDescription">要修改的协定说明。</param>
        <param name="endpoint">要修改的终结点。</param>
        <param name="bindingParameters">绑定元素支持该行为所需的对象。</param>
        <summary>配置所有绑定元素以支持协定行为。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 实现 <xref:System.ServiceModel.Description.IContractBehavior.AddBindingParameters%2A> 方法可向绑定元素提供支持协定行为所需的额外对象。  
  
 对于使用指定服务协定的每个终结点，都将对其调用一次此方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyClientBehavior">
      <MemberSignature Language="C#" Value="public void ApplyClientBehavior (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.ClientRuntime clientRuntime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyClientBehavior(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.ClientRuntime clientRuntime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyClientBehavior (contractDescription As ContractDescription, endpoint As ServiceEndpoint, clientRuntime As ClientRuntime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyClientBehavior(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::ClientRuntime ^ clientRuntime);" />
      <MemberSignature Language="F#" Value="abstract member ApplyClientBehavior : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.ClientRuntime -&gt; unit" Usage="iContractBehavior.ApplyClientBehavior (contractDescription, endpoint, clientRuntime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="clientRuntime" Type="System.ServiceModel.Dispatcher.ClientRuntime" />
      </Parameters>
      <Docs>
        <param name="contractDescription">要实现扩展的协定说明。</param>
        <param name="endpoint">终结点。</param>
        <param name="clientRuntime">客户端运行时。</param>
        <summary>在协定范围内执行客户端的修改或扩展。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 实现 <xref:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior%2A> 方法可以在所有消息范围内或者针对某个特定操作，查看、修改或添加对客户端服务运行的扩展。 有关利用客户端运行时对象可进行的自定义的详细信息，请参见 <xref:System.ServiceModel.Dispatcher.ClientRuntime> 和 <xref:System.ServiceModel.Dispatcher.ClientOperation>。  
  
 如果该行为仅用于服务应用程序中，则 <xref:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior%2A> 方法可引发 <xref:System.NotImplementedException> 异常。  
  
 对于使用指定服务协定的每个终结点，都将对其调用一次此方法。  
  
 注意，说明中可能存在拥有相同名称的两个操作（每个方向一个）；因此，如果必须循环执行协定为双向协定的操作，则您必须在终结点 <xref:System.ServiceModel.Dispatcher.ClientRuntime> 和 <xref:System.ServiceModel.Dispatcher.ClientRuntime.CallbackDispatchRuntime%2A> 属性所返回的终结点之间关联消息方向。  
  
 原因是其他行为可能已经在运行时中添加或移除了某些操作，所以无法保证说明中具有的操作数目同 <xref:System.ServiceModel.Dispatcher.ClientOperation> 属性中的 <xref:System.ServiceModel.Dispatcher.ClientRuntime.Operations%2A> 对象数目相等。  
  
   
  
## Examples  
 下面的代码示例假定自定义 <xref:System.ServiceModel.Dispatcher.IInstanceProvider> 实现调用了可提供“单一实例”行为的 `ObjectProviderBehavior`，它始终返回同一服务实例，且不回收该服务实例。  
  
 对于实例提供程序自定义的插入，该示例演示了如何实现一个自定义属性 (`SingletonBehaviorAttribute`)，该自定义属性可实现 <xref:System.ServiceModel.Description.IContractBehavior>，从而插入自定义服务实例提供程序。 它还可实现 <xref:System.ServiceModel.Description.IContractBehaviorAttribute>，这会将其使用绑定到 `ISampleService` 协定。  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.DispatchRuntime dispatchRuntime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.DispatchRuntime dispatchRuntime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.DispatchRuntime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyDispatchBehavior (contractDescription As ContractDescription, endpoint As ServiceEndpoint, dispatchRuntime As DispatchRuntime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::DispatchRuntime ^ dispatchRuntime);" />
      <MemberSignature Language="F#" Value="abstract member ApplyDispatchBehavior : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.DispatchRuntime -&gt; unit" Usage="iContractBehavior.ApplyDispatchBehavior (contractDescription, endpoint, dispatchRuntime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="dispatchRuntime" Type="System.ServiceModel.Dispatcher.DispatchRuntime" />
      </Parameters>
      <Docs>
        <param name="contractDescription">要修改的协定说明。</param>
        <param name="endpoint">公开协定的终结点。</param>
        <param name="dispatchRuntime">控制服务执行的调度运行时。</param>
        <summary>在协定范围内执行客户端的修改或扩展。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 实现 <xref:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior%2A> 可以在特定协定的所有消息范围内或针对该协定中的特定操作，查看、修改或添加对服务运行时的自定义扩展。 有关可以在服务应用程序中执行的自定义的详细信息，请参见 <xref:System.ServiceModel.Dispatcher.DispatchRuntime> 和 <xref:System.ServiceModel.Dispatcher.DispatchOperation>。  
  
 如果该行为仅用于客户端应用程序中，则 <xref:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior%2A> 方法可引发 <xref:System.NotImplementedException> 异常。  
  
 对于使用指定服务协定的每个终结点，都将对其调用一次此方法。  
  
 注意，说明中可能存在拥有相同名称的两个操作（每个方向一个）；因此，如果必须循环执行协定为双向协定的操作，则您必须在终结点 <xref:System.ServiceModel.Dispatcher.DispatchRuntime> 和 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.CallbackClientRuntime%2A> 属性所返回的终结点之间关联消息方向。  
  
 此外，由于其他行为可能已经在运行时中添加或移除了某些操作，所以无法保证说明中的操作数目同 <xref:System.ServiceModel.Dispatcher.DispatchOperation> 属性中的 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.Operations%2A> 对象数目相等。  
  
   
  
## Examples  
 下面的代码示例假定自定义 <xref:System.ServiceModel.Dispatcher.IInstanceProvider> 实现调用了可提供“单一实例”行为的 `ObjectProviderBehavior`，它始终返回同一服务实例，且不回收该服务实例。  
  
 对于实例提供程序自定义的插入，该示例演示了如何实现一个自定义属性 (`SingletonBehaviorAttribute`)，该自定义属性可实现 <xref:System.ServiceModel.Description.IContractBehavior>，从而插入自定义服务实例提供程序。 它还可实现 <xref:System.ServiceModel.Description.IContractBehaviorAttribute>，这会将其使用绑定到 `ISampleService` 协定。  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.Validate(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Validate (contractDescription As ContractDescription, endpoint As ServiceEndpoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint -&gt; unit" Usage="iContractBehavior.Validate (contractDescription, endpoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
      </Parameters>
      <Docs>
        <param name="contractDescription">要验证的协定。</param>
        <param name="endpoint">要验证的终结点。</param>
        <summary>实现此方法可以确认协定和终结点是否支持协定行为。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 实现 <xref:System.ServiceModel.Description.IContractBehavior.Validate%2A> 方法可以确认协定说明是否足以支持自定义协定行为。 实现可以在检查该说明后不引发异常或返回任何值。  
  
 对于使用指定服务协定的每个终结点，都将对其调用一次此方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
