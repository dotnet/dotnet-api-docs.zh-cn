<Type Name="SoapExtensionReflector" FullName="System.Web.Services.Description.SoapExtensionReflector">
  <Metadata><Meta Name="ms.openlocfilehash" Value="34d0337bdb1817c01a072baf7cb2dd29766b6a15" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="73379749" /></Metadata><TypeSignature Language="C#" Value="public abstract class SoapExtensionReflector" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SoapExtensionReflector extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Services.Description.SoapExtensionReflector" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SoapExtensionReflector" />
  <TypeSignature Language="C++ CLI" Value="public ref class SoapExtensionReflector abstract" />
  <TypeSignature Language="F#" Value="type SoapExtensionReflector = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>为类提供通用接口和功能，以按方法向 <see cref="T:System.Web.Services.Description.ServiceDescription" /> 对象添加 SOAP 扩展信息。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 抽象 <xref:System.Web.Services.Description.SoapExtensionReflector> 类公开抽象方法 <xref:System.Web.Services.Description.SoapExtensionReflector.ReflectMethod%2A> 。 通过此抽象方法，派生类可以在将 Web 方法反射到对象中的对象时添加 SOAP 扩展的说明 <xref:System.Web.Services.Description.ServiceDescription> 。 方法本身不是输入。 对于属于生成的指定绑定的所有 Web 方法，将会添加描述 <xref:System.Web.Services.Description.ServiceDescription> 。  
  
 你可以使用 <xref:System.Web.Services.Description.ServiceDescription> 通过方法 (WSDL) 文档生成 Web 服务描述语言 <xref:System.Web.Services.Description.ServiceDescription.Write%2A> 。 <xref:System.Web.Services.Description.ServiceDescriptionImporter>类和相关类也可以使用 <xref:System.Web.Services.Description.ServiceDescription> 来生成客户端代理代码或抽象服务器代码。  
  
 使用派生自类的类 <xref:System.Web.Services.Description.SoapExtensionReflector> 与从抽象类派生的类结合使用 <xref:System.Web.Services.Protocols.SoapExtension> ，以扩展客户端或服务上的 SOAP 消息的运行时处理。  
  
 可以 <xref:System.Web.Services.Description.SoapExtensionReflector> 通过[ \<soapExtensionReflectorTypes> 元素](https://msdn.microsoft.com/library/6950609a-c9a3-4f6f-a5fc-a05d6d204d5c)元素及其子**add**元素在配置文件中指定。 你还可以将配置应用到发布 Web 服务的 ASP.NET Web 应用程序。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Services.Protocols.SoapExtension" />
    <altmember cref="M:System.Web.Services.Description.ProtocolReflector.ReflectMethod" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SoapExtensionReflector ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Description.SoapExtensionReflector.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SoapExtensionReflector();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.Services.Description.SoapExtensionReflector" /> 类的实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectDescription">
      <MemberSignature Language="C#" Value="public virtual void ReflectDescription ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReflectDescription() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Description.SoapExtensionReflector.ReflectDescription" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ReflectDescription ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReflectDescription();" />
      <MemberSignature Language="F#" Value="abstract member ReflectDescription : unit -&gt; unit&#xA;override this.ReflectDescription : unit -&gt; unit" Usage="soapExtensionReflector.ReflectDescription " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>生成将放入与绑定对应的 <see cref="T:System.Web.Services.Description.ServiceDescription" /> 对象中的特定于服务的说明信息。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectionContext">
      <MemberSignature Language="C#" Value="public System.Web.Services.Description.ProtocolReflector ReflectionContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.Services.Description.ProtocolReflector ReflectionContext" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Description.SoapExtensionReflector.ReflectionContext" />
      <MemberSignature Language="VB.NET" Value="Public Property ReflectionContext As ProtocolReflector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::Services::Description::ProtocolReflector ^ ReflectionContext { System::Web::Services::Description::ProtocolReflector ^ get(); void set(System::Web::Services::Description::ProtocolReflector ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ReflectionContext : System.Web.Services.Description.ProtocolReflector with get, set" Usage="System.Web.Services.Description.SoapExtensionReflector.ReflectionContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Services.Description.ProtocolReflector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置从调用 <see cref="T:System.Web.Services.Description.ProtocolReflector" /> 方法的 <see cref="M:System.Web.Services.Description.SoapExtensionReflector.ReflectMethod" /> 抽象类派生的类的实例。</summary>
        <value>从调用<see cref="T:System.Web.Services.Description.ProtocolReflector" />方法的<see cref="M:System.Web.Services.Description.SoapExtensionReflector.ReflectMethod" />抽象类派生的类的实例。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果实现从类派生的类 <xref:System.Web.Services.Description.SoapExtensionReflector> `abstract` ，则无需实现从派生的类 <xref:System.Web.Services.Description.ProtocolReflector> 来调用 <xref:System.Web.Services.Description.SoapExtensionReflector.ReflectMethod%2A> 方法或设置 <xref:System.Web.Services.Description.SoapExtensionReflector.ReflectionContext%2A> 属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectMethod">
      <MemberSignature Language="C#" Value="public abstract void ReflectMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReflectMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Description.SoapExtensionReflector.ReflectMethod" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub ReflectMethod ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void ReflectMethod();" />
      <MemberSignature Language="F#" Value="abstract member ReflectMethod : unit -&gt; unit" Usage="soapExtensionReflector.ReflectMethod " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see langword="Abstract" /> 方法，派生类必须实现该方法以按方法向 <see cref="T:System.Web.Services.Description.ServiceDescription" /> 对象添加 SOAP 扩展信息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Services.Description.SoapExtensionReflector.ReflectMethod%2A>对于属于表示的绑定的每个 Web 方法，将调用方法 <xref:System.Web.Services.Description.ServiceDescription> 。 <xref:System.Web.Services.Description.SoapExtensionReflector.ReflectMethod%2A>方法不直接使用 Web 方法。 对于从 Web 服务类反射的绑定中的所有 Web 方法，将添加 SOAP 扩展信息。  
  
 的实现 <xref:System.Web.Services.Description.SoapExtensionReflector.ReflectMethod%2A> 可以生成操作绑定、 `abstract` 操作和消息等信息。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
