<Type Name="IDuplexSessionRouter" FullName="System.ServiceModel.Routing.IDuplexSessionRouter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="db5bb539ee110ce898cb4fa8e801bc1e4a672ea9" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89936755" /></Metadata><TypeSignature Language="C#" Value="public interface IDuplexSessionRouter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDuplexSessionRouter" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Routing.IDuplexSessionRouter" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDuplexSessionRouter" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDuplexSessionRouter" />
  <TypeSignature Language="F#" Value="type IDuplexSessionRouter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Routing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.ServiceModel.ServiceContract(CallbackContract=typeof(System.ServiceModel.Routing.IDuplexRouterCallback), Namespace="http://schemas.microsoft.com/netfx/2009/05/routing", SessionMode=System.ServiceModel.SessionMode.Required)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ServiceModel.ServiceContract(CallbackContract=typeof(System.ServiceModel.Routing.IDuplexRouterCallback), Namespace="http://schemas.microsoft.com/netfx/2009/05/routing", SessionMode=System.ServiceModel.SessionMode.Required)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="2846a-101">定义从双工会话通道处理消息时所需的接口。</span><span class="sxs-lookup"><span data-stu-id="2846a-101">Defines the interface required to process messages from duplex session channels.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2846a-102">此协定具有下列设置：</span><span class="sxs-lookup"><span data-stu-id="2846a-102">This contract has the following settings:</span></span>  
  
-   <span data-ttu-id="2846a-103">会话是必需的。</span><span class="sxs-lookup"><span data-stu-id="2846a-103">Sessions are required.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BeginProcessMessage">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginProcessMessage (System.ServiceModel.Channels.Message message, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginProcessMessage(class System.ServiceModel.Channels.Message message, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Routing.IDuplexSessionRouter.BeginProcessMessage(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginProcessMessage (message As Message, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginProcessMessage(System::ServiceModel::Channels::Message ^ message, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginProcessMessage : System.ServiceModel.Channels.Message * AsyncCallback * obj -&gt; IAsyncResult" Usage="iDuplexSessionRouter.BeginProcessMessage (message, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Routing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ServiceModel.OperationContract(Action="*", AsyncPattern=true, IsOneWay=true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ServiceModel.OperationContract(Action="*", AsyncPattern=true, IsOneWay=true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="2846a-104">要处理的消息。</span><span class="sxs-lookup"><span data-stu-id="2846a-104">The message to be processed.</span></span></param>
        <param name="callback"><span data-ttu-id="2846a-105">在消息处理完成时将调用的异步回调委托。</span><span class="sxs-lookup"><span data-stu-id="2846a-105">An asynchronous callback delegate that is invoked when the message processing has completed.</span></span></param>
        <param name="state"><span data-ttu-id="2846a-106">传递到回调过程的用户定义的状态对象。</span><span class="sxs-lookup"><span data-stu-id="2846a-106">A user-defined state object that is passed to the callback procedure.</span></span></param>
        <summary><span data-ttu-id="2846a-107">启动消息的异步处理。</span><span class="sxs-lookup"><span data-stu-id="2846a-107">Initiates the asynchronous processing of the message.</span></span></summary>
        <returns><span data-ttu-id="2846a-108">可用于轮询和/或等待结果的异步结果；当调用 <see cref="M:System.ServiceModel.Routing.IDuplexSessionRouter.EndProcessMessage(System.IAsyncResult)" /> 时，也需要该值。</span><span class="sxs-lookup"><span data-stu-id="2846a-108">An asynchronous result that can be used to poll or wait for results, or both; this value is also required when invoking <see cref="M:System.ServiceModel.Routing.IDuplexSessionRouter.EndProcessMessage(System.IAsyncResult)" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndProcessMessage">
      <MemberSignature Language="C#" Value="public void EndProcessMessage (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndProcessMessage(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Routing.IDuplexSessionRouter.EndProcessMessage(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndProcessMessage (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndProcessMessage(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndProcessMessage : IAsyncResult -&gt; unit" Usage="iDuplexSessionRouter.EndProcessMessage result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Routing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="2846a-109">通过调用 <see cref="M:System.ServiceModel.Routing.IDuplexSessionRouter.BeginProcessMessage(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" /> 返回的异步结果。</span><span class="sxs-lookup"><span data-stu-id="2846a-109">The asynchronous result returned by the call to <see cref="M:System.ServiceModel.Routing.IDuplexSessionRouter.BeginProcessMessage(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" />.</span></span></param>
        <summary><span data-ttu-id="2846a-110">完成消息处理的异步执行。</span><span class="sxs-lookup"><span data-stu-id="2846a-110">Finishes asynchronous execution of message processing.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
