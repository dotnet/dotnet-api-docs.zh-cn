<Type Name="XNamespace" FullName="System.Xml.Linq.XNamespace">
  <Metadata><Meta Name="ms.openlocfilehash" Value="807dc5e1efdfb9d3df3419bb96b40c88cb3d9220" /><Meta Name="ms.sourcegitcommit" Value="201bc7d7971e1c472a1df08dfeef528a60cec311" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/09/2020" /><Meta Name="ms.locfileid" Value="89597436" /></Metadata><TypeSignature Language="C#" Value="public sealed class XNamespace" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XNamespace extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.XNamespace" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XNamespace" />
  <TypeSignature Language="C++ CLI" Value="public ref class XNamespace sealed" />
  <TypeSignature Language="F#" Value="type XNamespace = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System.Xml.Linq" FromVersion="4.0.0.0" To="System.Xml.XDocument" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Xml.XDocument" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="2cb2a-101">表示一个 XML 命名空间。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-101">Represents an XML namespace.</span></span> <span data-ttu-id="2cb2a-102">此类不能被继承。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This class represents the XML construct of namespaces.  
  
 <span data-ttu-id="2cb2a-104">每个 <xref:System.Xml.Linq.XName> 包含一个 <xref:System.Xml.Linq.XNamespace> 。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-104">Every <xref:System.Xml.Linq.XName> contains an <xref:System.Xml.Linq.XNamespace>.</span></span> <span data-ttu-id="2cb2a-105">即使某个元素不在命名空间中，该元素的 <xref:System.Xml.Linq.XName> 仍包含命名空间 <xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-105">Even if an element is not in a namespace, the element's <xref:System.Xml.Linq.XName> still contains a namespace, <xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="2cb2a-106"><xref:System.Xml.Linq.XName.Namespace%2A?displayProperty=nameWithType> 属性一定不会是 `null`。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-106">The <xref:System.Xml.Linq.XName.Namespace%2A?displayProperty=nameWithType> property is guaranteed to not be `null`.</span></span>  
  
## <a name="creating-an-xnamespace-object"></a><span data-ttu-id="2cb2a-107">创建 XNamespace 对象</span><span class="sxs-lookup"><span data-stu-id="2cb2a-107">Creating an XNamespace Object</span></span>  
 <span data-ttu-id="2cb2a-108">创建对象的最常见方法 <xref:System.Xml.Linq.XNamespace> 是只向其分配一个字符串。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-108">The most common way to create an <xref:System.Xml.Linq.XNamespace> object is to simply assign a string to it.</span></span> <span data-ttu-id="2cb2a-109">然后，可以使用加法运算符的替代将命名空间与本地名称组合在一起。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-109">You can then combine the namespace with a local name by using the override of the addition operator.</span></span> <span data-ttu-id="2cb2a-110">下面的示例演示了这种用法：</span><span class="sxs-lookup"><span data-stu-id="2cb2a-110">The following example shows this idiom:</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root", "Content");  
Console.WriteLine(root);  
```  
  
```vb  
Dim aw As XNamespace = "http://www.adventure-works.com"  
Dim root As XElement = New XElement(aw + "Root", "Content")  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="2cb2a-111">但是，在 Visual Basic 中，通常会声明一个全局默认命名空间，如下所示：</span><span class="sxs-lookup"><span data-stu-id="2cb2a-111">However, in Visual Basic, you would typically declare a global default namespace, as follows:</span></span>  
  
```vb  
Imports <xmlns='http://www.adventure-works.com'>  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = _  
            <Root>Content</Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="2cb2a-112">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="2cb2a-112">This example produces the following output:</span></span>  
  
```xml  
<Root xmlns="http://www.adventure-works.com">Content</Root>  
```  
  
 <span data-ttu-id="2cb2a-113">将字符串分配给将 <xref:System.Xml.Linq.XNamespace> 使用中的隐式转换 <xref:System.String> 。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-113">Assigning a string to an <xref:System.Xml.Linq.XNamespace> uses the implicit conversion from <xref:System.String>.</span></span>  
  
 <span data-ttu-id="2cb2a-114">有关详细信息和示例，请参阅 [如何使用 c # 中的命名空间创建文档 (LINQ to XML) ](/dotnet/standard/linq/create-document-namespaces-csharp) 。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-114">See [How to create a document with namespaces in C# (LINQ to XML)](/dotnet/standard/linq/create-document-namespaces-csharp) for more information and examples.</span></span>  
  
 <span data-ttu-id="2cb2a-115">有关在 Visual Basic 中使用命名空间的详细信息，请参阅 [使用 XML 命名空间](/dotnet/standard/linq/namespaces-overview) 。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-115">See [Work with XML namespaces](/dotnet/standard/linq/namespaces-overview) for more information on using namespaces in Visual Basic.</span></span>  
  
## <a name="controlling-namespace-prefixes"></a><span data-ttu-id="2cb2a-116">控制命名空间前缀</span><span class="sxs-lookup"><span data-stu-id="2cb2a-116">Controlling Namespace Prefixes</span></span>  
 <span data-ttu-id="2cb2a-117">如果创建声明命名空间的属性，则会在序列化的 XML 中保存在属性中指定的前缀。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-117">If you create an attribute that declares a namespace, the prefix specified in the attribute will be persisted in the serialized XML.</span></span> <span data-ttu-id="2cb2a-118">若要创建一个声明具有前缀的命名空间的属性，请创建一个属性，该属性的名称的命名空间为 <xref:System.Xml.Linq.XNamespace.Xmlns%2A>，该属性的名称为命名空间前缀。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-118">To create an attribute that declares a namespace with a prefix, you create an attribute where the namespace of the name of the attribute is <xref:System.Xml.Linq.XNamespace.Xmlns%2A>, and the name of the attribute is the namespace prefix.</span></span> <span data-ttu-id="2cb2a-119">该属性的值即是命名空间的 URI。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-119">The value of the attribute is the URI of the namespace.</span></span> <span data-ttu-id="2cb2a-120">下面的示例演示了这种用法：</span><span class="sxs-lookup"><span data-stu-id="2cb2a-120">The following example shows this idiom:</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    "Content");  
Console.WriteLine(root);  
```  
  
```vb  
Dim aw As XNamespace = "http://www.adventure-works.com"  
Dim root As XElement = New XElement(aw + "Root", _  
    New XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"), _  
    "Content")  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="2cb2a-121">在 Visual Basic 中，你通常会使用全局命名空间声明，而不是创建命名空间节点来控制命名空间前缀：</span><span class="sxs-lookup"><span data-stu-id="2cb2a-121">In Visual Basic, instead of creating a namespace node to control namespace prefixes, you would typically use a global namespace declaration:</span></span>  
  
```vb  
Imports <xmlns:aw='http://www.adventure-works.com'>  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = _  
            <aw:Root>Content</aw:Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="2cb2a-122">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="2cb2a-122">This example produces the following output:</span></span>  
  
```  
<aw:Root xmlns:aw="http://www.adventure-works.com">Content</aw:Root>  
```  
  
 <span data-ttu-id="2cb2a-123">有关详细信息，请参阅 [如何控制命名空间前缀](/dotnet/standard/linq/control-namespace-prefixes)。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-123">For more information, see [How to control namespace prefixes](/dotnet/standard/linq/control-namespace-prefixes).</span></span>  
  
## <a name="creating-a-default-namespace"></a><span data-ttu-id="2cb2a-124">创建默认命名空间</span><span class="sxs-lookup"><span data-stu-id="2cb2a-124">Creating a Default Namespace</span></span>  
 <span data-ttu-id="2cb2a-125">构造将作为命名空间的属性时，如果属性名称的特殊值为 "xmlns"，则在序列化 XML 树时，会将命名空间声明为默认命名空间。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-125">When constructing an attribute that will be a namespace, if the attribute name has the special value of "xmlns", then when the XML tree is serialized, the namespace will be declared as the default namespace.</span></span> <span data-ttu-id="2cb2a-126">名称为 "xmlns" 本身的特殊属性不在任何命名空间中。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-126">The special attribute with the name of "xmlns" itself is not in any namespace.</span></span> <span data-ttu-id="2cb2a-127">该属性的值为命名空间 URI。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-127">The value of the attribute is the namespace URI.</span></span>  
  
 <span data-ttu-id="2cb2a-128">下面的示例创建一个 XML 树，其中包含以命名空间将成为默认命名空间的方式声明的属性：</span><span class="sxs-lookup"><span data-stu-id="2cb2a-128">The following example creates an XML tree that contains an attribute that is declared in such a way that the namespace will become the default namespace:</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XAttribute("xmlns", "http://www.adventure-works.com"),  
    new XElement(aw + "Child", "content")  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim aw As XNamespace = "http://www.adventure-works.com"  
Dim root As XElement = New XElement(aw + "Root", _  
    New XAttribute("xmlns", "http://www.adventure-works.com"), _  
    New XElement(aw + "Child", "content") _  
)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="2cb2a-129">在 Visual Basic 中，你通常会使用全局默认命名空间声明，而不是创建命名空间节点来创建默认命名空间：</span><span class="sxs-lookup"><span data-stu-id="2cb2a-129">In Visual Basic, instead of creating a namespace node to create a default namespace, you would typically use a global default namespace declaration:</span></span>  
  
```vb  
Imports <xmlns='http://www.adventure-works.com'>  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = _  
            <Root>  
                <Child>content</Child>  
            </Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="2cb2a-130">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="2cb2a-130">This example produces the following output:</span></span>  
  
```  
<Root xmlns="http://www.adventure-works.com">  
  <Child>content</Child>  
</Root>  
```  
  
## <a name="xnamespace-atomization"></a><span data-ttu-id="2cb2a-131">XNamespace 原子化</span><span class="sxs-lookup"><span data-stu-id="2cb2a-131">XNamespace Atomization</span></span>  
 <span data-ttu-id="2cb2a-132"><xref:System.Xml.Linq.XNamespace> 对象保证是原子化的;也就是说，如果两个 <xref:System.Xml.Linq.XNamespace> 对象具有完全相同的 URI，则它们将共享同一个实例。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-132"><xref:System.Xml.Linq.XNamespace> objects are guaranteed to be atomized; that is, if two <xref:System.Xml.Linq.XNamespace> objects have exactly the same URI, they will share the same instance.</span></span> <span data-ttu-id="2cb2a-133">为此，显式提供了相等运算符和比较运算符。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-133">The equality and comparison operators are provided explicitly for this purpose.</span></span>  
  
## <a name="using-expanded-names"></a><span data-ttu-id="2cb2a-134">使用展开名称</span><span class="sxs-lookup"><span data-stu-id="2cb2a-134">Using Expanded Names</span></span>  
 <span data-ttu-id="2cb2a-135">指定命名空间和本地名称的另一种方法是使用格式的扩展名称 `{namespace}name` ：</span><span class="sxs-lookup"><span data-stu-id="2cb2a-135">Another way to specify a namespace and a local name is to use an expanded name in the form `{namespace}name`:</span></span>  
  
```csharp  
XElement e = new XElement("{http://www.adventure-works.com}Root",  
     new XAttribute("{http://www.adventure-works.com}Att", "content")  
);  
Console.WriteLine(e);  
```  
  
```vb  
Dim e As XElement = New XElement("{http://www.adventure-works.com}Root", _  
     New XAttribute("{http://www.adventure-works.com}Att", "content") _  
)  
Console.WriteLine(e)  
```  
  
 <span data-ttu-id="2cb2a-136">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="2cb2a-136">This example produces the following output:</span></span>  
  
```  
<Root p1:Att="content" xmlns:p1="http://www.adventure-works.com" xmlns="http://www.adventure-works.com" />  
```  
  
 <span data-ttu-id="2cb2a-137">这种方法的性能较低。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-137">This approach has performance implications.</span></span> <span data-ttu-id="2cb2a-138">每次将包含扩展名的字符串传递给 [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] 时，都必须分析名称，查找原子化命名空间，再查找原子化名称。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-138">Each time that you pass a string that contains an expanded name to [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)], it must parse the name, find the atomized namespace, and find the atomized name.</span></span> <span data-ttu-id="2cb2a-139">这个过程会占用 CPU 时间。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-139">This process takes CPU time.</span></span> <span data-ttu-id="2cb2a-140">如果性能很重要，则可能要使用不同的方法。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-140">If performance is important, you may want to use a different approach.</span></span>  
  
 <span data-ttu-id="2cb2a-141">使用 Visual Basic 时，推荐的方法是使用 XML 文本，不涉及使用展开的名称。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-141">With Visual Basic, the recommended approach is to use XML literals, which does not involve the use of expanded names.</span></span>  
  
 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/standard/linq/linq-xml-overview"><span data-ttu-id="2cb2a-142">LINQ to XML 概述</span><span class="sxs-lookup"><span data-stu-id="2cb2a-142">LINQ to XML overview</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="xNamespace.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="2cb2a-143">要与当前 <see cref="T:System.Xml.Linq.XNamespace" /> 进行比较的 <see cref="T:System.Xml.Linq.XNamespace" />。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-143">The <see cref="T:System.Xml.Linq.XNamespace" /> to compare to the current <see cref="T:System.Xml.Linq.XNamespace" />.</span></span></param>
        <summary><span data-ttu-id="2cb2a-144">确定指定的 <see cref="T:System.Xml.Linq.XNamespace" /> 是否等同于当前的 <see cref="T:System.Xml.Linq.XNamespace" />。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-144">Determines whether the specified <see cref="T:System.Xml.Linq.XNamespace" /> is equal to the current <see cref="T:System.Xml.Linq.XNamespace" />.</span></span></summary>
        <returns><span data-ttu-id="2cb2a-145">指示指定 <see cref="T:System.Xml.Linq.XNamespace" /> 是否等于当前 <see cref="T:System.Xml.Linq.XNamespace" /> 的 <see cref="T:System.Boolean" />。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-145">A <see cref="T:System.Boolean" /> that indicates whether the specified <see cref="T:System.Xml.Linq.XNamespace" /> is equal to the current <see cref="T:System.Xml.Linq.XNamespace" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For two <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> objects to be equal, they must have the same URI.  
  
   
  
## Examples  
 <span data-ttu-id="2cb2a-147">下面的示例比较引用同一 URI 的两个命名空间。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-147">The following example compares two namespaces that refer to the same URI.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
Console.WriteLine(aw == "http://www.adventure-works.com");  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Console.WriteLine(GetXmlNamespace(aw) = "http://www.adventure-works.com")  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="2cb2a-148">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="2cb2a-148">This example produces the following output:</span></span>  
  
```  
True  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/linq/linq-xml-overview"><span data-ttu-id="2cb2a-149">LINQ to XML 概述</span><span class="sxs-lookup"><span data-stu-id="2cb2a-149">LINQ to XML overview</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XNamespace Get (string namespaceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XNamespace Get(string namespaceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.Get(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Get (namespaceName As String) As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XNamespace ^ Get(System::String ^ namespaceName);" />
      <MemberSignature Language="F#" Value="static member Get : string -&gt; System.Xml.Linq.XNamespace" Usage="System.Xml.Linq.XNamespace.Get namespaceName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="namespaceName"><span data-ttu-id="2cb2a-150">包含命名空间 URI 的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-150">A <see cref="T:System.String" /> that contains a namespace URI.</span></span></param>
        <summary><span data-ttu-id="2cb2a-151">获取指定统一资源标识符 (URI) 的 <see cref="T:System.Xml.Linq.XNamespace" />。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-151">Gets an <see cref="T:System.Xml.Linq.XNamespace" /> for the specified Uniform Resource Identifier (URI).</span></span></summary>
        <returns><span data-ttu-id="2cb2a-152">从指定的 URI 创建的 <see cref="T:System.Xml.Linq.XNamespace" />。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-152">An <see cref="T:System.Xml.Linq.XNamespace" /> created from the specified URI.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The returned <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> object is guaranteed to be atomic (that is, it is the only one in the system for that particular URI).  
  
   
  
## Examples  
 <span data-ttu-id="2cb2a-154">下面的示例 <xref:System.Xml.Linq.XNamespace> 从指定的 URI 中获取。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-154">The following example gets a <xref:System.Xml.Linq.XNamespace> from a specified URI.</span></span>  
  
```csharp  
XNamespace aw = XNamespace.Get("http://www.adventure-works.com");  
  
// This is the preferred form.  
XNamespace aw2 = "http://www.adventure-works.com";  
Console.WriteLine(aw);  
Console.WriteLine(aw2);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = XNamespace.Get("http://www.adventure-works.com")  
  
        ' This is the preferred form.  
        Dim aw2 As XNamespace = GetXmlNamespace(aw)  
        Console.WriteLine(aw)  
        Console.WriteLine(aw2)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="2cb2a-155">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="2cb2a-155">This example produces the following output:</span></span>  
  
```  
http://www.adventure-works.com  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/linq/linq-xml-overview"><span data-ttu-id="2cb2a-156">LINQ to XML 概述</span><span class="sxs-lookup"><span data-stu-id="2cb2a-156">LINQ to XML overview</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="xNamespace.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2cb2a-157">获取此 <see cref="T:System.Xml.Linq.XNamespace" /> 的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-157">Gets a hash code for this <see cref="T:System.Xml.Linq.XNamespace" />.</span></span></summary>
        <returns><span data-ttu-id="2cb2a-158">一个 <see cref="T:System.Int32" />，其中包含 <see cref="T:System.Xml.Linq.XNamespace" /> 的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-158">An <see cref="T:System.Int32" /> that contains the hash code for the <see cref="T:System.Xml.Linq.XNamespace" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method serves as a hash function for <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>. <span data-ttu-id="2cb2a-160">可在哈希 <xref:System.Xml.Linq.XNamespace.GetHashCode%2A> 算法和数据结构（如哈希表）中使用。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-160">You can use <xref:System.Xml.Linq.XNamespace.GetHashCode%2A> in hashing algorithms and data structures like a hash table.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/linq/linq-xml-overview"><span data-ttu-id="2cb2a-161">LINQ to XML 概述</span><span class="sxs-lookup"><span data-stu-id="2cb2a-161">LINQ to XML overview</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetName">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XName GetName (string localName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Linq.XName GetName(string localName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.GetName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetName (localName As String) As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Linq::XName ^ GetName(System::String ^ localName);" />
      <MemberSignature Language="F#" Value="member this.GetName : string -&gt; System.Xml.Linq.XName" Usage="xNamespace.GetName localName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName"><span data-ttu-id="2cb2a-162">包含本地名称的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-162">A <see cref="T:System.String" /> that contains a local name.</span></span></param>
        <summary><span data-ttu-id="2cb2a-163">返回从此 <see cref="T:System.Xml.Linq.XNamespace" /> 和指定的本地名称创建的 <see cref="T:System.Xml.Linq.XName" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-163">Returns an <see cref="T:System.Xml.Linq.XName" /> object created from this <see cref="T:System.Xml.Linq.XNamespace" /> and the specified local name.</span></span></summary>
        <returns><span data-ttu-id="2cb2a-164">从此 <see cref="T:System.Xml.Linq.XNamespace" /> 和指定的本地名称创建的 <see cref="T:System.Xml.Linq.XName" />。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-164">An <see cref="T:System.Xml.Linq.XName" /> created from this <see cref="T:System.Xml.Linq.XNamespace" /> and the specified local name.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The returned <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> object is guaranteed to be atomic (that is, it is the only one in the system for a specific expanded name).  
  
   
  
## Examples  
 <span data-ttu-id="2cb2a-166">下面的示例使用此属性来检索 <xref:System.Xml.Linq.XName> 。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-166">The following example uses this property to retrieve an <xref:System.Xml.Linq.XName>.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XName name = aw.GetName("Root");  
Console.WriteLine("{0}", name);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace(aw)  
        Dim name As XName = aw.GetName("Root")  
        Console.WriteLine("{0}", name)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="2cb2a-167">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="2cb2a-167">This example produces the following output:</span></span>  
  
```  
{http://www.adventure-works.com}Root  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/linq/linq-xml-overview"><span data-ttu-id="2cb2a-168">LINQ to XML 概述</span><span class="sxs-lookup"><span data-stu-id="2cb2a-168">LINQ to XML overview</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="NamespaceName">
      <MemberSignature Language="C#" Value="public string NamespaceName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NamespaceName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNamespace.NamespaceName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NamespaceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NamespaceName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NamespaceName : string" Usage="System.Xml.Linq.XNamespace.NamespaceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2cb2a-169">获取此命名空间的统一资源标识符 (URI)。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-169">Gets the Uniform Resource Identifier (URI) of this namespace.</span></span></summary>
        <value><span data-ttu-id="2cb2a-170">一个包含命名空间 URI 的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-170">A <see cref="T:System.String" /> that contains the URI of the namespace.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use this property:  
  
```csharp  
string markup =  
@"<aw:Root  
    xmlns:aw='http://www.adventure-works.com'/>";  
XElement root = XElement.Parse(markup);  
Console.WriteLine(root.Name.Namespace.NamespaceName);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace(aw)  
        Dim root As XElement = <aw:Root/>  
        Console.WriteLine(root.Name.Namespace.NamespaceName)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="2cb2a-172">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="2cb2a-172">This example produces the following output:</span></span>  
  
```  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/linq/linq-xml-overview"><span data-ttu-id="2cb2a-173">LINQ to XML 概述</span><span class="sxs-lookup"><span data-stu-id="2cb2a-173">LINQ to XML overview</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XNamespace None { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xml.Linq.XNamespace None" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNamespace.None" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property None As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xml::Linq::XNamespace ^ None { System::Xml::Linq::XNamespace ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.None : System.Xml.Linq.XNamespace" Usage="System.Xml.Linq.XNamespace.None" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2cb2a-174">获取不与命名空间对应的 <see cref="T:System.Xml.Linq.XNamespace" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-174">Gets the <see cref="T:System.Xml.Linq.XNamespace" /> object that corresponds to no namespace.</span></span></summary>
        <value><span data-ttu-id="2cb2a-175">不与命名空间对应的 <see cref="T:System.Xml.Linq.XNamespace" />。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-175">The <see cref="T:System.Xml.Linq.XNamespace" /> that corresponds to no namespace.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If an element or attribute is in no namespace, its namespace will be set to the namespace returned by this property.  
  
   
  
## Examples  
 <span data-ttu-id="2cb2a-177">下面的示例演示如何使用此属性来确定不在命名空间中的元素。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-177">The following example shows uses this property to determine which elements are in no namespace.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
  
XElement root = new XElement("Root",  
    new XElement(aw + "ChildInNamespace", "content"),  
    new XElement("ChildInNoNamespace", "content")  
);  
  
if (root.Name.Namespace == XNamespace.None)  
    Console.WriteLine("Root element is in no namespace");  
else  
    Console.WriteLine("Root element is in a namespace");  
  
if (root.Element(aw + "ChildInNamespace").Name.Namespace == XNamespace.None)  
    Console.WriteLine("ChildInNamespace element is in no namespace");  
else  
    Console.WriteLine("ChildInNamespace element is in a namespace");  
  
if (root.Element("ChildInNoNamespace").Name.Namespace == XNamespace.None)  
    Console.WriteLine("ChildInNoNamespace element is in no namespace");  
else  
    Console.WriteLine("ChildInNoNamespace element is in a namespace");  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = _  
            <Root>  
                <aw:ChildInNamespace>content</aw:ChildInNamespace>  
                <ChildInNoNamespace>content</ChildInNoNamespace>  
            </Root>  
  
        If (root.Name.Namespace Is XNamespace.None) Then  
            Console.WriteLine("Root element is in no namespace")  
        Else  
            Console.WriteLine("Root element is in a namespace")  
        End If  
  
        If (root.Element(GetXmlNamespace(aw) + "ChildInNamespace") _  
                .Name.Namespace Is XNamespace.None) Then  
            Console.WriteLine("ChildInNamespace element is in no namespace")  
        Else  
            Console.WriteLine("ChildInNamespace element is in a namespace")  
        End If  
  
        If (root.Element("ChildInNoNamespace") _  
                .Name.Namespace Is XNamespace.None) Then  
            Console.WriteLine("ChildInNoNamespace element is in no namespace")  
        Else  
            Console.WriteLine("ChildInNoNamespace element is in a namespace")  
        End If  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="2cb2a-178">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="2cb2a-178">This example produces the following output:</span></span>  
  
```  
Root element is in no namespace  
ChildInNamespace element is in a namespace  
ChildInNoNamespace element is in no namespace  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/linq/linq-xml-overview"><span data-ttu-id="2cb2a-179">LINQ to XML 概述</span><span class="sxs-lookup"><span data-stu-id="2cb2a-179">LINQ to XML overview</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XName operator + (System.Xml.Linq.XNamespace ns, string localName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Xml.Linq.XName op_Addition(class System.Xml.Linq.XNamespace ns, string localName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.op_Addition(System.Xml.Linq.XNamespace,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (ns As XNamespace, localName As String) As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XName ^ operator +(System::Xml::Linq::XNamespace ^ ns, System::String ^ localName);" />
      <MemberSignature Language="F#" Value="static member ( + ) : System.Xml.Linq.XNamespace * string -&gt; System.Xml.Linq.XName" Usage="ns + localName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ns" Type="System.Xml.Linq.XNamespace" />
        <Parameter Name="localName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ns"><span data-ttu-id="2cb2a-180">一个包含命名空间的 <see cref="T:System.Xml.Linq.XNamespace" />。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-180">An <see cref="T:System.Xml.Linq.XNamespace" /> that contains the namespace.</span></span></param>
        <param name="localName"><span data-ttu-id="2cb2a-181">一个包含本地名称的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-181">A <see cref="T:System.String" /> that contains the local name.</span></span></param>
        <summary><span data-ttu-id="2cb2a-182">将 <see cref="T:System.Xml.Linq.XName" /> 对象与本地名称进行组合来创建 <see cref="T:System.Xml.Linq.XNamespace" />。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-182">Combines an <see cref="T:System.Xml.Linq.XNamespace" /> object with a local name to create an <see cref="T:System.Xml.Linq.XName" />.</span></span></summary>
        <returns><span data-ttu-id="2cb2a-183">从命名空间和本地名称构造的新 <see cref="T:System.Xml.Linq.XName" />。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-183">The new <see cref="T:System.Xml.Linq.XName" /> constructed from the namespace and local name.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This operator enables the common idiom of combining a namespace and a local name in the construction of an element or attribute. <span data-ttu-id="2cb2a-185">这种用法提供了具有命名空间前缀的一些优点，因为你可以使用 short 变量来引用命名空间。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-185">This idiom provides some of the benefits of having namespace prefixes, in that you can refer to a namespace using a variable that is short.</span></span> <span data-ttu-id="2cb2a-186">这消除了创建 XML 树的代码中的句法干扰。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-186">This eliminates syntactic noise in the code that creates XML trees.</span></span>  
  
## Examples  
 <span data-ttu-id="2cb2a-187">下面的示例演示 `+` 如何使用运算符 <xref:System.Xml.Linq.XName> 从 <xref:System.Xml.Linq.XNamespace> 和本地名称创建。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-187">The following example shows the use of the `+` operator to create an <xref:System.Xml.Linq.XName> from an <xref:System.Xml.Linq.XNamespace> and a local name.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XElement(aw + "Child")  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim aw As XNamespace = "http://www.adventure-works.com"  
Dim root As XElement = New XElement(aw + "Root", _  
    New XElement(aw + "Child") _  
)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="2cb2a-188">在 Visual Basic 中，这是首选的用法：</span><span class="sxs-lookup"><span data-stu-id="2cb2a-188">In Visual Basic, this is the preferred idiom:</span></span>  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace()  
        Dim root As XElement = _  
            <Root>  
                <Child/>  
            </Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="2cb2a-189">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="2cb2a-189">This example produces the following output:</span></span>  
  
```  
<Root xmlns="http://www.adventure-works.com">  
  <Child />  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/linq/linq-xml-overview"><span data-ttu-id="2cb2a-190">LINQ to XML 概述</span><span class="sxs-lookup"><span data-stu-id="2cb2a-190">LINQ to XML overview</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Xml.Linq.XNamespace left, System.Xml.Linq.XNamespace right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Xml.Linq.XNamespace left, class System.Xml.Linq.XNamespace right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.op_Equality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As XNamespace, right As XNamespace) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Xml::Linq::XNamespace ^ left, System::Xml::Linq::XNamespace ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Xml.Linq.XNamespace * System.Xml.Linq.XNamespace -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Xml.Linq.XNamespace" />
        <Parameter Name="right" Type="System.Xml.Linq.XNamespace" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2cb2a-191">要比较的第一个 <see cref="T:System.Xml.Linq.XNamespace" />。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-191">The first <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</span></span></param>
        <param name="right"><span data-ttu-id="2cb2a-192">要比较的第二个 <see cref="T:System.Xml.Linq.XNamespace" />。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-192">The second <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</span></span></param>
        <summary><span data-ttu-id="2cb2a-193">返回一个值，该值指示 <see cref="T:System.Xml.Linq.XNamespace" /> 的两个实例是否相等。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-193">Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XNamespace" /> are equal.</span></span></summary>
        <returns><span data-ttu-id="2cb2a-194">指示 <paramref name="left" /> 和 <paramref name="right" /> 是否相等的 <see cref="T:System.Boolean" />。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-194">A <see cref="T:System.Boolean" /> that indicates whether <paramref name="left" /> and <paramref name="right" /> are equal.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The operator overloads <ph id="ph1">`==`</ph> and <ph id="ph2">`!=`</ph> are provided to enable comparisons between <ph id="ph3">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> and string (for example, <ph id="ph4">`element.Name.Namespace == "http://www.adventure-works.com"`</ph>). <span data-ttu-id="2cb2a-196">C # 中预定义的引用相等运算符要求一个操作数只能通过引用转换转换为另一个操作数，而不考虑从字符串到的隐式转换 <xref:System.Xml.Linq.XNamespace> 。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-196">The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only, and do not consider the implicit conversion from string to <xref:System.Xml.Linq.XNamespace>.</span></span>  
   
## Examples  
 <span data-ttu-id="2cb2a-197">下面的示例演示与字符串的比较 <xref:System.Xml.Linq.XNamespace> 。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-197">The following example shows the comparison of an <xref:System.Xml.Linq.XNamespace> and a string.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
Console.WriteLine(aw == "http://www.adventure-works.com");  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace()  
        Console.WriteLine(aw = "http://www.adventure-works.com")  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="2cb2a-198">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="2cb2a-198">This example produces the following output:</span></span>  
  
```  
True  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/linq/linq-xml-overview"><span data-ttu-id="2cb2a-199">LINQ to XML 概述</span><span class="sxs-lookup"><span data-stu-id="2cb2a-199">LINQ to XML overview</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Xml.Linq.XNamespace (string namespaceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Xml.Linq.XNamespace op_Implicit(string namespaceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.op_Implicit(System.String)~System.Xml.Linq.XNamespace" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (namespaceName As String) As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Xml::Linq::XNamespace ^(System::String ^ namespaceName);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : string -&gt; System.Xml.Linq.XNamespace" Usage="System.Xml.Linq.XNamespace.op_Implicit namespaceName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="namespaceName"><span data-ttu-id="2cb2a-200">一个包含命名空间 URI 的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-200">A <see cref="T:System.String" /> that contains the namespace URI.</span></span></param>
        <summary><span data-ttu-id="2cb2a-201">将包含统一资源标识符 (URI) 的字符串转换为 <see cref="T:System.Xml.Linq.XNamespace" />。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-201">Converts a string containing a Uniform Resource Identifier (URI) to an <see cref="T:System.Xml.Linq.XNamespace" />.</span></span></summary>
        <returns><span data-ttu-id="2cb2a-202">从 URI 字符串构造的 <see cref="T:System.Xml.Linq.XNamespace" />。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-202">An <see cref="T:System.Xml.Linq.XNamespace" /> constructed from the URI string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[## Examples  
 The following example shows the initialization of an <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> variable by assigning a string to it.  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
Console.WriteLine(aw);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace()  
        Console.WriteLine(aw)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="2cb2a-204">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="2cb2a-204">This example produces the following output:</span></span>  
  
```  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/linq/linq-xml-overview"><span data-ttu-id="2cb2a-205">LINQ to XML 概述</span><span class="sxs-lookup"><span data-stu-id="2cb2a-205">LINQ to XML overview</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Xml.Linq.XNamespace left, System.Xml.Linq.XNamespace right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Xml.Linq.XNamespace left, class System.Xml.Linq.XNamespace right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.op_Inequality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As XNamespace, right As XNamespace) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Xml::Linq::XNamespace ^ left, System::Xml::Linq::XNamespace ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Xml.Linq.XNamespace * System.Xml.Linq.XNamespace -&gt; bool" Usage="System.Xml.Linq.XNamespace.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Xml.Linq.XNamespace" />
        <Parameter Name="right" Type="System.Xml.Linq.XNamespace" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2cb2a-206">要比较的第一个 <see cref="T:System.Xml.Linq.XNamespace" />。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-206">The first <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</span></span></param>
        <param name="right"><span data-ttu-id="2cb2a-207">要比较的第二个 <see cref="T:System.Xml.Linq.XNamespace" />。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-207">The second <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</span></span></param>
        <summary><span data-ttu-id="2cb2a-208">返回一个值，该值指示 <see cref="T:System.Xml.Linq.XNamespace" /> 的两个实例是否相等。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-208">Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XNamespace" /> are not equal.</span></span></summary>
        <returns><span data-ttu-id="2cb2a-209">指示 <paramref name="left" /> 和 <paramref name="right" /> 是否不等的 <see cref="T:System.Boolean" />。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-209">A <see cref="T:System.Boolean" /> that indicates whether <paramref name="left" /> and <paramref name="right" /> are not equal.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The operator overloads <ph id="ph1">`==`</ph> and <ph id="ph2">`!=`</ph> are provided to enable comparisons between <ph id="ph3">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> and string (for example, <ph id="ph4">`element.Name.Namespace == "http://www.adventure-works.com"`</ph>). <span data-ttu-id="2cb2a-211">C # 中预定义的引用相等运算符要求一个操作数只能通过引用转换转换为另一个操作数，而不考虑从字符串到的隐式转换 <xref:System.Xml.Linq.XNamespace> 。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-211">The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only, and do not consider the implicit conversion from string to <xref:System.Xml.Linq.XNamespace>.</span></span>   
  
## Examples  
 <span data-ttu-id="2cb2a-212">下面的示例演示与字符串的比较 <xref:System.Xml.Linq.XNamespace> 。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-212">The following example shows a comparison of a <xref:System.Xml.Linq.XNamespace> to a string.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
Console.WriteLine(aw != "http://www.adventure-works.com");  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace()  
        Console.WriteLine(aw <> "http://www.adventure-works.com")  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="2cb2a-213">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="2cb2a-213">This example produces the following output:</span></span>  
  
```  
False  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/linq/linq-xml-overview"><span data-ttu-id="2cb2a-214">LINQ to XML 概述</span><span class="sxs-lookup"><span data-stu-id="2cb2a-214">LINQ to XML overview</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="xNamespace.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2cb2a-215">返回此 <see cref="T:System.Xml.Linq.XNamespace" /> 的 URI。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-215">Returns the URI of this <see cref="T:System.Xml.Linq.XNamespace" />.</span></span></summary>
        <returns><span data-ttu-id="2cb2a-216">此 <see cref="T:System.Xml.Linq.XNamespace" /> 的 URI。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-216">The URI of this <see cref="T:System.Xml.Linq.XNamespace" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example uses this method to print a namespace on the console.  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
Console.WriteLine("{0}", aw.ToString());  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace()  
        Console.WriteLine("{0}", aw)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="2cb2a-218">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="2cb2a-218">This example produces the following output:</span></span>  
  
```  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/linq/linq-xml-overview"><span data-ttu-id="2cb2a-219">LINQ to XML 概述</span><span class="sxs-lookup"><span data-stu-id="2cb2a-219">LINQ to XML overview</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Xml">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XNamespace Xml { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xml.Linq.XNamespace Xml" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNamespace.Xml" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Xml As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xml::Linq::XNamespace ^ Xml { System::Xml::Linq::XNamespace ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Xml : System.Xml.Linq.XNamespace" Usage="System.Xml.Linq.XNamespace.Xml" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2cb2a-220">获取与 XML URI (<c>http://www.w3.org/XML/1998/namespace</c>) 对应的 <see cref="T:System.Xml.Linq.XNamespace" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-220">Gets the <see cref="T:System.Xml.Linq.XNamespace" /> object that corresponds to the XML URI (<c>http://www.w3.org/XML/1998/namespace</c>).</span></span></summary>
        <value><span data-ttu-id="2cb2a-221"><see cref="T:System.Xml.Linq.XNamespace" />与 () 的 XML URI 相对应的 <c>http://www.w3.org/XML/1998/namespace</c> 。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-221">The <see cref="T:System.Xml.Linq.XNamespace" /> that corresponds to the XML URI (<c>http://www.w3.org/XML/1998/namespace</c>).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cb2a-222">某些标准化属性（如 `space` ）位于 `http://www.w3.org/XML/1998/namespace` 命名空间中。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-222">Certain standardized attributes, such as `space`, are in the `http://www.w3.org/XML/1998/namespace` namespace.</span></span> <span data-ttu-id="2cb2a-223">W3C 标准版指定不需要将此命名空间声明为 XML 树中的属性。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-223">The W3C standard specifies that this namespace does not have to be declared as an attribute in the XML tree.</span></span> <span data-ttu-id="2cb2a-224">它是始终自动在 XML 分析器中使用的保留命名空间。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-224">It is a reserved namespace that is always automatically available in the XML parser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2cb2a-225">下面的示例演示如何 `xml:space="preserve"` 在 XML 树中创建属性：</span><span class="sxs-lookup"><span data-stu-id="2cb2a-225">The following example shows how to create an `xml:space="preserve"` attribute in an XML tree:</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute(XNamespace.Xml + "space", "preserve"),  
    new XElement("Child", "content")  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = _  
    <Root xml:space="preserve">  
        <Child>content</Child>  
    </Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="2cb2a-226">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="2cb2a-226">This example produces the following output:</span></span>  
  
```  
<Root xml:space="preserve">  
  <Child>content</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/linq/linq-xml-overview"><span data-ttu-id="2cb2a-227">LINQ to XML 概述</span><span class="sxs-lookup"><span data-stu-id="2cb2a-227">LINQ to XML overview</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Xmlns">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XNamespace Xmlns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xml.Linq.XNamespace Xmlns" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNamespace.Xmlns" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Xmlns As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xml::Linq::XNamespace ^ Xmlns { System::Xml::Linq::XNamespace ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Xmlns : System.Xml.Linq.XNamespace" Usage="System.Xml.Linq.XNamespace.Xmlns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2cb2a-228">获取与 xmlns URI (<c>http://www.w3.org/2000/xmlns/</c>) 对应的 <see cref="T:System.Xml.Linq.XNamespace" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-228">Gets the <see cref="T:System.Xml.Linq.XNamespace" /> object that corresponds to the xmlns URI (<c>http://www.w3.org/2000/xmlns/</c>).</span></span></summary>
        <value><span data-ttu-id="2cb2a-229"><see cref="T:System.Xml.Linq.XNamespace" />与**xmlns** URI)  (相对应的 <c>http://www.w3.org/2000/xmlns/</c> 。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-229">The <see cref="T:System.Xml.Linq.XNamespace" /> that corresponds to the **xmlns** URI (<c>http://www.w3.org/2000/xmlns/</c>).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cb2a-230">在声明命名空间时，命名空间属性本身位于 **xmlns** 命名空间中。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-230">When you declare namespaces, the namespace attributes themselves are in the **xmlns** namespace.</span></span> <span data-ttu-id="2cb2a-231">W3C 标准版指定不需要将此命名空间声明为 XML 树中的属性。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-231">The W3C standard specifies that this namespace does not have to be declared as an attribute in the XML tree.</span></span> <span data-ttu-id="2cb2a-232">它是始终自动在 XML 分析器中使用的保留命名空间。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-232">It is a reserved namespace that is always automatically available in the XML parser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2cb2a-233">下面的示例演示如何将命名空间添加到 XML 树。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-233">The following example shows how to add a namespace to an XML tree.</span></span> <span data-ttu-id="2cb2a-234">声明命名空间的属性的命名空间是此属性返回的命名空间。</span><span class="sxs-lookup"><span data-stu-id="2cb2a-234">The namespace for the attribute that declares the namespace is the namespace returned by this property.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    new XElement(aw + "Child", "content")  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root = <aw:Root xmlns:aw="http://www.adventure-works.com">  
               <aw:Child>content</aw:Child>  
           </aw:Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="2cb2a-235">在 Visual Basic 中，首选的用法是：</span><span class="sxs-lookup"><span data-stu-id="2cb2a-235">In Visual Basic, the preferred idiom is:</span></span>  
  
```vb  
Imports <xmlns:aw='http://www.adventure-works.com'>  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = _  
            <aw:Root>  
                <aw:Child>content</aw:Child>  
            </aw:Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="2cb2a-236">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="2cb2a-236">This example produces the following output:</span></span>  
  
```  
<aw:Root xmlns:aw="http://www.adventure-works.com">  
  <aw:Child>content</aw:Child>  
</aw:Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/linq/linq-xml-overview"><span data-ttu-id="2cb2a-237">LINQ to XML 概述</span><span class="sxs-lookup"><span data-stu-id="2cb2a-237">LINQ to XML overview</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
