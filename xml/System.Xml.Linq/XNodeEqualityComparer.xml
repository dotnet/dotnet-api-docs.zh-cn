<Type Name="XNodeEqualityComparer" FullName="System.Xml.Linq.XNodeEqualityComparer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8c451725a087a16f9691f38c56e4051a939f9d54" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83521436" /></Metadata><TypeSignature Language="C#" Value="public sealed class XNodeEqualityComparer : System.Collections.Generic.IEqualityComparer&lt;System.Xml.Linq.XNode&gt;, System.Collections.IEqualityComparer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XNodeEqualityComparer extends System.Object implements class System.Collections.Generic.IEqualityComparer`1&lt;class System.Xml.Linq.XNode&gt;, class System.Collections.IEqualityComparer" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.XNodeEqualityComparer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XNodeEqualityComparer&#xA;Implements IEqualityComparer, IEqualityComparer(Of XNode)" />
  <TypeSignature Language="C++ CLI" Value="public ref class XNodeEqualityComparer sealed : System::Collections::Generic::IEqualityComparer&lt;System::Xml::Linq::XNode ^&gt;, System::Collections::IEqualityComparer" />
  <TypeSignature Language="F#" Value="type XNodeEqualityComparer = class&#xA;    interface IEqualityComparer&lt;XNode&gt;&#xA;    interface IEqualityComparer" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="F#" Value="type XNodeEqualityComparer = class&#xA;    interface IEqualityComparer&#xA;    interface IEqualityComparer&lt;XNode&gt;" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System.Xml.Linq" FromVersion="4.0.0.0" To="System.Xml.XDocument" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Xml.XDocument" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEqualityComparer&lt;System.Xml.Linq.XNode&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEqualityComparer</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="465af-101">比较节点以确定其是否相等。</span><span class="sxs-lookup"><span data-stu-id="465af-101">Compares nodes to determine whether they are equal.</span></span> <span data-ttu-id="465af-102">无法继承此类。</span><span class="sxs-lookup"><span data-stu-id="465af-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="465af-103">此类的目的是实现 <xref:System.Collections.IEqualityComparer?displayProperty=nameWithType> 和 <xref:System.Collections.Generic.IEqualityComparer%601?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="465af-103">The purpose of this class is to implement <xref:System.Collections.IEqualityComparer?displayProperty=nameWithType> and <xref:System.Collections.Generic.IEqualityComparer%601?displayProperty=nameWithType>.</span></span> <span data-ttu-id="465af-104">需要标识的类（如 <xref:System.Collections.Generic.Dictionary%602>）需要一个实现这些接口之一的类的实例。</span><span class="sxs-lookup"><span data-stu-id="465af-104">Classes that require identity (such as <xref:System.Collections.Generic.Dictionary%602> ) require an instance of a class that implements one of these interfaces.</span></span>  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="465af-105">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="465af-105">LINQ to XML</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XNodeEqualityComparer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNodeEqualityComparer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XNodeEqualityComparer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="465af-106">初始化 <see cref="T:System.Xml.Linq.XNodeEqualityComparer" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="465af-106">Initializes a new instance of the <see cref="T:System.Xml.Linq.XNodeEqualityComparer" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="465af-107">下面的示例使用此类来确定两个节点是否相等。</span><span class="sxs-lookup"><span data-stu-id="465af-107">The following example uses this class to determine whether two nodes are equal.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XElement("Child1", 1),  
    new XElement("Child2", "some content")  
);  
XElement xmlTree2 = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XElement("Child1", 1),  
    new XElement("Child2", "some content")  
);  
XNodeEqualityComparer equalityComparer = new XNodeEqualityComparer();  
Console.WriteLine(equalityComparer.Equals(xmlTree1, xmlTree2));  
xmlTree2.Add(new XElement("NewChild", "new content"));  
Console.WriteLine(equalityComparer.Equals(xmlTree1, xmlTree2));  
```  
  
 <span data-ttu-id="465af-108">此示例生成以下输出：</span><span class="sxs-lookup"><span data-stu-id="465af-108">This example produces the following output:</span></span>  
  
```  
True  
False  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="465af-109">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="465af-109">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Xml.Linq.XNode x, System.Xml.Linq.XNode y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.Xml.Linq.XNode x, class System.Xml.Linq.XNode y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNodeEqualityComparer.Equals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (x As XNode, y As XNode) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Xml::Linq::XNode ^ x, System::Xml::Linq::XNode ^ y);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Xml.Linq.XNode * System.Xml.Linq.XNode -&gt; bool" Usage="xNodeEqualityComparer.Equals (x, y)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Xml.Linq.XNode" />
        <Parameter Name="y" Type="System.Xml.Linq.XNode" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="465af-110">要比较的第一个 <see cref="T:System.Xml.Linq.XNode" />。</span><span class="sxs-lookup"><span data-stu-id="465af-110">The first <see cref="T:System.Xml.Linq.XNode" /> to compare.</span></span></param>
        <param name="y"><span data-ttu-id="465af-111">要比较的第二个 <see cref="T:System.Xml.Linq.XNode" />。</span><span class="sxs-lookup"><span data-stu-id="465af-111">The second <see cref="T:System.Xml.Linq.XNode" /> to compare.</span></span></param>
        <summary><span data-ttu-id="465af-112">比较两个节点的值。</span><span class="sxs-lookup"><span data-stu-id="465af-112">Compares the values of two nodes.</span></span></summary>
        <returns><span data-ttu-id="465af-113">指示节点是否相等的 <see cref="T:System.Boolean" />。</span><span class="sxs-lookup"><span data-stu-id="465af-113">A <see cref="T:System.Boolean" /> indicating if the nodes are equal.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="465af-114">以下条件确定两个节点是否相等：</span><span class="sxs-lookup"><span data-stu-id="465af-114">The following criteria determine whether two nodes are equal:</span></span>  
  
-   <span data-ttu-id="465af-115">`null` 节点与另一个 `null` 节点相等，但不等于非`null` 节点。</span><span class="sxs-lookup"><span data-stu-id="465af-115">A `null` node is equal to another `null` node but unequal to a non-`null` node.</span></span>  
  
-   <span data-ttu-id="465af-116">不同类型的两个 <xref:System.Xml.Linq.XNode> 对象从不相等。</span><span class="sxs-lookup"><span data-stu-id="465af-116">Two <xref:System.Xml.Linq.XNode> objects of different types are never equal.</span></span>  
  
-   <span data-ttu-id="465af-117">如果两个 <xref:System.Xml.Linq.XText> 节点包含相同的文本，则它们相等。</span><span class="sxs-lookup"><span data-stu-id="465af-117">Two <xref:System.Xml.Linq.XText> nodes are equal if they contain the same text.</span></span>  
  
-   <span data-ttu-id="465af-118">如果两个 <xref:System.Xml.Linq.XElement> 节点具有相同的标记名称、具有相同值的相同属性集，以及（忽略注释和处理指令），则包含两个成对相等内容节点的相等长序列。</span><span class="sxs-lookup"><span data-stu-id="465af-118">Two <xref:System.Xml.Linq.XElement> nodes are equal if they have the same tag name, the same set of attributes with the same values, and (ignoring comments and processing instructions), contain two equal-length sequences of pairwise equal content nodes.</span></span>  
  
-   <span data-ttu-id="465af-119">如果两个 <xref:System.Xml.Linq.XDocument> 对象的根节点相等，则相等。</span><span class="sxs-lookup"><span data-stu-id="465af-119">Two <xref:System.Xml.Linq.XDocument> objects are equal if their root nodes are equal.</span></span>  
  
-   <span data-ttu-id="465af-120">如果两个 <xref:System.Xml.Linq.XComment> 节点包含相同的注释文本，则它们相等。</span><span class="sxs-lookup"><span data-stu-id="465af-120">Two <xref:System.Xml.Linq.XComment> nodes are equal if they contain the same comment text.</span></span>  
  
-   <span data-ttu-id="465af-121">如果两个 <xref:System.Xml.Linq.XProcessingInstruction> 节点具有相同的目标和数据，则相等。</span><span class="sxs-lookup"><span data-stu-id="465af-121">Two <xref:System.Xml.Linq.XProcessingInstruction> nodes are equal if they have the same target and data.</span></span>  
  
-   <span data-ttu-id="465af-122">如果有相同的名称、公用 ID、系统 ID 和内部子集，两个 <xref:System.Xml.Linq.XDocumentType> 节点相等。</span><span class="sxs-lookup"><span data-stu-id="465af-122">Two <xref:System.Xml.Linq.XDocumentType> nodes are equal if the have the same name, public ID, system ID, and internal subset.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="465af-123">下面的示例使用此类来比较两个节点。</span><span class="sxs-lookup"><span data-stu-id="465af-123">The following example uses this class to compare two nodes.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XElement("Child1", 1),  
    new XElement("Child2", "some content")  
);  
XElement xmlTree2 = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XElement("Child1", 1),  
    new XElement("Child2", "some content")  
);  
XNodeEqualityComparer equalityComparer = new XNodeEqualityComparer();  
Console.WriteLine(equalityComparer.Equals(xmlTree1, xmlTree2));  
xmlTree2.Add(new XElement("NewChild", "new content"));  
Console.WriteLine(equalityComparer.Equals(xmlTree1, xmlTree2));  
```  
  
 <span data-ttu-id="465af-124">此示例生成以下输出：</span><span class="sxs-lookup"><span data-stu-id="465af-124">This example produces the following output:</span></span>  
  
```  
True  
False  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="465af-125">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="465af-125">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public int GetHashCode (System.Xml.Linq.XNode obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(class System.Xml.Linq.XNode obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNodeEqualityComparer.GetHashCode(System.Xml.Linq.XNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHashCode (obj As XNode) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetHashCode(System::Xml::Linq::XNode ^ obj);" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : System.Xml.Linq.XNode -&gt; int" Usage="xNodeEqualityComparer.GetHashCode obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Xml.Linq.XNode" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="465af-126">要散列的 <see cref="T:System.Xml.Linq.XNode" />。</span><span class="sxs-lookup"><span data-stu-id="465af-126">The <see cref="T:System.Xml.Linq.XNode" /> to hash.</span></span></param>
        <summary><span data-ttu-id="465af-127">返回基于 <see cref="T:System.Xml.Linq.XNode" /> 的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="465af-127">Returns a hash code based on an <see cref="T:System.Xml.Linq.XNode" />.</span></span></summary>
        <returns><span data-ttu-id="465af-128">一个 <see cref="T:System.Int32" />，其中包含节点的基于值的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="465af-128">A <see cref="T:System.Int32" /> that contains a value-based hash code for the node.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="465af-129"><xref:System.Object.GetHashCode%2A> 的 <xref:System.Xml.Linq.XNode> 实现基于节点的引用标识。</span><span class="sxs-lookup"><span data-stu-id="465af-129">The <xref:System.Xml.Linq.XNode> implementation of  <xref:System.Object.GetHashCode%2A> is based on the referential identity of the node.</span></span> <span data-ttu-id="465af-130">此方法基于节点和所有后代的值计算深层哈希代码。</span><span class="sxs-lookup"><span data-stu-id="465af-130">This method computes a deep hash code based on the value of the node and all descendants.</span></span> <span data-ttu-id="465af-131">哈希代码反映了所有属性和所有子代节点。</span><span class="sxs-lookup"><span data-stu-id="465af-131">The hash code reflects all attributes and all descendent nodes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="465af-132">下面的示例使用此方法获取 XML 树的深层哈希代码。</span><span class="sxs-lookup"><span data-stu-id="465af-132">The following example uses this method to get a deep hash code for an XML tree.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XElement("Child1", 1),  
    new XElement("Child2", "some content")  
);  
XNodeEqualityComparer equalityComparer = new XNodeEqualityComparer();  
Console.WriteLine("HashCode: {0}", equalityComparer.GetHashCode(xmlTree).ToString("X"));  
xmlTree.Add(new XElement("NewChild", "new content"));  
Console.WriteLine("HashCode: {0}", equalityComparer.GetHashCode(xmlTree).ToString("X"));  
```  
  
 <span data-ttu-id="465af-133">此示例生成以下输出：</span><span class="sxs-lookup"><span data-stu-id="465af-133">This example produces the following output:</span></span>  
  
```  
HashCode: 958CCD0  
HashCode: AD26516B  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="465af-134">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="465af-134">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEqualityComparer.Equals">
      <MemberSignature Language="C#" Value="bool IEqualityComparer.Equals (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IEqualityComparer.Equals(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNodeEqualityComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Equals (x As Object, y As Object) As Boolean Implements IEqualityComparer.Equals" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IEqualityComparer.Equals(System::Object ^ x, System::Object ^ y) = System::Collections::IEqualityComparer::Equals;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IEqualityComparer.Equals : obj * obj -&gt; bool&#xA;override this.System.Collections.IEqualityComparer.Equals : obj * obj -&gt; bool" Usage="xNodeEqualityComparer.System.Collections.IEqualityComparer.Equals (x, y)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="465af-135">要比较的第一个 <see cref="T:System.Xml.Linq.XNode" />。</span><span class="sxs-lookup"><span data-stu-id="465af-135">The first <see cref="T:System.Xml.Linq.XNode" /> to compare.</span></span></param>
        <param name="y"><span data-ttu-id="465af-136">要比较的第二个 <see cref="T:System.Xml.Linq.XNode" />。</span><span class="sxs-lookup"><span data-stu-id="465af-136">The second <see cref="T:System.Xml.Linq.XNode" /> to compare.</span></span></param>
        <summary><span data-ttu-id="465af-137">比较两个节点的值。</span><span class="sxs-lookup"><span data-stu-id="465af-137">Compares the values of two nodes.</span></span></summary>
        <returns><span data-ttu-id="465af-138">如果节点相等，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="465af-138"><see langword="true" /> if the nodes are equal; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="465af-139">以下条件确定两个节点是否相等：</span><span class="sxs-lookup"><span data-stu-id="465af-139">The following criteria determine whether two nodes are equal:</span></span>  
  
-   <span data-ttu-id="465af-140">`null` 节点与另一个 `null` 节点相等，但不等于非`null` 节点。</span><span class="sxs-lookup"><span data-stu-id="465af-140">A `null` node is equal to another `null` node but unequal to a non-`null` node.</span></span>  
  
-   <span data-ttu-id="465af-141">不同类型的两个 <xref:System.Xml.Linq.XNode> 对象从不相等。</span><span class="sxs-lookup"><span data-stu-id="465af-141">Two <xref:System.Xml.Linq.XNode> objects of different types are never equal.</span></span>  
  
-   <span data-ttu-id="465af-142">如果两个 <xref:System.Xml.Linq.XText> 节点包含相同的文本，则它们相等。</span><span class="sxs-lookup"><span data-stu-id="465af-142">Two <xref:System.Xml.Linq.XText> nodes are equal if they contain the same text.</span></span>  
  
-   <span data-ttu-id="465af-143">如果两个 <xref:System.Xml.Linq.XElement> 节点具有相同的标记名称、具有相同值的相同属性集，并且（忽略注释和处理指令）包含两个成对相等内容节点的 equa 长度序列，则两个节点相等。</span><span class="sxs-lookup"><span data-stu-id="465af-143">Two <xref:System.Xml.Linq.XElement> nodes are equal if they have the same tag name, the same set of attributes with the same values, and (ignoring comments and processing instructions), contain two equa-length sequences of pairwise equal content nodes.</span></span>  
  
-   <span data-ttu-id="465af-144">如果两个 <xref:System.Xml.Linq.XDocument> 对象的根节点相等，则相等。</span><span class="sxs-lookup"><span data-stu-id="465af-144">Two <xref:System.Xml.Linq.XDocument> objects are equal if their root nodes are equal.</span></span>  
  
-   <span data-ttu-id="465af-145">如果两个 <xref:System.Xml.Linq.XComment> 节点包含相同的注释文本，则它们相等。</span><span class="sxs-lookup"><span data-stu-id="465af-145">Two <xref:System.Xml.Linq.XComment> nodes are equal if they contain the same comment text.</span></span>  
  
-   <span data-ttu-id="465af-146">如果两个 <xref:System.Xml.Linq.XProcessingInstruction> 节点具有相同的目标和数据，则相等。</span><span class="sxs-lookup"><span data-stu-id="465af-146">Two <xref:System.Xml.Linq.XProcessingInstruction> nodes are equal if they have the same target and data.</span></span>  
  
-   <span data-ttu-id="465af-147">如果有相同的名称、公用 ID、系统 ID 和内部子集，两个 <xref:System.Xml.Linq.XDocumentType> 节点相等。</span><span class="sxs-lookup"><span data-stu-id="465af-147">Two <xref:System.Xml.Linq.XDocumentType> nodes are equal if the have the same name, public ID, system ID, and internal subset.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEqualityComparer.GetHashCode">
      <MemberSignature Language="C#" Value="int IEqualityComparer.GetHashCode (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IEqualityComparer.GetHashCode(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNodeEqualityComparer.System#Collections#IEqualityComparer#GetHashCode(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function GetHashCode (obj As Object) As Integer Implements IEqualityComparer.GetHashCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IEqualityComparer.GetHashCode(System::Object ^ obj) = System::Collections::IEqualityComparer::GetHashCode;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IEqualityComparer.GetHashCode : obj -&gt; int&#xA;override this.System.Collections.IEqualityComparer.GetHashCode : obj -&gt; int" Usage="xNodeEqualityComparer.System.Collections.IEqualityComparer.GetHashCode obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.GetHashCode(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="465af-148">要散列的节点。</span><span class="sxs-lookup"><span data-stu-id="465af-148">The node to hash.</span></span></param>
        <summary><span data-ttu-id="465af-149">返回基于节点值的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="465af-149">Returns a hash code based on the value of a node.</span></span></summary>
        <returns><span data-ttu-id="465af-150">一个 <see cref="T:System.Int32" />，其中包含节点的基于值的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="465af-150">A <see cref="T:System.Int32" /> that contains a value-based hash code for the node.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="465af-151"><xref:System.Object.GetHashCode%2A> 的 <xref:System.Xml.Linq.XNode> 实现基于节点的引用标识。</span><span class="sxs-lookup"><span data-stu-id="465af-151">The <xref:System.Xml.Linq.XNode> implementation of <xref:System.Object.GetHashCode%2A> is based on the referential identity of the node.</span></span> <span data-ttu-id="465af-152">此方法基于节点的值、其属性及其子代计算深层哈希代码。</span><span class="sxs-lookup"><span data-stu-id="465af-152">This method computes a deep hash code based on the value of the node, its attributes, and its descendants.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
