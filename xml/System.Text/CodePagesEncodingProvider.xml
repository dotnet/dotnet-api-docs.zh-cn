<Type Name="CodePagesEncodingProvider" FullName="System.Text.CodePagesEncodingProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0a882baa946a7452fc1f291ed1ab02234ed37d57" /><Meta Name="ms.sourcegitcommit" Value="4adcc144a575f0b27871c22eeb7c5db11c37f05d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/14/2020" /><Meta Name="ms.locfileid" Value="90066678" /></Metadata><TypeSignature Language="C#" Value="public sealed class CodePagesEncodingProvider : System.Text.EncodingProvider" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;net-5.0;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CodePagesEncodingProvider extends System.Text.EncodingProvider" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;net-5.0;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="DocId" Value="T:System.Text.CodePagesEncodingProvider" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CodePagesEncodingProvider&#xA;Inherits EncodingProvider" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;net-5.0;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodePagesEncodingProvider sealed : System::Text::EncodingProvider" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;net-5.0;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="F#" Value="type CodePagesEncodingProvider = class&#xA;    inherit EncodingProvider" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;net-5.0;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="C#" Value="public sealed class CodePagesEncodingProvider" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CodePagesEncodingProvider extends System.Object" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CodePagesEncodingProvider" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodePagesEncodingProvider sealed" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1" />
  <TypeSignature Language="F#" Value="type CodePagesEncodingProvider = class" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding.CodePages</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>4.1.3.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.EncodingProvider</BaseTypeName>
    <BaseTypeName FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1">System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1">
      <AttributeName Language="C#">[System.Security.SecurityCritical]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Security.SecurityCritical&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>为只在桌面 .NET Framework 中可用的代码页提供对编码提供程序的访问权限。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

 Windows 桌面的 .NET Framework 支持大量的 Unicode 和代码页编码。 另一方面，.NET Core 仅支持以下编码：

-   ASCII (代码页 20127) ，由 <xref:System.Text.Encoding.ASCII%2A?displayProperty=nameWithType> 属性返回。

-   ISO-8859-1 (代码页 28591) 。

-   UTF-7 (代码页 65000) ，由 <xref:System.Text.Encoding.UTF7%2A?displayProperty=nameWithType> 属性返回。

-   UTF-8 (代码页 65001) ，由 <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> 属性返回。

-   UTF-16 和 UTF-16LE (代码页 1200) ，由 <xref:System.Text.Encoding.Unicode%2A?displayProperty=nameWithType> 属性返回。

-   UTF-16BE (代码页 1201) ，它是通过调用 <xref:System.Text.UnicodeEncoding.%23ctor%2A?displayProperty=nameWithType> <xref:System.Text.UnicodeEncoding.%23ctor%2A?displayProperty=nameWithType> 值为的或构造函数进行实例化的 `bigEndian` `true` 。

-   32和 32LE (代码页 12000) ，由 <xref:System.Text.Encoding.UTF32%2A?displayProperty=nameWithType> 属性返回。

-   32BE (代码页 12001) ，它是通过调用 <xref:System.Text.UTF32Encoding> 具有参数的构造函数 `bigEndian` 并 `true` 在方法调用中提供的值来进行实例化的。

 除代码页20127之外，不支持代码页编码。

 <xref:System.Text.CodePagesEncodingProvider>类扩展 <xref:System.Text.EncodingProvider> ，使这些代码页可用于 .net Core。 若要使用这些附加代码页，请执行以下操作：

-   向项目添加对 System.Text.Encoding.CodePages.dll 程序集的引用。

-   <xref:System.Text.CodePagesEncodingProvider>从静态属性中检索对象 <xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=nameWithType> 。

-   将 <xref:System.Text.CodePagesEncodingProvider> 对象传递给 <xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=nameWithType> 方法。

 <xref:System.Text.EncodingProvider>注册对象之后，通过调用的重载可以使用它支持的编码 <xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType> ; 不应调用 <xref:System.Text.EncodingProvider.GetEncoding%2A?displayProperty=nameWithType> 重载。

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="GetEncoding">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.CodePages</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

.NET Framework 支持大量字符编码和代码页。 可以通过调用方法获取完整的编码列表 <xref:System.Text.Encoding.GetEncodings%2A?displayProperty=nameWithType> ，.NET Framework 中提供了该方法。 另一方面，.NET Core 在默认情况下仅支持以下编码：

-   ASCII (代码页 20127) ，由 <xref:System.Text.Encoding.ASCII%2A?displayProperty=nameWithType> 属性返回。

-   ISO-8859-1 (代码页 28591) 。

-   UTF-7 (代码页 65000) ，由 <xref:System.Text.Encoding.UTF7%2A?displayProperty=nameWithType> 属性返回。

-   UTF-8 (代码页 65001) ，由 <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> 属性返回。

-   UTF-16 和 UTF-16LE (代码页 1200) ，由 <xref:System.Text.Encoding.Unicode%2A?displayProperty=nameWithType> 属性返回。

-   UTF-16BE (代码页 1201) ，它是通过调用 <xref:System.Text.UnicodeEncoding.%23ctor%2A?displayProperty=nameWithType> <xref:System.Text.UnicodeEncoding.%23ctor%2A?displayProperty=nameWithType> 值为的或构造函数进行实例化的 `bigEndian` `true` 。

-   32和 32LE (代码页 12000) ，由 <xref:System.Text.Encoding.UTF32%2A?displayProperty=nameWithType> 属性返回。

-   32BE (代码页 12001) ，它是通过调用 <xref:System.Text.UTF32Encoding> 具有参数的构造函数 `bigEndian` 并 `true` 在方法调用中提供的值来进行实例化的。

 若要检索 .NET Framework 中存在但在 .NET Core 中不存在的编码，请执行以下操作：

-   向项目添加对 *System.Text.Encoding.CodePages.dll* 程序集的引用。

-   获取 <xref:System.Text.EncodingProvider> 静态属性中的对象 <xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=nameWithType> 。

-   将 <xref:System.Text.EncodingProvider> 对象传递给 <xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=nameWithType> 方法，以使对象提供的编码 <xref:System.Text.EncodingProvider> 可供公共语言运行时使用。

-   调用 <xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType> 重载以检索编码。 <xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType>方法将调用相应的 <xref:System.Text.EncodingProvider.GetEncoding%2A?displayProperty=nameWithType> 方法来确定它是否可以提供请求的编码。

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public override System.Text.Encoding GetEncoding (int codepage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Encoding GetEncoding(int32 codepage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.CodePagesEncodingProvider.GetEncoding(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEncoding (codepage As Integer) As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Encoding ^ GetEncoding(int codepage);" />
      <MemberSignature Language="F#" Value="override this.GetEncoding : int -&gt; System.Text.Encoding" Usage="codePagesEncodingProvider.GetEncoding codepage" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.CodePages</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codepage" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;net-5.0;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="codepage">编码提供程序可能支持的首选编码的代码页标识符。</param>
        <summary>返回与指定代码页标识符关联的编码。</summary>
        <returns>与指定代码页标识符关联的编码；如果提供程序不支持请求的代码页编码，则为 <see langword="null" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public override System.Text.Encoding GetEncoding (string name);" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Encoding GetEncoding(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.CodePagesEncodingProvider.GetEncoding(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEncoding (name As String) As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Encoding ^ GetEncoding(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.GetEncoding : string -&gt; System.Text.Encoding" Usage="codePagesEncodingProvider.GetEncoding name" />
      <MemberSignature Language="C#" Value="public override System.Text.Encoding? GetEncoding (string name);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.CodePages</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;net-5.0;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="name">编码提供程序可能支持的首选编码的代码页名称。</param>
        <summary>返回与指定代码页名称关联的编码。</summary>
        <returns>与指定代码页关联的编码；如果提供程序不支持请求的编码，则为 <see langword="null" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEncodings">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IEnumerable&lt;System.Text.EncodingInfo&gt; GetEncodings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Text.EncodingInfo&gt; GetEncodings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.CodePagesEncodingProvider.GetEncodings" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEncodings () As IEnumerable(Of EncodingInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Collections::Generic::IEnumerable&lt;System::Text::EncodingInfo ^&gt; ^ GetEncodings();" />
      <MemberSignature Language="F#" Value="override this.GetEncodings : unit -&gt; seq&lt;System.Text.EncodingInfo&gt;" Usage="codePagesEncodingProvider.GetEncodings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.CodePages</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Text.EncodingInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回一个数组，其中包含 <see cref="T:System.Text.CodePagesEncodingProvider" /> 支持的所有编码。</summary>
        <returns>一个数组，其中包含所有受支持的编码。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Instance">
      <MemberSignature Language="C#" Value="public static System.Text.EncodingProvider Instance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.EncodingProvider Instance" />
      <MemberSignature Language="DocId" Value="P:System.Text.CodePagesEncodingProvider.Instance" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Instance As EncodingProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::EncodingProvider ^ Instance { System::Text::EncodingProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Instance : System.Text.EncodingProvider" Usage="System.Text.CodePagesEncodingProvider.Instance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.CodePages</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.EncodingProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取桌面 .NET Framework 支持但当前 .NET Framework 平台不支持的代码页的编码提供程序。</summary>
        <value>允许访问当前 .NET Framework 平台上不支持的编码的编码提供程序。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 .NET Framework 支持大量字符编码和代码页。 可以通过调用方法获取完整的编码列表 <xref:System.Text.Encoding.GetEncodings%2A?displayProperty=nameWithType> ，.NET Framework 中提供了该方法。 另一方面，.NET Core 在默认情况下仅支持以下编码：

-   ASCII (代码页 20127) ，由 <xref:System.Text.Encoding.ASCII%2A?displayProperty=nameWithType> 属性返回。

-   ISO-8859-1 (代码页 28591) 。

-   UTF-7 (代码页 65000) ，由 <xref:System.Text.Encoding.UTF7%2A?displayProperty=nameWithType> 属性返回。

-   UTF-8 (代码页 65001) ，由 <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> 属性返回。

-   UTF-16 和 UTF-16LE (代码页 1200) ，由 <xref:System.Text.Encoding.Unicode%2A?displayProperty=nameWithType> 属性返回。

-   UTF-16BE (代码页 1201) ，它是通过调用 <xref:System.Text.UnicodeEncoding.%23ctor%2A?displayProperty=nameWithType> <xref:System.Text.UnicodeEncoding.%23ctor%2A?displayProperty=nameWithType> 值为的或构造函数进行实例化的 `bigEndian` `true` 。

-   32和 32LE (代码页 12000) ，由 <xref:System.Text.Encoding.UTF32%2A?displayProperty=nameWithType> 属性返回。

-   32BE (代码页 12001) ，它是通过调用 <xref:System.Text.UTF32Encoding> 具有参数的构造函数 `bigEndian` 并 `true` 在方法调用中提供的值来进行实例化的。

 若要检索在 Windows 桌面的 .NET Framework 中存在但在 .NET Core 中不存在的编码，请执行以下操作：

-   向项目添加对 System.Text.Encoding.CodePages.dll 程序集的引用。

-   获取 <xref:System.Text.EncodingProvider> 静态属性中的对象 <xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=nameWithType> 。

-   将 <xref:System.Text.EncodingProvider> 对象传递给 <xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=nameWithType> 方法，以使对象提供的编码 <xref:System.Text.EncodingProvider> 可供公共语言运行时使用。

-   调用 <xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType> 重载以检索编码。 <xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType>方法将调用相应的 <xref:System.Text.EncodingProvider.GetEncoding%2A?displayProperty=nameWithType> 方法来确定它是否可以提供请求的编码。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
