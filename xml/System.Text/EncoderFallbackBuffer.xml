<Type Name="EncoderFallbackBuffer" FullName="System.Text.EncoderFallbackBuffer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="721c46ef200051b01d19fc6473b6ea46fb160b58" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83530276" /></Metadata><TypeSignature Language="C#" Value="public abstract class EncoderFallbackBuffer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit EncoderFallbackBuffer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.EncoderFallbackBuffer" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class EncoderFallbackBuffer" />
  <TypeSignature Language="C++ CLI" Value="public ref class EncoderFallbackBuffer abstract" />
  <TypeSignature Language="F#" Value="type EncoderFallbackBuffer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Text.Encoding" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Text.Encoding" FromVersion="4.1.0.0" To="System.Runtime" ToVersion="4.2.0.0" FrameworkAlternate="netcore-2.0" />
    <TypeForwarding From="System.Text.Encoding" FromVersion="4.1.1.0" To="System.Runtime" ToVersion="4.2.1.0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
    <TypeForwarding From="System.Text.Encoding" FromVersion="4.1.2.0" To="System.Runtime" ToVersion="4.2.2.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="ef08a-101">提供一个缓冲区，该缓冲区允许回退处理程序在编码器无法对输入字符进行编码时将替换字符串返回到该编码器。</span><span class="sxs-lookup"><span data-stu-id="ef08a-101">Provides a buffer that allows a fallback handler to return an alternate string to an encoder when it cannot encode an input character.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef08a-102">编码定义 Unicode 字符和编码字节序列之间的映射。</span><span class="sxs-lookup"><span data-stu-id="ef08a-102">An encoding defines a mapping between a Unicode character and an encoded sequence of bytes.</span></span> <span data-ttu-id="ef08a-103">如果没有为特定字符定义映射，则将输入字符转换为输出字节序列的编码操作将失败。</span><span class="sxs-lookup"><span data-stu-id="ef08a-103">An encoding operation, which converts an input character to an output byte sequence, fails if no mapping is defined for a particular character.</span></span>  
  
 <span data-ttu-id="ef08a-104">如果无法执行转换，.NET Framework 将提供一个称为 "回退" 的失败处理机制。</span><span class="sxs-lookup"><span data-stu-id="ef08a-104">The .NET Framework provides a failure handling mechanism, called a fallback, if a conversion cannot be performed.</span></span> <span data-ttu-id="ef08a-105">所有编码器回退处理程序都必须实现以下各项：</span><span class="sxs-lookup"><span data-stu-id="ef08a-105">All encoder fallback handlers must implement the following:</span></span>  
  
-   <span data-ttu-id="ef08a-106">编码器回退，由派生自 <xref:System.Text.EncoderFallback> 类的类表示。</span><span class="sxs-lookup"><span data-stu-id="ef08a-106">An encoder fallback, which is represented by a class derived from the <xref:System.Text.EncoderFallback> class.</span></span>  
  
-   <span data-ttu-id="ef08a-107">编码器回退缓冲区，由派生自 <xref:System.Text.EncoderFallbackBuffer> 类的类型表示，该类型可将字符串返回到转换运算。</span><span class="sxs-lookup"><span data-stu-id="ef08a-107">An encoder fallback buffer, which is represented by a type derived from the <xref:System.Text.EncoderFallbackBuffer> class that can return a string to the conversion operation.</span></span>  
  
 <span data-ttu-id="ef08a-108">回退可以使用三种策略来处理转换失败：</span><span class="sxs-lookup"><span data-stu-id="ef08a-108">Fallbacks can use three strategies to handle conversion failures:</span></span>  
  
-   <span data-ttu-id="ef08a-109">最佳映射。</span><span class="sxs-lookup"><span data-stu-id="ef08a-109">Best-fit mapping.</span></span> <span data-ttu-id="ef08a-110">编码器回退缓冲区可以返回一个字符串，该字符串表示对输入字符的接近的近似值。</span><span class="sxs-lookup"><span data-stu-id="ef08a-110">The encoder fallback buffer can return a string that represents a close approximation to the input character.</span></span> <span data-ttu-id="ef08a-111">.NET Framework 未提供公共最佳 <xref:System.Text.EncoderFallbackBuffer> 实现。</span><span class="sxs-lookup"><span data-stu-id="ef08a-111">The .NET Framework does not provide a public best-fit <xref:System.Text.EncoderFallbackBuffer> implementation.</span></span>  
  
-   <span data-ttu-id="ef08a-112">替代功能的 Server Profiler。</span><span class="sxs-lookup"><span data-stu-id="ef08a-112">Replacement.</span></span> <span data-ttu-id="ef08a-113">编码器回退缓冲区可以返回一个字符串（如问号（"？"）），指示无法对字符进行编码。</span><span class="sxs-lookup"><span data-stu-id="ef08a-113">The encoder fallback buffer can return a string, such as a question mark ("?"), that indicates that a character could not be encoded.</span></span> <span data-ttu-id="ef08a-114">在 .NET Framework 中，<xref:System.Text.EncoderReplacementFallback> 和 <xref:System.Text.EncoderReplacementFallbackBuffer> 类提供公共替换回退缓冲区实现。</span><span class="sxs-lookup"><span data-stu-id="ef08a-114">In the .NET Framework, the <xref:System.Text.EncoderReplacementFallback> and <xref:System.Text.EncoderReplacementFallbackBuffer> classes provide a public replacement fallback buffer implementation.</span></span> <span data-ttu-id="ef08a-115"><xref:System.Text.EncoderReplacementFallback> 类的构造函数使你能够定义替换字符串。</span><span class="sxs-lookup"><span data-stu-id="ef08a-115">The constructor of the <xref:System.Text.EncoderReplacementFallback> class enables you to define the replacement string.</span></span>  
  
-   <span data-ttu-id="ef08a-116">异常。</span><span class="sxs-lookup"><span data-stu-id="ef08a-116">Exception.</span></span> <span data-ttu-id="ef08a-117"><xref:System.Text.EncoderFallbackBuffer> 实现引发了异常，该异常指示无法对字符进行编码，并终止编码操作。</span><span class="sxs-lookup"><span data-stu-id="ef08a-117">The <xref:System.Text.EncoderFallbackBuffer> implementation throws an exception, which indicates that a character cannot be encoded, and terminates the encoding operation.</span></span> <span data-ttu-id="ef08a-118">在这种情况下，回退处理程序必须提供 <xref:System.Text.EncoderFallbackBuffer> 实现，尽管它不会将字符串返回给编码器。</span><span class="sxs-lookup"><span data-stu-id="ef08a-118">In this case, the fallback handler must provide an <xref:System.Text.EncoderFallbackBuffer> implementation, although it does not return a string to the encoder.</span></span> <span data-ttu-id="ef08a-119">在 .NET Framework 中，<xref:System.Text.EncoderExceptionFallback> 和 <xref:System.Text.EncoderExceptionFallbackBuffer> 类提供公共异常回退实现，当无法对字符进行编码时，将引发 <xref:System.Text.EncoderFallbackException>。</span><span class="sxs-lookup"><span data-stu-id="ef08a-119">In the .NET Framework, the <xref:System.Text.EncoderExceptionFallback> and <xref:System.Text.EncoderExceptionFallbackBuffer> classes provide a public exception fallback implementation that throws an <xref:System.Text.EncoderFallbackException> when a character cannot be encoded.</span></span>  
  
 <span data-ttu-id="ef08a-120"><xref:System.Text.EncoderFallbackBuffer> 实现中的缓冲区表示返回给编码器以响应编码器回退的整个字符串。</span><span class="sxs-lookup"><span data-stu-id="ef08a-120">The buffer in an <xref:System.Text.EncoderFallbackBuffer> implementation represents the entire string to be returned to the encoder in response to an encoder fallback.</span></span> <span data-ttu-id="ef08a-121">通常，实现还包括状态信息，如要返回到编码器的下一个字符的索引以及要返回的剩余字符数。</span><span class="sxs-lookup"><span data-stu-id="ef08a-121">Generally, implementations also include state information, such as the index of the next character to return to the encoder and the number of remaining characters to be returned.</span></span> <span data-ttu-id="ef08a-122">由于 <xref:System.Text.EncoderFallbackBuffer> 是抽象类，因此它要求派生类至少实现以下成员：</span><span class="sxs-lookup"><span data-stu-id="ef08a-122">Because <xref:System.Text.EncoderFallbackBuffer> is an abstract class, it requires derived classes to implement the following members at a minimum:</span></span>  
  
-   <span data-ttu-id="ef08a-123">重载的 <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> 方法，当编码器无法对字符进行编码时，它会调用它。</span><span class="sxs-lookup"><span data-stu-id="ef08a-123">The overloaded <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> method, which is called by the encoder when it cannot encode a character.</span></span> <span data-ttu-id="ef08a-124">编码器将两部分信息传递到回退缓冲区实现：不能进行编码的字符或代理项对以及输入中字符的索引。</span><span class="sxs-lookup"><span data-stu-id="ef08a-124">The encoder passes two pieces of information to the fallback buffer implementation: the character or surrogate pair that could not be encoded and the index of the character in the input.</span></span> <span data-ttu-id="ef08a-125">在编码器回退异常处理程序中，此方法会引发异常。</span><span class="sxs-lookup"><span data-stu-id="ef08a-125">In an encoder fallback exception handler, the exception is thrown in this method.</span></span> <span data-ttu-id="ef08a-126">否则，如果提供回退，则方法将返回 `true`; 否则返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="ef08a-126">Otherwise, the method returns `true` if it provides a fallback, or `false` if it does not.</span></span>  
  
-   <span data-ttu-id="ef08a-127">如果 <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> 方法返回 `true`，编码器将重复调用 <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="ef08a-127">The <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> method, which is called repeatedly by the encoder if the <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> method returns `true`.</span></span> <span data-ttu-id="ef08a-128">在后续调用中，处理程序应返回其缓冲区中的每个字符。</span><span class="sxs-lookup"><span data-stu-id="ef08a-128">In successive calls, the handler should return each character in its buffer.</span></span> <span data-ttu-id="ef08a-129">返回所有字符后，应返回 U + 0000。</span><span class="sxs-lookup"><span data-stu-id="ef08a-129">When it has returned all characters, it should return U+0000.</span></span> <span data-ttu-id="ef08a-130">异常处理程序始终返回 U + 0000。</span><span class="sxs-lookup"><span data-stu-id="ef08a-130">An exception handler always returns U+0000.</span></span>  
  
-   <span data-ttu-id="ef08a-131"><xref:System.Text.EncoderFallbackBuffer.MovePrevious%2A> 方法，该方法尝试将指针移动到缓冲区中的上一个位置，并指示移动是否成功。</span><span class="sxs-lookup"><span data-stu-id="ef08a-131">The <xref:System.Text.EncoderFallbackBuffer.MovePrevious%2A> method, which tries to move the pointer to the previous position in the buffer and indicates whether the move was successful.</span></span> <span data-ttu-id="ef08a-132">异常处理程序始终返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="ef08a-132">An exception handler always returns `false`.</span></span>  
  
-   <span data-ttu-id="ef08a-133"><xref:System.Text.EncoderFallbackBuffer.Remaining%2A> 属性，指示要返回到编码器的剩余字符数。</span><span class="sxs-lookup"><span data-stu-id="ef08a-133">The <xref:System.Text.EncoderFallbackBuffer.Remaining%2A> property, which indicates the number of remaining characters to be returned to the encoder.</span></span> <span data-ttu-id="ef08a-134">异常回退处理程序始终返回零。</span><span class="sxs-lookup"><span data-stu-id="ef08a-134">An exception fallback handler always returns zero.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.EncoderFallback" />
    <related type="Article" href="~/docs/standard/base-types/character-encoding.md"><span data-ttu-id="ef08a-135">.NET Framework 中的字符编码</span><span class="sxs-lookup"><span data-stu-id="ef08a-135">Character Encoding in the .NET Framework</span></span></related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Cyrillic-to-Roman-f7e88b29"><span data-ttu-id="ef08a-136">示例：西里尔文到罗马音译实用工具</span><span class="sxs-lookup"><span data-stu-id="ef08a-136">Sample: Cyrillic to Roman Transliteration Utility</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected EncoderFallbackBuffer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; EncoderFallbackBuffer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ef08a-137">初始化 <see cref="T:System.Text.EncoderFallbackBuffer" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="ef08a-137">Initializes a new instance of the <see cref="T:System.Text.EncoderFallbackBuffer" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Fallback">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ef08a-138">指示在无法对原始输入进行编码时是否有可用的替代字符串，或是否应忽略原始输入。</span><span class="sxs-lookup"><span data-stu-id="ef08a-138">Indicates whether a substitute string is available when the original input cannot be encoded, or whether the original input should be ignored.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fallback">
      <MemberSignature Language="C#" Value="public abstract bool Fallback (char charUnknown, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Fallback(char charUnknown, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Fallback (charUnknown As Char, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Fallback(char charUnknown, int index);" />
      <MemberSignature Language="F#" Value="abstract member Fallback : char * int -&gt; bool" Usage="encoderFallbackBuffer.Fallback (charUnknown, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charUnknown" Type="System.Char" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charUnknown"><span data-ttu-id="ef08a-139">一个输入字符。</span><span class="sxs-lookup"><span data-stu-id="ef08a-139">An input character.</span></span></param>
        <param name="index"><span data-ttu-id="ef08a-140">该字符在输入缓冲区中的索引位置。</span><span class="sxs-lookup"><span data-stu-id="ef08a-140">The index position of the character in the input buffer.</span></span></param>
        <summary><span data-ttu-id="ef08a-141">在派生类中重写后，此方法对回退缓冲区进行准备，以处理指定的输入字符。</span><span class="sxs-lookup"><span data-stu-id="ef08a-141">When overridden in a derived class, prepares the fallback buffer to handle the specified input character.</span></span></summary>
        <returns><span data-ttu-id="ef08a-142">如果回退缓冲区能处理 <paramref name="charUnknown" /> 则为 <see langword="true" />；如果回退缓冲区忽略 <paramref name="charUnknown" />，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ef08a-142"><see langword="true" /> if the fallback buffer can process <paramref name="charUnknown" />; <see langword="false" /> if the fallback buffer ignores <paramref name="charUnknown" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef08a-143">如果 <xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType> 和 <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> 方法遇到无法编码的未知输入字符，则会调用 <xref:System.Text.DecoderFallbackBuffer.Fallback%28System.Byte%5B%5D%2CSystem.Int32%29>。</span><span class="sxs-lookup"><span data-stu-id="ef08a-143">The <xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType> and <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> methods call <xref:System.Text.DecoderFallbackBuffer.Fallback%28System.Byte%5B%5D%2CSystem.Int32%29> if they encounter an unknown input character that cannot be encoded.</span></span> <span data-ttu-id="ef08a-144">`true` 的返回值指示回退缓冲区可以处理输入字符，这将导致调用方法调用 <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> 方法来获取回退缓冲区的每个字符。</span><span class="sxs-lookup"><span data-stu-id="ef08a-144">A return value of `true` indicates that the fallback buffer can process the input character, which causes the calling method to call the <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> method to obtain each character of the fallback buffer.</span></span> <span data-ttu-id="ef08a-145">由于它不处理单个字符，因此异常回退处理程序中的 <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> 方法会引发异常。</span><span class="sxs-lookup"><span data-stu-id="ef08a-145">Because it does not process individual characters, the <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> method in an exception fallback handler throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fallback">
      <MemberSignature Language="C#" Value="public abstract bool Fallback (char charUnknownHigh, char charUnknownLow, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Fallback(char charUnknownHigh, char charUnknownLow, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Fallback (charUnknownHigh As Char, charUnknownLow As Char, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Fallback(char charUnknownHigh, char charUnknownLow, int index);" />
      <MemberSignature Language="F#" Value="abstract member Fallback : char * char * int -&gt; bool" Usage="encoderFallbackBuffer.Fallback (charUnknownHigh, charUnknownLow, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charUnknownHigh" Type="System.Char" />
        <Parameter Name="charUnknownLow" Type="System.Char" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charUnknownHigh"><span data-ttu-id="ef08a-146">输入对的高代理项。</span><span class="sxs-lookup"><span data-stu-id="ef08a-146">The high surrogate of the input pair.</span></span></param>
        <param name="charUnknownLow"><span data-ttu-id="ef08a-147">输入对的低代理项。</span><span class="sxs-lookup"><span data-stu-id="ef08a-147">The low surrogate of the input pair.</span></span></param>
        <param name="index"><span data-ttu-id="ef08a-148">该代理项对在输入缓冲区中的索引位置。</span><span class="sxs-lookup"><span data-stu-id="ef08a-148">The index position of the surrogate pair in the input buffer.</span></span></param>
        <summary><span data-ttu-id="ef08a-149">在派生类中重写后，此方法对回退缓冲区进行准备，以处理指定的代理项对。</span><span class="sxs-lookup"><span data-stu-id="ef08a-149">When overridden in a derived class, prepares the fallback buffer to handle the specified surrogate pair.</span></span></summary>
        <returns><span data-ttu-id="ef08a-150">如果回退缓冲区可以处理 <paramref name="charUnknownHigh" /> 和 <paramref name="charUnknownLow" />，则为 <see langword="true" />；如果回退缓冲区忽略代理项对，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ef08a-150"><see langword="true" /> if the fallback buffer can process <paramref name="charUnknownHigh" /> and <paramref name="charUnknownLow" />; <see langword="false" /> if the fallback buffer ignores the surrogate pair.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef08a-151">如果 <xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType> 和 <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> 方法在输入中遇到代理项对，则调用 <xref:System.Text.EncoderFallbackBuffer.Fallback%28System.Char%2CSystem.Char%2CSystem.Int32%29>。</span><span class="sxs-lookup"><span data-stu-id="ef08a-151">The <xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType> and <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> methods call <xref:System.Text.EncoderFallbackBuffer.Fallback%28System.Char%2CSystem.Char%2CSystem.Int32%29> if they encounter a surrogate pair in their input.</span></span> <span data-ttu-id="ef08a-152">`true` 的返回值指示回退缓冲区可以处理代理项对，这将导致调用方法调用 <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> 方法来获取回退缓冲区的每个字符。</span><span class="sxs-lookup"><span data-stu-id="ef08a-152">A return value of `true` indicates that the fallback buffer can process the surrogate pair, which causes the calling method to call the <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> method to obtain each character of the fallback buffer.</span></span>  <span data-ttu-id="ef08a-153">由于它不处理单个字符，因此异常回退处理程序中的 <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> 方法会引发异常。</span><span class="sxs-lookup"><span data-stu-id="ef08a-153">Because it does not process individual characters, the <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> method in an exception fallback handler throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNextChar">
      <MemberSignature Language="C#" Value="public abstract char GetNextChar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance char GetNextChar() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.GetNextChar" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetNextChar () As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract char GetNextChar();" />
      <MemberSignature Language="F#" Value="abstract member GetNextChar : unit -&gt; char" Usage="encoderFallbackBuffer.GetNextChar " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ef08a-154">在派生类中重写后，此方法检索回退缓冲区中的下一个字符。</span><span class="sxs-lookup"><span data-stu-id="ef08a-154">When overridden in a derived class, retrieves the next character in the fallback buffer.</span></span></summary>
        <returns><span data-ttu-id="ef08a-155">回退缓冲区中的下一个字符。</span><span class="sxs-lookup"><span data-stu-id="ef08a-155">The next character in the fallback buffer.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef08a-156">如果操作在输入中遇到未知字符或代理项对，则编码操作会调用 <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="ef08a-156">An encoding operation calls the <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> method if the operation encounters an unknown character or surrogate pair in the input.</span></span> <span data-ttu-id="ef08a-157">例如，在更换回退情况下，如果 <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> 方法返回 `true`，则存在可进行编码而不是未知输入的替换字符串。</span><span class="sxs-lookup"><span data-stu-id="ef08a-157">For example, in the case of a replacement fallback, if the <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> method returns `true`, a substitute string exists that can be encoded instead of the unknown input.</span></span> <span data-ttu-id="ef08a-158">编码操作重复调用 <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> 方法，并一次获取一个字符的替换字符串。</span><span class="sxs-lookup"><span data-stu-id="ef08a-158">The encoding operation calls the <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> method repeatedly and obtains the substitute string one character at a time.</span></span> <span data-ttu-id="ef08a-159">回退缓冲区中的所有字符都返回到编码器后，<xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> 方法应返回 U + 0000。</span><span class="sxs-lookup"><span data-stu-id="ef08a-159">When all characters in the fallback buffer have been returned to the encoder, the <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> method should return U+0000.</span></span>  
  
 <span data-ttu-id="ef08a-160">对于异常回退处理程序，<xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> 方法应返回 U + 0000。</span><span class="sxs-lookup"><span data-stu-id="ef08a-160">For an exception fallback handler, the <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> method should return U+0000.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MovePrevious">
      <MemberSignature Language="C#" Value="public abstract bool MovePrevious ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MovePrevious() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.MovePrevious" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function MovePrevious () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool MovePrevious();" />
      <MemberSignature Language="F#" Value="abstract member MovePrevious : unit -&gt; bool" Usage="encoderFallbackBuffer.MovePrevious " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ef08a-161">在派生类中重写后，此方法将使对 <see cref="M:System.Text.EncoderFallbackBuffer.GetNextChar" /> 方法的下一次调用访问当前字符位置之前的数据缓冲区字符位置。</span><span class="sxs-lookup"><span data-stu-id="ef08a-161">When overridden in a derived class, causes the next call to the <see cref="M:System.Text.EncoderFallbackBuffer.GetNextChar" /> method to access the data buffer character position that is prior to the current character position.</span></span></summary>
        <returns><span data-ttu-id="ef08a-162">如果 <see cref="M:System.Text.EncoderFallbackBuffer.MovePrevious" /> 操作成功，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ef08a-162"><see langword="true" /> if the <see cref="M:System.Text.EncoderFallbackBuffer.MovePrevious" /> operation was successful; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef08a-163">异常回退处理程序应返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="ef08a-163">An exception fallback handler should return `false`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remaining">
      <MemberSignature Language="C#" Value="public abstract int Remaining { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Remaining" />
      <MemberSignature Language="DocId" Value="P:System.Text.EncoderFallbackBuffer.Remaining" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Remaining As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property int Remaining { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Remaining : int" Usage="System.Text.EncoderFallbackBuffer.Remaining" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ef08a-164">在派生类中重写后，此属性获取当前 <see cref="T:System.Text.EncoderFallbackBuffer" /> 对象中要处理的剩余字符数。</span><span class="sxs-lookup"><span data-stu-id="ef08a-164">When overridden in a derived class, gets the number of characters in the current <see cref="T:System.Text.EncoderFallbackBuffer" /> object that remain to be processed.</span></span></summary>
        <value><span data-ttu-id="ef08a-165">尚未处理的当前回退缓冲区中的字符数。</span><span class="sxs-lookup"><span data-stu-id="ef08a-165">The number of characters in the current fallback buffer that have not yet been processed.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef08a-166">如果 <xref:System.Text.EncoderFallbackBuffer.Remaining%2A> 为非零值，则 <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> 方法返回 `true`。</span><span class="sxs-lookup"><span data-stu-id="ef08a-166">The <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> method returns `true` if <xref:System.Text.EncoderFallbackBuffer.Remaining%2A> is a nonzero value.</span></span>  
  
 <span data-ttu-id="ef08a-167">对于异常回退处理程序，<xref:System.Text.DecoderFallbackBuffer.Remaining%2A> 方法应返回零。</span><span class="sxs-lookup"><span data-stu-id="ef08a-167">For an exception fallback handler, the <xref:System.Text.DecoderFallbackBuffer.Remaining%2A> method should return zero.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public virtual void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="encoderFallbackBuffer.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ef08a-168">初始化所有与此回退缓冲区相关的数据和状态信息。</span><span class="sxs-lookup"><span data-stu-id="ef08a-168">Initializes all data and state information pertaining to this fallback buffer.</span></span></summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="ef08a-169">调用 <see cref="M:System.Text.EncoderFallbackBuffer.Reset" /> 方法后，<see cref="P:System.Text.EncoderFallbackBuffer.Remaining" /> 属性应返回0，<see cref="M:System.Text.EncoderFallbackBuffer.GetNextChar" /> 方法应返回 U + 0000，<see cref="M:System.Text.EncoderFallbackBuffer.MovePrevious" /> 方法应返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ef08a-169">After calling the <see cref="M:System.Text.EncoderFallbackBuffer.Reset" /> method, the <see cref="P:System.Text.EncoderFallbackBuffer.Remaining" /> property should return 0, the <see cref="M:System.Text.EncoderFallbackBuffer.GetNextChar" /> method should return U+0000, and the <see cref="M:System.Text.EncoderFallbackBuffer.MovePrevious" /> method should return <see langword="false" />.</span></span></para></block>
      </Docs>
    </Member>
  </Members>
</Type>
