<Type Name="UTF7Encoding" FullName="System.Text.UTF7Encoding">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e556de96a1210e7bea7582257f4ad19ba3a349f8" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86624245" /></Metadata><TypeSignature Language="C#" Value="public class UTF7Encoding : System.Text.Encoding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UTF7Encoding extends System.Text.Encoding" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.Text.UTF7Encoding" />
  <TypeSignature Language="VB.NET" Value="Public Class UTF7Encoding&#xA;Inherits Encoding" />
  <TypeSignature Language="C++ CLI" Value="public ref class UTF7Encoding : System::Text::Encoding" />
  <TypeSignature Language="F#" Value="type UTF7Encoding = class&#xA;    inherit Encoding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit UTF7Encoding extends System.Text.Encoding" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Text.Encoding.Extensions" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Text.Encoding</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="002ce-101">表示 Unicode 字符的 UTF-7 编码。</span><span class="sxs-lookup"><span data-stu-id="002ce-101">Represents a UTF-7 encoding of Unicode characters.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="002ce-102">编码是将一组 Unicode 字符转换为一个字节序列的过程。</span><span class="sxs-lookup"><span data-stu-id="002ce-102">Encoding is the process of transforming a set of Unicode characters into a sequence of bytes.</span></span> <span data-ttu-id="002ce-103">解码是将编码字节序列转换为一组 Unicode 字符的过程。</span><span class="sxs-lookup"><span data-stu-id="002ce-103">Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.</span></span>  
  
 <span data-ttu-id="002ce-104">UTF-7 编码将 Unicode 字符表示为7位 ASCII 字符的序列。</span><span class="sxs-lookup"><span data-stu-id="002ce-104">The UTF-7 encoding represents Unicode characters as sequences of 7-bit ASCII characters.</span></span> <span data-ttu-id="002ce-105">此编码支持某些协议，其中的某些协议是必需的，最常见的是电子邮件或新闻组协议。</span><span class="sxs-lookup"><span data-stu-id="002ce-105">This encoding supports certain protocols for which it is required, most often email or newsgroup protocols.</span></span> <span data-ttu-id="002ce-106">因为 UTF-7 不是特别安全或可靠，并且大多数新式系统都允许8位编码，所以通常应首选 utf-8。</span><span class="sxs-lookup"><span data-stu-id="002ce-106">Since UTF-7 is not particularly secure or robust, and most modern systems allow 8-bit encodings, UTF-8 should normally be preferred to UTF-7.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="002ce-107"><xref:System.Text.UTF7Encoding> 不提供错误检测。</span><span class="sxs-lookup"><span data-stu-id="002ce-107"><xref:System.Text.UTF7Encoding> does not provide error detection.</span></span> <span data-ttu-id="002ce-108">出于安全原因，应用程序应使用 <xref:System.Text.UTF8Encoding> 、 <xref:System.Text.UnicodeEncoding> 或 <xref:System.Text.UTF32Encoding> 并启用错误检测。</span><span class="sxs-lookup"><span data-stu-id="002ce-108">For security reasons, the application should use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.</span></span>  
  
 <span data-ttu-id="002ce-109">有关支持的 UTFs 和其他编码的详细信息 <xref:System.Text> ，请参阅 [.NET Framework 中的字符编码](/dotnet/standard/base-types/character-encoding)。</span><span class="sxs-lookup"><span data-stu-id="002ce-109">For more information about the UTFs and other encodings supported by <xref:System.Text>, see [Character Encoding in the .NET Framework](/dotnet/standard/base-types/character-encoding).</span></span>  
  
 <span data-ttu-id="002ce-110"><xref:System.Text.UTF7Encoding.GetByteCount%2A>方法确定导致对一组 Unicode 字符进行编码的字节数， <xref:System.Text.UTF7Encoding.GetBytes%2A> 方法执行实际编码。</span><span class="sxs-lookup"><span data-stu-id="002ce-110">The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.UTF7Encoding.GetBytes%2A> method performs the actual encoding.</span></span>  
  
 <span data-ttu-id="002ce-111">同样， <xref:System.Text.UTF7Encoding.GetCharCount%2A> 方法确定有多少字符导致一系列字节进行解码， <xref:System.Text.UTF7Encoding.GetChars%2A> 并且和 <xref:System.Text.UTF7Encoding.GetString%2A> 方法执行实际解码。</span><span class="sxs-lookup"><span data-stu-id="002ce-111">Likewise, the <xref:System.Text.UTF7Encoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.UTF7Encoding.GetChars%2A> and <xref:System.Text.UTF7Encoding.GetString%2A> methods perform the actual decoding.</span></span>  
  
 <span data-ttu-id="002ce-112"><xref:System.Text.UTF7Encoding> 对应于 Windows 代码页65000。</span><span class="sxs-lookup"><span data-stu-id="002ce-112"><xref:System.Text.UTF7Encoding> corresponds to the Windows code page 65000.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="002ce-113">如果使用不同的 .NET Framework 版本对对象进行序列化和反序列化，则不会保留 UTF-7 编码对象的状态。</span><span class="sxs-lookup"><span data-stu-id="002ce-113">The state of a UTF-7 encoded object is not preserved if the object is serialized and deserialized using different .NET Framework versions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="002ce-114">下面的代码示例演示如何使用 <xref:System.Text.UTF7Encoding> 对 Unicode 字符串进行编码，并将其存储在字节数组中。</span><span class="sxs-lookup"><span data-stu-id="002ce-114">The following code example demonstrates how to use a <xref:System.Text.UTF7Encoding> to encode a string of Unicode characters and store them in a byte array.</span></span> <span data-ttu-id="002ce-115">请注意，在将字节数组解码为字符串后，不会丢失任何数据。</span><span class="sxs-lookup"><span data-stu-id="002ce-115">Notice that when the byte array is decoded back to a string, no data is lost.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding Example/CPP/snippet.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding Example/CS/snippet.cs#1)]
 [!code-vb[System.Text.UTF7Encoding Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding Example/VB/snippet.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.Decoder" />
    <altmember cref="T:System.Text.Encoder" />
    <related type="Article" href="/dotnet/standard/base-types/character-encoding"><span data-ttu-id="002ce-116">了解编码</span><span class="sxs-lookup"><span data-stu-id="002ce-116">Understanding Encodings</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="002ce-117">初始化 <see cref="T:System.Text.UTF7Encoding" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="002ce-117">Initializes a new instance of the <see cref="T:System.Text.UTF7Encoding" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF7Encoding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UTF7Encoding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="002ce-118">初始化 <see cref="T:System.Text.UTF7Encoding" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="002ce-118">Initializes a new instance of the <see cref="T:System.Text.UTF7Encoding" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="002ce-119">此构造函数将创建一个不允许使用可选字符的实例。</span><span class="sxs-lookup"><span data-stu-id="002ce-119">This constructor creates an instance that does not allow optional characters.</span></span> <span data-ttu-id="002ce-120">调用 <xref:System.Text.UTF7Encoding.%23ctor%2A> 构造函数等效于调用 <xref:System.Text.UTF7Encoding.%23ctor%28System.Boolean%29?displayProperty=nameWithType> 采用 `allowOptionals` 参数并为该参数指定的构造函数 `false` 。</span><span class="sxs-lookup"><span data-stu-id="002ce-120">Calling the <xref:System.Text.UTF7Encoding.%23ctor%2A> constructor is equivalent to calling the <xref:System.Text.UTF7Encoding.%23ctor%28System.Boolean%29?displayProperty=nameWithType> constructor that takes an `allowOptionals` parameter and specifying `false` for that parameter.</span></span>  
  
 <span data-ttu-id="002ce-121">如果实例允许使用可选字符，则使用相应的可选字符（而不是修改后的 base 64 字符）对 Unicode 码位进行编码。</span><span class="sxs-lookup"><span data-stu-id="002ce-121">If an instance allows optional characters, Unicode code points are encoded with a corresponding optional character instead of a modified base 64 character.</span></span> <span data-ttu-id="002ce-122">可选字符为惊叹号 ( "！") 、反斜杠 ( " \\ " ) 、竖线 ( "&#124;" ) 、双引号 ( "" ") 、数字符号 (" # ") 、美元符号 (" $ ") 、百分比符号 ("% ") 、and (" & ") 、星号 (" \* ") 、分号 ("; ") ， ( "" 的左尖括号 \<"), right angle bracket ("> ) ，左大括号 ( "{" ) ，右大括号 ( "}" ) ，左方括号 ( "[" ) ，右方括号 ( "]" ) ，等号 ( "=" ) ，at 符号 ( "@" ) ，重音符号 ( "^" ) ，下划线 ( "_" ) ，以及抑音符 ( "' ) "。</span><span class="sxs-lookup"><span data-stu-id="002ce-122">The optional characters are exclamation point ("!"), backward slash ("\\"), vertical line ("&#124;"), double quote ("""), number sign ("#"), dollar sign ("$"), percent sign ("%"), ampersand ("&"), asterisk ("\*"), semicolon (";"), left angle bracket ("\<"), right angle bracket (">"), left curly bracket ("{"), right curly bracket ("}"), left square bracket ("["), right square bracket ("]"), equal sign ("="), at sign ("@"), circumflex accent ("^"), underscore ("_"), and grave accent ("\`").</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="002ce-123"><xref:System.Text.UTF7Encoding> 不提供错误检测。</span><span class="sxs-lookup"><span data-stu-id="002ce-123"><xref:System.Text.UTF7Encoding> does not provide error detection.</span></span> <span data-ttu-id="002ce-124">出于安全原因，建议您的应用程序使用 <xref:System.Text.UTF8Encoding> 、 <xref:System.Text.UnicodeEncoding> 或 <xref:System.Text.UTF32Encoding> 并启用错误检测。</span><span class="sxs-lookup"><span data-stu-id="002ce-124">For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="002ce-125">下面的代码示例演示如何创建新的 <xref:System.Text.UTF7Encoding> 实例并显示编码的名称。</span><span class="sxs-lookup"><span data-stu-id="002ce-125">The following code example demonstrates how to create a new <xref:System.Text.UTF7Encoding> instance and display the name of the encoding.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.ctor1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.ctor1 Example/CPP/ctor.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.ctor1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.ctor1 Example/CS/ctor.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.ctor1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.ctor1 Example/VB/ctor.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF7Encoding (bool allowOptionals);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool allowOptionals) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (allowOptionals As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UTF7Encoding(bool allowOptionals);" />
      <MemberSignature Language="F#" Value="new System.Text.UTF7Encoding : bool -&gt; System.Text.UTF7Encoding" Usage="new System.Text.UTF7Encoding allowOptionals" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="allowOptionals" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="allowOptionals"><span data-ttu-id="002ce-126">如果为 <see langword="true" />，则允许指定可选字符；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="002ce-126"><see langword="true" /> to specify that optional characters are allowed; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="002ce-127">初始化 <see cref="T:System.Text.UTF7Encoding" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="002ce-127">Initializes a new instance of the <see cref="T:System.Text.UTF7Encoding" /> class.</span></span> <span data-ttu-id="002ce-128">一个参数指定是否允许可选字符。</span><span class="sxs-lookup"><span data-stu-id="002ce-128">A parameter specifies whether to allow optional characters.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="002ce-129">如果实例允许使用可选字符，则使用相应的可选字符（而不是修改后的 base 64 字符）对 Unicode 码位进行编码。</span><span class="sxs-lookup"><span data-stu-id="002ce-129">If an instance allows optional characters, Unicode code points are encoded with a corresponding optional character instead of a modified base 64 character.</span></span> <span data-ttu-id="002ce-130">可选字符为惊叹号 ( "！") 、反斜杠 ( " \\ " ) 、竖线 ( "&#124;" ) 、双引号 ( "" ") 、数字符号 (" # ") 、美元符号 (" $ ") 、百分比符号 ("% ") 、and (" & ") 、星号 (" \* ") 、分号 ("; ") ， ( "" 的左尖括号 \<"), right angle bracket ("> ) ，左大括号 ( "{" ) ，右大括号 ( "}" ) ，左方括号 ( "[" ) ，右方括号 ( "]" ) ，等号 ( "=" ) ，at 符号 ( "@" ) ，重音符号 ( "^" ) ，下划线 ( "_" ) ，以及抑音符 ( "' ) "。</span><span class="sxs-lookup"><span data-stu-id="002ce-130">The optional characters are exclamation point ("!"), backward slash ("\\"), vertical line ("&#124;"), double quote ("""), number sign ("#"), dollar sign ("$"), percent sign ("%"), ampersand ("&"), asterisk ("\*"), semicolon (";"), left angle bracket ("\<"), right angle bracket (">"), left curly bracket ("{"), right curly bracket ("}"), left square bracket ("["), right square bracket ("]"), equal sign ("="), at sign ("@"), circumflex accent ("^"), underscore ("_"), and grave accent ("\`").</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="002ce-131"><xref:System.Text.UTF7Encoding> 不提供错误检测。</span><span class="sxs-lookup"><span data-stu-id="002ce-131"><xref:System.Text.UTF7Encoding> does not provide error detection.</span></span> <span data-ttu-id="002ce-132">出于安全原因，建议您的应用程序使用 <xref:System.Text.UTF8Encoding> 、 <xref:System.Text.UnicodeEncoding> 或 <xref:System.Text.UTF32Encoding> 并启用错误检测。</span><span class="sxs-lookup"><span data-stu-id="002ce-132">For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="002ce-133">下面的代码示例演示如何创建一个允许使用 <xref:System.Text.UTF7Encoding> 可选字符的新实例。</span><span class="sxs-lookup"><span data-stu-id="002ce-133">The following code example demonstrates how to create a new <xref:System.Text.UTF7Encoding> instance that allows optional characters.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.ctor2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.ctor2 Example/CPP/ctor-boolean.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.ctor2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.ctor2 Example/CS/ctor-boolean.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.ctor2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.ctor2 Example/VB/ctor-boolean.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="uTF7Encoding.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="002ce-134">要与当前 <see cref="T:System.Text.UTF7Encoding" /> 对象进行比较的对象。</span><span class="sxs-lookup"><span data-stu-id="002ce-134">An object to compare to the current <see cref="T:System.Text.UTF7Encoding" /> object.</span></span></param>
        <summary><span data-ttu-id="002ce-135">获取一个值，该值指示指定的对象是否等于当前的 <see cref="T:System.Text.UTF7Encoding" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="002ce-135">Gets a value indicating whether the specified object is equal to the current <see cref="T:System.Text.UTF7Encoding" /> object.</span></span></summary>
        <returns><span data-ttu-id="002ce-136">如果 <paramref name="value" /> 是 <see cref="T:System.Text.UTF7Encoding" /> 对象且等于当前 <see cref="T:System.Text.UTF7Encoding" /> 对象，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="002ce-136"><see langword="true" /> if <paramref name="value" /> is a <see cref="T:System.Text.UTF7Encoding" /> object and is equal to the current <see cref="T:System.Text.UTF7Encoding" /> object; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="002ce-137">如果两个 <xref:System.Text.UTF7Encoding> 对象都允许或禁止可选字符，并且它们的基础 <xref:System.Text.Encoding.EncoderFallback%2A> 和属性相等，则两个对象相等 <xref:System.Text.Encoding.DecoderFallback%2A> 。</span><span class="sxs-lookup"><span data-stu-id="002ce-137">Two <xref:System.Text.UTF7Encoding> objects are equal if they both either allow or disallow optional characters, and if their underlying <xref:System.Text.Encoding.EncoderFallback%2A> and <xref:System.Text.Encoding.DecoderFallback%2A> properties are equal.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="Overload:System.Text.UTF7Encoding.#ctor" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetByteCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="002ce-138">计算对一组字符进行编码时产生的字节数。</span><span class="sxs-lookup"><span data-stu-id="002ce-138">Calculates the number of bytes produced by encoding a set of characters.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetByteCount(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (s As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(System::String ^ s);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : string -&gt; int" Usage="uTF7Encoding.GetByteCount s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="002ce-139">包含要编码的字符集的 <see cref="T:System.String" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="002ce-139">The <see cref="T:System.String" /> object containing the set of characters to encode.</span></span></param>
        <summary><span data-ttu-id="002ce-140">计算对指定 <see cref="T:System.String" /> 对象中的字符进行编码时产生的字节数。</span><span class="sxs-lookup"><span data-stu-id="002ce-140">Calculates the number of bytes produced by encoding the characters in the specified <see cref="T:System.String" /> object.</span></span></summary>
        <returns><span data-ttu-id="002ce-141">对指定字符进行编码后生成的字节数。</span><span class="sxs-lookup"><span data-stu-id="002ce-141">The number of bytes produced by encoding the specified characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="002ce-142">若要计算 <xref:System.Text.UTF7Encoding.GetBytes%2A> 存储生成的字节所需的确切数组大小，应用程序将使用 <xref:System.Text.UTF7Encoding.GetByteCount%2A> 。</span><span class="sxs-lookup"><span data-stu-id="002ce-142">To calculate the exact array size that <xref:System.Text.UTF7Encoding.GetBytes%2A> requires to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="002ce-143">若要计算最大数组大小，应用程序应使用 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> 。</span><span class="sxs-lookup"><span data-stu-id="002ce-143">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>.</span></span> <span data-ttu-id="002ce-144"><xref:System.Text.UTF7Encoding.GetByteCount%2A>方法通常允许分配较少的内存，而 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> 方法的执行速度通常更快。</span><span class="sxs-lookup"><span data-stu-id="002ce-144">The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="002ce-145">下面的代码示例演示如何使用 <xref:System.Text.UTF7Encoding.GetByteCount%2A> 方法返回对字符数组进行编码所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="002ce-145">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetByteCount%2A> method to return the number of bytes required to encode a character array.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.GetByteCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetByteCount Example/CPP/getbytecount-char[]-int32-int32.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.GetByteCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetByteCount Example/CS/getbytecount-char[]-int32-int32.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.GetByteCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetByteCount Example/VB/getbytecount-char[]-int32-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="002ce-146"><paramref name="s" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span><span class="sxs-lookup"><span data-stu-id="002ce-146"><paramref name="s" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="002ce-147">得到的字节数大于可作为 int 返回的最大数量。</span><span class="sxs-lookup"><span data-stu-id="002ce-147">The resulting number of bytes is greater than the maximum number that can be returned as an int.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="002ce-148">发生了回退（如需进一步说明，请参阅 <see href="/dotnet/standard/base-types/character-encoding">.NET 中的字符编码</see>）。</span><span class="sxs-lookup"><span data-stu-id="002ce-148">A fallback occurred (see <see href="/dotnet/standard/base-types/character-encoding">Character Encoding in .NET</see> for fuller explanation).</span></span>
  
<span data-ttu-id="002ce-149">－和－</span><span class="sxs-lookup"><span data-stu-id="002ce-149">-and-</span></span> 
 <span data-ttu-id="002ce-150">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="002ce-150"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char* chars, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char* chars, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetByteCount(System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(char* chars, int count);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : nativeptr&lt;char&gt; * int -&gt; int" Usage="uTF7Encoding.GetByteCount (chars, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="002ce-151">指向第一个要编码的字符的指针。</span><span class="sxs-lookup"><span data-stu-id="002ce-151">A pointer to the first character to encode.</span></span></param>
        <param name="count"><span data-ttu-id="002ce-152">要编码的字符的数目。</span><span class="sxs-lookup"><span data-stu-id="002ce-152">The number of characters to encode.</span></span></param>
        <summary><span data-ttu-id="002ce-153">计算对从指定的字符指针开始的一组字符进行编码时产生的字节数。</span><span class="sxs-lookup"><span data-stu-id="002ce-153">Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</span></span></summary>
        <returns><span data-ttu-id="002ce-154">对指定字符进行编码后生成的字节数。</span><span class="sxs-lookup"><span data-stu-id="002ce-154">The number of bytes produced by encoding the specified characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="002ce-155">若要计算 <xref:System.Text.UTF7Encoding.GetBytes%2A> 存储生成的字节所需的确切数组大小，应用程序将使用 <xref:System.Text.UTF7Encoding.GetByteCount%2A> 。</span><span class="sxs-lookup"><span data-stu-id="002ce-155">To calculate the exact array size that <xref:System.Text.UTF7Encoding.GetBytes%2A> requires to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="002ce-156">若要计算最大数组大小，应用程序应使用 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> 。</span><span class="sxs-lookup"><span data-stu-id="002ce-156">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>.</span></span> <span data-ttu-id="002ce-157"><xref:System.Text.UTF7Encoding.GetByteCount%2A>方法通常允许分配较少的内存，而 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> 方法的执行速度通常更快。</span><span class="sxs-lookup"><span data-stu-id="002ce-157">The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="002ce-158"><paramref name="chars" /> 为 <see langword="null" />（在 Visual Basic .NET 中为 <see langword="Nothing" />）。</span><span class="sxs-lookup"><span data-stu-id="002ce-158"><paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" /> in Visual Basic .NET).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="002ce-159"><paramref name="count" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="002ce-159"><paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="002ce-160">- 或 -</span><span class="sxs-lookup"><span data-stu-id="002ce-160">-or-</span></span> 
<span data-ttu-id="002ce-161">得到的字节数大于可作为 int 返回的最大数量。</span><span class="sxs-lookup"><span data-stu-id="002ce-161">The resulting number of bytes is greater than the maximum number that can be returned as an int.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="002ce-162">发生回退（有关详细信息，请参阅<see href="/dotnet/standard/base-types/character-encoding">采用 .NET 的字符编码</see>）</span><span class="sxs-lookup"><span data-stu-id="002ce-162">A fallback occurred (for more information, see <see href="/dotnet/standard/base-types/character-encoding">Character Encoding in .NET</see>)</span></span> 
<span data-ttu-id="002ce-163">－和－</span><span class="sxs-lookup"><span data-stu-id="002ce-163">-and-</span></span> 
 <span data-ttu-id="002ce-164">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="002ce-164"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char[] chars, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char[] chars, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (chars As Char(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(cli::array &lt;char&gt; ^ chars, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : char[] * int * int -&gt; int" Usage="uTF7Encoding.GetByteCount (chars, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="002ce-165">包含要编码的字符集的字符数组。</span><span class="sxs-lookup"><span data-stu-id="002ce-165">The character array containing the set of characters to encode.</span></span></param>
        <param name="index"><span data-ttu-id="002ce-166">第一个要编码的字符的索引。</span><span class="sxs-lookup"><span data-stu-id="002ce-166">The index of the first character to encode.</span></span></param>
        <param name="count"><span data-ttu-id="002ce-167">要编码的字符的数目。</span><span class="sxs-lookup"><span data-stu-id="002ce-167">The number of characters to encode.</span></span></param>
        <summary><span data-ttu-id="002ce-168">计算对指定字符数组中的一组字符进行编码时产生的字节数。</span><span class="sxs-lookup"><span data-stu-id="002ce-168">Calculates the number of bytes produced by encoding a set of characters from the specified character array.</span></span></summary>
        <returns><span data-ttu-id="002ce-169">对指定字符进行编码后生成的字节数。</span><span class="sxs-lookup"><span data-stu-id="002ce-169">The number of bytes produced by encoding the specified characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="002ce-170">若要计算存储生成的字节所需的确切数组大小 <xref:System.Text.UTF7Encoding.GetBytes%2A> ，应用程序将使用 <xref:System.Text.UTF7Encoding.GetByteCount%2A> 。</span><span class="sxs-lookup"><span data-stu-id="002ce-170">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="002ce-171">若要计算最大数组大小，应用程序应使用 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> 。</span><span class="sxs-lookup"><span data-stu-id="002ce-171">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>.</span></span> <span data-ttu-id="002ce-172"><xref:System.Text.UTF7Encoding.GetByteCount%2A>方法通常允许分配较少的内存，而 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> 方法的执行速度通常更快。</span><span class="sxs-lookup"><span data-stu-id="002ce-172">The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="002ce-173">下面的代码示例演示如何使用 <xref:System.Text.UTF7Encoding.GetByteCount%2A> 方法返回对 Unicode 字符数组进行编码所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="002ce-173">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetByteCount%2A> method to return the number of bytes required to encode an array of Unicode characters.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.GetByteCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetByteCount Example/CPP/getbytecount-char[]-int32-int32.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.GetByteCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetByteCount Example/CS/getbytecount-char[]-int32-int32.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.GetByteCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetByteCount Example/VB/getbytecount-char[]-int32-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="002ce-174"><paramref name="chars" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span><span class="sxs-lookup"><span data-stu-id="002ce-174"><paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="002ce-175"><paramref name="index" /> 或 <paramref name="count" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="002ce-175"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="002ce-176">- 或 -</span><span class="sxs-lookup"><span data-stu-id="002ce-176">-or-</span></span> 
 <span data-ttu-id="002ce-177"><paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="chars" />中的有效范围。</span><span class="sxs-lookup"><span data-stu-id="002ce-177"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />.</span></span>  
  
<span data-ttu-id="002ce-178">- 或 -</span><span class="sxs-lookup"><span data-stu-id="002ce-178">-or-</span></span> 
<span data-ttu-id="002ce-179">得到的字节数大于可作为 int 返回的最大数量。</span><span class="sxs-lookup"><span data-stu-id="002ce-179">The resulting number of bytes is greater than the maximum number that can be returned as an int.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="002ce-180">发生回退（有关详细信息，请参阅<see href="/dotnet/standard/base-types/character-encoding">采用 .NET 的字符编码</see>）</span><span class="sxs-lookup"><span data-stu-id="002ce-180">A fallback occurred (for more information, see <see href="/dotnet/standard/base-types/character-encoding">Character Encoding in .NET</see>)</span></span> 
<span data-ttu-id="002ce-181">－和－</span><span class="sxs-lookup"><span data-stu-id="002ce-181">-and-</span></span> 
 <span data-ttu-id="002ce-182">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="002ce-182"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetEncoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetBytes">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="002ce-183">将一组字符编码为一个字节序列。</span><span class="sxs-lookup"><span data-stu-id="002ce-183">Encodes a set of characters into a sequence of bytes.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char* chars, int32 charCount, unsigned int8* bytes, int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(char* chars, int charCount, System::Byte* bytes, int byteCount);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : nativeptr&lt;char&gt; * int * nativeptr&lt;byte&gt; * int -&gt; int" Usage="uTF7Encoding.GetBytes (chars, charCount, bytes, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="charCount" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="bytes" Type="System.Byte*" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="byteCount" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="002ce-184">指向第一个要编码的字符的指针。</span><span class="sxs-lookup"><span data-stu-id="002ce-184">A pointer to the first character to encode.</span></span></param>
        <param name="charCount"><span data-ttu-id="002ce-185">要编码的字符的数目。</span><span class="sxs-lookup"><span data-stu-id="002ce-185">The number of characters to encode.</span></span></param>
        <param name="bytes"><span data-ttu-id="002ce-186">一个指针，指向开始写入所产生的字节序列的位置。</span><span class="sxs-lookup"><span data-stu-id="002ce-186">A pointer to the location at which to start writing the resulting sequence of bytes.</span></span></param>
        <param name="byteCount"><span data-ttu-id="002ce-187">最多写入的字节数。</span><span class="sxs-lookup"><span data-stu-id="002ce-187">The maximum number of bytes to write.</span></span></param>
        <summary><span data-ttu-id="002ce-188">将从指定的字符指针开始的一组字符编码为一个字节序列，并从指定的字节指针开始存储该字节序列。</span><span class="sxs-lookup"><span data-stu-id="002ce-188">Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</span></span></summary>
        <returns><span data-ttu-id="002ce-189">在由 <paramref name="bytes" /> 指示的位置处写入的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="002ce-189">The actual number of bytes written at the location indicated by <paramref name="bytes" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="002ce-190">若要计算存储生成的字节所需的确切数组大小 <xref:System.Text.UTF7Encoding.GetBytes%2A> ，应用程序将使用 <xref:System.Text.UTF7Encoding.GetByteCount%2A> 。</span><span class="sxs-lookup"><span data-stu-id="002ce-190">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="002ce-191">若要计算最大数组大小，应用程序应使用 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> 。</span><span class="sxs-lookup"><span data-stu-id="002ce-191">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>.</span></span> <span data-ttu-id="002ce-192"><xref:System.Text.UTF7Encoding.GetByteCount%2A>方法通常允许分配较少的内存，而 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> 方法的执行速度通常更快。</span><span class="sxs-lookup"><span data-stu-id="002ce-192">The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="002ce-193">要转换的数据（如从流中读取的数据）只能在顺序块中使用。</span><span class="sxs-lookup"><span data-stu-id="002ce-193">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="002ce-194">在这种情况下，或者如果数据量很大以致需要分为较小的块，则应用程序应 <xref:System.Text.Decoder> <xref:System.Text.Encoder> 分别使用 <xref:System.Text.UTF7Encoding.GetDecoder%2A> 方法或方法提供的或 <xref:System.Text.UTF7Encoding.GetEncoder%2A> 。</span><span class="sxs-lookup"><span data-stu-id="002ce-194">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="002ce-195"><xref:System.Text.UTF7Encoding> 不提供错误检测。</span><span class="sxs-lookup"><span data-stu-id="002ce-195"><xref:System.Text.UTF7Encoding> does not provide error detection.</span></span> <span data-ttu-id="002ce-196">无效字符编码为修改后的 base 64 字符。</span><span class="sxs-lookup"><span data-stu-id="002ce-196">Invalid characters are encoded as a modified base 64 character.</span></span> <span data-ttu-id="002ce-197">出于安全原因，建议您的应用程序使用 <xref:System.Text.UTF8Encoding> 、 <xref:System.Text.UnicodeEncoding> 或 <xref:System.Text.UTF32Encoding> 并启用错误检测。</span><span class="sxs-lookup"><span data-stu-id="002ce-197">For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="002ce-198"><paramref name="chars" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span><span class="sxs-lookup"><span data-stu-id="002ce-198"><paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span>  
  
<span data-ttu-id="002ce-199">-或-</span><span class="sxs-lookup"><span data-stu-id="002ce-199">-or-</span></span> 
 <span data-ttu-id="002ce-200"><paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span><span class="sxs-lookup"><span data-stu-id="002ce-200"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="002ce-201"><paramref name="charCount" /> 或 <paramref name="byteCount" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="002ce-201"><paramref name="charCount" /> or <paramref name="byteCount" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="002ce-202"><paramref name="byteCount" /> 少于所产生的字节数。</span><span class="sxs-lookup"><span data-stu-id="002ce-202"><paramref name="byteCount" /> is less than the resulting number of bytes.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="002ce-203">发生了回退（如需进一步说明，请参阅 <see href="/dotnet/standard/base-types/character-encoding">.NET 中的字符编码</see>）。</span><span class="sxs-lookup"><span data-stu-id="002ce-203">A fallback occurred (see <see href="/dotnet/standard/base-types/character-encoding">Character Encoding in .NET</see> for fuller explanation).</span></span>
  
<span data-ttu-id="002ce-204">－和－</span><span class="sxs-lookup"><span data-stu-id="002ce-204">-and-</span></span> 
 <span data-ttu-id="002ce-205">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="002ce-205"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF7Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char[] chars, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(cli::array &lt;char&gt; ^ chars, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : char[] * int * int * byte[] * int -&gt; int" Usage="uTF7Encoding.GetBytes (chars, charIndex, charCount, bytes, byteIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="002ce-206">包含要编码的字符集的字符数组。</span><span class="sxs-lookup"><span data-stu-id="002ce-206">The character array containing the set of characters to encode.</span></span></param>
        <param name="charIndex"><span data-ttu-id="002ce-207">第一个要编码的字符的索引。</span><span class="sxs-lookup"><span data-stu-id="002ce-207">The index of the first character to encode.</span></span></param>
        <param name="charCount"><span data-ttu-id="002ce-208">要编码的字符的数目。</span><span class="sxs-lookup"><span data-stu-id="002ce-208">The number of characters to encode.</span></span></param>
        <param name="bytes"><span data-ttu-id="002ce-209">要包含所产生的字节序列的字节数组。</span><span class="sxs-lookup"><span data-stu-id="002ce-209">The byte array to contain the resulting sequence of bytes.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="002ce-210">要开始写入所产生的字节序列的索引位置。</span><span class="sxs-lookup"><span data-stu-id="002ce-210">The index at which to start writing the resulting sequence of bytes.</span></span></param>
        <summary><span data-ttu-id="002ce-211">将指定字符数组中的一组字符编码到指定的字节数组中。</span><span class="sxs-lookup"><span data-stu-id="002ce-211">Encodes a set of characters from the specified character array into the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="002ce-212">写入 <paramref name="bytes" /> 的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="002ce-212">The actual number of bytes written into <paramref name="bytes" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="002ce-213">若要计算存储生成的字节所需的确切数组大小 <xref:System.Text.UTF7Encoding.GetBytes%2A> ，应用程序将使用 <xref:System.Text.UTF7Encoding.GetByteCount%2A> 。</span><span class="sxs-lookup"><span data-stu-id="002ce-213">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="002ce-214">若要计算最大数组大小，应用程序应使用 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> 。</span><span class="sxs-lookup"><span data-stu-id="002ce-214">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>.</span></span> <span data-ttu-id="002ce-215"><xref:System.Text.UTF7Encoding.GetByteCount%2A>方法通常允许分配较少的内存，而 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> 方法的执行速度通常更快。</span><span class="sxs-lookup"><span data-stu-id="002ce-215">The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="002ce-216">要转换的数据（如从流中读取的数据）只能在顺序块中使用。</span><span class="sxs-lookup"><span data-stu-id="002ce-216">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="002ce-217">在这种情况下，或者如果数据量很大以致需要分为较小的块，则应用程序应 <xref:System.Text.Decoder> <xref:System.Text.Encoder> 分别使用 <xref:System.Text.UTF7Encoding.GetDecoder%2A> 方法或方法提供的或 <xref:System.Text.UTF7Encoding.GetEncoder%2A> 。</span><span class="sxs-lookup"><span data-stu-id="002ce-217">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="002ce-218"><xref:System.Text.UTF7Encoding> 不提供错误检测。</span><span class="sxs-lookup"><span data-stu-id="002ce-218"><xref:System.Text.UTF7Encoding> does not provide error detection.</span></span> <span data-ttu-id="002ce-219">无效字符编码为修改后的 base 64 字符。</span><span class="sxs-lookup"><span data-stu-id="002ce-219">Invalid characters are encoded as a modified base 64 character.</span></span> <span data-ttu-id="002ce-220">出于安全原因，建议您的应用程序使用 <xref:System.Text.UTF8Encoding> 、 <xref:System.Text.UnicodeEncoding> 或 <xref:System.Text.UTF32Encoding> 并启用错误检测。</span><span class="sxs-lookup"><span data-stu-id="002ce-220">For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="002ce-221">下面的代码示例演示如何使用 <xref:System.Text.UTF7Encoding.GetBytes%2A> 方法对中的某个范围的字符进行编码 <xref:System.String> ，并将已编码的字节存储在字节数组中的一系列元素中。</span><span class="sxs-lookup"><span data-stu-id="002ce-221">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetBytes%2A> method to encode a range of characters from a <xref:System.String> and store the encoded bytes in a range of elements in a byte array.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.GetBytes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetBytes Example/CPP/getbytes-char[]-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.GetBytes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetBytes Example/CS/getbytes-char[]-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.GetBytes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetBytes Example/VB/getbytes-char[]-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="002ce-222"><paramref name="chars" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span><span class="sxs-lookup"><span data-stu-id="002ce-222"><paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span>  
  
<span data-ttu-id="002ce-223">-或-</span><span class="sxs-lookup"><span data-stu-id="002ce-223">-or-</span></span> 
 <span data-ttu-id="002ce-224"><paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span><span class="sxs-lookup"><span data-stu-id="002ce-224"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="002ce-225"><paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="002ce-225"><paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span></span>  
  
<span data-ttu-id="002ce-226">- 或 -</span><span class="sxs-lookup"><span data-stu-id="002ce-226">-or-</span></span> 
 <span data-ttu-id="002ce-227"><paramref name="charIndex" /> 和 <paramref name="charCount" /> 不表示 <paramref name="chars" />中的有效范围。</span><span class="sxs-lookup"><span data-stu-id="002ce-227"><paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span></span>  
  
<span data-ttu-id="002ce-228">- 或 -</span><span class="sxs-lookup"><span data-stu-id="002ce-228">-or-</span></span> 
 <span data-ttu-id="002ce-229"><paramref name="byteIndex" /> 不是 <paramref name="bytes" /> 中的有效索引。</span><span class="sxs-lookup"><span data-stu-id="002ce-229"><paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="002ce-230"><paramref name="bytes" /> 中从 <paramref name="byteIndex" /> 到数组结尾没有足够的容量来容纳所产生的字节。</span><span class="sxs-lookup"><span data-stu-id="002ce-230"><paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="002ce-231">发生了回退（如需进一步说明，请参阅 <see href="/dotnet/standard/base-types/character-encoding">.NET 中的字符编码</see>）。</span><span class="sxs-lookup"><span data-stu-id="002ce-231">A fallback occurred (see <see href="/dotnet/standard/base-types/character-encoding">Character Encoding in .NET</see> for fuller explanation).</span></span>
  
<span data-ttu-id="002ce-232">－和－</span><span class="sxs-lookup"><span data-stu-id="002ce-232">-and-</span></span> 
 <span data-ttu-id="002ce-233">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="002ce-233"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF7Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(string s, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (s As String, charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(System::String ^ s, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : string * int * int * byte[] * int -&gt; int" Usage="uTF7Encoding.GetBytes (s, charIndex, charCount, bytes, byteIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="charIndex" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="charCount" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="bytes" Type="System.Byte[]" Index="3" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="byteIndex" Type="System.Int32" Index="4" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="002ce-234">包含要编码的字符集的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="002ce-234">The <see cref="T:System.String" /> containing the set of characters to encode.</span></span></param>
        <param name="charIndex"><span data-ttu-id="002ce-235">第一个要编码的字符的索引。</span><span class="sxs-lookup"><span data-stu-id="002ce-235">The index of the first character to encode.</span></span></param>
        <param name="charCount"><span data-ttu-id="002ce-236">要编码的字符的数目。</span><span class="sxs-lookup"><span data-stu-id="002ce-236">The number of characters to encode.</span></span></param>
        <param name="bytes"><span data-ttu-id="002ce-237">要包含所产生的字节序列的字节数组。</span><span class="sxs-lookup"><span data-stu-id="002ce-237">The byte array to contain the resulting sequence of bytes.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="002ce-238">要开始写入所产生的字节序列的索引位置。</span><span class="sxs-lookup"><span data-stu-id="002ce-238">The index at which to start writing the resulting sequence of bytes.</span></span></param>
        <summary><span data-ttu-id="002ce-239">将指定 <see cref="T:System.String" /> 中的一组字符编码到指定的字节数组中。</span><span class="sxs-lookup"><span data-stu-id="002ce-239">Encodes a set of characters from the specified <see cref="T:System.String" /> into the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="002ce-240">写入 <paramref name="bytes" /> 的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="002ce-240">The actual number of bytes written into <paramref name="bytes" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="002ce-241">若要计算存储生成的字节所需的确切数组大小 <xref:System.Text.UTF7Encoding.GetBytes%2A> ，应用程序将使用 <xref:System.Text.UTF7Encoding.GetByteCount%2A> 。</span><span class="sxs-lookup"><span data-stu-id="002ce-241">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="002ce-242">若要计算最大数组大小，应用程序应使用 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> 。</span><span class="sxs-lookup"><span data-stu-id="002ce-242">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>.</span></span> <span data-ttu-id="002ce-243"><xref:System.Text.UTF7Encoding.GetByteCount%2A>方法通常允许分配较少的内存，而 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> 方法的执行速度通常更快。</span><span class="sxs-lookup"><span data-stu-id="002ce-243">The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="002ce-244">要转换的数据（如从流中读取的数据）只能在顺序块中使用。</span><span class="sxs-lookup"><span data-stu-id="002ce-244">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="002ce-245">在这种情况下，或者如果数据量很大以致需要分为较小的块，则应用程序应 <xref:System.Text.Decoder> <xref:System.Text.Encoder> 分别使用 <xref:System.Text.UTF7Encoding.GetDecoder%2A> 方法或方法提供的或 <xref:System.Text.UTF7Encoding.GetEncoder%2A> 。</span><span class="sxs-lookup"><span data-stu-id="002ce-245">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="002ce-246"><xref:System.Text.UTF7Encoding> 不提供错误检测。</span><span class="sxs-lookup"><span data-stu-id="002ce-246"><xref:System.Text.UTF7Encoding> does not provide error detection.</span></span> <span data-ttu-id="002ce-247">无效字符编码为修改后的 base 64 字符。</span><span class="sxs-lookup"><span data-stu-id="002ce-247">Invalid characters are encoded as a modified base 64 character.</span></span> <span data-ttu-id="002ce-248">出于安全原因，建议您的应用程序使用 <xref:System.Text.UTF8Encoding> 、 <xref:System.Text.UnicodeEncoding> 或 <xref:System.Text.UTF32Encoding> 并启用错误检测。</span><span class="sxs-lookup"><span data-stu-id="002ce-248">For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="002ce-249">下面的代码示例演示如何使用 <xref:System.Text.UTF7Encoding.GetBytes%2A> 方法对 Unicode 字符数组中的一系列元素进行编码，并将已编码的字节存储在字节数组中的一系列元素中。</span><span class="sxs-lookup"><span data-stu-id="002ce-249">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetBytes%2A> method to encode a range of elements from a Unicode character array, and store the encoded bytes in a range of elements in a byte array.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.GetBytes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetBytes Example/CPP/getbytes-char[]-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.GetBytes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetBytes Example/CS/getbytes-char[]-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.GetBytes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetBytes Example/VB/getbytes-char[]-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="002ce-250"><paramref name="s" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span><span class="sxs-lookup"><span data-stu-id="002ce-250"><paramref name="s" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span>  
  
<span data-ttu-id="002ce-251">-或-</span><span class="sxs-lookup"><span data-stu-id="002ce-251">-or-</span></span> 
 <span data-ttu-id="002ce-252"><paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span><span class="sxs-lookup"><span data-stu-id="002ce-252"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="002ce-253"><paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="002ce-253"><paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span></span>  
  
<span data-ttu-id="002ce-254">- 或 -</span><span class="sxs-lookup"><span data-stu-id="002ce-254">-or-</span></span> 
 <span data-ttu-id="002ce-255"><paramref name="charIndex" /> 和 <paramref name="charCount" /> 不表示 <paramref name="chars" />中的有效范围。</span><span class="sxs-lookup"><span data-stu-id="002ce-255"><paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span></span>  
  
<span data-ttu-id="002ce-256">- 或 -</span><span class="sxs-lookup"><span data-stu-id="002ce-256">-or-</span></span> 
 <span data-ttu-id="002ce-257"><paramref name="byteIndex" /> 不是 <paramref name="bytes" /> 中的有效索引。</span><span class="sxs-lookup"><span data-stu-id="002ce-257"><paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="002ce-258"><paramref name="bytes" /> 中从 <paramref name="byteIndex" /> 到数组结尾没有足够的容量来容纳所产生的字节。</span><span class="sxs-lookup"><span data-stu-id="002ce-258"><paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="002ce-259">发生了回退（如需进一步说明，请参阅 <see href="/dotnet/standard/base-types/character-encoding">.NET 中的字符编码</see>）。</span><span class="sxs-lookup"><span data-stu-id="002ce-259">A fallback occurred (see <see href="/dotnet/standard/base-types/character-encoding">Character Encoding in .NET</see> for fuller explanation).</span></span>
  
<span data-ttu-id="002ce-260">－和－</span><span class="sxs-lookup"><span data-stu-id="002ce-260">-and-</span></span> 
 <span data-ttu-id="002ce-261">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="002ce-261"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF7Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCharCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="002ce-262">计算对一个字节序列进行解码所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="002ce-262">Calculates the number of characters produced by decoding a sequence of bytes.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte* bytes, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8* bytes, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetCharCount(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(System::Byte* bytes, int count);" />
      <MemberSignature Language="F#" Value="override this.GetCharCount : nativeptr&lt;byte&gt; * int -&gt; int" Usage="uTF7Encoding.GetCharCount (bytes, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="002ce-263">指向第一个要解码的字节的指针。</span><span class="sxs-lookup"><span data-stu-id="002ce-263">A pointer to the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="002ce-264">要解码的字节数。</span><span class="sxs-lookup"><span data-stu-id="002ce-264">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="002ce-265">计算对一个字节序列（从指定的字节指针开始）进行解码所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="002ce-265">Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</span></span></summary>
        <returns><span data-ttu-id="002ce-266">对指定字节序列进行解码所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="002ce-266">The number of characters produced by decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="002ce-267">若要计算存储所生成的字符所需的确切数组大小 <xref:System.Text.UTF7Encoding.GetChars%2A> ，请使用 <xref:System.Text.UTF7Encoding.GetCharCount%2A> 。</span><span class="sxs-lookup"><span data-stu-id="002ce-267">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, use <xref:System.Text.UTF7Encoding.GetCharCount%2A>.</span></span> <span data-ttu-id="002ce-268">若要计算最大数组大小，应用程序应使用 <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> 。</span><span class="sxs-lookup"><span data-stu-id="002ce-268">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="002ce-269"><xref:System.Text.UTF7Encoding.GetCharCount%2A>方法通常允许分配较少的内存，而 <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> 方法的执行速度通常更快。</span><span class="sxs-lookup"><span data-stu-id="002ce-269">The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="002ce-270"><paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span><span class="sxs-lookup"><span data-stu-id="002ce-270"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="002ce-271"><paramref name="count" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="002ce-271"><paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="002ce-272">- 或 -</span><span class="sxs-lookup"><span data-stu-id="002ce-272">-or-</span></span> 
<span data-ttu-id="002ce-273">得到的字符数大于可作为 int 返回的最大数量。</span><span class="sxs-lookup"><span data-stu-id="002ce-273">The resulting number of characters is greater than the maximum number that can be returned as an int.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="002ce-274">发生了回退（如需进一步说明，请参阅 <see href="/dotnet/standard/base-types/character-encoding">.NET 中的字符编码</see>）。</span><span class="sxs-lookup"><span data-stu-id="002ce-274">A fallback occurred (see <see href="/dotnet/standard/base-types/character-encoding">Character Encoding in .NET</see> for fuller explanation).</span></span>
  
<span data-ttu-id="002ce-275">－和－</span><span class="sxs-lookup"><span data-stu-id="002ce-275">-and-</span></span> 
 <span data-ttu-id="002ce-276">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="002ce-276"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="Overload:System.Text.UTF7Encoding.GetChars" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharCount (bytes As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetCharCount : byte[] * int * int -&gt; int" Usage="uTF7Encoding.GetCharCount (bytes, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="002ce-277">包含要解码的字节序列的字节数组。</span><span class="sxs-lookup"><span data-stu-id="002ce-277">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="index"><span data-ttu-id="002ce-278">第一个要解码的字节的索引。</span><span class="sxs-lookup"><span data-stu-id="002ce-278">The index of the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="002ce-279">要解码的字节数。</span><span class="sxs-lookup"><span data-stu-id="002ce-279">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="002ce-280">计算对指定字节数组中的一个字节序列进行解码所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="002ce-280">Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="002ce-281">对指定字节序列进行解码所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="002ce-281">The number of characters produced by decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="002ce-282">若要计算存储所生成的字符所需的确切数组大小 <xref:System.Text.UTF7Encoding.GetChars%2A> ，请使用 <xref:System.Text.UTF7Encoding.GetCharCount%2A> 。</span><span class="sxs-lookup"><span data-stu-id="002ce-282">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, use <xref:System.Text.UTF7Encoding.GetCharCount%2A>.</span></span> <span data-ttu-id="002ce-283">若要计算最大数组大小，应用程序应使用 <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> 。</span><span class="sxs-lookup"><span data-stu-id="002ce-283">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="002ce-284"><xref:System.Text.UTF7Encoding.GetCharCount%2A>方法通常允许分配较少的内存，而 <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> 方法的执行速度通常更快。</span><span class="sxs-lookup"><span data-stu-id="002ce-284">The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="002ce-285">下面的代码示例演示如何使用 <xref:System.Text.UTF7Encoding.GetCharCount%2A> 方法返回对字节数组中的一系列元素进行解码所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="002ce-285">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetCharCount%2A> method to return the number of characters produced by decoding a range of elements in a byte array.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/CPP/getcharcount-byte[]-int32-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/CS/getcharcount-byte[]-int32-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/VB/getcharcount-byte[]-int32-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="002ce-286"><paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span><span class="sxs-lookup"><span data-stu-id="002ce-286"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="002ce-287"><paramref name="index" /> 或 <paramref name="count" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="002ce-287"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="002ce-288">- 或 -</span><span class="sxs-lookup"><span data-stu-id="002ce-288">-or-</span></span> 
 <span data-ttu-id="002ce-289"><paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="bytes" />中的有效范围。</span><span class="sxs-lookup"><span data-stu-id="002ce-289"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span></span>  
  
<span data-ttu-id="002ce-290">- 或 -</span><span class="sxs-lookup"><span data-stu-id="002ce-290">-or-</span></span> 
<span data-ttu-id="002ce-291">得到的字符数大于可作为 int 返回的最大数量。</span><span class="sxs-lookup"><span data-stu-id="002ce-291">The resulting number of characters is greater than the maximum number that can be returned as an int.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="002ce-292">发生回退（有关详细信息，请参阅<see href="/dotnet/standard/base-types/character-encoding">采用 .NET 的字符编码</see>）</span><span class="sxs-lookup"><span data-stu-id="002ce-292">A fallback occurred (for more information, see <see href="/dotnet/standard/base-types/character-encoding">Character Encoding in .NET</see>)</span></span> 
<span data-ttu-id="002ce-293">－和－</span><span class="sxs-lookup"><span data-stu-id="002ce-293">-and-</span></span> 
 <span data-ttu-id="002ce-294">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="002ce-294"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="Overload:System.Text.UTF7Encoding.GetChars" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetDecoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChars">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="002ce-295">将一个字节序列解码为一组字符。</span><span class="sxs-lookup"><span data-stu-id="002ce-295">Decodes a sequence of bytes into a set of characters.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8* bytes, int32 byteCount, char* chars, int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(System::Byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="F#" Value="override this.GetChars : nativeptr&lt;byte&gt; * int * nativeptr&lt;char&gt; * int -&gt; int" Usage="uTF7Encoding.GetChars (bytes, byteCount, chars, charCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="byteCount" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="chars" Type="System.Char*" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="charCount" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="002ce-296">指向第一个要解码的字节的指针。</span><span class="sxs-lookup"><span data-stu-id="002ce-296">A pointer to the first byte to decode.</span></span></param>
        <param name="byteCount"><span data-ttu-id="002ce-297">要解码的字节数。</span><span class="sxs-lookup"><span data-stu-id="002ce-297">The number of bytes to decode.</span></span></param>
        <param name="chars"><span data-ttu-id="002ce-298">一个指针，指向开始写入所产生的字符集的位置。</span><span class="sxs-lookup"><span data-stu-id="002ce-298">A pointer to the location at which to start writing the resulting set of characters.</span></span></param>
        <param name="charCount"><span data-ttu-id="002ce-299">要写入的最大字符数。</span><span class="sxs-lookup"><span data-stu-id="002ce-299">The maximum number of characters to write.</span></span></param>
        <summary><span data-ttu-id="002ce-300">将从指定的字节指针开始的一个字节序列解码为一组字符，并从指定的字符指针开始存储这组字符。</span><span class="sxs-lookup"><span data-stu-id="002ce-300">Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</span></span></summary>
        <returns><span data-ttu-id="002ce-301">在由 <paramref name="chars" /> 指示的位置处写入的实际字符数。</span><span class="sxs-lookup"><span data-stu-id="002ce-301">The actual number of characters written at the location indicated by <paramref name="chars" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="002ce-302">若要计算存储所生成的字符所需的确切数组大小 <xref:System.Text.UTF7Encoding.GetChars%2A> ，请使用 <xref:System.Text.UTF7Encoding.GetCharCount%2A> 。</span><span class="sxs-lookup"><span data-stu-id="002ce-302">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, use <xref:System.Text.UTF7Encoding.GetCharCount%2A>.</span></span> <span data-ttu-id="002ce-303">若要计算最大数组大小，应用程序应使用 <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> 。</span><span class="sxs-lookup"><span data-stu-id="002ce-303">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="002ce-304"><xref:System.Text.UTF7Encoding.GetCharCount%2A>方法通常允许分配较少的内存，而 <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> 方法的执行速度通常更快。</span><span class="sxs-lookup"><span data-stu-id="002ce-304">The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="002ce-305">要转换的数据（如从流中读取的数据）只能在顺序块中使用。</span><span class="sxs-lookup"><span data-stu-id="002ce-305">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="002ce-306">在这种情况下，或者如果数据量很大以致需要分为较小的块，则应用程序应 <xref:System.Text.Decoder> <xref:System.Text.Encoder> 分别使用 <xref:System.Text.UTF7Encoding.GetDecoder%2A> 方法或方法提供的或 <xref:System.Text.UTF7Encoding.GetEncoder%2A> 。</span><span class="sxs-lookup"><span data-stu-id="002ce-306">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="002ce-307"><xref:System.Text.UTF7Encoding> 不提供错误检测。</span><span class="sxs-lookup"><span data-stu-id="002ce-307"><xref:System.Text.UTF7Encoding> does not provide error detection.</span></span> <span data-ttu-id="002ce-308">如果遇到无效字节， <xref:System.Text.UTF7Encoding> 通常会发出无效字节。</span><span class="sxs-lookup"><span data-stu-id="002ce-308">When invalid bytes are encountered, <xref:System.Text.UTF7Encoding> generally emits the invalid bytes.</span></span> <span data-ttu-id="002ce-309">如果字节大于十六进制0x7F，则字节值将从零扩展到 Unicode 字符，结果存储在 `chars` 数组中，任何移位序列都将终止。</span><span class="sxs-lookup"><span data-stu-id="002ce-309">If a byte is larger than hexadecimal 0x7F, the byte value is zero-extended into a Unicode character, the result is stored in the `chars` array, and any shift sequence is terminated.</span></span> <span data-ttu-id="002ce-310">例如，如果要编码的字节是十六进制0x81，则生成的字符为 U + 0081。</span><span class="sxs-lookup"><span data-stu-id="002ce-310">For example, if the byte to encode is hexadecimal 0x81, the resulting character is U+0081.</span></span> <span data-ttu-id="002ce-311">出于安全原因，建议您的应用程序使用 <xref:System.Text.UTF8Encoding> 、 <xref:System.Text.UnicodeEncoding> 或 <xref:System.Text.UTF32Encoding> 并启用错误检测。</span><span class="sxs-lookup"><span data-stu-id="002ce-311">For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="002ce-312"><paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span><span class="sxs-lookup"><span data-stu-id="002ce-312"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span>  
  
<span data-ttu-id="002ce-313">-或-</span><span class="sxs-lookup"><span data-stu-id="002ce-313">-or-</span></span> 
 <span data-ttu-id="002ce-314"><paramref name="chars" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span><span class="sxs-lookup"><span data-stu-id="002ce-314"><paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="002ce-315"><paramref name="byteCount" /> 或 <paramref name="charCount" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="002ce-315"><paramref name="byteCount" /> or <paramref name="charCount" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="002ce-316"><paramref name="charCount" /> 少于所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="002ce-316"><paramref name="charCount" /> is less than the resulting number of characters.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="002ce-317">发生回退（有关详细信息，请参阅<see href="/dotnet/standard/base-types/character-encoding">采用 .NET 的字符编码</see>）</span><span class="sxs-lookup"><span data-stu-id="002ce-317">A fallback occurred (for more information, see <see href="/dotnet/standard/base-types/character-encoding">Character Encoding in .NET</see>)</span></span> 
<span data-ttu-id="002ce-318">－和－</span><span class="sxs-lookup"><span data-stu-id="002ce-318">-and-</span></span> 
 <span data-ttu-id="002ce-319">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="002ce-319"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetChars (bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex, int byteCount, cli::array &lt;char&gt; ^ chars, int charIndex);" />
      <MemberSignature Language="F#" Value="override this.GetChars : byte[] * int * int * char[] * int -&gt; int" Usage="uTF7Encoding.GetChars (bytes, byteIndex, byteCount, chars, charIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="002ce-320">包含要解码的字节序列的字节数组。</span><span class="sxs-lookup"><span data-stu-id="002ce-320">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="002ce-321">第一个要解码的字节的索引。</span><span class="sxs-lookup"><span data-stu-id="002ce-321">The index of the first byte to decode.</span></span></param>
        <param name="byteCount"><span data-ttu-id="002ce-322">要解码的字节数。</span><span class="sxs-lookup"><span data-stu-id="002ce-322">The number of bytes to decode.</span></span></param>
        <param name="chars"><span data-ttu-id="002ce-323">要用于包含所产生的字符集的字符数组。</span><span class="sxs-lookup"><span data-stu-id="002ce-323">The character array to contain the resulting set of characters.</span></span></param>
        <param name="charIndex"><span data-ttu-id="002ce-324">开始写入所产生的字符集的索引位置。</span><span class="sxs-lookup"><span data-stu-id="002ce-324">The index at which to start writing the resulting set of characters.</span></span></param>
        <summary><span data-ttu-id="002ce-325">将指定字节数组中的一个字节序列解码为指定的字符数组。</span><span class="sxs-lookup"><span data-stu-id="002ce-325">Decodes a sequence of bytes from the specified byte array into the specified character array.</span></span></summary>
        <returns><span data-ttu-id="002ce-326">写入 <paramref name="chars" /> 的实际字符数。</span><span class="sxs-lookup"><span data-stu-id="002ce-326">The actual number of characters written into <paramref name="chars" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="002ce-327">若要计算存储所生成的字符所需的确切数组大小 <xref:System.Text.UTF7Encoding.GetChars%2A> ，请使用 <xref:System.Text.UTF7Encoding.GetCharCount%2A> 。</span><span class="sxs-lookup"><span data-stu-id="002ce-327">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, use <xref:System.Text.UTF7Encoding.GetCharCount%2A>.</span></span> <span data-ttu-id="002ce-328">若要计算最大数组大小，应用程序应使用 <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> 。</span><span class="sxs-lookup"><span data-stu-id="002ce-328">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="002ce-329"><xref:System.Text.UTF7Encoding.GetCharCount%2A>方法通常允许分配较少的内存，而 <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> 方法的执行速度通常更快。</span><span class="sxs-lookup"><span data-stu-id="002ce-329">The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="002ce-330">要转换的数据（如从流中读取的数据）只能在顺序块中使用。</span><span class="sxs-lookup"><span data-stu-id="002ce-330">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="002ce-331">在这种情况下，或者如果数据量很大以致需要分为较小的块，则应用程序应 <xref:System.Text.Decoder> <xref:System.Text.Encoder> 分别使用 <xref:System.Text.UTF7Encoding.GetDecoder%2A> 方法或方法提供的或 <xref:System.Text.UTF7Encoding.GetEncoder%2A> 。</span><span class="sxs-lookup"><span data-stu-id="002ce-331">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="002ce-332"><xref:System.Text.UTF7Encoding> 不提供错误检测。</span><span class="sxs-lookup"><span data-stu-id="002ce-332"><xref:System.Text.UTF7Encoding> does not provide error detection.</span></span> <span data-ttu-id="002ce-333">如果遇到无效字节， <xref:System.Text.UTF7Encoding> 通常会发出无效字节。</span><span class="sxs-lookup"><span data-stu-id="002ce-333">When invalid bytes are encountered, <xref:System.Text.UTF7Encoding> generally emits the invalid bytes.</span></span> <span data-ttu-id="002ce-334">如果字节大于十六进制0x7F，则字节值将从零扩展到 Unicode 字符，结果存储在 `chars` 数组中，任何移位序列都将终止。</span><span class="sxs-lookup"><span data-stu-id="002ce-334">If a byte is larger than hexadecimal 0x7F, the byte value is zero-extended into a Unicode character, the result is stored in the `chars` array, and any shift sequence is terminated.</span></span> <span data-ttu-id="002ce-335">例如，如果要编码的字节是十六进制0x81，则生成的字符为 U + 0081。</span><span class="sxs-lookup"><span data-stu-id="002ce-335">For example, if the byte to encode is hexadecimal 0x81, the resulting character is U+0081.</span></span> <span data-ttu-id="002ce-336">出于安全原因，建议您的应用程序使用 <xref:System.Text.UTF8Encoding> 、 <xref:System.Text.UnicodeEncoding> 或 <xref:System.Text.UTF32Encoding> 并启用错误检测。</span><span class="sxs-lookup"><span data-stu-id="002ce-336">For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="002ce-337">下面的代码示例演示如何使用 <xref:System.Text.UTF7Encoding.GetChars%2A> 方法对字节数组中的一系列元素进行解码，并将结果存储在字符数组中。</span><span class="sxs-lookup"><span data-stu-id="002ce-337">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetChars%2A> method to decode a range of elements in a byte array and store the result in a character array.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.GetChars Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetChars Example/CPP/getchars-byte[]-int32-int32-char[]-int32.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.GetChars Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetChars Example/CS/getchars-byte[]-int32-int32-char[]-int32.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.GetChars Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetChars Example/VB/getchars-byte[]-int32-int32-char[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="002ce-338"><paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span><span class="sxs-lookup"><span data-stu-id="002ce-338"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span>  
  
<span data-ttu-id="002ce-339">-或-</span><span class="sxs-lookup"><span data-stu-id="002ce-339">-or-</span></span> 
 <span data-ttu-id="002ce-340"><paramref name="chars" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span><span class="sxs-lookup"><span data-stu-id="002ce-340"><paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="002ce-341"><paramref name="byteIndex" />、<paramref name="byteCount" /> 或 <paramref name="charIndex" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="002ce-341"><paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.</span></span>  
  
<span data-ttu-id="002ce-342">- 或 -</span><span class="sxs-lookup"><span data-stu-id="002ce-342">-or-</span></span> 
 <span data-ttu-id="002ce-343"><paramref name="byteindex" /> 和 <paramref name="byteCount" /> 不表示 <paramref name="bytes" />中的有效范围。</span><span class="sxs-lookup"><span data-stu-id="002ce-343"><paramref name="byteindex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.</span></span>  
  
<span data-ttu-id="002ce-344">- 或 -</span><span class="sxs-lookup"><span data-stu-id="002ce-344">-or-</span></span> 
 <span data-ttu-id="002ce-345"><paramref name="charIndex" /> 不是 <paramref name="chars" /> 中的有效索引。</span><span class="sxs-lookup"><span data-stu-id="002ce-345"><paramref name="charIndex" /> is not a valid index in <paramref name="chars" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="002ce-346"><paramref name="chars" /> 中从 <paramref name="charIndex" /> 到数组结尾没有足够容量来容纳所产生的字符。</span><span class="sxs-lookup"><span data-stu-id="002ce-346"><paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="002ce-347">发生回退（有关详细信息，请参阅<see href="/dotnet/standard/base-types/character-encoding">采用 .NET 的字符编码</see>）</span><span class="sxs-lookup"><span data-stu-id="002ce-347">A fallback occurred (for more information, see <see href="/dotnet/standard/base-types/character-encoding">Character Encoding in .NET</see>)</span></span> 
<span data-ttu-id="002ce-348">－和－</span><span class="sxs-lookup"><span data-stu-id="002ce-348">-and-</span></span> 
 <span data-ttu-id="002ce-349">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="002ce-349"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetDecoder">
      <MemberSignature Language="C#" Value="public override System.Text.Decoder GetDecoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Decoder GetDecoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetDecoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDecoder () As Decoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Decoder ^ GetDecoder();" />
      <MemberSignature Language="F#" Value="override this.GetDecoder : unit -&gt; System.Text.Decoder" Usage="uTF7Encoding.GetDecoder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Decoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="002ce-350">获取可以将 UTF-7 编码的字节序列转换为 Unicode 字符序列的解码器。</span><span class="sxs-lookup"><span data-stu-id="002ce-350">Obtains a decoder that converts a UTF-7 encoded sequence of bytes into a sequence of Unicode characters.</span></span></summary>
        <returns><span data-ttu-id="002ce-351">一个 <see cref="T:System.Text.Decoder" />，用于将 UTF-7 编码的字节序列转换为 Unicode 字符序列。</span><span class="sxs-lookup"><span data-stu-id="002ce-351">A <see cref="T:System.Text.Decoder" /> that converts a UTF-7 encoded sequence of bytes into a sequence of Unicode characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="002ce-352"><xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>方法使用类似于此类的方法的方式将连续字节块转换为连续的字符块 <xref:System.Text.UTF7Encoding.GetChars%2A> 。</span><span class="sxs-lookup"><span data-stu-id="002ce-352">The <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.UTF7Encoding.GetChars%2A> method of this class.</span></span> <span data-ttu-id="002ce-353">但是， <xref:System.Text.Decoder> 会在调用之间维护状态信息，以便能够正确地对跨块的字节序列进行解码。</span><span class="sxs-lookup"><span data-stu-id="002ce-353">However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks.</span></span> <span data-ttu-id="002ce-354"><xref:System.Text.Decoder>还保留数据块末尾的尾随字节，并在下一个解码操作中使用尾随字节。</span><span class="sxs-lookup"><span data-stu-id="002ce-354">The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation.</span></span> <span data-ttu-id="002ce-355">因此， <xref:System.Text.UTF7Encoding.GetDecoder%2A> 和 <xref:System.Text.UTF7Encoding.GetEncoder%2A> 对于网络传输和文件操作非常有用，因为这些操作经常处理数据块而不是完整的数据流。</span><span class="sxs-lookup"><span data-stu-id="002ce-355">Therefore, <xref:System.Text.UTF7Encoding.GetDecoder%2A> and <xref:System.Text.UTF7Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="002ce-356">下面的代码示例演示如何使用 <xref:System.Text.UTF7Encoding.GetDecoder%2A> 方法获取解码器，以将 utf-7 编码的字节转换为字符序列。</span><span class="sxs-lookup"><span data-stu-id="002ce-356">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method to obtain a decoder to convert the UTF-7 encoded bytes into a sequence of characters.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.GetDecoder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetDecoder Example/CPP/getdecoder-.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.GetDecoder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetDecoder Example/CS/getdecoder-.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.GetDecoder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetDecoder Example/VB/getdecoder-.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Decoder" />
        <altmember cref="M:System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetEncoder" />
        <related type="Article" href="/dotnet/standard/base-types/character-encoding"><span data-ttu-id="002ce-357">了解编码</span><span class="sxs-lookup"><span data-stu-id="002ce-357">Understanding Encodings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetEncoder">
      <MemberSignature Language="C#" Value="public override System.Text.Encoder GetEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Encoder GetEncoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetEncoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEncoder () As Encoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Encoder ^ GetEncoder();" />
      <MemberSignature Language="F#" Value="override this.GetEncoder : unit -&gt; System.Text.Encoder" Usage="uTF7Encoding.GetEncoder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="002ce-358">获取可将 Unicode 字符序列转换为 UTF-7 编码的字节序列的编码器。</span><span class="sxs-lookup"><span data-stu-id="002ce-358">Obtains an encoder that converts a sequence of Unicode characters into a UTF-7 encoded sequence of bytes.</span></span></summary>
        <returns><span data-ttu-id="002ce-359">一个 <see cref="T:System.Text.Encoder" />，用于将 Unicode 字符序列转换为 UTF-7 编码的字节序列。</span><span class="sxs-lookup"><span data-stu-id="002ce-359">A <see cref="T:System.Text.Encoder" /> that converts a sequence of Unicode characters into a UTF-7 encoded sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="002ce-360"><xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>方法使用与方法类似的方式将连续字节块转换为连续的字符块 <xref:System.Text.UTF7Encoding.GetChars%2A> 。</span><span class="sxs-lookup"><span data-stu-id="002ce-360">The <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.UTF7Encoding.GetChars%2A> method.</span></span> <span data-ttu-id="002ce-361">但是， <xref:System.Text.Decoder> 会在调用之间维护状态信息，以便能够正确地对跨块的字节序列进行解码。</span><span class="sxs-lookup"><span data-stu-id="002ce-361">However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks.</span></span> <span data-ttu-id="002ce-362"><xref:System.Text.Decoder>还保留数据块末尾的尾随字节，并在下一个解码操作中使用尾随字节。</span><span class="sxs-lookup"><span data-stu-id="002ce-362">The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation.</span></span> <span data-ttu-id="002ce-363">因此， <xref:System.Text.UTF7Encoding.GetDecoder%2A> 和 <xref:System.Text.UTF7Encoding.GetEncoder%2A> 对于网络传输和文件操作非常有用，因为这些操作经常处理数据块而不是完整的数据流。</span><span class="sxs-lookup"><span data-stu-id="002ce-363">Therefore, <xref:System.Text.UTF7Encoding.GetDecoder%2A> and <xref:System.Text.UTF7Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="002ce-364">下面的代码示例演示如何使用 <xref:System.Text.UTF7Encoding.GetEncoder%2A> 方法获取一个编码器，将一个字符序列转换为 utf-8 编码的字节序列。</span><span class="sxs-lookup"><span data-stu-id="002ce-364">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method to obtain an encoder to convert a sequence of characters into a UTF-7 encoded sequence of bytes.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.GetEncoder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetEncoder Example/CPP/getencoder-.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.GetEncoder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetEncoder Example/CS/getencoder-.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.GetEncoder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetEncoder Example/VB/getencoder-.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoder" />
        <altmember cref="M:System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetDecoder" />
        <related type="Article" href="/dotnet/standard/base-types/character-encoding"><span data-ttu-id="002ce-365">了解编码</span><span class="sxs-lookup"><span data-stu-id="002ce-365">Understanding Encodings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="uTF7Encoding.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="002ce-366">返回当前 <see cref="T:System.Text.UTF7Encoding" /> 对象的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="002ce-366">Returns the hash code for the current <see cref="T:System.Text.UTF7Encoding" /> object.</span></span></summary>
        <returns><span data-ttu-id="002ce-367">32 位有符号整数哈希代码。</span><span class="sxs-lookup"><span data-stu-id="002ce-367">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="002ce-368">方法返回的值 <xref:System.Text.UTF7Encoding.GetHashCode%2A> 不适合区分一个 <xref:System.Text.UTF7Encoding> 对象。</span><span class="sxs-lookup"><span data-stu-id="002ce-368">The value returned by the <xref:System.Text.UTF7Encoding.GetHashCode%2A> method is not suitable for distinguishing one <xref:System.Text.UTF7Encoding> object from another.</span></span> <span data-ttu-id="002ce-369">如果应用程序需要唯一的哈希代码，则应重写 <xref:System.Text.UTF7Encoding.GetHashCode%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="002ce-369">If your application needs a unique hash code, it should override the <xref:System.Text.UTF7Encoding.GetHashCode%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMaxByteCount">
      <MemberSignature Language="C#" Value="public override int GetMaxByteCount (int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxByteCount(int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxByteCount (charCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxByteCount(int charCount);" />
      <MemberSignature Language="F#" Value="override this.GetMaxByteCount : int -&gt; int" Usage="uTF7Encoding.GetMaxByteCount charCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charCount"><span data-ttu-id="002ce-370">要编码的字符的数目。</span><span class="sxs-lookup"><span data-stu-id="002ce-370">The number of characters to encode.</span></span></param>
        <summary><span data-ttu-id="002ce-371">计算对指定数目的字符进行编码时产生的最大字节数。</span><span class="sxs-lookup"><span data-stu-id="002ce-371">Calculates the maximum number of bytes produced by encoding the specified number of characters.</span></span></summary>
        <returns><span data-ttu-id="002ce-372">对指定数目的字符进行编码所产生的最大字节数。</span><span class="sxs-lookup"><span data-stu-id="002ce-372">The maximum number of bytes produced by encoding the specified number of characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="002ce-373">若要计算存储生成的字节所需的确切数组大小 <xref:System.Text.UTF7Encoding.GetBytes%2A> ，应用程序将使用 <xref:System.Text.UTF7Encoding.GetByteCount%2A> 。</span><span class="sxs-lookup"><span data-stu-id="002ce-373">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="002ce-374">若要计算最大数组大小，应用程序应使用 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> 。</span><span class="sxs-lookup"><span data-stu-id="002ce-374">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>.</span></span> <span data-ttu-id="002ce-375"><xref:System.Text.UTF7Encoding.GetByteCount%2A>方法通常允许分配较少的内存，而 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> 方法的执行速度通常更快。</span><span class="sxs-lookup"><span data-stu-id="002ce-375">The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="002ce-376"><xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> 是最差的事例数，包括当前所选的最糟糕的情况 <xref:System.Text.EncoderFallback> 。</span><span class="sxs-lookup"><span data-stu-id="002ce-376"><xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> is a worst-case number, including the worst case for the currently selected <xref:System.Text.EncoderFallback>.</span></span> <span data-ttu-id="002ce-377">如果使用可能大的字符串选择回退，则 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> 可以返回大值。</span><span class="sxs-lookup"><span data-stu-id="002ce-377">If a fallback is chosen with a potentially large string, <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> can return large values.</span></span>  
  
 <span data-ttu-id="002ce-378">在大多数情况下，此方法为小字符串返回合理的数字。</span><span class="sxs-lookup"><span data-stu-id="002ce-378">In most cases, this method returns reasonable numbers for small strings.</span></span> <span data-ttu-id="002ce-379">对于大字符串，可能需要在超过更合理缓冲区的罕见情况下，在使用非常大的缓冲区和捕获错误之间进行选择。</span><span class="sxs-lookup"><span data-stu-id="002ce-379">For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</span></span> <span data-ttu-id="002ce-380">你可能还需要考虑使用或的其他方法 <xref:System.Text.UTF7Encoding.GetByteCount%2A> <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="002ce-380">You might also want to consider a different approach using <xref:System.Text.UTF7Encoding.GetByteCount%2A> or <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="002ce-381">尽管 UTF-8 在编码 ASCII 数据时非常高效，但每个字符一个字节，但对于其他数据来说，这是非常低效的。</span><span class="sxs-lookup"><span data-stu-id="002ce-381">While UTF-7 is very efficient at encoding ASCII data, one byte per character, it is extremely inefficient for other data.</span></span> <span data-ttu-id="002ce-382">与上面的 remarked 一样， <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> 处理的是最糟糕的情况。</span><span class="sxs-lookup"><span data-stu-id="002ce-382">As remarked above, <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> deals with a worst case.</span></span> <span data-ttu-id="002ce-383">如果要进行编码的数据的格式很大，尤其是在 ASCII 字符一起聚集时，UTF-7 比此方法返回的数字更有效。</span><span class="sxs-lookup"><span data-stu-id="002ce-383">If the data to be encoded is largely ASCII, and especially if the ASCII characters cluster together, UTF-7 is significantly more efficient than the number returned by this method suggests.</span></span>  
  
 <span data-ttu-id="002ce-384"><xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>与之间没有关系 <xref:System.Text.UTF7Encoding.GetChars%2A> 。</span><span class="sxs-lookup"><span data-stu-id="002ce-384"><xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> has no relation to <xref:System.Text.UTF7Encoding.GetChars%2A>.</span></span> <span data-ttu-id="002ce-385">如果你的应用程序需要与一起使用的类似函数 <xref:System.Text.UTF7Encoding.GetChars%2A> ，则它应使用 <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> 。</span><span class="sxs-lookup"><span data-stu-id="002ce-385">If your application needs a similar function to use with <xref:System.Text.UTF7Encoding.GetChars%2A>, it should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="002ce-386">`GetMaxByteCount(N)`不一定与相同 `N* GetMaxByteCount(1)` 。</span><span class="sxs-lookup"><span data-stu-id="002ce-386">`GetMaxByteCount(N)` is not necessarily the same value as `N* GetMaxByteCount(1)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="002ce-387">下面的代码示例演示如何使用 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> 方法返回对指定数目的字符进行编码所需的最大字节数。</span><span class="sxs-lookup"><span data-stu-id="002ce-387">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method to return the maximum number of bytes required to encode a specified number of characters.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.GetMaxByteCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetMaxByteCount Example/CPP/getmaxbytecount-int32.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.GetMaxByteCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetMaxByteCount Example/CS/getmaxbytecount-int32.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.GetMaxByteCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetMaxByteCount Example/VB/getmaxbytecount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="002ce-388"><paramref name="charCount" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="002ce-388"><paramref name="charCount" /> is less than zero.</span></span>  
  
<span data-ttu-id="002ce-389">- 或 -</span><span class="sxs-lookup"><span data-stu-id="002ce-389">-or-</span></span> 
<span data-ttu-id="002ce-390">得到的字节数大于可作为 int 返回的最大数量。</span><span class="sxs-lookup"><span data-stu-id="002ce-390">The resulting number of bytes is greater than the maximum number that can be returned as an int.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="002ce-391">发生回退（有关详细信息，请参阅<see href="/dotnet/standard/base-types/character-encoding">采用 .NET 的字符编码</see>）</span><span class="sxs-lookup"><span data-stu-id="002ce-391">A fallback occurred (for more information, see <see href="/dotnet/standard/base-types/character-encoding">Character Encoding in .NET</see>)</span></span> 
<span data-ttu-id="002ce-392">－和－</span><span class="sxs-lookup"><span data-stu-id="002ce-392">-and-</span></span> 
 <span data-ttu-id="002ce-393">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="002ce-393"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxCharCount">
      <MemberSignature Language="C#" Value="public override int GetMaxCharCount (int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxCharCount(int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxCharCount (byteCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxCharCount(int byteCount);" />
      <MemberSignature Language="F#" Value="override this.GetMaxCharCount : int -&gt; int" Usage="uTF7Encoding.GetMaxCharCount byteCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="byteCount"><span data-ttu-id="002ce-394">要解码的字节数。</span><span class="sxs-lookup"><span data-stu-id="002ce-394">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="002ce-395">计算对指定数目的字节进行解码时产生的最大字符数。</span><span class="sxs-lookup"><span data-stu-id="002ce-395">Calculates the maximum number of characters produced by decoding the specified number of bytes.</span></span></summary>
        <returns><span data-ttu-id="002ce-396">对指定数目的字节进行解码时所产生的最大字符数。</span><span class="sxs-lookup"><span data-stu-id="002ce-396">The maximum number of characters produced by decoding the specified number of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="002ce-397">若要计算存储所生成的字符所需的确切数组大小 <xref:System.Text.UTF7Encoding.GetChars%2A> ，应用程序将使用 <xref:System.Text.UTF7Encoding.GetCharCount%2A> 。</span><span class="sxs-lookup"><span data-stu-id="002ce-397">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.UTF7Encoding.GetCharCount%2A>.</span></span> <span data-ttu-id="002ce-398">若要计算最大数组大小，应用程序应使用 <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> 。</span><span class="sxs-lookup"><span data-stu-id="002ce-398">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="002ce-399"><xref:System.Text.UTF7Encoding.GetCharCount%2A>方法通常允许分配较少的内存，而 <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> 方法的执行速度通常更快。</span><span class="sxs-lookup"><span data-stu-id="002ce-399">The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="002ce-400"><xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> 是最差的事例数，包括当前所选的最糟糕的情况 <xref:System.Text.DecoderFallback> 。</span><span class="sxs-lookup"><span data-stu-id="002ce-400"><xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> is a worst-case number, including the worst case for the currently selected <xref:System.Text.DecoderFallback>.</span></span> <span data-ttu-id="002ce-401">如果使用可能大的字符串选择回退，则 <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> 可以返回大值。</span><span class="sxs-lookup"><span data-stu-id="002ce-401">If a fallback is chosen with a potentially large string, <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> can return large values.</span></span>  
  
 <span data-ttu-id="002ce-402">在大多数情况下，此方法为小字符串返回合理的数字。</span><span class="sxs-lookup"><span data-stu-id="002ce-402">In most cases, this method returns reasonable numbers for small strings.</span></span> <span data-ttu-id="002ce-403">对于大字符串，可能需要在超过更合理缓冲区的罕见情况下，在使用非常大的缓冲区和捕获错误之间进行选择。</span><span class="sxs-lookup"><span data-stu-id="002ce-403">For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</span></span> <span data-ttu-id="002ce-404">你可能还需要考虑使用或的其他方法 <xref:System.Text.UTF7Encoding.GetCharCount%2A> <xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="002ce-404">You might also want to consider a different approach using <xref:System.Text.UTF7Encoding.GetCharCount%2A> or <xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="002ce-405"><xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>与之间没有关系 <xref:System.Text.UTF7Encoding.GetBytes%2A> 。</span><span class="sxs-lookup"><span data-stu-id="002ce-405"><xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> has no relation to <xref:System.Text.UTF7Encoding.GetBytes%2A>.</span></span> <span data-ttu-id="002ce-406">如果你的应用程序需要与一起使用的类似函数 <xref:System.Text.UTF7Encoding.GetBytes%2A> ，则它应使用 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> 。</span><span class="sxs-lookup"><span data-stu-id="002ce-406">If your application needs a similar function to use with <xref:System.Text.UTF7Encoding.GetBytes%2A>, it should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="002ce-407">`GetMaxCharCount(N)`不一定与相同 `N* GetMaxCharCount(1)` 。</span><span class="sxs-lookup"><span data-stu-id="002ce-407">`GetMaxCharCount(N)` is not necessarily the same value as `N* GetMaxCharCount(1)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="002ce-408">下面的代码示例演示如何使用 <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> 方法返回通过对指定数量的字节进行解码所产生的最大字符数。</span><span class="sxs-lookup"><span data-stu-id="002ce-408">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method to return the maximum number of characters produced by decoding a specified number of bytes.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.GetMaxCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetMaxCharCount Example/CPP/getmaxcharcount-int32.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.GetMaxCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetMaxCharCount Example/CS/getmaxcharcount-int32.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.GetMaxCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetMaxCharCount Example/VB/getmaxcharcount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="002ce-409"><paramref name="byteCount" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="002ce-409"><paramref name="byteCount" /> is less than zero.</span></span>  
  
<span data-ttu-id="002ce-410">- 或 -</span><span class="sxs-lookup"><span data-stu-id="002ce-410">-or-</span></span> 
<span data-ttu-id="002ce-411">得到的字符数大于可作为 int 返回的最大数量。</span><span class="sxs-lookup"><span data-stu-id="002ce-411">The resulting number of characters is greater than the maximum number that can be returned as an int.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="002ce-412">发生回退（有关详细信息，请参阅<see href="/dotnet/standard/base-types/character-encoding">采用 .NET 的字符编码</see>）</span><span class="sxs-lookup"><span data-stu-id="002ce-412">A fallback occurred (for more information, see <see href="/dotnet/standard/base-types/character-encoding">Character Encoding in .NET</see>)</span></span> 
<span data-ttu-id="002ce-413">－和－</span><span class="sxs-lookup"><span data-stu-id="002ce-413">-and-</span></span> 
 <span data-ttu-id="002ce-414">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="002ce-414"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public override string GetString (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetString(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetString (bytes As Byte(), index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetString(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetString : byte[] * int * int -&gt; string" Usage="uTF7Encoding.GetString (bytes, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="002ce-415">包含要解码的字节序列的字节数组。</span><span class="sxs-lookup"><span data-stu-id="002ce-415">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="index"><span data-ttu-id="002ce-416">第一个要解码的字节的索引。</span><span class="sxs-lookup"><span data-stu-id="002ce-416">The index of the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="002ce-417">要解码的字节数。</span><span class="sxs-lookup"><span data-stu-id="002ce-417">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="002ce-418">将字节数组中某个范围的字节解码为一个字符串。</span><span class="sxs-lookup"><span data-stu-id="002ce-418">Decodes a range of bytes from a byte array into a string.</span></span></summary>
        <returns><span data-ttu-id="002ce-419">包含指定字节序列解码结果的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="002ce-419">A <see cref="T:System.String" /> containing the results of decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="002ce-420">要转换的数据（如从流中读取的数据）只能在顺序块中使用。</span><span class="sxs-lookup"><span data-stu-id="002ce-420">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="002ce-421">在这种情况下，或者如果数据量很大以致需要分为较小的块，则应用程序应 <xref:System.Text.Decoder> <xref:System.Text.Encoder> 分别使用 <xref:System.Text.UTF7Encoding.GetDecoder%2A> 方法或方法提供的或 <xref:System.Text.UTF7Encoding.GetEncoder%2A> 。</span><span class="sxs-lookup"><span data-stu-id="002ce-421">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="002ce-422"><xref:System.Text.UTF7Encoding> 不提供错误检测。</span><span class="sxs-lookup"><span data-stu-id="002ce-422"><xref:System.Text.UTF7Encoding> does not provide error detection.</span></span> <span data-ttu-id="002ce-423">如果遇到无效字节， <xref:System.Text.UTF7Encoding> 通常会发出无效字节。</span><span class="sxs-lookup"><span data-stu-id="002ce-423">When invalid bytes are encountered, <xref:System.Text.UTF7Encoding> generally emits the invalid bytes.</span></span> <span data-ttu-id="002ce-424">如果字节大于十六进制0x7F，则字节值将从零扩展到 Unicode 字符，结果存储在 `chars` 数组中，任何移位序列都将终止。</span><span class="sxs-lookup"><span data-stu-id="002ce-424">If a byte is larger than hexadecimal 0x7F, the byte value is zero-extended into a Unicode character, the result is stored in the `chars` array, and any shift sequence is terminated.</span></span> <span data-ttu-id="002ce-425">例如，如果要编码的字节是十六进制0x81，则生成的字符为 U + 0081。</span><span class="sxs-lookup"><span data-stu-id="002ce-425">For example, if the byte to encode is hexadecimal 0x81, the resulting character is U+0081.</span></span> <span data-ttu-id="002ce-426">出于安全原因，建议您的应用程序使用 <xref:System.Text.UTF8Encoding> 、 <xref:System.Text.UnicodeEncoding> 或 <xref:System.Text.UTF32Encoding> 并启用错误检测。</span><span class="sxs-lookup"><span data-stu-id="002ce-426">For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="002ce-427">下面的代码示例将字符串编码为一个字节数组，然后将这些字节解码为一个字符串。</span><span class="sxs-lookup"><span data-stu-id="002ce-427">The following code example encodes a string into an array of bytes, and then decodes the bytes back into a string.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.getstring#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.getstring/CPP/getstring.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.getstring#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.getstring/CS/getstring.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.getstring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.getstring/VB/getstring.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="002ce-428"><paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span><span class="sxs-lookup"><span data-stu-id="002ce-428"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="002ce-429"><paramref name="index" /> 或 <paramref name="count" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="002ce-429"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="002ce-430">- 或 -</span><span class="sxs-lookup"><span data-stu-id="002ce-430">-or-</span></span> 
 <span data-ttu-id="002ce-431"><paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="bytes" /> 中的有效范围。</span><span class="sxs-lookup"><span data-stu-id="002ce-431"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="002ce-432">发生了回退（如需进一步说明，请参阅 <see href="/dotnet/standard/base-types/character-encoding">.NET 中的字符编码</see>）。</span><span class="sxs-lookup"><span data-stu-id="002ce-432">A fallback occurred (see <see href="/dotnet/standard/base-types/character-encoding">Character Encoding in .NET</see> for fuller explanation).</span></span>
  
<span data-ttu-id="002ce-433">－和－</span><span class="sxs-lookup"><span data-stu-id="002ce-433">-and-</span></span> 
 <span data-ttu-id="002ce-434">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="002ce-434"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)" />
      </Docs>
    </Member>
  </Members>
</Type>
