<Type Name="EncodingExtensions" FullName="System.Text.EncodingExtensions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fffa6dfff61e668c1ac93686f95f441629d426ed" /><Meta Name="ms.sourcegitcommit" Value="13a6cb6fba7e05947f15d8d6cc802703ae9c21d5" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/18/2020" /><Meta Name="ms.locfileid" Value="90796739" /></Metadata><TypeSignature Language="C#" Value="public static class EncodingExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit EncodingExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.EncodingExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module EncodingExtensions" />
  <TypeSignature Language="C++ CLI" Value="public ref class EncodingExtensions abstract sealed" />
  <TypeSignature Language="F#" Value="type EncodingExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>为 <see cref="T:System.Text.Encoding" />、<see cref="T:System.Text.Encoder" /> 和 <see cref="T:System.Text.Decoder" /> 等编码类型提供扩展方法。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public static void Convert (this System.Text.Decoder decoder, ref System.Buffers.ReadOnlySequence&lt;byte&gt;? bytes, System.Buffers.IBufferWriter&lt;char&gt; writer, bool flush, out long charsUsed, out bool completed);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Convert(class System.Text.Decoder decoder, [in]valuetype System.Buffers.ReadOnlySequence`1&lt;unsigned int8&gt;&amp; bytes, class System.Buffers.IBufferWriter`1&lt;char&gt; writer, bool flush, [out] int64&amp; charsUsed, [out] bool&amp; completed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingExtensions.Convert(System.Text.Decoder,System.Buffers.ReadOnlySequence{System.Byte}@,System.Buffers.IBufferWriter{System.Char},System.Boolean,System.Int64@,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Convert (decoder As Decoder, ByRef bytes As ReadOnlySequence(Of Byte), writer As IBufferWriter(Of Char), flush As Boolean, ByRef charsUsed As Long, ByRef completed As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void Convert(System::Text::Decoder ^ decoder, System::Buffers::ReadOnlySequence&lt;System::Byte&gt; % bytes, System::Buffers::IBufferWriter&lt;char&gt; ^ writer, bool flush, [Runtime::InteropServices::Out] long % charsUsed, [Runtime::InteropServices::Out] bool % completed);" />
      <MemberSignature Language="F#" Value="static member Convert : System.Text.Decoder * ReadOnlySequence * System.Buffers.IBufferWriter&lt;char&gt; * bool * int64 * bool -&gt; unit" Usage="System.Text.EncodingExtensions.Convert (decoder, bytes, writer, flush, charsUsed, completed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="decoder" Type="System.Text.Decoder" RefType="this" />
        <Parameter Name="bytes" Type="System.Buffers.ReadOnlySequence&lt;System.Byte&gt;" RefType="ref">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="writer" Type="System.Buffers.IBufferWriter&lt;System.Char&gt;" />
        <Parameter Name="flush" Type="System.Boolean" />
        <Parameter Name="charsUsed" Type="System.Int64" RefType="out" />
        <Parameter Name="completed" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="decoder">解码器实例，可将字节转换为 <see langword="char" /> 值。</param>
        <param name="bytes">要解码的字节序列。</param>
        <param name="writer">已解码字符将写入的缓冲区。</param>
        <param name="flush">如果没有更多的数据要进行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <param name="charsUsed">此方法返回时，包含写入到 <paramref name="writer" /> 的字符计数。</param>
        <param name="completed">此方法返回时，如果 <paramref name="decoder" /> 不包含部分内部状态，则包含 <see langword="true" />；否则包含 <see langword="false" />。
如果 <paramref name="flush" /> 为 <see langword="true" />，则在该方法返回时，将始终设置为 <see langword="true" />。</param>
        <summary>将 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 转换为 UTF-16 编码字符，并将结果写入 <paramref name="writer" />。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.DecoderFallbackException"><paramref name="bytes" /> 包含无法解码的数据，<paramref name="decoder" /> 配置为在显示此类数据时引发。</exception>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public static void Convert (this System.Text.Decoder decoder, ReadOnlySpan&lt;byte&gt;? bytes, System.Buffers.IBufferWriter&lt;char&gt; writer, bool flush, out long charsUsed, out bool completed);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Convert(class System.Text.Decoder decoder, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes, class System.Buffers.IBufferWriter`1&lt;char&gt; writer, bool flush, [out] int64&amp; charsUsed, [out] bool&amp; completed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingExtensions.Convert(System.Text.Decoder,System.ReadOnlySpan{System.Byte},System.Buffers.IBufferWriter{System.Char},System.Boolean,System.Int64@,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Convert (decoder As Decoder, bytes As ReadOnlySpan(Of Byte), writer As IBufferWriter(Of Char), flush As Boolean, ByRef charsUsed As Long, ByRef completed As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void Convert(System::Text::Decoder ^ decoder, ReadOnlySpan&lt;System::Byte&gt; bytes, System::Buffers::IBufferWriter&lt;char&gt; ^ writer, bool flush, [Runtime::InteropServices::Out] long % charsUsed, [Runtime::InteropServices::Out] bool % completed);" />
      <MemberSignature Language="F#" Value="static member Convert : System.Text.Decoder * ReadOnlySpan&lt;byte&gt; * System.Buffers.IBufferWriter&lt;char&gt; * bool * int64 * bool -&gt; unit" Usage="System.Text.EncodingExtensions.Convert (decoder, bytes, writer, flush, charsUsed, completed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="decoder" Type="System.Text.Decoder" RefType="this" />
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="writer" Type="System.Buffers.IBufferWriter&lt;System.Char&gt;" />
        <Parameter Name="flush" Type="System.Boolean" />
        <Parameter Name="charsUsed" Type="System.Int64" RefType="out" />
        <Parameter Name="completed" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="decoder">解码器实例，可将字节转换为 <see langword="char" /> 值。</param>
        <param name="bytes">要解码的字节序列。</param>
        <param name="writer">已解码字符将写入的缓冲区。</param>
        <param name="flush">如果没有更多的数据要进行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <param name="charsUsed">此方法返回时，包含写入到 <paramref name="writer" /> 的 <see langword="char" /> 计数。</param>
        <param name="completed">此方法返回时，如果 <paramref name="decoder" /> 不包含部分内部状态，则包含 <see langword="true" />；否则包含 <see langword="false" />。
如果 <paramref name="flush" /> 为 <see langword="true" />，则在该方法返回时，将始终设置为 <see langword="true" />。</param>
        <summary>使用 <paramref name="decoder" /> 将 <see cref="T:System.ReadOnlySpan`1" /> 转换为字符，并将结果写入 <paramref name="writer" />。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.DecoderFallbackException"><paramref name="bytes" /> 包含无法编码的数据，<paramref name="decoder" /> 配置为在显示此类数据时引发。</exception>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public static void Convert (this System.Text.Encoder encoder, ref System.Buffers.ReadOnlySequence&lt;char&gt;? chars, System.Buffers.IBufferWriter&lt;byte&gt; writer, bool flush, out long bytesUsed, out bool completed);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Convert(class System.Text.Encoder encoder, [in]valuetype System.Buffers.ReadOnlySequence`1&lt;char&gt;&amp; chars, class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt; writer, bool flush, [out] int64&amp; bytesUsed, [out] bool&amp; completed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingExtensions.Convert(System.Text.Encoder,System.Buffers.ReadOnlySequence{System.Char}@,System.Buffers.IBufferWriter{System.Byte},System.Boolean,System.Int64@,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Convert (encoder As Encoder, ByRef chars As ReadOnlySequence(Of Char), writer As IBufferWriter(Of Byte), flush As Boolean, ByRef bytesUsed As Long, ByRef completed As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void Convert(System::Text::Encoder ^ encoder, System::Buffers::ReadOnlySequence&lt;char&gt; % chars, System::Buffers::IBufferWriter&lt;System::Byte&gt; ^ writer, bool flush, [Runtime::InteropServices::Out] long % bytesUsed, [Runtime::InteropServices::Out] bool % completed);" />
      <MemberSignature Language="F#" Value="static member Convert : System.Text.Encoder * ReadOnlySequence * System.Buffers.IBufferWriter&lt;byte&gt; * bool * int64 * bool -&gt; unit" Usage="System.Text.EncodingExtensions.Convert (encoder, chars, writer, flush, bytesUsed, completed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoder" Type="System.Text.Encoder" RefType="this" />
        <Parameter Name="chars" Type="System.Buffers.ReadOnlySequence&lt;System.Char&gt;" RefType="ref">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="writer" Type="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />
        <Parameter Name="flush" Type="System.Boolean" />
        <Parameter Name="bytesUsed" Type="System.Int64" RefType="out" />
        <Parameter Name="completed" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="encoder">编码器实例，可将 <see langword="char" /> 值转换为字节。</param>
        <param name="chars">要编码的字符序列。</param>
        <param name="writer">已编码字节将写入的缓冲区。</param>
        <param name="flush">如果没有更多的数据要进行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <param name="bytesUsed">此方法返回时，包含写入到 <paramref name="writer" /> 的 <see langword="byte" /> 计数。</param>
        <param name="completed">此方法返回时，如果在转换 <paramref name="bytesUsed" /> 之前全部输入，则包含 <see langword="true" />；否则包含 <see langword="false" />。 如果 <paramref name="flush" /> 为 <see langword="true" />，则在该方法返回时，将始终设置为 <see langword="true" />。</param>
        <summary>将 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 转换为已编码的字节，并将结果写入 <paramref name="writer" />。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.EncoderFallbackException"><paramref name="chars" /> 包含无法编码的数据，<paramref name="encoder" /> 配置为在显示此类数据时引发。</exception>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public static void Convert (this System.Text.Encoder encoder, ReadOnlySpan&lt;char&gt;? chars, System.Buffers.IBufferWriter&lt;byte&gt; writer, bool flush, out long bytesUsed, out bool completed);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Convert(class System.Text.Encoder encoder, valuetype System.ReadOnlySpan`1&lt;char&gt; chars, class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt; writer, bool flush, [out] int64&amp; bytesUsed, [out] bool&amp; completed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingExtensions.Convert(System.Text.Encoder,System.ReadOnlySpan{System.Char},System.Buffers.IBufferWriter{System.Byte},System.Boolean,System.Int64@,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Convert (encoder As Encoder, chars As ReadOnlySpan(Of Char), writer As IBufferWriter(Of Byte), flush As Boolean, ByRef bytesUsed As Long, ByRef completed As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void Convert(System::Text::Encoder ^ encoder, ReadOnlySpan&lt;char&gt; chars, System::Buffers::IBufferWriter&lt;System::Byte&gt; ^ writer, bool flush, [Runtime::InteropServices::Out] long % bytesUsed, [Runtime::InteropServices::Out] bool % completed);" />
      <MemberSignature Language="F#" Value="static member Convert : System.Text.Encoder * ReadOnlySpan&lt;char&gt; * System.Buffers.IBufferWriter&lt;byte&gt; * bool * int64 * bool -&gt; unit" Usage="System.Text.EncodingExtensions.Convert (encoder, chars, writer, flush, bytesUsed, completed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoder" Type="System.Text.Encoder" RefType="this" />
        <Parameter Name="chars" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="writer" Type="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />
        <Parameter Name="flush" Type="System.Boolean" />
        <Parameter Name="bytesUsed" Type="System.Int64" RefType="out" />
        <Parameter Name="completed" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="encoder">编码器实例，可将 <see langword="char" /> 值转换为字节。</param>
        <param name="chars">要编码的字符序列。</param>
        <param name="writer">已编码字节将写入的缓冲区。</param>
        <param name="flush">如果没有更多的数据要进行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <param name="bytesUsed">此方法返回时，包含写入到 <paramref name="writer" /> 的 <see langword="byte" /> 计数。</param>
        <param name="completed">此方法返回时，如果 <paramref name="encoder" /> 不包含部分内部状态，则包含 <see langword="true" />；否则包含 <see langword="false" />。
如果 <paramref name="flush" /> 为 <see langword="true" />，则在该方法返回时，将始终设置为 <see langword="true" />。</param>
        <summary>使用 <paramref name="encoder" /> 将 <see cref="T:System.ReadOnlySpan`1" /> 转换为字节，并将结果写入 <paramref name="writer" />。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.EncoderFallbackException"><paramref name="chars" /> 包含无法编码的数据，<paramref name="encoder" /> 配置为在显示此类数据时引发。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public static byte[] GetBytes (this System.Text.Encoding encoding, ref System.Buffers.ReadOnlySequence&lt;char&gt;? chars);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] GetBytes(class System.Text.Encoding encoding, [in]valuetype System.Buffers.ReadOnlySequence`1&lt;char&gt;&amp; chars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingExtensions.GetBytes(System.Text.Encoding,System.Buffers.ReadOnlySequence{System.Char}@)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetBytes (encoding As Encoding, ByRef chars As ReadOnlySequence(Of Char)) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static cli::array &lt;System::Byte&gt; ^ GetBytes(System::Text::Encoding ^ encoding, System::Buffers::ReadOnlySequence&lt;char&gt; % chars);" />
      <MemberSignature Language="F#" Value="static member GetBytes : System.Text.Encoding * ReadOnlySequence -&gt; byte[]" Usage="System.Text.EncodingExtensions.GetBytes (encoding, chars)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoding" Type="System.Text.Encoding" RefType="this" />
        <Parameter Name="chars" Type="System.Buffers.ReadOnlySequence&lt;System.Char&gt;" RefType="ref">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="encoding">表示应如何对 <paramref name="chars" /> 中的数据进行编码的编码。</param>
        <param name="chars">要编码为字节的序列。</param>
        <summary>使用指定的 <see cref="T:System.Text.Encoding" /> 将指定的 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 编码到 <see cref="T:System.Byte" /> 数组中。</summary>
        <returns>一个表示 <paramref name="chars" /> 编码内容的 <see cref="T:System.Byte" /> 数组。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.EncoderFallbackException"><paramref name="chars" /> 包含无法编码的数据，<paramref name="encoding" /> 配置为在显示此类数据时引发。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public static long GetBytes (this System.Text.Encoding encoding, ref System.Buffers.ReadOnlySequence&lt;char&gt;? chars, System.Buffers.IBufferWriter&lt;byte&gt; writer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 GetBytes(class System.Text.Encoding encoding, [in]valuetype System.Buffers.ReadOnlySequence`1&lt;char&gt;&amp; chars, class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt; writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingExtensions.GetBytes(System.Text.Encoding,System.Buffers.ReadOnlySequence{System.Char}@,System.Buffers.IBufferWriter{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetBytes (encoding As Encoding, ByRef chars As ReadOnlySequence(Of Char), writer As IBufferWriter(Of Byte)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long GetBytes(System::Text::Encoding ^ encoding, System::Buffers::ReadOnlySequence&lt;char&gt; % chars, System::Buffers::IBufferWriter&lt;System::Byte&gt; ^ writer);" />
      <MemberSignature Language="F#" Value="static member GetBytes : System.Text.Encoding * ReadOnlySequence * System.Buffers.IBufferWriter&lt;byte&gt; -&gt; int64" Usage="System.Text.EncodingExtensions.GetBytes (encoding, chars, writer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoding" Type="System.Text.Encoding" RefType="this" />
        <Parameter Name="chars" Type="System.Buffers.ReadOnlySequence&lt;System.Char&gt;" RefType="ref">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="writer" Type="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="encoding">表示应如何对 <paramref name="chars" /> 中的数据进行编码的编码。</param>
        <param name="chars">应对其内容进行编码的 <see cref="T:System.Buffers.ReadOnlySequence`1" />。</param>
        <param name="writer">已编码字节将写入的缓冲区。</param>
        <summary>使用指定的 <see cref="T:System.Text.Encoding" /> 将指定的 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 解码为 <see langword="byte" />，并将结果写入 <paramref name="writer" />。</summary>
        <returns>写入到 <paramref name="writer" /> 的字节数。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.EncoderFallbackException"><paramref name="chars" /> 包含无法编码的数据，<paramref name="encoding" /> 配置为在显示此类数据时引发。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public static int GetBytes (this System.Text.Encoding? encoding, ref System.Buffers.ReadOnlySequence&lt;char&gt; chars, Span&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetBytes(class System.Text.Encoding encoding, [in]valuetype System.Buffers.ReadOnlySequence`1&lt;char&gt;&amp; chars, valuetype System.Span`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingExtensions.GetBytes(System.Text.Encoding,System.Buffers.ReadOnlySequence{System.Char}@,System.Span{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetBytes (encoding As Encoding, ByRef chars As ReadOnlySequence(Of Char), bytes As Span(Of Byte)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int GetBytes(System::Text::Encoding ^ encoding, System::Buffers::ReadOnlySequence&lt;char&gt; % chars, Span&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="static member GetBytes : System.Text.Encoding * ReadOnlySequence * Span&lt;byte&gt; -&gt; int" Usage="System.Text.EncodingExtensions.GetBytes (encoding, chars, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoding" Type="System.Text.Encoding" RefType="this" />
        <Parameter Name="chars" Type="System.Buffers.ReadOnlySequence&lt;System.Char&gt;" RefType="ref">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="bytes" Type="System.Span&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="encoding">表示应如何对 <paramref name="chars" /> 中的数据进行编码的编码。</param>
        <param name="chars">要编码为字节的序列。</param>
        <param name="bytes">已编码字节将写入的目标缓冲区。</param>
        <summary>使用指定的 <see cref="T:System.Text.Encoding" /> 将指定的 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 编码为 <see langword="byte" />，并将结果输出到 <paramref name="bytes" />。</summary>
        <returns>写入到 <paramref name="bytes" /> 的字节数。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="bytes" /> 不够大，无法包含编码形式的 <paramref name="chars" />。</exception>
        <exception cref="T:System.Text.EncoderFallbackException"><paramref name="chars" /> 包含无法编码的数据，<paramref name="encoding" /> 配置为在显示此类数据时引发。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public static long GetBytes (this System.Text.Encoding encoding, ReadOnlySpan&lt;char&gt;? chars, System.Buffers.IBufferWriter&lt;byte&gt; writer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 GetBytes(class System.Text.Encoding encoding, valuetype System.ReadOnlySpan`1&lt;char&gt; chars, class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt; writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingExtensions.GetBytes(System.Text.Encoding,System.ReadOnlySpan{System.Char},System.Buffers.IBufferWriter{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetBytes (encoding As Encoding, chars As ReadOnlySpan(Of Char), writer As IBufferWriter(Of Byte)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long GetBytes(System::Text::Encoding ^ encoding, ReadOnlySpan&lt;char&gt; chars, System::Buffers::IBufferWriter&lt;System::Byte&gt; ^ writer);" />
      <MemberSignature Language="F#" Value="static member GetBytes : System.Text.Encoding * ReadOnlySpan&lt;char&gt; * System.Buffers.IBufferWriter&lt;byte&gt; -&gt; int64" Usage="System.Text.EncodingExtensions.GetBytes (encoding, chars, writer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoding" Type="System.Text.Encoding" RefType="this" />
        <Parameter Name="chars" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="writer" Type="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="encoding">表示应如何对 <paramref name="chars" /> 中的数据进行编码的编码。</param>
        <param name="chars">要编码为字节的序列。</param>
        <param name="writer">已编码字节将写入的缓冲区。</param>
        <summary>使用指定的 <see cref="T:System.Text.Encoding" /> 将指定的 <see cref="T:System.ReadOnlySpan`1" /> 编码为 <see langword="byte" />，并将结果写入 <paramref name="writer" />。</summary>
        <returns>写入到 <paramref name="writer" /> 的字节数。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.EncoderFallbackException"><paramref name="chars" /> 包含无法编码的数据，<paramref name="encoding" /> 配置为在显示此类数据时引发。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public static long GetChars (this System.Text.Encoding encoding, ref System.Buffers.ReadOnlySequence&lt;byte&gt;? bytes, System.Buffers.IBufferWriter&lt;char&gt; writer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 GetChars(class System.Text.Encoding encoding, [in]valuetype System.Buffers.ReadOnlySequence`1&lt;unsigned int8&gt;&amp; bytes, class System.Buffers.IBufferWriter`1&lt;char&gt; writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingExtensions.GetChars(System.Text.Encoding,System.Buffers.ReadOnlySequence{System.Byte}@,System.Buffers.IBufferWriter{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetChars (encoding As Encoding, ByRef bytes As ReadOnlySequence(Of Byte), writer As IBufferWriter(Of Char)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long GetChars(System::Text::Encoding ^ encoding, System::Buffers::ReadOnlySequence&lt;System::Byte&gt; % bytes, System::Buffers::IBufferWriter&lt;char&gt; ^ writer);" />
      <MemberSignature Language="F#" Value="static member GetChars : System.Text.Encoding * ReadOnlySequence * System.Buffers.IBufferWriter&lt;char&gt; -&gt; int64" Usage="System.Text.EncodingExtensions.GetChars (encoding, bytes, writer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoding" Type="System.Text.Encoding" RefType="this" />
        <Parameter Name="bytes" Type="System.Buffers.ReadOnlySequence&lt;System.Byte&gt;" RefType="ref">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="writer" Type="System.Buffers.IBufferWriter&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="encoding">表示应如何对 <paramref name="bytes" /> 中的数据进行解码的编码。</param>
        <param name="bytes">应对其字节进行解码的序列。</param>
        <param name="writer">已解码字符将写入的缓冲区。</param>
        <summary>使用指定的 <see cref="T:System.Text.Encoding" /> 将指定的 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 解码为 <see langword="char" />，并将结果写入 <paramref name="writer" />。</summary>
        <returns>写入 <paramref name="writer" /> 的字符数。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.DecoderFallbackException"><paramref name="bytes" /> 包含无法解码的数据，<paramref name="encoding" /> 配置为在显示此类数据时引发。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public static int GetChars (this System.Text.Encoding? encoding, ref System.Buffers.ReadOnlySequence&lt;byte&gt; bytes, Span&lt;char&gt; chars);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetChars(class System.Text.Encoding encoding, [in]valuetype System.Buffers.ReadOnlySequence`1&lt;unsigned int8&gt;&amp; bytes, valuetype System.Span`1&lt;char&gt; chars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingExtensions.GetChars(System.Text.Encoding,System.Buffers.ReadOnlySequence{System.Byte}@,System.Span{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetChars (encoding As Encoding, ByRef bytes As ReadOnlySequence(Of Byte), chars As Span(Of Char)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int GetChars(System::Text::Encoding ^ encoding, System::Buffers::ReadOnlySequence&lt;System::Byte&gt; % bytes, Span&lt;char&gt; chars);" />
      <MemberSignature Language="F#" Value="static member GetChars : System.Text.Encoding * ReadOnlySequence * Span&lt;char&gt; -&gt; int" Usage="System.Text.EncodingExtensions.GetChars (encoding, bytes, chars)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoding" Type="System.Text.Encoding" RefType="this" />
        <Parameter Name="bytes" Type="System.Buffers.ReadOnlySequence&lt;System.Byte&gt;" RefType="ref">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="chars" Type="System.Span&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="encoding">表示如何对 <paramref name="bytes" /> 中的数据进行编码的编码。</param>
        <param name="bytes">要解码为字符的序列。</param>
        <param name="chars">已解码字符将写入到的目标缓冲区。</param>
        <summary>使用指定的 <see cref="T:System.Text.Encoding" /> 将指定的 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 解码为 <see langword="char" />，并将结果输出到 <paramref name="chars" />。</summary>
        <returns>写入 <paramref name="chars" /> 的字符数。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="chars" /> 不够大，无法包含编码形式的 <paramref name="bytes" />。</exception>
        <exception cref="T:System.Text.DecoderFallbackException"><paramref name="bytes" /> 包含无法解码的数据，<paramref name="encoding" /> 配置为在显示此类数据时引发。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public static long GetChars (this System.Text.Encoding encoding, ReadOnlySpan&lt;byte&gt;? bytes, System.Buffers.IBufferWriter&lt;char&gt; writer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 GetChars(class System.Text.Encoding encoding, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes, class System.Buffers.IBufferWriter`1&lt;char&gt; writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingExtensions.GetChars(System.Text.Encoding,System.ReadOnlySpan{System.Byte},System.Buffers.IBufferWriter{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetChars (encoding As Encoding, bytes As ReadOnlySpan(Of Byte), writer As IBufferWriter(Of Char)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long GetChars(System::Text::Encoding ^ encoding, ReadOnlySpan&lt;System::Byte&gt; bytes, System::Buffers::IBufferWriter&lt;char&gt; ^ writer);" />
      <MemberSignature Language="F#" Value="static member GetChars : System.Text.Encoding * ReadOnlySpan&lt;byte&gt; * System.Buffers.IBufferWriter&lt;char&gt; -&gt; int64" Usage="System.Text.EncodingExtensions.GetChars (encoding, bytes, writer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoding" Type="System.Text.Encoding" RefType="this" />
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="writer" Type="System.Buffers.IBufferWriter&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="encoding">表示应如何对 <paramref name="bytes" /> 中的数据进行解码的编码。</param>
        <param name="bytes">要解码的字节范围。</param>
        <param name="writer">已解码字符将写入的缓冲区。</param>
        <summary>使用指定的 <see cref="T:System.Text.Encoding" /> 将指定的 <see cref="T:System.ReadOnlySpan`1" /> 解码为 <see langword="char" />，并将结果写入 <paramref name="writer" />。</summary>
        <returns>写入 <paramref name="writer" /> 的字符数。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.DecoderFallbackException"><paramref name="bytes" /> 包含无法解码的数据，<paramref name="encoding" /> 配置为在显示此类数据时引发。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public static string GetString (this System.Text.Encoding encoding, ref System.Buffers.ReadOnlySequence&lt;byte&gt;? bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetString(class System.Text.Encoding encoding, [in]valuetype System.Buffers.ReadOnlySequence`1&lt;unsigned int8&gt;&amp; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingExtensions.GetString(System.Text.Encoding,System.Buffers.ReadOnlySequence{System.Byte}@)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetString (encoding As Encoding, ByRef bytes As ReadOnlySequence(Of Byte)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::String ^ GetString(System::Text::Encoding ^ encoding, System::Buffers::ReadOnlySequence&lt;System::Byte&gt; % bytes);" />
      <MemberSignature Language="F#" Value="static member GetString : System.Text.Encoding * ReadOnlySequence -&gt; string" Usage="System.Text.EncodingExtensions.GetString (encoding, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoding" Type="System.Text.Encoding" RefType="this" />
        <Parameter Name="bytes" Type="System.Buffers.ReadOnlySequence&lt;System.Byte&gt;" RefType="ref">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="encoding">表示如何对 <paramref name="bytes" /> 中的数据进行编码的编码。</param>
        <param name="bytes">要解码为字符的序列。</param>
        <summary>使用指定的 <see cref="T:System.Text.Encoding" /> 将指定的 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 解码到 <see cref="T:System.String" />。</summary>
        <returns>一个 <see cref="T:System.String" />，它表示 <paramref name="bytes" /> 的解码内容。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.DecoderFallbackException"><paramref name="bytes" /> 包含无法解码的数据，<paramref name="encoding" /> 配置为在显示此类数据时引发。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
