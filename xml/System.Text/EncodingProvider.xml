<Type Name="EncodingProvider" FullName="System.Text.EncodingProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8b64830272ed09991efd835702b3ce4342944ecc" /><Meta Name="ms.sourcegitcommit" Value="9506e50ec7beb4fa30206b9840dc546b035a6600" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/23/2020" /><Meta Name="ms.locfileid" Value="86982808" /></Metadata><TypeSignature Language="C#" Value="public abstract class EncodingProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit EncodingProvider extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.EncodingProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class EncodingProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class EncodingProvider abstract" />
  <TypeSignature Language="F#" Value="type EncodingProvider = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Text.Encoding" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Text.Encoding" FromVersion="4.1.0.0" To="System.Runtime" ToVersion="4.2.0.0" FrameworkAlternate="netcore-2.0" />
    <TypeForwarding From="System.Text.Encoding" FromVersion="4.1.1.0" To="System.Runtime" ToVersion="4.2.1.0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
    <TypeForwarding From="System.Text.Encoding" FromVersion="4.1.2.0" To="System.Runtime" ToVersion="4.2.2.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供编码提供程序的基类，后者提供在特定平台上不可用的编码。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 编码提供程序提供特定目标平台上不可用的其他编码。  
  
 Windows 桌面上的 .NET Framework 支持大量字符编码和代码页。 通过调用方法，可以获取 Windows 桌面上 .NET Framework 的完整编码列表 <xref:System.Text.Encoding.GetEncodings%2A?displayProperty=nameWithType> 。 另一方面，.NET Core 默认仅支持以下编码：  
  
-   ASCII (代码页 20127) ，由 <xref:System.Text.Encoding.ASCII%2A?displayProperty=nameWithType> 属性返回。  
  
-   ISO-8859-1 (代码页 28591) 。  
  
-   UTF-7 (代码页 65000) ，由 <xref:System.Text.Encoding.UTF7%2A?displayProperty=nameWithType> 属性返回。  
  
-   UTF-8 (代码页 65001) ，由 <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> 属性返回。  
  
-   UTF-16 和 UTF-16LE (代码页 1200) ，由 <xref:System.Text.Encoding.Unicode%2A> 属性返回。  
  
-   UTF-16BE (代码页 1201) ，它是通过调用 <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> 值为的或构造函数进行实例化的 `bigEndian` `true` 。  
  
-   32和 32LE (代码页 12000) ，由 <xref:System.Text.Encoding.UTF32%2A?displayProperty=nameWithType> 属性返回。  
  
-   32BE (代码页 12001) ，它是通过调用 <xref:System.Text.UTF32Encoding> 具有参数的构造函数 `bigEndian` 并 `true` 在方法调用中提供的值来进行实例化的。  
  
 从 .NET Framework 4.6 开始， <xref:System.Text.EncodingProvider> 是使 .NET Framework 可以使用其他不可用编码的基类。 这包括以下步骤：  
  
1.  定义的子类， <xref:System.Text.EncodingProvider> 该子类重写两个抽象 <xref:System.Text.EncodingProvider.GetEncoding%2A> 重载： <xref:System.Text.EncodingProvider.GetEncoding%28System.Int32%29> 和 <xref:System.Text.EncodingProvider.GetEncoding%28System.String%29> 。 这些重载按代码页标识符和名称返回其他不受支持的编码。 请注意，如果 <xref:System.Text.EncodingProvider.GetEncoding%28System.Int32%29> 使用参数0调用方法，还可以选择返回默认编码。  
  
2.  您也可以选择重写虚拟 <xref:System.Text.EncodingProvider.GetEncoding%28System.Int32%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29> 和 <xref:System.Text.EncodingProvider.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29> 方法。 在大多数情况下，这并不是必需的，因为基类提供了默认实现。  
  
3.  将该 <xref:System.Text.EncodingProvider> 实例传递给 <xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=nameWithType> 方法，以使该对象提供的编码 <xref:System.Text.EncodingProvider> 可供公共语言运行时使用。  
  
4.  调用 <xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType> 重载以检索编码。 <xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType>方法将调用相应的 <xref:System.Text.EncodingProvider.GetEncoding%2A?displayProperty=nameWithType> 来确定它是否可以提供请求的编码。  
  
 .NET Framework 类库提供一个静态属性，该属性 <xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=nameWithType> 返回一个 <xref:System.Text.EncodingProvider> 对象，该对象可在桌面 .NET Framework 类库可用的应用程序中使用完整的一组编码 [!INCLUDE[net_core](~/includes/net-core-md.md)] 。 此外，你可以从类派生， <xref:System.Text.EncodingProvider> 以使自己的编码可用。  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Text.Encoding.GetEncoding(System.String)" />
    <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/system.text.codepagesencodingprovider.instance(v=vs.110).aspx">System.text.codepagesencodingprovider 属性</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EncodingProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EncodingProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Text.EncodingProvider" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEncoding">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回一个编码。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public abstract System.Text.Encoding GetEncoding (int codepage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(int32 codepage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEncoding (codepage As Integer) As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Text::Encoding ^ GetEncoding(int codepage);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : int -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding codepage" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codepage" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="codepage">所请求编码的代码页标识符。</param>
        <summary>返回与指定代码页标识符关联的编码。</summary>
        <returns>与指定代码页关联的编码，如果此 <see cref="T:System.Text.EncodingProvider" /> 无法返回对应于 <paramref name="codepage" /> 的有效编码，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[ 

## Remarks

### <a name="notes-to-inheritors"></a>对继承者的说明

重写 [encoding.getencoding (Int32) ](<xref:System.Text.EncodingProvider.GetEncoding(System.Int32)>) 方法以返回子类支持的编码或编码 <xref:System.Text.EncodingProvider> 。 当用户代码尝试通过调用 [encoding.getencoding (Int32) ](<xref:System.Text.EncodingProvider.GetEncoding(System.Int32)>) 方法来检索编码时，该方法会将 `codepage` 标识符传递给每个注册的编码提供程序，直到一个返回有效编码。 如果 none 返回有效编码，则 [encoding.getencoding (Int32) ](<xref:System.Text.EncodingProvider.GetEncoding(System.Int32)>) 方法尝试检索其代码页标识符为的缓存编码 `codepage` 。 因此，如果不 `codepage` 是您支持的编码的代码页标识符，则该方法应返回 `null` ; 它不应引发异常。
        
请注意，如果参数的值为0，则还可以选择返回默认代码页 `codepage` 。

## <a name="notes-to-callers"></a>调用方说明
        
此方法由 [encoding.getencoding (Int32) ](<xref:System.Text.Encoding.GetEncoding(System.Int32)>) 方法调用。 不应直接从用户代码中调用它。

        ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>重写 <see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32)" /> 方法以返回子类支持的编码或编码 <see cref="T:System.Text.EncodingProvider" /> 。 当用户代码尝试通过调用方法来检索编码时 <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> ，方法会将标识符传递 <paramref name="codepage" /> 给每个已注册的编码提供程序，直到一个返回有效编码。 如果 none 返回有效编码，此 <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> 方法会尝试检索其代码页标识符为的缓存编码 <paramref name="codepage" /> 。 因此，如果不 <paramref name="codepage" /> 是您支持的编码的代码页标识符，则该方法应返回 <see langword="null" /> ; 它不应引发异常。</para></block>
        <block subset="none" type="usage"><para>此方法由 <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> 方法调用。 不应直接从用户代码中调用它。</para></block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public abstract System.Text.Encoding GetEncoding (string name);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEncoding (name As String) As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Text::Encoding ^ GetEncoding(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : string -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding name" />
      <MemberSignature Language="C#" Value="public abstract System.Text.Encoding? GetEncoding (string name);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">所请求编码的名称。</param>
        <summary>返回具有指定名称的编码。</summary>
        <returns>与指定名称关联的编码，如果此 <see cref="T:System.Text.EncodingProvider" /> 无法返回对应于 <paramref name="name" /> 的有效编码，则为 <see langword="null" /> 。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[ 
      
## <a name="notes-to-inheritors"></a>对继承者的说明 
                  
重写 [encoding.getencoding (String) ](<xref:System.Text.EncodingProvider.GetEncoding(System.String)>) 方法以返回子类支持的编码或编码 <xref:System.Text.EncodingProvider> 。 当用户代码尝试通过调用 [encoding.getencoding (字符串) ](<xref:System.Text.EncodingProvider.GetEncoding(System.String)>) 方法来检索编码时，该方法会将 `name` 参数传递给每个注册的编码提供程序，直到一个返回有效编码。 如果 none 返回有效编码，则 [encoding.getencoding (字符串) ](<xref:System.Text.EncodingProvider.GetEncoding(System.String)>) 方法尝试检索其名称为的缓存编码 `name` 。 因此，如果不 `name` 是您支持的编码的名称，则该方法应返回 `null` 。 方法应引发异常的唯一情况是，如果 `name` 为 `null` 。

## <a name="notes-to-callers"></a>调用方说明

此方法由 [encoding.getencoding (String) ](<xref:System.Text.Encoding.GetEncoding(System.String)>) 方法调用。 不应直接从用户代码中调用它。
        ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>重写 <see cref="M:System.Text.EncodingProvider.GetEncoding(System.String)" /> 方法以返回子类支持的编码或编码 <see cref="T:System.Text.EncodingProvider" /> 。 当用户代码尝试通过调用方法来检索编码时 <see cref="M:System.Text.Encoding.GetEncoding(System.String)" /> ，方法会将参数传递 <paramref name="name" /> 给每个已注册的编码提供程序，直到一个返回有效编码。 如果 none 返回有效编码，此 <see cref="M:System.Text.Encoding.GetEncoding(System.String)" /> 方法会尝试检索名称为的缓存编码 <paramref name="name" /> 。 因此，如果不 <paramref name="name" /> 是您支持的编码的名称，则该方法应返回 <see langword="null" /> 。 方法应引发异常的唯一情况是，如果 <paramref name="name" /> 为 <see langword="null" /> 。</para></block>
        <block subset="none" type="usage"><para>此方法由 <see cref="M:System.Text.Encoding.GetEncoding(System.String)" /> 方法调用。 不应直接从用户代码中调用它。</para></block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public virtual System.Text.Encoding GetEncoding (int codepage, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(int32 codepage, class System.Text.EncoderFallback encoderFallback, class System.Text.DecoderFallback decoderFallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEncoding (codepage As Integer, encoderFallback As EncoderFallback, decoderFallback As DecoderFallback) As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Text::Encoding ^ GetEncoding(int codepage, System::Text::EncoderFallback ^ encoderFallback, System::Text::DecoderFallback ^ decoderFallback);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : int * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding&#xA;override this.GetEncoding : int * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding (codepage, encoderFallback, decoderFallback)" />
      <MemberSignature Language="C#" Value="public virtual System.Text.Encoding? GetEncoding (int codepage, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codepage" Type="System.Int32" />
        <Parameter Name="encoderFallback" Type="System.Text.EncoderFallback" />
        <Parameter Name="decoderFallback" Type="System.Text.DecoderFallback" />
      </Parameters>
      <Docs>
        <param name="codepage">所请求编码的代码页标识符。</param>
        <param name="encoderFallback">一个对象，在无法用此编码对字符进行编码时，该对象可用来提供错误处理过程。</param>
        <param name="decoderFallback">一个对象，在无法用此编码对字节序列进行解码时，该对象可用来提供错误处理过程。</param>
        <summary>返回与指定代码页标识符关联的编码。 参数指定一个错误处理程序，用于处理无法编码的字符和无法解码的字节序列。</summary>
        <returns>与指定代码页关联的编码，如果此 <see cref="T:System.Text.EncodingProvider" /> 无法返回对应于 <paramref name="codepage" /> 的有效编码，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `encoderFallback`和 `decoderFallback` 参数是一些对象，这些对象定义在编码器无法将字符转换为字节序列或解码器无法将字节序列转换为字符时所使用的回退策略。 .NET Framework 提供以下回退机制：  
  
-   异常回退。 如果 `encoderFallback` 参数是的实例 <xref:System.Text.EncoderExceptionFallback> ，或 `decoderExceptionFallback` 参数是的实例，则 <xref:System.Text.DecoderExceptionFallback> 编码方法会在无法对字符进行编码时引发异常，如果无法对字节序列进行解码，则解码方法会引发异常。  
  
-   替换回退。 如果 `encoderFallback` 参数是的实例 <xref:System.Text.EncoderReplacementFallback> ，或 `decoderExceptionFallback` 参数是的实例 <xref:System.Text.DecoderReplacementFallback> ，则编码和解码方法会将替换字符串替换为无法编码的字符，不能对字节序列进行解码。 如果通过调用无参数的构造函数来实例化替换回退对象，则替换字符为 "？"。 如果调用 <xref:System.Text.EncoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType> 或 <xref:System.Text.DecoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType> 构造函数，则可以指定替换字符串。  
  
-   最佳回退。 可以从 <xref:System.Text.EncoderFallback> 或 <xref:System.Text.DecoderFallback> 类派生，以实现最佳的替换机制。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>由于对此方法的调用将使用您的 <see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32)" /> 方法的实现，因此您不必重写它。 当用户代码尝试通过调用方法来检索编码时 <see cref="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> ，方法会将标识符传递 <paramref name="codepage" /> 给每个已注册的编码提供程序，直到一个返回有效编码。 如果 none 返回有效编码，此 <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> 方法会尝试检索其代码页标识符为的缓存编码 <paramref name="codepage" /> 。 因此，如果您选择重写 <see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> 方法，则当不是您支持的编码的代码页标识符时，重写应返回 <see langword="null" /> <paramref name="codepage" /> ; 它绝不会引发异常。</para></block>
        <block subset="none" type="usage"><para>此方法由 <see cref="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> 方法调用。 不应直接从用户代码中调用它。</para></block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public virtual System.Text.Encoding GetEncoding (string name, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(string name, class System.Text.EncoderFallback encoderFallback, class System.Text.DecoderFallback decoderFallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEncoding (name As String, encoderFallback As EncoderFallback, decoderFallback As DecoderFallback) As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Text::Encoding ^ GetEncoding(System::String ^ name, System::Text::EncoderFallback ^ encoderFallback, System::Text::DecoderFallback ^ decoderFallback);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : string * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding&#xA;override this.GetEncoding : string * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding (name, encoderFallback, decoderFallback)" />
      <MemberSignature Language="C#" Value="public virtual System.Text.Encoding? GetEncoding (string name, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="encoderFallback" Type="System.Text.EncoderFallback" />
        <Parameter Name="decoderFallback" Type="System.Text.DecoderFallback" />
      </Parameters>
      <Docs>
        <param name="name">首选编码的名称。</param>
        <param name="encoderFallback">一个对象，在无法用此编码对字符进行编码时，该对象可用来提供错误处理过程。</param>
        <param name="decoderFallback">一个对象，在无法用当前编码对字节序列进行解码时，该对象可用来提供错误处理过程。</param>
        <summary>返回与指定名称关联的编码。 参数指定一个错误处理程序，用于处理无法编码的字符和无法解码的字节序列。</summary>
        <returns>与指定名称关联的编码，如果此 <see cref="T:System.Text.EncodingProvider" /> 无法返回对应于 <paramref name="name" /> 的有效编码，则为 <see langword="null" /> 。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `encoderFallback`和 `decoderFallback` 参数是一些对象，这些对象定义在编码器无法将字符转换为字节序列或解码器无法将字节序列转换为字符时所使用的回退策略。 .NET Framework 提供以下回退机制：  
  
-   异常回退。 如果 `encoderFallback` 参数是的实例 <xref:System.Text.EncoderExceptionFallback> ，或 `decoderExceptionFallback` 参数是的实例，则 <xref:System.Text.DecoderExceptionFallback> 编码方法会在无法对字符进行编码时引发异常，如果无法对字节序列进行解码，则解码方法会引发异常。  
  
-   替换回退。 如果 `encoderFallback` 参数是的实例 <xref:System.Text.EncoderReplacementFallback> ，或 `decoderExceptionFallback` 参数是的实例 <xref:System.Text.DecoderReplacementFallback> ，则编码和解码方法会将替换字符串替换为无法编码的字符，不能对字节序列进行解码。 如果通过调用无参数的构造函数来实例化替换回退对象，则替换字符为 "？"。 如果调用 <xref:System.Text.EncoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType> 或 <xref:System.Text.DecoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType> 构造函数，则可以指定替换字符串。  
  
-   最佳回退。 可以从 <xref:System.Text.EncoderFallback> 或 <xref:System.Text.DecoderFallback> 类派生，以实现最佳的替换机制。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>由于对此方法的调用将使用您的 <see cref="M:System.Text.EncodingProvider.GetEncoding(System.String)" /> 方法的实现，因此您不必重写它。 当用户代码尝试通过调用方法来检索编码时 <see cref="M:System.Text.EncodingProvider.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> ，方法会将标识符传递 <paramref name="codepage" /> 给每个已注册的编码提供程序，直到一个返回有效编码。 如果 none 返回有效编码，此 <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> 方法会尝试检索其代码页标识符为的缓存编码 <paramref name="codepage" /> 。 因此，如果您选择重写 <see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> 方法，则当不是您支持的编码的代码页标识符时，重写应返回 <see langword="null" /> <paramref name="codepage" /> ; 它绝不会引发异常。</para></block>
        <block subset="none" type="usage"><para>此方法由 <see cref="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> 方法调用。 不应直接从用户代码中调用它。</para></block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      </Docs>
    </Member>
    <Member MemberName="GetEncodings">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;System.Text.EncodingInfo&gt; GetEncodings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Text.EncodingInfo&gt; GetEncodings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncodings" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEncodings () As IEnumerable(Of EncodingInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerable&lt;System::Text::EncodingInfo ^&gt; ^ GetEncodings();" />
      <MemberSignature Language="F#" Value="abstract member GetEncodings : unit -&gt; seq&lt;System.Text.EncodingInfo&gt;&#xA;override this.GetEncodings : unit -&gt; seq&lt;System.Text.EncodingInfo&gt;" Usage="encodingProvider.GetEncodings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Text.EncodingInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
