<Type Name="Decoder" FullName="System.Text.Decoder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0c44618ddedb5a89b3b93625b4b6197872386a0f" /><Meta Name="ms.sourcegitcommit" Value="943c8cdbe5b47c6c296a6f4b73038bbd43da0dd2" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="02/12/2021" /><Meta Name="ms.locfileid" Value="100323827" /></Metadata><TypeSignature Language="C#" Value="public abstract class Decoder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Decoder extends System.Object" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.Text.Decoder" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Decoder" />
  <TypeSignature Language="C++ CLI" Value="public ref class Decoder abstract" />
  <TypeSignature Language="F#" Value="type Decoder = class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Decoder extends System.Object" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Text.Encoding" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Text.Encoding" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Text.Encoding" FromVersion="4.1.0.0" To="System.Runtime" ToVersion="4.2.0.0" FrameworkAlternate="netcore-2.0" />
    <TypeForwarding From="System.Text.Encoding" FromVersion="4.1.1.0" To="System.Runtime" ToVersion="4.2.1.0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
    <TypeForwarding From="System.Text.Encoding" FromVersion="4.1.2.0" To="System.Runtime" ToVersion="4.2.2.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="72e2c-101">将已编码字节的序列转换为一组字符。</span><span class="sxs-lookup"><span data-stu-id="72e2c-101">Converts a sequence of encoded bytes into a set of characters.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="72e2c-102">若要获取类的实现的实例 <xref:System.Text.Decoder> ，应用程序应使用 <xref:System.Text.Encoding.GetDecoder%2A> 实现的方法 <xref:System.Text.Encoding> 。</span><span class="sxs-lookup"><span data-stu-id="72e2c-102">To obtain an instance of an implementation of the <xref:System.Text.Decoder> class, the application should use the <xref:System.Text.Encoding.GetDecoder%2A> method of an <xref:System.Text.Encoding> implementation.</span></span>

 <span data-ttu-id="72e2c-103"><xref:System.Text.Decoder.GetCharCount%2A>方法确定多少个字符会导致对一个字节序列进行解码，并且该 <xref:System.Text.Decoder.GetChars%2A> 方法执行实际解码。</span><span class="sxs-lookup"><span data-stu-id="72e2c-103">The <xref:System.Text.Decoder.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.Decoder.GetChars%2A> method performs the actual decoding.</span></span> <span data-ttu-id="72e2c-104">类中提供了这两种方法的几个版本 <xref:System.Text.Decoder> 。</span><span class="sxs-lookup"><span data-stu-id="72e2c-104">There are several versions of both of these methods available in the <xref:System.Text.Decoder> class.</span></span> <span data-ttu-id="72e2c-105">有关详细信息，请参阅 <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="72e2c-105">For more information, see <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="72e2c-106"><xref:System.Text.Decoder>对象在对或方法的连续调用之间维护状态信息 `GetChars` <xref:System.Text.Decoder.Convert%2A> ，以便能够正确地对跨块的字节序列进行解码。</span><span class="sxs-lookup"><span data-stu-id="72e2c-106">A <xref:System.Text.Decoder> object maintains state information between successive calls to `GetChars` or <xref:System.Text.Decoder.Convert%2A> methods so it can correctly decode byte sequences that span blocks.</span></span> <span data-ttu-id="72e2c-107"><xref:System.Text.Decoder>还保留数据块末尾的尾随字节，并在下一个解码操作中使用尾随字节。</span><span class="sxs-lookup"><span data-stu-id="72e2c-107">The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation.</span></span> <span data-ttu-id="72e2c-108">因此， <xref:System.Text.Encoding.GetDecoder%2A> 和 <xref:System.Text.Encoding.GetEncoder%2A> 对于网络传输和文件操作非常有用，因为这些操作经常处理数据块而不是完整的数据流。</span><span class="sxs-lookup"><span data-stu-id="72e2c-108">Therefore, <xref:System.Text.Encoding.GetDecoder%2A> and <xref:System.Text.Encoding.GetEncoder%2A> are useful for network transmission and file operations because those operations often deal with blocks of data instead of a complete data stream.</span></span>

> [!NOTE]
>  <span data-ttu-id="72e2c-109">当应用程序使用数据流完成时，应确保通过 `flush` `true` 在相应的方法调用中将参数设置为来刷新状态信息。</span><span class="sxs-lookup"><span data-stu-id="72e2c-109">When the application is done with a stream of data, it should make sure that the state information is flushed by setting the `flush` parameter to `true` in the appropriate method call.</span></span> <span data-ttu-id="72e2c-110">如果发生异常或应用程序切换流，则它应调用 <xref:System.Text.Decoder.Reset%2A> 以清除对象的内部状态 `Decoder` 。</span><span class="sxs-lookup"><span data-stu-id="72e2c-110">If an exception occurs or if the application switches streams, it should call <xref:System.Text.Decoder.Reset%2A> to clear the internal state of the `Decoder` object.</span></span>

## <a name="version-considerations"></a><span data-ttu-id="72e2c-111">版本注意事项</span><span class="sxs-lookup"><span data-stu-id="72e2c-111">Version Considerations</span></span>
 <span data-ttu-id="72e2c-112">在 <xref:System.Text.Decoder> <xref:System.Text.Encoder> 转换操作期间，可以序列化或对象。</span><span class="sxs-lookup"><span data-stu-id="72e2c-112">A <xref:System.Text.Decoder> or <xref:System.Text.Encoder> object can be serialized during a conversion operation.</span></span> <span data-ttu-id="72e2c-113">如果在同一版本的 .NET Framework 中对对象进行反序列化，则会保留对象的状态，但如果在其他版本中反序列化，则会丢失。</span><span class="sxs-lookup"><span data-stu-id="72e2c-113">The state of the object is retained if it is deserialized in the same version of the .NET Framework, but lost if it is deserialized in another version.</span></span>



## Examples
 <span data-ttu-id="72e2c-114">下面的示例演示如何使用将 <xref:System.Text.Decoder> 两个不同的字节数组转换为字符数组。</span><span class="sxs-lookup"><span data-stu-id="72e2c-114">The following example demonstrates the use of a <xref:System.Text.Decoder> to convert two different byte arrays into a character array.</span></span> <span data-ttu-id="72e2c-115">字符的一个字节会跨越数组。</span><span class="sxs-lookup"><span data-stu-id="72e2c-115">One of the character's bytes spans the arrays.</span></span> <span data-ttu-id="72e2c-116">这类似于在 <xref:System.IO.StreamReader> 读取流时对象所执行的操作。</span><span class="sxs-lookup"><span data-stu-id="72e2c-116">This is similar to what a <xref:System.IO.StreamReader> object does internally when reading a stream.</span></span>

 [!code-cpp[Classic Decoder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Decoder Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Decoder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Decoder Example/CS/source.cs#1)]
 [!code-vb[Classic Decoder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Decoder Example/VB/source.vb#1)]

 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="72e2c-117">当应用程序从此类继承时，必须重写所有成员。</span><span class="sxs-lookup"><span data-stu-id="72e2c-117">When your application inherits from this class, it must override all the members.</span></span></para></block>
    <altmember cref="T:System.Text.Encoder" />
    <altmember cref="T:System.Text.Encoding" />
    <altmember cref="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)" />
    <related type="Article" href="/dotnet/standard/base-types/character-encoding"><span data-ttu-id="72e2c-118">了解编码</span><span class="sxs-lookup"><span data-stu-id="72e2c-118">Understanding Encodings</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Decoder ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Decoder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Decoder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="72e2c-119">初始化 <see cref="T:System.Text.Decoder" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="72e2c-119">Initializes a new instance of the <see cref="T:System.Text.Decoder" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="72e2c-120">若要获取此类的实现的实例，应用程序应使用实现的 <xref:System.Text.Encoding.GetDecoder%2A> 方法 <xref:System.Text.Encoding> 。</span><span class="sxs-lookup"><span data-stu-id="72e2c-120">To obtain an instance of an implementation of this class, the application should use the <xref:System.Text.Encoding.GetDecoder%2A> method of a <xref:System.Text.Encoding> implementation.</span></span>



## Examples
 <span data-ttu-id="72e2c-121">下面的示例演示了用于初始化新实例的两种方法 <xref:System.Text.Decoder> 。</span><span class="sxs-lookup"><span data-stu-id="72e2c-121">The following example demonstrates two techniques for initializing a new <xref:System.Text.Decoder> instance.</span></span>

 [!code-cpp[System.Text.Decoder.ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Decoder.ctor Example/CPP/ctor.cpp#1)]
 [!code-csharp[System.Text.Decoder.ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Decoder.ctor Example/CS/ctor.cs#1)]
 [!code-vb[System.Text.Decoder.ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Decoder.ctor Example/VB/ctor.vb#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoding" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Convert">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="72e2c-122">将已编码的字节序列转换为字符串或字符数组。</span><span class="sxs-lookup"><span data-stu-id="72e2c-122">Converts an encoded byte sequence to a string or array of characters.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="72e2c-123">请记住， <xref:System.Text.Decoder> 对象会在调用之间保存状态 <xref:System.Text.Decoder.Convert%2A> 。</span><span class="sxs-lookup"><span data-stu-id="72e2c-123">Remember that the <xref:System.Text.Decoder> object saves state between calls to <xref:System.Text.Decoder.Convert%2A>.</span></span> <span data-ttu-id="72e2c-124">当应用程序使用数据流完成时，它应将参数设置为， `flush` `true` 以确保刷新状态信息。</span><span class="sxs-lookup"><span data-stu-id="72e2c-124">When the application is done with a stream of data, it should set the `flush` parameter to `true` to make sure that the state information is flushed.</span></span> <span data-ttu-id="72e2c-125">通过此设置，解码器将忽略数据块末尾的无效字节，并清除内部缓冲区。</span><span class="sxs-lookup"><span data-stu-id="72e2c-125">With this setting, the decoder ignores invalid bytes at the end of the data block and clears the internal buffer.</span></span> <span data-ttu-id="72e2c-126">逻辑单元中的所有剩余处理的数据（如代理项对的高代理项）都根据当前的回退设置进行转换。</span><span class="sxs-lookup"><span data-stu-id="72e2c-126">Any remaining processed data that is part of a logical unit, such as the high surrogate of a surrogate pair, is converted according to the current fallback settings.</span></span>

<span data-ttu-id="72e2c-127">`Convert`方法旨在在循环中用于对任意数量的输入（如从文件或流中读取的数据）进行解码。</span><span class="sxs-lookup"><span data-stu-id="72e2c-127">The `Convert` method is designed to be used in a loop to decode an arbitrary amount of input, such as data read from a file or stream.</span></span> <span data-ttu-id="72e2c-128">它将解码操作的输出存储在固定大小的缓冲区中。</span><span class="sxs-lookup"><span data-stu-id="72e2c-128">It stores the output of the decoding operation in a fixed-size buffer.</span></span>
<span data-ttu-id="72e2c-129"><xref:System.Text.Decoder.GetChars%2A> 如果输出缓冲区不够大，将会引发异常，但 <xref:System.Text.Decoder.Convert%2A> 将填满尽可能多的空间并返回读取的字节以及写入的字符，前提是输出数组至少允许两个字符。</span><span class="sxs-lookup"><span data-stu-id="72e2c-129"><xref:System.Text.Decoder.GetChars%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Decoder.Convert%2A> will fill as much space as possible and return the bytes read and chars written, provided the output array allows for at least two characters.</span></span> <span data-ttu-id="72e2c-130">另请参阅 <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> 获取更多注释。</span><span class="sxs-lookup"><span data-stu-id="72e2c-130">Also see <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> for more comments.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public virtual void Convert (ReadOnlySpan&lt;byte&gt; bytes, Span&lt;char&gt; chars, bool flush, out int bytesUsed, out int charsUsed, out bool completed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Convert(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes, valuetype System.Span`1&lt;char&gt; chars, bool flush, [out] int32&amp; bytesUsed, [out] int32&amp; charsUsed, [out] bool&amp; completed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Decoder.Convert(System.ReadOnlySpan{System.Byte},System.Span{System.Char},System.Boolean,System.Int32@,System.Int32@,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Convert (bytes As ReadOnlySpan(Of Byte), chars As Span(Of Char), flush As Boolean, ByRef bytesUsed As Integer, ByRef charsUsed As Integer, ByRef completed As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Convert(ReadOnlySpan&lt;System::Byte&gt; bytes, Span&lt;char&gt; chars, bool flush, [Runtime::InteropServices::Out] int % bytesUsed, [Runtime::InteropServices::Out] int % charsUsed, [Runtime::InteropServices::Out] bool % completed);" />
      <MemberSignature Language="F#" Value="abstract member Convert : ReadOnlySpan&lt;byte&gt; * Span&lt;char&gt; * bool * int * int * bool -&gt; unit&#xA;override this.Convert : ReadOnlySpan&lt;byte&gt; * Span&lt;char&gt; * bool * int * int * bool -&gt; unit" Usage="decoder.Convert (bytes, chars, flush, bytesUsed, charsUsed, completed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="chars" Type="System.Span&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="flush" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="bytesUsed" Type="System.Int32" RefType="out" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="charsUsed" Type="System.Int32" RefType="out" Index="4" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="completed" Type="System.Boolean" RefType="out" Index="5" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="72e2c-131">包含要转换的序列的只读字节范围。</span><span class="sxs-lookup"><span data-stu-id="72e2c-131">A read-only bytes span containing the sequence to convert.</span></span></param>
        <param name="chars"><span data-ttu-id="72e2c-132">用于存储转换后的字符的范围。</span><span class="sxs-lookup"><span data-stu-id="72e2c-132">The span to store the converted characters.</span></span></param>
        <param name="flush"><span data-ttu-id="72e2c-133">如果没有更多的数据要进行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="72e2c-133"><see langword="true" /> to indicate no further data is to be converted; otherwise, <see langword="false" />.</span></span></param>
        <param name="bytesUsed"><span data-ttu-id="72e2c-134">当此方法返回时，包含由转换生成的字节数。</span><span class="sxs-lookup"><span data-stu-id="72e2c-134">When this method returns, contains the number of bytes that were produced by the conversion.</span></span> <span data-ttu-id="72e2c-135">此参数未经初始化即被传递。</span><span class="sxs-lookup"><span data-stu-id="72e2c-135">This parameter is passed uninitialized.</span></span></param>
        <param name="charsUsed"><span data-ttu-id="72e2c-136">当此方法返回时，包含来自在转换中使用的 <paramref name="chars" /> 的字符数。</span><span class="sxs-lookup"><span data-stu-id="72e2c-136">When this method returns, contains the number of characters from <paramref name="chars" /> that were used in the conversion.</span></span> <span data-ttu-id="72e2c-137">此参数未经初始化即被传递。</span><span class="sxs-lookup"><span data-stu-id="72e2c-137">This parameter is passed uninitialized.</span></span></param>
        <param name="completed"><span data-ttu-id="72e2c-138">此方法返回时，如果转换了所有指定的字符，则包含 <see langword="true" />；否则包含 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="72e2c-138">When this method returns, contains <see langword="true" /> if all the specified characters were converted; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="72e2c-139">此参数未经初始化即被传递。</span><span class="sxs-lookup"><span data-stu-id="72e2c-139">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="72e2c-140">将编码字节的范围转换为 UTF-16 编码字符，并将结果存储在另一个范围缓冲区中。</span><span class="sxs-lookup"><span data-stu-id="72e2c-140">Converts a span of encoded bytes to UTF-16 encoded characters and stores the result in another span buffer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="72e2c-141">`completed`Output 参数指示输入字节范围内的所有数据是否已转换并存储在字符范围内。</span><span class="sxs-lookup"><span data-stu-id="72e2c-141">The `completed` output parameter indicates whether all the data in the input bytes span was converted and stored in the chars span.</span></span> <span data-ttu-id="72e2c-142">`false`如果在输入字节跨度内包含的字节数不超过字符范围内的字符数，则将此参数设置为。</span><span class="sxs-lookup"><span data-stu-id="72e2c-142">This parameter is set to `false` if the number of bytes contained in the input bytes span cannot be converted without exceeding the number of characters in the chars span.</span></span> <span data-ttu-id="72e2c-143">在这种情况下，应用程序应使用输出缓冲区的内容或提供新的输出缓冲区， `bytes` 按参数指定的字节数递增参数 `bytesUsed` ，然后 `Convert` 再次调用方法来处理剩余的输入。</span><span class="sxs-lookup"><span data-stu-id="72e2c-143">In that situation, the application should use the contents of the output buffer or provide a new output buffer, increment the `bytes` parameter by the number of bytes specified by the `bytesUsed` parameter, then call the `Convert` method again to process the remaining input.</span></span>

<span data-ttu-id="72e2c-144">`completed` `false` 即使 `bytesUsed` 参数和字节跨度长度相等，也可以将参数设置为。</span><span class="sxs-lookup"><span data-stu-id="72e2c-144">The `completed` parameter can also be set to `false`, even though the `bytesUsed` parameter and bytes span length are equal.</span></span> <span data-ttu-id="72e2c-145">如果对象中仍有尚未存储的数据，则会发生这种情况 <xref:System.Text.Decoder> `bytes` 。</span><span class="sxs-lookup"><span data-stu-id="72e2c-145">This situation occurs if there is still data in the <xref:System.Text.Decoder> object that has not been stored in the `bytes` span.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public virtual void Convert (byte* bytes, int byteCount, char* chars, int charCount, bool flush, out int bytesUsed, out int charsUsed, out bool completed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Convert(unsigned int8* bytes, int32 byteCount, char* chars, int32 charCount, bool flush, [out] int32&amp; bytesUsed, [out] int32&amp; charsUsed, [out] bool&amp; completed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Convert(System::Byte* bytes, int byteCount, char* chars, int charCount, bool flush, [Runtime::InteropServices::Out] int % bytesUsed, [Runtime::InteropServices::Out] int % charsUsed, [Runtime::InteropServices::Out] bool % completed);" />
      <MemberSignature Language="F#" Value="abstract member Convert : nativeptr&lt;byte&gt; * int * nativeptr&lt;char&gt; * int * bool * int * int * bool -&gt; unit&#xA;override this.Convert : nativeptr&lt;byte&gt; * int * nativeptr&lt;char&gt; * int * bool * int * int * bool -&gt; unit" Usage="decoder.Convert (bytes, byteCount, chars, charCount, flush, bytesUsed, charsUsed, completed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="byteCount" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="chars" Type="System.Char*" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="charCount" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="flush" Type="System.Boolean" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="bytesUsed" Type="System.Int32" RefType="out" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="charsUsed" Type="System.Int32" RefType="out" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="completed" Type="System.Boolean" RefType="out" Index="7" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="72e2c-146">包含要转换的字节序列的缓冲区的地址。</span><span class="sxs-lookup"><span data-stu-id="72e2c-146">The address of a buffer that contains the byte sequences to convert.</span></span></param>
        <param name="byteCount"><span data-ttu-id="72e2c-147"><paramref name="bytes" /> 中要转换的字节数。</span><span class="sxs-lookup"><span data-stu-id="72e2c-147">The number of bytes in <paramref name="bytes" /> to convert.</span></span></param>
        <param name="chars"><span data-ttu-id="72e2c-148">用于存储已转换的字符的缓冲区的地址。</span><span class="sxs-lookup"><span data-stu-id="72e2c-148">The address of a buffer to store the converted characters.</span></span></param>
        <param name="charCount"><span data-ttu-id="72e2c-149">要在转换中使用的 <paramref name="chars" /> 中的最大字符数。</span><span class="sxs-lookup"><span data-stu-id="72e2c-149">The maximum number of characters in <paramref name="chars" /> to use in the conversion.</span></span></param>
        <param name="flush"><span data-ttu-id="72e2c-150">如果没有更多的数据要进行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="72e2c-150"><see langword="true" /> to indicate no further data is to be converted; otherwise, <see langword="false" />.</span></span></param>
        <param name="bytesUsed"><span data-ttu-id="72e2c-151">当此方法返回时，包含由转换生成的字节数。</span><span class="sxs-lookup"><span data-stu-id="72e2c-151">When this method returns, contains the number of bytes that were produced by the conversion.</span></span> <span data-ttu-id="72e2c-152">此参数未经初始化即被传递。</span><span class="sxs-lookup"><span data-stu-id="72e2c-152">This parameter is passed uninitialized.</span></span></param>
        <param name="charsUsed"><span data-ttu-id="72e2c-153">当此方法返回时，包含来自在转换中使用的 <paramref name="chars" /> 的字符数。</span><span class="sxs-lookup"><span data-stu-id="72e2c-153">When this method returns, contains the number of characters from <paramref name="chars" /> that were used in the conversion.</span></span> <span data-ttu-id="72e2c-154">此参数未经初始化即被传递。</span><span class="sxs-lookup"><span data-stu-id="72e2c-154">This parameter is passed uninitialized.</span></span></param>
        <param name="completed"><span data-ttu-id="72e2c-155">当此方法返回时，如果转换了所有由 <paramref name="byteCount" /> 指定的字符，则包含 <see langword="true" />；否则包含 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="72e2c-155">When this method returns, contains <see langword="true" /> if all the characters specified by <paramref name="byteCount" /> were converted; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="72e2c-156">此参数未经初始化即被传递。</span><span class="sxs-lookup"><span data-stu-id="72e2c-156">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="72e2c-157">将编码字节的缓冲区转换为 UTF-16 编码字符，并将结果存储在另一个缓冲区中。</span><span class="sxs-lookup"><span data-stu-id="72e2c-157">Converts a buffer of encoded bytes to UTF-16 encoded characters and stores the result in another buffer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="72e2c-158">`completed`Output 参数指示输入缓冲区中的所有数据是否已转换并存储在输出缓冲区中。</span><span class="sxs-lookup"><span data-stu-id="72e2c-158">The `completed` output parameter indicates whether all the data in the input buffer was converted and stored in the output buffer.</span></span> <span data-ttu-id="72e2c-159">`false`如果参数指定的字节数 `byteCount` 不能超过参数指定的字符数，则将此参数设置为 `charCount` 。</span><span class="sxs-lookup"><span data-stu-id="72e2c-159">This parameter is set to `false` if the number of bytes specified by the `byteCount` parameter cannot be converted without exceeding the number of characters specified by the `charCount` parameter.</span></span> <span data-ttu-id="72e2c-160">在这种情况下，应用程序应使用输出缓冲区的内容或提供新的输出缓冲区， `bytes` 按参数指定的字节数递增参数 `bytesUsed` ，然后 `Convert` 再次调用方法来处理剩余的输入。</span><span class="sxs-lookup"><span data-stu-id="72e2c-160">In that situation, the application should use the contents of the output buffer or provide a new output buffer, increment the `bytes` parameter by the number of bytes specified by the `bytesUsed` parameter, then call the `Convert` method again to process the remaining input.</span></span>

<span data-ttu-id="72e2c-161">`completed` `false` 即使 `bytesUsed` 和参数相等，也可以将参数设置为 `byteCount` 。</span><span class="sxs-lookup"><span data-stu-id="72e2c-161">The `completed` parameter can also be set to `false`, even though the `bytesUsed` and `byteCount` parameters are equal.</span></span> <span data-ttu-id="72e2c-162">如果对象中仍有尚未 <xref:System.Text.Decoder> 存储在缓冲区中的数据，则会发生这种情况 `bytes` 。</span><span class="sxs-lookup"><span data-stu-id="72e2c-162">This situation occurs if there is still data in the <xref:System.Text.Decoder> object that has not been stored in the `bytes` buffer.</span></span>

 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="72e2c-163"><paramref name="chars" /> 或 <paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span><span class="sxs-lookup"><span data-stu-id="72e2c-163"><paramref name="chars" /> or <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="72e2c-164"><paramref name="charCount" /> 或 <paramref name="byteCount" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="72e2c-164"><paramref name="charCount" /> or <paramref name="byteCount" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="72e2c-165">输出缓冲区太小，无法包含任何已转换的输出。</span><span class="sxs-lookup"><span data-stu-id="72e2c-165">The output buffer is too small to contain any of the converted input.</span></span> <span data-ttu-id="72e2c-166">输出缓冲区的大小至少应为 2 个字符，以容纳至少一个代理项字符对。</span><span class="sxs-lookup"><span data-stu-id="72e2c-166">The output buffer should be at least 2 chars in size to accomodate at least one surrogate character pair.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="72e2c-167">发生回退（有关详细信息，请参阅<see href="/dotnet/standard/base-types/character-encoding">采用 .NET 的字符编码</see>）</span><span class="sxs-lookup"><span data-stu-id="72e2c-167">A fallback occurred (for more information, see <see href="/dotnet/standard/base-types/character-encoding">Character Encoding in .NET</see>)</span></span>

<span data-ttu-id="72e2c-168">－和－</span><span class="sxs-lookup"><span data-stu-id="72e2c-168">-and-</span></span>

 <span data-ttu-id="72e2c-169">将 <see cref="P:System.Text.Decoder.Fallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="72e2c-169"><see cref="P:System.Text.Decoder.Fallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public virtual void Convert (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, int charCount, bool flush, out int bytesUsed, out int charsUsed, out bool completed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Convert(unsigned int8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex, int32 charCount, bool flush, [out] int32&amp; bytesUsed, [out] int32&amp; charsUsed, [out] bool&amp; completed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Convert (bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer, charCount As Integer, flush As Boolean, ByRef bytesUsed As Integer, ByRef charsUsed As Integer, ByRef completed As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Convert(cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex, int byteCount, cli::array &lt;char&gt; ^ chars, int charIndex, int charCount, bool flush, [Runtime::InteropServices::Out] int % bytesUsed, [Runtime::InteropServices::Out] int % charsUsed, [Runtime::InteropServices::Out] bool % completed);" />
      <MemberSignature Language="F#" Value="abstract member Convert : byte[] * int * int * char[] * int * int * bool * int * int * bool -&gt; unit&#xA;override this.Convert : byte[] * int * int * char[] * int * int * bool * int * int * bool -&gt; unit" Usage="decoder.Convert (bytes, byteIndex, byteCount, chars, charIndex, charCount, flush, bytesUsed, charsUsed, completed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="byteIndex" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="byteCount" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="chars" Type="System.Char[]" Index="3" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="charIndex" Type="System.Int32" Index="4" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="charCount" Type="System.Int32" Index="5" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="flush" Type="System.Boolean" Index="6" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="bytesUsed" Type="System.Int32" RefType="out" Index="7" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="charsUsed" Type="System.Int32" RefType="out" Index="8" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="completed" Type="System.Boolean" RefType="out" Index="9" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="72e2c-170">要转换的字节数组。</span><span class="sxs-lookup"><span data-stu-id="72e2c-170">A byte array to convert.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="72e2c-171">要转换的 <paramref name="bytes" /> 的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="72e2c-171">The first element of <paramref name="bytes" /> to convert.</span></span></param>
        <param name="byteCount"><span data-ttu-id="72e2c-172">要转换的 <paramref name="bytes" /> 的元素数。</span><span class="sxs-lookup"><span data-stu-id="72e2c-172">The number of elements of <paramref name="bytes" /> to convert.</span></span></param>
        <param name="chars"><span data-ttu-id="72e2c-173">用于存储转换后的字符的数组。</span><span class="sxs-lookup"><span data-stu-id="72e2c-173">An array to store the converted characters.</span></span></param>
        <param name="charIndex"><span data-ttu-id="72e2c-174">存储数据的 <paramref name="chars" /> 的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="72e2c-174">The first element of <paramref name="chars" /> in which data is stored.</span></span></param>
        <param name="charCount"><span data-ttu-id="72e2c-175">要在转换中使用的 <paramref name="chars" /> 的元素的最大数量。</span><span class="sxs-lookup"><span data-stu-id="72e2c-175">The maximum number of elements of <paramref name="chars" /> to use in the conversion.</span></span></param>
        <param name="flush"><span data-ttu-id="72e2c-176">如果没有更多的数据要进行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="72e2c-176"><see langword="true" /> to indicate that no further data is to be converted; otherwise, <see langword="false" />.</span></span></param>
        <param name="bytesUsed"><span data-ttu-id="72e2c-177">当此方法返回时，包含在转换中使用的字节数。</span><span class="sxs-lookup"><span data-stu-id="72e2c-177">When this method returns, contains the number of bytes that were used in the conversion.</span></span> <span data-ttu-id="72e2c-178">此参数未经初始化即被传递。</span><span class="sxs-lookup"><span data-stu-id="72e2c-178">This parameter is passed uninitialized.</span></span></param>
        <param name="charsUsed"><span data-ttu-id="72e2c-179">当此方法返回时，包含由转换生成的 <paramref name="chars" /> 中的字符数。</span><span class="sxs-lookup"><span data-stu-id="72e2c-179">When this method returns, contains the number of characters from <paramref name="chars" /> that were produced by the conversion.</span></span> <span data-ttu-id="72e2c-180">此参数未经初始化即被传递。</span><span class="sxs-lookup"><span data-stu-id="72e2c-180">This parameter is passed uninitialized.</span></span></param>
        <param name="completed"><span data-ttu-id="72e2c-181">当此方法返回时，如果转换了所有由 <paramref name="byteCount" /> 指定的字符，则包含 <see langword="true" />；否则包含 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="72e2c-181">When this method returns, contains <see langword="true" /> if all the characters specified by <paramref name="byteCount" /> were converted; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="72e2c-182">此参数未经初始化即被传递。</span><span class="sxs-lookup"><span data-stu-id="72e2c-182">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="72e2c-183">将编码字节的数组转换为 UTF-16 编码字符，并将结果存储在字符数组中。</span><span class="sxs-lookup"><span data-stu-id="72e2c-183">Converts an array of encoded bytes to UTF-16 encoded characters and stores the result in a character array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="72e2c-184">`completed`Output 参数指示输入缓冲区中的所有数据是否已转换并存储在输出缓冲区中。</span><span class="sxs-lookup"><span data-stu-id="72e2c-184">The `completed` output parameter indicates whether all the data in the input buffer was converted and stored in the output buffer.</span></span> <span data-ttu-id="72e2c-185">`false`如果参数指定的字节数 `byteCount` 不能超过参数指定的字符数，则将此参数设置为 `charCount` 。</span><span class="sxs-lookup"><span data-stu-id="72e2c-185">This parameter is set to `false` if the number of bytes specified by the `byteCount` parameter cannot be converted without exceeding the number of characters specified by the `charCount` parameter.</span></span> <span data-ttu-id="72e2c-186">在这种情况下，应用程序应使用输出缓冲区的内容或提供新的输出缓冲区， `bytes` 按参数指定的字节数递增参数 `bytesUsed` ，然后 `Convert` 再次调用方法来处理剩余的输入。</span><span class="sxs-lookup"><span data-stu-id="72e2c-186">In that situation, the application should use the contents of the output buffer or provide a new output buffer, increment the `bytes` parameter by the number of bytes specified by the `bytesUsed` parameter, then call the `Convert` method again to process the remaining input.</span></span>

<span data-ttu-id="72e2c-187">`completed` `false` 即使 `bytesUsed` 和参数相等，也可以将参数设置为 `byteCount` 。</span><span class="sxs-lookup"><span data-stu-id="72e2c-187">The `completed` parameter can also be set to `false`, even though the `bytesUsed` and `byteCount` parameters are equal.</span></span> <span data-ttu-id="72e2c-188">如果对象中仍有尚未 <xref:System.Text.Decoder> 存储在缓冲区中的数据，则会发生这种情况 `bytes` 。</span><span class="sxs-lookup"><span data-stu-id="72e2c-188">This situation occurs if there is still data in the <xref:System.Text.Decoder> object that has not been stored in the `bytes` buffer.</span></span>

## Examples

<span data-ttu-id="72e2c-189">下面的示例使用 <xref:System.Text.Encoder.Convert%2A> 方法将 utf-16 字符的文件转换为 utf-8。</span><span class="sxs-lookup"><span data-stu-id="72e2c-189">The following example uses the <xref:System.Text.Encoder.Convert%2A> method to convert a file of UTF-16 characters to UTF-8.</span></span> <span data-ttu-id="72e2c-190">然后，它使用 <xref:System.Text.Decoder.Convert%2A> 方法将 utf-8 字符转换回 utf-16 字符。</span><span class="sxs-lookup"><span data-stu-id="72e2c-190">It then uses the <xref:System.Text.Decoder.Convert%2A> method to convert the UTF-8 characters back to UTF-16 characters.</span></span>

 [!code-csharp[sys.txt.EncoderDecoder.convert#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.EncoderDecoder.convert/cs/edCvt.cs#1)]
 [!code-vb[sys.txt.EncoderDecoder.convert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.EncoderDecoder.convert/vb/edCvt.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="72e2c-191"><paramref name="chars" /> 或 <paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span><span class="sxs-lookup"><span data-stu-id="72e2c-191"><paramref name="chars" /> or <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="72e2c-192"><paramref name="charIndex" />、<paramref name="charCount" />、<paramref name="byteIndex" /> 或 <paramref name="byteCount" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="72e2c-192"><paramref name="charIndex" />, <paramref name="charCount" />, <paramref name="byteIndex" />, or <paramref name="byteCount" /> is less than zero.</span></span>

<span data-ttu-id="72e2c-193">或</span><span class="sxs-lookup"><span data-stu-id="72e2c-193">-or-</span></span>

<span data-ttu-id="72e2c-194"><paramref name="chars" /> - <paramref name="charIndex" /> 的长度小于 <paramref name="charCount" />。</span><span class="sxs-lookup"><span data-stu-id="72e2c-194">The length of <paramref name="chars" /> - <paramref name="charIndex" /> is less than <paramref name="charCount" />.</span></span>

<span data-ttu-id="72e2c-195">或</span><span class="sxs-lookup"><span data-stu-id="72e2c-195">-or-</span></span>

<span data-ttu-id="72e2c-196"><paramref name="bytes" /> - <paramref name="byteIndex" /> 的长度小于 <paramref name="byteCount" />。</span><span class="sxs-lookup"><span data-stu-id="72e2c-196">The length of <paramref name="bytes" /> - <paramref name="byteIndex" /> is less than <paramref name="byteCount" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="72e2c-197">输出缓冲区太小，无法包含任何已转换的输出。</span><span class="sxs-lookup"><span data-stu-id="72e2c-197">The output buffer is too small to contain any of the converted input.</span></span> <span data-ttu-id="72e2c-198">输出缓冲区的大小至少应为 2 个字符，以容纳至少一个代理项字符对。</span><span class="sxs-lookup"><span data-stu-id="72e2c-198">The output buffer should be at least 2 chars in size to accomodate at least one surrogate character pair.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="72e2c-199">发生回退（有关详细信息，请参阅<see href="/dotnet/standard/base-types/character-encoding">采用 .NET 的字符编码</see>）</span><span class="sxs-lookup"><span data-stu-id="72e2c-199">A fallback occurred (for more information, see <see href="/dotnet/standard/base-types/character-encoding">Character Encoding in .NET</see>)</span></span>

<span data-ttu-id="72e2c-200">－和－</span><span class="sxs-lookup"><span data-stu-id="72e2c-200">-and-</span></span>

 <span data-ttu-id="72e2c-201">将 <see cref="P:System.Text.Decoder.Fallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="72e2c-201"><see cref="P:System.Text.Decoder.Fallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Fallback">
      <MemberSignature Language="C#" Value="public System.Text.DecoderFallback Fallback { get; set; }" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.DecoderFallback Fallback" />
      <MemberSignature Language="DocId" Value="P:System.Text.Decoder.Fallback" />
      <MemberSignature Language="VB.NET" Value="Public Property Fallback As DecoderFallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::DecoderFallback ^ Fallback { System::Text::DecoderFallback ^ get(); void set(System::Text::DecoderFallback ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Fallback : System.Text.DecoderFallback with get, set" Usage="System.Text.Decoder.Fallback" />
      <MemberSignature Language="C#" Value="public System.Text.DecoderFallback? Fallback { get; set; }" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.DecoderFallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="72e2c-202">获取或设置当前 <see cref="T:System.Text.DecoderFallback" /> 对象的 <see cref="T:System.Text.Decoder" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="72e2c-202">Gets or sets a <see cref="T:System.Text.DecoderFallback" /> object for the current <see cref="T:System.Text.Decoder" /> object.</span></span></summary>
        <value><span data-ttu-id="72e2c-203"><see cref="T:System.Text.DecoderFallback" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="72e2c-203">A <see cref="T:System.Text.DecoderFallback" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="72e2c-204"><xref:System.Text.DecoderFallback>对象表示在无法将编码字节序列转换为字符时调用的错误处理程序。</span><span class="sxs-lookup"><span data-stu-id="72e2c-204">The <xref:System.Text.DecoderFallback> object represents an error handler that is invoked when an encoded byte sequence cannot be converted to a character.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="72e2c-205">设置操作中的值为 <see langword="null" /> (<see langword="Nothing" />)。</span><span class="sxs-lookup"><span data-stu-id="72e2c-205">The value in a set operation is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="72e2c-206">无法在设置操作中赋新值，这是因为当前 <see cref="T:System.Text.DecoderFallbackBuffer" /> 对象含有尚未解码的数据。</span><span class="sxs-lookup"><span data-stu-id="72e2c-206">A new value cannot be assigned in a set operation because the current <see cref="T:System.Text.DecoderFallbackBuffer" /> object contains data that has not been decoded yet.</span></span></exception>
        <altmember cref="T:System.Text.EncoderFallback" />
        <altmember cref="P:System.Text.Encoder.FallbackBuffer" />
        <related type="Article" href="/dotnet/standard/base-types/character-encoding"><span data-ttu-id="72e2c-207">了解编码</span><span class="sxs-lookup"><span data-stu-id="72e2c-207">Understanding Encodings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FallbackBuffer">
      <MemberSignature Language="C#" Value="public System.Text.DecoderFallbackBuffer FallbackBuffer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.DecoderFallbackBuffer FallbackBuffer" />
      <MemberSignature Language="DocId" Value="P:System.Text.Decoder.FallbackBuffer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FallbackBuffer As DecoderFallbackBuffer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::DecoderFallbackBuffer ^ FallbackBuffer { System::Text::DecoderFallbackBuffer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FallbackBuffer : System.Text.DecoderFallbackBuffer" Usage="System.Text.Decoder.FallbackBuffer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.DecoderFallbackBuffer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="72e2c-208">获取与当前 <see cref="T:System.Text.DecoderFallbackBuffer" /> 对象关联的 <see cref="T:System.Text.Decoder" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="72e2c-208">Gets the <see cref="T:System.Text.DecoderFallbackBuffer" /> object associated with the current <see cref="T:System.Text.Decoder" /> object.</span></span></summary>
        <value><span data-ttu-id="72e2c-209"><see cref="T:System.Text.DecoderFallbackBuffer" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="72e2c-209">A <see cref="T:System.Text.DecoderFallbackBuffer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="72e2c-210"><xref:System.Text.DecoderFallbackBuffer>对象表示对象使用的数据 <xref:System.Text.DecoderFallback> 。</span><span class="sxs-lookup"><span data-stu-id="72e2c-210">The <xref:System.Text.DecoderFallbackBuffer> object represents data used by the <xref:System.Text.DecoderFallback> object.</span></span> <span data-ttu-id="72e2c-211"><xref:System.Text.DecoderFallback>对象表示在无法将编码字节序列转换为字符时调用的错误处理程序。</span><span class="sxs-lookup"><span data-stu-id="72e2c-211">The <xref:System.Text.DecoderFallback> object represents an error handler that is invoked when an encoded byte sequence cannot be converted to a character.</span></span>

 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.EncoderFallback" />
        <altmember cref="P:System.Text.Encoder.Fallback" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCharCount">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="72e2c-212">在派生类中重写时，计算对字节序列进行解码所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="72e2c-212">When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public virtual int GetCharCount (ReadOnlySpan&lt;byte&gt; bytes, bool flush);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetCharCount(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes, bool flush) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Decoder.GetCharCount(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCharCount (bytes As ReadOnlySpan(Of Byte), flush As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetCharCount(ReadOnlySpan&lt;System::Byte&gt; bytes, bool flush);" />
      <MemberSignature Language="F#" Value="abstract member GetCharCount : ReadOnlySpan&lt;byte&gt; * bool -&gt; int&#xA;override this.GetCharCount : ReadOnlySpan&lt;byte&gt; * bool -&gt; int" Usage="decoder.GetCharCount (bytes, flush)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="flush" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="72e2c-213">要解码的字节范围。</span><span class="sxs-lookup"><span data-stu-id="72e2c-213">A byte span to decode.</span></span></param>
        <param name="flush"><span data-ttu-id="72e2c-214">若要在计算后模拟清除解码器的内部状态，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="72e2c-214"><see langword="true" /> to simulate clearing the internal state of the encoder after the calculation; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="72e2c-215">在派生类中重写时，计算对范围中字节序列进行解码所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="72e2c-215">When overridden in a derived class, calculates the number of characters produced by decoding the sequence of bytes in the span.</span></span> <span data-ttu-id="72e2c-216">一个参数，该参数指示是否在计算后清除解码器的内部状态。</span><span class="sxs-lookup"><span data-stu-id="72e2c-216">A parameter indicates whether to clear the internal state of the decoder after the calculation.</span></span></summary>
        <returns><span data-ttu-id="72e2c-217">对指定的字节序列和内部缓冲区中任何字节进行解码所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="72e2c-217">The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks
 <span data-ttu-id="72e2c-218">此方法不会影响解码器的状态。</span><span class="sxs-lookup"><span data-stu-id="72e2c-218">This method does not affect the state of the decoder.</span></span>

 <span data-ttu-id="72e2c-219">若要计算 <xref:System.Text.Decoder.GetChars%2A> 存储所生成的字符所需的确切缓冲区大小，应用程序应使用 <xref:System.Text.Decoder.GetCharCount%2A> 。</span><span class="sxs-lookup"><span data-stu-id="72e2c-219">To calculate the exact buffer size that <xref:System.Text.Decoder.GetChars%2A> requires to store the resulting characters, the application should use <xref:System.Text.Decoder.GetCharCount%2A>.</span></span>

 <span data-ttu-id="72e2c-220">如果 `GetChars` 在 `flush` 设置为的情况 `false` 下调用，则解码器会将结尾字节存储在内部缓冲区中的数据块的末尾，并在下一个解码操作中使用它们。</span><span class="sxs-lookup"><span data-stu-id="72e2c-220">If `GetChars` is called with `flush` set to `false`, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation.</span></span> <span data-ttu-id="72e2c-221">应用程序应在 `GetCharCount` 调用同一个块之前立即调用数据块 `GetChars` ，以便在计算中包括前一块中的任何尾随字节。</span><span class="sxs-lookup"><span data-stu-id="72e2c-221">The application should call `GetCharCount` on a block of data immediately before calling `GetChars` on the same block, so that any trailing bytes from the previous block are included in the calculation.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public virtual int GetCharCount (byte* bytes, int count, bool flush);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetCharCount(unsigned int8* bytes, int32 count, bool flush) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Decoder.GetCharCount(System.Byte*,System.Int32,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetCharCount(System::Byte* bytes, int count, bool flush);" />
      <MemberSignature Language="F#" Value="abstract member GetCharCount : nativeptr&lt;byte&gt; * int * bool -&gt; int&#xA;override this.GetCharCount : nativeptr&lt;byte&gt; * int * bool -&gt; int" Usage="decoder.GetCharCount (bytes, count, flush)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="count" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="flush" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="72e2c-222">指向第一个要解码的字节的指针。</span><span class="sxs-lookup"><span data-stu-id="72e2c-222">A pointer to the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="72e2c-223">要解码的字节数。</span><span class="sxs-lookup"><span data-stu-id="72e2c-223">The number of bytes to decode.</span></span></param>
        <param name="flush"><span data-ttu-id="72e2c-224">若要在计算后模拟清除解码器的内部状态，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="72e2c-224"><see langword="true" /> to simulate clearing the internal state of the encoder after the calculation; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="72e2c-225">在派生类中重写时，计算对字节序列（从指定的字节指针开始）进行解码所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="72e2c-225">When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</span></span> <span data-ttu-id="72e2c-226">一个参数，该参数指示是否在计算后清除解码器的内部状态。</span><span class="sxs-lookup"><span data-stu-id="72e2c-226">A parameter indicates whether to clear the internal state of the decoder after the calculation.</span></span></summary>
        <returns><span data-ttu-id="72e2c-227">对指定的字节序列和内部缓冲区中任何字节进行解码所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="72e2c-227">The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="72e2c-228">此方法不会影响解码器的状态。</span><span class="sxs-lookup"><span data-stu-id="72e2c-228">This method does not affect the state of the decoder.</span></span>

 <span data-ttu-id="72e2c-229">若要计算 <xref:System.Text.Decoder.GetChars%2A> 存储所生成字符所需的确切数组大小，应用程序应使用 <xref:System.Text.Decoder.GetCharCount%2A> 。</span><span class="sxs-lookup"><span data-stu-id="72e2c-229">To calculate the exact array size that <xref:System.Text.Decoder.GetChars%2A> requires to store the resulting characters, the application should use <xref:System.Text.Decoder.GetCharCount%2A>.</span></span>

 <span data-ttu-id="72e2c-230">如果 `GetChars` 在 `flush` 设置为的情况 `false` 下调用，则解码器会将结尾字节存储在内部缓冲区中的数据块的末尾，并在下一个解码操作中使用它们。</span><span class="sxs-lookup"><span data-stu-id="72e2c-230">If `GetChars` is called with `flush` set to `false`, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation.</span></span> <span data-ttu-id="72e2c-231">应用程序应在 `GetCharCount` 调用同一个块之前立即调用数据块 `GetChars` ，以便在计算中包括前一块中的任何尾随字节。</span><span class="sxs-lookup"><span data-stu-id="72e2c-231">The application should call `GetCharCount` on a block of data immediately before calling `GetChars` on the same block, so that any trailing bytes from the previous block are included in the calculation.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="72e2c-232"><paramref name="bytes" /> 为 <see langword="null" />（在 Visual Basic .NET 中为 <see langword="Nothing" />）。</span><span class="sxs-lookup"><span data-stu-id="72e2c-232"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" /> in Visual Basic .NET).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="72e2c-233"><paramref name="count" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="72e2c-233"><paramref name="count" /> is less than zero.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="72e2c-234">发生回退（有关详细信息，请参阅<see href="/dotnet/standard/base-types/character-encoding">采用 .NET 的字符编码</see>）</span><span class="sxs-lookup"><span data-stu-id="72e2c-234">A fallback occurred (for more information, see <see href="/dotnet/standard/base-types/character-encoding">Character Encoding in .NET</see>)</span></span>

<span data-ttu-id="72e2c-235">－和－</span><span class="sxs-lookup"><span data-stu-id="72e2c-235">-and-</span></span>

 <span data-ttu-id="72e2c-236">将 <see cref="P:System.Text.Decoder.Fallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="72e2c-236"><see cref="P:System.Text.Decoder.Fallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)" />
        <altmember cref="M:System.Text.Decoder.Reset" />
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public abstract int GetCharCount (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetCharCount(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetCharCount (bytes As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int GetCharCount(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member GetCharCount : byte[] * int * int -&gt; int" Usage="decoder.GetCharCount (bytes, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="72e2c-237">包含要解码的字节序列的字节数组。</span><span class="sxs-lookup"><span data-stu-id="72e2c-237">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="index"><span data-ttu-id="72e2c-238">第一个要解码的字节的索引。</span><span class="sxs-lookup"><span data-stu-id="72e2c-238">The index of the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="72e2c-239">要解码的字节数。</span><span class="sxs-lookup"><span data-stu-id="72e2c-239">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="72e2c-240">在派生类中重写时，计算对字节序列（从指定字节数组开始）进行解码所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="72e2c-240">When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="72e2c-241">对指定的字节序列和内部缓冲区中任何字节进行解码所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="72e2c-241">The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="72e2c-242">此方法不会影响解码器的状态。</span><span class="sxs-lookup"><span data-stu-id="72e2c-242">This method does not affect the state of the decoder.</span></span>

 <span data-ttu-id="72e2c-243">若要计算 <xref:System.Text.Decoder.GetChars%2A> 存储所生成字符所需的确切数组大小，应用程序应使用 <xref:System.Text.Decoder.GetCharCount%2A> 。</span><span class="sxs-lookup"><span data-stu-id="72e2c-243">To calculate the exact array size that <xref:System.Text.Decoder.GetChars%2A> requires to store the resulting characters, the application should use <xref:System.Text.Decoder.GetCharCount%2A>.</span></span>

 <span data-ttu-id="72e2c-244">如果 `GetChars` 在 `flush` 设置为的情况 `false` 下调用，则解码器会将结尾字节存储在内部缓冲区中的数据块的末尾，并在下一个解码操作中使用它们。</span><span class="sxs-lookup"><span data-stu-id="72e2c-244">If `GetChars` is called with `flush` set to `false`, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation.</span></span> <span data-ttu-id="72e2c-245">应用程序应在 `GetCharCount` 调用同一个块之前立即调用数据块 `GetChars` ，以便在计算中包括前一块中的任何尾随字节。</span><span class="sxs-lookup"><span data-stu-id="72e2c-245">The application should call `GetCharCount` on a block of data immediately before calling `GetChars` on the same block, so that any trailing bytes from the previous block are included in the calculation.</span></span>



## Examples
 <span data-ttu-id="72e2c-246">下面的代码示例演示如何使用 <xref:System.Text.Decoder.GetCharCount%2A> 方法来计算对数组中指定范围的字节进行解码所需的字符数。</span><span class="sxs-lookup"><span data-stu-id="72e2c-246">The following code example demonstrates how to use the <xref:System.Text.Decoder.GetCharCount%2A> method to calculate the number of characters required to decode the specified range of bytes in the array.</span></span>

 [!code-cpp[System.Text.Decoder.GetCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Decoder.GetCharCount Example/CPP/getcharcount-byte[]-int32-int32.cpp#1)]
 [!code-csharp[System.Text.Decoder.GetCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Decoder.GetCharCount Example/CS/getcharcount-byte[]-int32-int32.cs#1)]
 [!code-vb[System.Text.Decoder.GetCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Decoder.GetCharCount Example/VB/getcharcount-byte[]-int32-int32.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="72e2c-247"><paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span><span class="sxs-lookup"><span data-stu-id="72e2c-247"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="72e2c-248"><paramref name="index" /> 或 <paramref name="count" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="72e2c-248"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>

<span data-ttu-id="72e2c-249">或</span><span class="sxs-lookup"><span data-stu-id="72e2c-249">-or-</span></span>

 <span data-ttu-id="72e2c-250"><paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="bytes" /> 中的有效范围。</span><span class="sxs-lookup"><span data-stu-id="72e2c-250"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="72e2c-251">发生回退（有关详细信息，请参阅<see href="/dotnet/standard/base-types/character-encoding">采用 .NET 的字符编码</see>）</span><span class="sxs-lookup"><span data-stu-id="72e2c-251">A fallback occurred (for more information, see <see href="/dotnet/standard/base-types/character-encoding">Character Encoding in .NET</see>)</span></span>

<span data-ttu-id="72e2c-252">－和－</span><span class="sxs-lookup"><span data-stu-id="72e2c-252">-and-</span></span>

 <span data-ttu-id="72e2c-253">将 <see cref="P:System.Text.Decoder.Fallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="72e2c-253"><see cref="P:System.Text.Decoder.Fallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.Decoder.Reset" />
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public virtual int GetCharCount (byte[] bytes, int index, int count, bool flush);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetCharCount(unsigned int8[] bytes, int32 index, int32 count, bool flush) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCharCount (bytes As Byte(), index As Integer, count As Integer, flush As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetCharCount(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count, bool flush);" />
      <MemberSignature Language="F#" Value="abstract member GetCharCount : byte[] * int * int * bool -&gt; int&#xA;override this.GetCharCount : byte[] * int * int * bool -&gt; int" Usage="decoder.GetCharCount (bytes, index, count, flush)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="flush" Type="System.Boolean" Index="3" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="72e2c-254">包含要解码的字节序列的字节数组。</span><span class="sxs-lookup"><span data-stu-id="72e2c-254">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="index"><span data-ttu-id="72e2c-255">第一个要解码的字节的索引。</span><span class="sxs-lookup"><span data-stu-id="72e2c-255">The index of the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="72e2c-256">要解码的字节数。</span><span class="sxs-lookup"><span data-stu-id="72e2c-256">The number of bytes to decode.</span></span></param>
        <param name="flush"><span data-ttu-id="72e2c-257">若要在计算后模拟清除解码器的内部状态，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="72e2c-257"><see langword="true" /> to simulate clearing the internal state of the encoder after the calculation; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="72e2c-258">在派生类中重写时，计算对字节序列（从指定字节数组开始）进行解码所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="72e2c-258">When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</span></span> <span data-ttu-id="72e2c-259">一个参数，该参数指示是否在计算后清除解码器的内部状态。</span><span class="sxs-lookup"><span data-stu-id="72e2c-259">A parameter indicates whether to clear the internal state of the decoder after the calculation.</span></span></summary>
        <returns><span data-ttu-id="72e2c-260">对指定的字节序列和内部缓冲区中任何字节进行解码所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="72e2c-260">The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="72e2c-261">此方法不会影响解码器的状态。</span><span class="sxs-lookup"><span data-stu-id="72e2c-261">This method does not affect the state of the decoder.</span></span>

 <span data-ttu-id="72e2c-262">若要计算 <xref:System.Text.Decoder.GetChars%2A> 存储所生成字符所需的确切数组大小，应用程序应使用 <xref:System.Text.Decoder.GetCharCount%2A> 。</span><span class="sxs-lookup"><span data-stu-id="72e2c-262">To calculate the exact array size that <xref:System.Text.Decoder.GetChars%2A> requires to store the resulting characters, the application should use <xref:System.Text.Decoder.GetCharCount%2A>.</span></span>

 <span data-ttu-id="72e2c-263">如果 `GetChars` 在 `flush` 设置为的情况 `false` 下调用，则解码器会将结尾字节存储在内部缓冲区中的数据块的末尾，并在下一个解码操作中使用它们。</span><span class="sxs-lookup"><span data-stu-id="72e2c-263">If `GetChars` is called with `flush` set to `false`, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation.</span></span> <span data-ttu-id="72e2c-264">应用程序应在 `GetCharCount` 调用同一个块之前立即调用数据块 `GetChars` ，以便在计算中包括前一块中的任何尾随字节。</span><span class="sxs-lookup"><span data-stu-id="72e2c-264">The application should call `GetCharCount` on a block of data immediately before calling `GetChars` on the same block, so that any trailing bytes from the previous block are included in the calculation.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="72e2c-265"><paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span><span class="sxs-lookup"><span data-stu-id="72e2c-265"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="72e2c-266"><paramref name="index" /> 或 <paramref name="count" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="72e2c-266"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>

<span data-ttu-id="72e2c-267">或</span><span class="sxs-lookup"><span data-stu-id="72e2c-267">-or-</span></span>

 <span data-ttu-id="72e2c-268"><paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="bytes" /> 中的有效范围。</span><span class="sxs-lookup"><span data-stu-id="72e2c-268"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="72e2c-269">发生回退（有关详细信息，请参阅<see href="/dotnet/standard/base-types/character-encoding">采用 .NET 的字符编码</see>）</span><span class="sxs-lookup"><span data-stu-id="72e2c-269">A fallback occurred (for more information, see <see href="/dotnet/standard/base-types/character-encoding">Character Encoding in .NET</see>)</span></span>

<span data-ttu-id="72e2c-270">－和－</span><span class="sxs-lookup"><span data-stu-id="72e2c-270">-and-</span></span>

 <span data-ttu-id="72e2c-271">将 <see cref="P:System.Text.Decoder.Fallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="72e2c-271"><see cref="P:System.Text.Decoder.Fallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)" />
        <altmember cref="M:System.Text.Decoder.Reset" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChars">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="72e2c-272">在派生类中重写时，将一个字节序列解码为一组字符。</span><span class="sxs-lookup"><span data-stu-id="72e2c-272">When overridden in a derived class, decodes a sequence of bytes into a set of characters.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public virtual int GetChars (ReadOnlySpan&lt;byte&gt; bytes, Span&lt;char&gt; chars, bool flush);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetChars(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes, valuetype System.Span`1&lt;char&gt; chars, bool flush) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Decoder.GetChars(System.ReadOnlySpan{System.Byte},System.Span{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetChars (bytes As ReadOnlySpan(Of Byte), chars As Span(Of Char), flush As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetChars(ReadOnlySpan&lt;System::Byte&gt; bytes, Span&lt;char&gt; chars, bool flush);" />
      <MemberSignature Language="F#" Value="abstract member GetChars : ReadOnlySpan&lt;byte&gt; * Span&lt;char&gt; * bool -&gt; int&#xA;override this.GetChars : ReadOnlySpan&lt;byte&gt; * Span&lt;char&gt; * bool -&gt; int" Usage="decoder.GetChars (bytes, chars, flush)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="chars" Type="System.Span&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="flush" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="72e2c-273">要解码的字节范围。</span><span class="sxs-lookup"><span data-stu-id="72e2c-273">A byte span to decode.</span></span></param>
        <param name="chars"><span data-ttu-id="72e2c-274">要写入生成的字符集的范围。</span><span class="sxs-lookup"><span data-stu-id="72e2c-274">A span to write the resulting set of characters.</span></span></param>
        <param name="flush"><span data-ttu-id="72e2c-275">如果要在转换后清除解码器的内部状态，则为 <see langword="true" />；否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="72e2c-275"><see langword="true" /> to clear the internal state of the decoder after the conversion; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="72e2c-276">在派生类中重写时，将范围字节序列和内部缓冲区中的任何字节解码为从指定字符指针开始存储的一组字符。</span><span class="sxs-lookup"><span data-stu-id="72e2c-276">When overridden in a derived class, decodes a sequence of span bytes and any bytes in the internal buffer into a set of characters that are stored starting at the specified character pointer.</span></span> <span data-ttu-id="72e2c-277">一个参数，指示转换后是否要清除解码器的内部状态。</span><span class="sxs-lookup"><span data-stu-id="72e2c-277">A parameter indicates whether to clear the internal state of the decoder after the conversion.</span></span></summary>
        <returns><span data-ttu-id="72e2c-278">在由 <paramref name="chars" /> 参数指示的范围处写入的实际字符数。</span><span class="sxs-lookup"><span data-stu-id="72e2c-278">The actual number of characters written at the span indicated by the <paramref name="chars" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="72e2c-279">请记住， <xref:System.Text.Decoder> 对象会在调用之间保存状态 <xref:System.Text.Decoder.GetChars%2A> 。</span><span class="sxs-lookup"><span data-stu-id="72e2c-279">Remember that the <xref:System.Text.Decoder> object saves state between calls to <xref:System.Text.Decoder.GetChars%2A>.</span></span> <span data-ttu-id="72e2c-280">当应用程序使用数据流完成时，它应将参数设置为， `flush` `true` 以确保刷新状态信息。</span><span class="sxs-lookup"><span data-stu-id="72e2c-280">When the application is done with a stream of data, it should set the `flush` parameter to `true` to make sure that the state information is flushed.</span></span> <span data-ttu-id="72e2c-281">通过此设置，解码器将忽略数据块末尾的无效字节，并清除内部缓冲区。</span><span class="sxs-lookup"><span data-stu-id="72e2c-281">With this setting, the decoder ignores invalid bytes at the end of the data block and clears the internal buffer.</span></span>

 <span data-ttu-id="72e2c-282">若要计算 `GetChars` 存储所生成字符所需的确切范围大小，应用程序应使用 <xref:System.Text.Decoder.GetCharCount%2A> 。</span><span class="sxs-lookup"><span data-stu-id="72e2c-282">To calculate the exact span size that `GetChars` requires to store the resulting characters, the application should use <xref:System.Text.Decoder.GetCharCount%2A>.</span></span>

 <span data-ttu-id="72e2c-283">如果 `GetChars` 在 `flush` 设置为的情况 `false` 下调用，则解码器会将结尾字节存储在内部缓冲区中的数据块的末尾，并在下一个解码操作中使用它们。</span><span class="sxs-lookup"><span data-stu-id="72e2c-283">If `GetChars` is called with `flush` set to `false`, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation.</span></span> <span data-ttu-id="72e2c-284">应用程序应在 `GetCharCount` 调用同一个块之前立即调用数据块 `GetChars` ，以便在计算中包括前一块中的任何尾随字节。</span><span class="sxs-lookup"><span data-stu-id="72e2c-284">The application should call `GetCharCount` on a block of data immediately before calling `GetChars` on the same block, so that any trailing bytes from the previous block are included in the calculation.</span></span>

 <span data-ttu-id="72e2c-285">如果你的应用程序要转换输入流的多个段，请考虑使用 <xref:System.Text.Decoder.Convert%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="72e2c-285">If your application is to convert many segments of an input stream, consider using the <xref:System.Text.Decoder.Convert%2A> method.</span></span> <span data-ttu-id="72e2c-286"><xref:System.Text.Decoder.GetChars%2A> 如果输出范围不够大，将会引发异常，但 <xref:System.Text.Decoder.Convert%2A> 将填满尽可能多的空间并返回读取的字节以及写入的字符，前提是输出数组至少允许两个字符。</span><span class="sxs-lookup"><span data-stu-id="72e2c-286"><xref:System.Text.Decoder.GetChars%2A> will throw an exception if the output span isn't large enough, but <xref:System.Text.Decoder.Convert%2A> will fill as much space as possible and return the bytes read and chars written, provided the output array allows for at least two characters.</span></span> <span data-ttu-id="72e2c-287"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType>有关更多注释，另请参阅主题。</span><span class="sxs-lookup"><span data-stu-id="72e2c-287">Also see the <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> topic for more comments.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public virtual int GetChars (byte* bytes, int byteCount, char* chars, int charCount, bool flush);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetChars(unsigned int8* bytes, int32 byteCount, char* chars, int32 charCount, bool flush) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetChars(System::Byte* bytes, int byteCount, char* chars, int charCount, bool flush);" />
      <MemberSignature Language="F#" Value="abstract member GetChars : nativeptr&lt;byte&gt; * int * nativeptr&lt;char&gt; * int * bool -&gt; int&#xA;override this.GetChars : nativeptr&lt;byte&gt; * int * nativeptr&lt;char&gt; * int * bool -&gt; int" Usage="decoder.GetChars (bytes, byteCount, chars, charCount, flush)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="byteCount" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="chars" Type="System.Char*" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="charCount" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="flush" Type="System.Boolean" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="72e2c-288">指向第一个要解码的字节的指针。</span><span class="sxs-lookup"><span data-stu-id="72e2c-288">A pointer to the first byte to decode.</span></span></param>
        <param name="byteCount"><span data-ttu-id="72e2c-289">要解码的字节数。</span><span class="sxs-lookup"><span data-stu-id="72e2c-289">The number of bytes to decode.</span></span></param>
        <param name="chars"><span data-ttu-id="72e2c-290">一个指针，指向开始写入所产生的字符集的位置。</span><span class="sxs-lookup"><span data-stu-id="72e2c-290">A pointer to the location at which to start writing the resulting set of characters.</span></span></param>
        <param name="charCount"><span data-ttu-id="72e2c-291">要写入的最大字符数。</span><span class="sxs-lookup"><span data-stu-id="72e2c-291">The maximum number of characters to write.</span></span></param>
        <param name="flush"><span data-ttu-id="72e2c-292">如果要在转换后清除解码器的内部状态，则为 <see langword="true" />；否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="72e2c-292"><see langword="true" /> to clear the internal state of the decoder after the conversion; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="72e2c-293">在派生类中重写时，将字节序列（从指定的字节指针处开始）和任何内部缓冲区中的字节解码为从指定字符指针开始存储的一组字符。</span><span class="sxs-lookup"><span data-stu-id="72e2c-293">When overridden in a derived class, decodes a sequence of bytes starting at the specified byte pointer and any bytes in the internal buffer into a set of characters that are stored starting at the specified character pointer.</span></span> <span data-ttu-id="72e2c-294">一个参数，指示转换后是否要清除解码器的内部状态。</span><span class="sxs-lookup"><span data-stu-id="72e2c-294">A parameter indicates whether to clear the internal state of the decoder after the conversion.</span></span></summary>
        <returns><span data-ttu-id="72e2c-295">在由 <paramref name="chars" /> 参数指示的位置处写入的实际字符数。</span><span class="sxs-lookup"><span data-stu-id="72e2c-295">The actual number of characters written at the location indicated by the <paramref name="chars" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="72e2c-296">请记住， <xref:System.Text.Decoder> 对象会在调用之间保存状态 <xref:System.Text.Decoder.GetChars%2A> 。</span><span class="sxs-lookup"><span data-stu-id="72e2c-296">Remember that the <xref:System.Text.Decoder> object saves state between calls to <xref:System.Text.Decoder.GetChars%2A>.</span></span> <span data-ttu-id="72e2c-297">当应用程序使用数据流完成时，它应将参数设置为， `flush` `true` 以确保刷新状态信息。</span><span class="sxs-lookup"><span data-stu-id="72e2c-297">When the application is done with a stream of data, it should set the `flush` parameter to `true` to make sure that the state information is flushed.</span></span> <span data-ttu-id="72e2c-298">通过此设置，解码器将忽略数据块末尾的无效字节，并清除内部缓冲区。</span><span class="sxs-lookup"><span data-stu-id="72e2c-298">With this setting, the decoder ignores invalid bytes at the end of the data block and clears the internal buffer.</span></span>

 <span data-ttu-id="72e2c-299">若要计算 `GetChars` 存储所生成的字符所需的确切缓冲区大小，应用程序应使用 <xref:System.Text.Decoder.GetCharCount%2A> 。</span><span class="sxs-lookup"><span data-stu-id="72e2c-299">To calculate the exact buffer size that `GetChars` requires to store the resulting characters, the application should use <xref:System.Text.Decoder.GetCharCount%2A>.</span></span>

 <span data-ttu-id="72e2c-300">如果 `GetChars` 在 `flush` 设置为的情况 `false` 下调用，则解码器会将结尾字节存储在内部缓冲区中的数据块的末尾，并在下一个解码操作中使用它们。</span><span class="sxs-lookup"><span data-stu-id="72e2c-300">If `GetChars` is called with `flush` set to `false`, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation.</span></span> <span data-ttu-id="72e2c-301">应用程序应在 `GetCharCount` 调用同一个块之前立即调用数据块 `GetChars` ，以便在计算中包括前一块中的任何尾随字节。</span><span class="sxs-lookup"><span data-stu-id="72e2c-301">The application should call `GetCharCount` on a block of data immediately before calling `GetChars` on the same block, so that any trailing bytes from the previous block are included in the calculation.</span></span>

 <span data-ttu-id="72e2c-302">如果你的应用程序要转换输入流的多个段，请考虑使用 <xref:System.Text.Decoder.Convert%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="72e2c-302">If your application is to convert many segments of an input stream, consider using the <xref:System.Text.Decoder.Convert%2A> method.</span></span> <span data-ttu-id="72e2c-303"><xref:System.Text.Decoder.GetChars%2A> 如果输出缓冲区不够大，将会引发异常，但 <xref:System.Text.Decoder.Convert%2A> 将填满尽可能多的空间并返回读取的字节以及写入的字符，前提是输出数组至少允许两个字符。</span><span class="sxs-lookup"><span data-stu-id="72e2c-303"><xref:System.Text.Decoder.GetChars%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Decoder.Convert%2A> will fill as much space as possible and return the bytes read and chars written, provided the output array allows for at least two characters.</span></span> <span data-ttu-id="72e2c-304"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType>有关更多注释，另请参阅主题。</span><span class="sxs-lookup"><span data-stu-id="72e2c-304">Also see the <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> topic for more comments.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="72e2c-305"><paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span><span class="sxs-lookup"><span data-stu-id="72e2c-305"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span>

<span data-ttu-id="72e2c-306">或</span><span class="sxs-lookup"><span data-stu-id="72e2c-306">-or-</span></span>

 <span data-ttu-id="72e2c-307"><paramref name="chars" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span><span class="sxs-lookup"><span data-stu-id="72e2c-307"><paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="72e2c-308"><paramref name="byteCount" /> 或 <paramref name="charCount" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="72e2c-308"><paramref name="byteCount" /> or <paramref name="charCount" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="72e2c-309"><paramref name="charCount" /> 少于所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="72e2c-309"><paramref name="charCount" /> is less than the resulting number of characters.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="72e2c-310">发生回退（有关详细信息，请参阅<see href="/dotnet/standard/base-types/character-encoding">采用 .NET 的字符编码</see>）</span><span class="sxs-lookup"><span data-stu-id="72e2c-310">A fallback occurred (for more information, see <see href="/dotnet/standard/base-types/character-encoding">Character Encoding in .NET</see>)</span></span>

<span data-ttu-id="72e2c-311">－和－</span><span class="sxs-lookup"><span data-stu-id="72e2c-311">-and-</span></span>

 <span data-ttu-id="72e2c-312">将 <see cref="P:System.Text.Decoder.Fallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="72e2c-312"><see cref="P:System.Text.Decoder.Fallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.Decoder.GetCharCount(System.Byte*,System.Int32,System.Boolean)" />
        <altmember cref="M:System.Text.Decoder.Reset" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public abstract int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetChars(unsigned int8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetChars (bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int GetChars(cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex, int byteCount, cli::array &lt;char&gt; ^ chars, int charIndex);" />
      <MemberSignature Language="F#" Value="abstract member GetChars : byte[] * int * int * char[] * int -&gt; int" Usage="decoder.GetChars (bytes, byteIndex, byteCount, chars, charIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="72e2c-313">包含要解码的字节序列的字节数组。</span><span class="sxs-lookup"><span data-stu-id="72e2c-313">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="72e2c-314">第一个要解码的字节的索引。</span><span class="sxs-lookup"><span data-stu-id="72e2c-314">The index of the first byte to decode.</span></span></param>
        <param name="byteCount"><span data-ttu-id="72e2c-315">要解码的字节数。</span><span class="sxs-lookup"><span data-stu-id="72e2c-315">The number of bytes to decode.</span></span></param>
        <param name="chars"><span data-ttu-id="72e2c-316">要用于包含所产生的字符集的字符数组。</span><span class="sxs-lookup"><span data-stu-id="72e2c-316">The character array to contain the resulting set of characters.</span></span></param>
        <param name="charIndex"><span data-ttu-id="72e2c-317">开始写入所产生的字符集的索引位置。</span><span class="sxs-lookup"><span data-stu-id="72e2c-317">The index at which to start writing the resulting set of characters.</span></span></param>
        <summary><span data-ttu-id="72e2c-318">在派生类中重写时，将指定字节数组的字节序列和内部缓冲区中的任何字节解码到指定的字符数组。</span><span class="sxs-lookup"><span data-stu-id="72e2c-318">When overridden in a derived class, decodes a sequence of bytes from the specified byte array and any bytes in the internal buffer into the specified character array.</span></span></summary>
        <returns><span data-ttu-id="72e2c-319">写入 <paramref name="chars" /> 的实际字符数。</span><span class="sxs-lookup"><span data-stu-id="72e2c-319">The actual number of characters written into <paramref name="chars" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="72e2c-320">请记住， <xref:System.Text.Decoder> 对象会在调用之间保存状态 <xref:System.Text.Decoder.GetChars%2A> 。</span><span class="sxs-lookup"><span data-stu-id="72e2c-320">Remember that the <xref:System.Text.Decoder> object saves state between calls to <xref:System.Text.Decoder.GetChars%2A>.</span></span> <span data-ttu-id="72e2c-321">当应用程序使用数据流完成时，它应将参数设置为， `flush` `true` 以确保刷新状态信息。</span><span class="sxs-lookup"><span data-stu-id="72e2c-321">When the application is done with a stream of data, it should set the `flush` parameter to `true` to make sure that the state information is flushed.</span></span> <span data-ttu-id="72e2c-322">通过此设置，解码器将忽略数据块末尾的无效字节，并清除内部缓冲区。</span><span class="sxs-lookup"><span data-stu-id="72e2c-322">With this setting, the decoder ignores invalid bytes at the end of the data block and clears the internal buffer.</span></span>

 <span data-ttu-id="72e2c-323">若要计算 `GetChars` 存储所生成字符所需的确切数组大小，应用程序应使用 <xref:System.Text.Decoder.GetCharCount%2A> 。</span><span class="sxs-lookup"><span data-stu-id="72e2c-323">To calculate the exact array size that `GetChars` requires to store the resulting characters, the application should use <xref:System.Text.Decoder.GetCharCount%2A>.</span></span>

 <span data-ttu-id="72e2c-324">如果 `GetChars` 在 `flush` 设置为的情况 `false` 下调用，则解码器会将结尾字节存储在内部缓冲区中的数据块的末尾，并在下一个解码操作中使用它们。</span><span class="sxs-lookup"><span data-stu-id="72e2c-324">If `GetChars` is called with `flush` set to `false`, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation.</span></span> <span data-ttu-id="72e2c-325">应用程序应在 `GetCharCount` 调用同一个块之前立即调用数据块 `GetChars` ，以便在计算中包括前一块中的任何尾随字节。</span><span class="sxs-lookup"><span data-stu-id="72e2c-325">The application should call `GetCharCount` on a block of data immediately before calling `GetChars` on the same block, so that any trailing bytes from the previous block are included in the calculation.</span></span>

 <span data-ttu-id="72e2c-326">如果你的应用程序要转换输入流的多个段，请考虑使用 <xref:System.Text.Decoder.Convert%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="72e2c-326">If your application is to convert many segments of an input stream, consider using the <xref:System.Text.Decoder.Convert%2A> method.</span></span> <span data-ttu-id="72e2c-327"><xref:System.Text.Decoder.GetChars%2A> 如果输出缓冲区不够大，将会引发异常，但 <xref:System.Text.Decoder.Convert%2A> 将填满尽可能多的空间并返回读取的字节以及写入的字符，前提是输出数组至少允许两个字符。</span><span class="sxs-lookup"><span data-stu-id="72e2c-327"><xref:System.Text.Decoder.GetChars%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Decoder.Convert%2A> will fill as much space as possible and return the bytes read and chars written, provided the output array allows for at least two characters.</span></span> <span data-ttu-id="72e2c-328"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType>有关更多注释，另请参阅主题。</span><span class="sxs-lookup"><span data-stu-id="72e2c-328">Also see the <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> topic for more comments.</span></span>



## Examples
 <span data-ttu-id="72e2c-329">下面的示例演示如何对字节数组中的一系列元素进行解码并将其存储在 Unicode 字符数组中。</span><span class="sxs-lookup"><span data-stu-id="72e2c-329">The following example demonstrates how to decode a range of elements from a byte array and store them in a Unicode character array.</span></span> <span data-ttu-id="72e2c-330"><xref:System.Text.Decoder.GetCharCount%2A>方法用于计算将已解码的元素存储在数组中所需的字符数 `bytes` 。</span><span class="sxs-lookup"><span data-stu-id="72e2c-330">The <xref:System.Text.Decoder.GetCharCount%2A> method is used to calculate the number of characters needed to store the decoded elements in the array `bytes`.</span></span> <span data-ttu-id="72e2c-331"><xref:System.Text.Decoder.GetChars%2A>方法对字节数组中的指定元素进行解码，并将其存储在新的字符数组中。</span><span class="sxs-lookup"><span data-stu-id="72e2c-331">The <xref:System.Text.Decoder.GetChars%2A> method decodes the specified elements in the byte array and stores them in the new character array.</span></span>

 [!code-cpp[System.Text.Decoder.GetChars Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Decoder.GetChars Example/CPP/getchars-byte[]-int32-int32-char[]-int32.cpp#1)]
 [!code-csharp[System.Text.Decoder.GetChars Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Decoder.GetChars Example/CS/getchars-byte[]-int32-int32-char[]-int32.cs#1)]
 [!code-vb[System.Text.Decoder.GetChars Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Decoder.GetChars Example/VB/getchars-byte[]-int32-int32-char[]-int32.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="72e2c-332"><paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span><span class="sxs-lookup"><span data-stu-id="72e2c-332"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span>

<span data-ttu-id="72e2c-333">或</span><span class="sxs-lookup"><span data-stu-id="72e2c-333">-or-</span></span>

 <span data-ttu-id="72e2c-334"><paramref name="chars" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span><span class="sxs-lookup"><span data-stu-id="72e2c-334"><paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="72e2c-335"><paramref name="byteIndex" />、<paramref name="byteCount" /> 或 <paramref name="charIndex" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="72e2c-335"><paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.</span></span>

<span data-ttu-id="72e2c-336">或</span><span class="sxs-lookup"><span data-stu-id="72e2c-336">-or-</span></span>

 <span data-ttu-id="72e2c-337"><paramref name="byteindex" /> 和 <paramref name="byteCount" /> 不表示 <paramref name="bytes" />中的有效范围。</span><span class="sxs-lookup"><span data-stu-id="72e2c-337"><paramref name="byteindex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.</span></span>

<span data-ttu-id="72e2c-338">或</span><span class="sxs-lookup"><span data-stu-id="72e2c-338">-or-</span></span>

 <span data-ttu-id="72e2c-339"><paramref name="charIndex" /> 不是 <paramref name="chars" /> 中的有效索引。</span><span class="sxs-lookup"><span data-stu-id="72e2c-339"><paramref name="charIndex" /> is not a valid index in <paramref name="chars" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="72e2c-340"><paramref name="chars" /> 中从 <paramref name="charIndex" /> 到数组结尾没有足够容量来容纳所产生的字符。</span><span class="sxs-lookup"><span data-stu-id="72e2c-340"><paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="72e2c-341">发生回退（有关详细信息，请参阅<see href="/dotnet/standard/base-types/character-encoding">采用 .NET 的字符编码</see>）</span><span class="sxs-lookup"><span data-stu-id="72e2c-341">A fallback occurred (for more information, see <see href="/dotnet/standard/base-types/character-encoding">Character Encoding in .NET</see>)</span></span>

<span data-ttu-id="72e2c-342">－和－</span><span class="sxs-lookup"><span data-stu-id="72e2c-342">-and-</span></span>

 <span data-ttu-id="72e2c-343">将 <see cref="P:System.Text.Decoder.Fallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="72e2c-343"><see cref="P:System.Text.Decoder.Fallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.Decoder.Reset" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public virtual int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, bool flush);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetChars(unsigned int8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex, bool flush) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetChars (bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer, flush As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetChars(cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex, int byteCount, cli::array &lt;char&gt; ^ chars, int charIndex, bool flush);" />
      <MemberSignature Language="F#" Value="abstract member GetChars : byte[] * int * int * char[] * int * bool -&gt; int&#xA;override this.GetChars : byte[] * int * int * char[] * int * bool -&gt; int" Usage="decoder.GetChars (bytes, byteIndex, byteCount, chars, charIndex, flush)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="byteIndex" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="byteCount" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="chars" Type="System.Char[]" Index="3" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="charIndex" Type="System.Int32" Index="4" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="flush" Type="System.Boolean" Index="5" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="72e2c-344">包含要解码的字节序列的字节数组。</span><span class="sxs-lookup"><span data-stu-id="72e2c-344">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="72e2c-345">第一个要解码的字节的索引。</span><span class="sxs-lookup"><span data-stu-id="72e2c-345">The index of the first byte to decode.</span></span></param>
        <param name="byteCount"><span data-ttu-id="72e2c-346">要解码的字节数。</span><span class="sxs-lookup"><span data-stu-id="72e2c-346">The number of bytes to decode.</span></span></param>
        <param name="chars"><span data-ttu-id="72e2c-347">要用于包含所产生的字符集的字符数组。</span><span class="sxs-lookup"><span data-stu-id="72e2c-347">The character array to contain the resulting set of characters.</span></span></param>
        <param name="charIndex"><span data-ttu-id="72e2c-348">开始写入所产生的字符集的索引位置。</span><span class="sxs-lookup"><span data-stu-id="72e2c-348">The index at which to start writing the resulting set of characters.</span></span></param>
        <param name="flush"><span data-ttu-id="72e2c-349">如果要在转换后清除解码器的内部状态，则为 <see langword="true" />；否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="72e2c-349"><see langword="true" /> to clear the internal state of the decoder after the conversion; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="72e2c-350">在派生类中重写时，将指定字节数组的字节序列和内部缓冲区中的任何字节解码到指定的字符数组。</span><span class="sxs-lookup"><span data-stu-id="72e2c-350">When overridden in a derived class, decodes a sequence of bytes from the specified byte array and any bytes in the internal buffer into the specified character array.</span></span> <span data-ttu-id="72e2c-351">一个参数，指示转换后是否要清除解码器的内部状态。</span><span class="sxs-lookup"><span data-stu-id="72e2c-351">A parameter indicates whether to clear the internal state of the decoder after the conversion.</span></span></summary>
        <returns><span data-ttu-id="72e2c-352">写入 <paramref name="chars" /> 参数的实际字符数。</span><span class="sxs-lookup"><span data-stu-id="72e2c-352">The actual number of characters written into the <paramref name="chars" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="72e2c-353">请记住， <xref:System.Text.Decoder> 对象会在调用之间保存状态 <xref:System.Text.Decoder.GetChars%2A> 。</span><span class="sxs-lookup"><span data-stu-id="72e2c-353">Remember that the <xref:System.Text.Decoder> object saves state between calls to <xref:System.Text.Decoder.GetChars%2A>.</span></span> <span data-ttu-id="72e2c-354">当应用程序使用数据流完成时，它应将参数设置为， `flush` `true` 以确保刷新状态信息。</span><span class="sxs-lookup"><span data-stu-id="72e2c-354">When the application is done with a stream of data, it should set the `flush` parameter to `true` to make sure that the state information is flushed.</span></span> <span data-ttu-id="72e2c-355">通过此设置，解码器将忽略数据块末尾的无效字节，并清除内部缓冲区。</span><span class="sxs-lookup"><span data-stu-id="72e2c-355">With this setting, the decoder ignores invalid bytes at the end of the data block and clears the internal buffer.</span></span>

 <span data-ttu-id="72e2c-356">若要计算 `GetChars` 存储所生成字符所需的确切数组大小，应用程序应使用 <xref:System.Text.Decoder.GetCharCount%2A> 。</span><span class="sxs-lookup"><span data-stu-id="72e2c-356">To calculate the exact array size that `GetChars` requires to store the resulting characters, the application should use <xref:System.Text.Decoder.GetCharCount%2A>.</span></span>

 <span data-ttu-id="72e2c-357">如果 `GetChars` 在 `flush` 设置为的情况 `false` 下调用，则解码器会将结尾字节存储在内部缓冲区中的数据块的末尾，并在下一个解码操作中使用它们。</span><span class="sxs-lookup"><span data-stu-id="72e2c-357">If `GetChars` is called with `flush` set to `false`, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation.</span></span> <span data-ttu-id="72e2c-358">应用程序应在 `GetCharCount` 调用同一个块之前立即调用数据块 `GetChars` ，以便在计算中包括前一块中的任何尾随字节。</span><span class="sxs-lookup"><span data-stu-id="72e2c-358">The application should call `GetCharCount` on a block of data immediately before calling `GetChars` on the same block, so that any trailing bytes from the previous block are included in the calculation.</span></span>

 <span data-ttu-id="72e2c-359">如果你的应用程序要转换输入流的多个段，请考虑使用 <xref:System.Text.Decoder.Convert%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="72e2c-359">If your application is to convert many segments of an input stream, consider using the <xref:System.Text.Decoder.Convert%2A> method.</span></span> <span data-ttu-id="72e2c-360"><xref:System.Text.Decoder.GetChars%2A> 如果输出缓冲区不够大，将会引发异常，但 <xref:System.Text.Decoder.Convert%2A> 将填满尽可能多的空间并返回读取的字节以及写入的字符，前提是输出数组至少允许两个字符。</span><span class="sxs-lookup"><span data-stu-id="72e2c-360"><xref:System.Text.Decoder.GetChars%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Decoder.Convert%2A> will fill as much space as possible and return the bytes read and chars written, provided the output array allows for at least two characters.</span></span> <span data-ttu-id="72e2c-361"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType>有关更多注释，另请参阅主题。</span><span class="sxs-lookup"><span data-stu-id="72e2c-361">Also see the <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> topic for more comments.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="72e2c-362"><paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span><span class="sxs-lookup"><span data-stu-id="72e2c-362"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span>

<span data-ttu-id="72e2c-363">或</span><span class="sxs-lookup"><span data-stu-id="72e2c-363">-or-</span></span>

 <span data-ttu-id="72e2c-364"><paramref name="chars" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span><span class="sxs-lookup"><span data-stu-id="72e2c-364"><paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="72e2c-365"><paramref name="byteIndex" />、<paramref name="byteCount" /> 或 <paramref name="charIndex" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="72e2c-365"><paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.</span></span>

<span data-ttu-id="72e2c-366">或</span><span class="sxs-lookup"><span data-stu-id="72e2c-366">-or-</span></span>

 <span data-ttu-id="72e2c-367"><paramref name="byteindex" /> 和 <paramref name="byteCount" /> 不表示 <paramref name="bytes" />中的有效范围。</span><span class="sxs-lookup"><span data-stu-id="72e2c-367"><paramref name="byteindex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.</span></span>

<span data-ttu-id="72e2c-368">或</span><span class="sxs-lookup"><span data-stu-id="72e2c-368">-or-</span></span>

 <span data-ttu-id="72e2c-369"><paramref name="charIndex" /> 不是 <paramref name="chars" /> 中的有效索引。</span><span class="sxs-lookup"><span data-stu-id="72e2c-369"><paramref name="charIndex" /> is not a valid index in <paramref name="chars" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="72e2c-370"><paramref name="chars" /> 中从 <paramref name="charIndex" /> 到数组结尾没有足够容量来容纳所产生的字符。</span><span class="sxs-lookup"><span data-stu-id="72e2c-370"><paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="72e2c-371">发生回退（有关详细信息，请参阅<see href="/dotnet/standard/base-types/character-encoding">采用 .NET 的字符编码</see>）</span><span class="sxs-lookup"><span data-stu-id="72e2c-371">A fallback occurred (for more information, see <see href="/dotnet/standard/base-types/character-encoding">Character Encoding in .NET</see>)</span></span>

<span data-ttu-id="72e2c-372">－和－</span><span class="sxs-lookup"><span data-stu-id="72e2c-372">-and-</span></span>

 <span data-ttu-id="72e2c-373">将 <see cref="P:System.Text.Decoder.Fallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="72e2c-373"><see cref="P:System.Text.Decoder.Fallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)" />
        <altmember cref="M:System.Text.Decoder.Reset" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public virtual void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Decoder.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="decoder.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="72e2c-374">在派生类中重写时，将解码器设置回它的初始状态。</span><span class="sxs-lookup"><span data-stu-id="72e2c-374">When overridden in a derived class, sets the decoder back to its initial state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="72e2c-375">此方法清除对象的内部状态 <xref:System.Text.Decoder> 。</span><span class="sxs-lookup"><span data-stu-id="72e2c-375">This method clears the internal state of the <xref:System.Text.Decoder> object.</span></span> <span data-ttu-id="72e2c-376">方法会清除以前对或的调用中保留的任何状态信息 <xref:System.Text.Decoder.GetChars%2A> <xref:System.Text.Decoder.Convert%2A> ，其中包括上一个数据块末尾的尾随字节。</span><span class="sxs-lookup"><span data-stu-id="72e2c-376">The method clears any state information preserved from a previous call to <xref:System.Text.Decoder.GetChars%2A> or <xref:System.Text.Decoder.Convert%2A>, including trailing bytes at the end of the previous data block.</span></span>

 <span data-ttu-id="72e2c-377">如果你的应用程序 <xref:System.Text.Decoder.Reset%2A> 想要重复使用同一解码器（即使是在由、或引发了异常之后）， <xref:System.Text.Decoder.GetChars%2A> <xref:System.Text.Decoder.Convert%2A> <xref:System.Text.Decoder.GetCharCount%2A> 或者如果解码器切换了流并开始解码另一个流，你的应用程序应调用方法。</span><span class="sxs-lookup"><span data-stu-id="72e2c-377">Your application should call the <xref:System.Text.Decoder.Reset%2A> method if it wants to reuse the same decoder even after an exception is thrown by <xref:System.Text.Decoder.GetChars%2A>, <xref:System.Text.Decoder.Convert%2A>, or <xref:System.Text.Decoder.GetCharCount%2A>, or if the decoder switches streams and begins to decode another stream.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
