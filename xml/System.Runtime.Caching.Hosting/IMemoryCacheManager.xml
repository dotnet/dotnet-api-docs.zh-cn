<Type Name="IMemoryCacheManager" FullName="System.Runtime.Caching.Hosting.IMemoryCacheManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="216337722b27c913ea8984f61ad9f489ddfa33e4" /><Meta Name="ms.sourcegitcommit" Value="397961a0164281b579f68064c3bb66c071f374d9" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/14/2020" /><Meta Name="ms.locfileid" Value="69275765" /></Metadata><TypeSignature Language="C#" Value="public interface IMemoryCacheManager" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IMemoryCacheManager" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Caching.Hosting.IMemoryCacheManager" />
  <TypeSignature Language="VB.NET" Value="Public Interface IMemoryCacheManager" />
  <TypeSignature Language="C++ CLI" Value="public interface class IMemoryCacheManager" />
  <TypeSignature Language="F#" Value="type IMemoryCacheManager = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Caching</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>定义一个接口，缓存使用该接口向主机环境告知缓存内存使用量。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.Caching.Hosting.IMemoryCacheManager>接口由主机环境（如 ASP.NET）实现，并由 <xref:System.Runtime.Caching.ObjectCache> 必须与主机环境交互以确定内存使用情况的实现使用。 由于缓存通常会消耗大量内存，因此 <xref:System.Runtime.Caching.Hosting.IMemoryCacheManager> 接口可帮助主机环境管理内存使用情况。  
  
 通常，只有 <xref:System.Runtime.Caching.ObjectCache> 管理内存中缓存对象的实现才能使用此接口。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ReleaseCache">
      <MemberSignature Language="C#" Value="public void ReleaseCache (System.Runtime.Caching.MemoryCache cache);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseCache(class System.Runtime.Caching.MemoryCache cache) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.Hosting.IMemoryCacheManager.ReleaseCache(System.Runtime.Caching.MemoryCache)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseCache (cache As MemoryCache)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseCache(System::Runtime::Caching::MemoryCache ^ cache);" />
      <MemberSignature Language="F#" Value="abstract member ReleaseCache : System.Runtime.Caching.MemoryCache -&gt; unit" Usage="iMemoryCacheManager.ReleaseCache cache" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cache" Type="System.Runtime.Caching.MemoryCache" />
      </Parameters>
      <Docs>
        <param name="cache">对该缓存的引用。</param>
        <summary>从主机环境中移除对某个缓存的所有引用。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果缓存以前已向主机环境注册了自身，则缓存可以调用 <xref:System.Runtime.Caching.Hosting.IMemoryCacheManager.ReleaseCache%2A> 方法来释放引用。 当释放缓存时，它应调用 <xref:System.Runtime.Caching.Hosting.IMemoryCacheManager.ReleaseCache%2A> 方法，以确保主机上没有对缓存的引用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateCacheSize">
      <MemberSignature Language="C#" Value="public void UpdateCacheSize (long size, System.Runtime.Caching.MemoryCache cache);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateCacheSize(int64 size, class System.Runtime.Caching.MemoryCache cache) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.Hosting.IMemoryCacheManager.UpdateCacheSize(System.Int64,System.Runtime.Caching.MemoryCache)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateCacheSize (size As Long, cache As MemoryCache)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateCacheSize(long size, System::Runtime::Caching::MemoryCache ^ cache);" />
      <MemberSignature Language="F#" Value="abstract member UpdateCacheSize : int64 * System.Runtime.Caching.MemoryCache -&gt; unit" Usage="iMemoryCacheManager.UpdateCacheSize (size, cache)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int64" />
        <Parameter Name="cache" Type="System.Runtime.Caching.MemoryCache" />
      </Parameters>
      <Docs>
        <param name="size">缓存使用的内存大小（以字节为单位）。</param>
        <param name="cache">对该缓存的引用。</param>
        <summary>报告当前缓存的大小。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 行为良好的缓存实现应使用 <xref:System.Runtime.Caching.Hosting.IMemoryCacheManager.UpdateCacheSize%2A> 方法定期将缓存的内存占用量的大小报告给主机环境。  
  
 报告大小的缓存实现还会将对自身的引用作为参数传递给它。 这使主机环境能够执行以下任务：  
  
-   维护已知对象缓存的列表。  
  
-   调用缓存并请求缓存根据报告的大小（如果需要）来剪裁缓存项的百分比。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
