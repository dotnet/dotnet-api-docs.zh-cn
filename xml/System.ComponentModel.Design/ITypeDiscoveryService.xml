<Type Name="ITypeDiscoveryService" FullName="System.ComponentModel.Design.ITypeDiscoveryService">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fd0ce821a53dace6627359aa4a1371b2402ce850" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89985328" /></Metadata><TypeSignature Language="C#" Value="public interface ITypeDiscoveryService" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ITypeDiscoveryService" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.ITypeDiscoveryService" />
  <TypeSignature Language="VB.NET" Value="Public Interface ITypeDiscoveryService" />
  <TypeSignature Language="C++ CLI" Value="public interface class ITypeDiscoveryService" />
  <TypeSignature Language="F#" Value="type ITypeDiscoveryService = interface" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.ComponentModel.TypeConverter" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="bb89e-101">发现设计时可用的类型。</span><span class="sxs-lookup"><span data-stu-id="bb89e-101">Discovers available types at design time.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb89e-102"><xref:System.ComponentModel.Design.ITypeDiscoveryService>当服务的客户端不知道现有类型或引用程序集的名称时，用于在设计时发现可用的类型。</span><span class="sxs-lookup"><span data-stu-id="bb89e-102">The <xref:System.ComponentModel.Design.ITypeDiscoveryService> is used to discover available types at design time, when a client of the service does not know the names of existing types or referenced assemblies.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IServiceProvider" />
  </Docs>
  <Members>
    <Member MemberName="GetTypes">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection GetTypes (Type baseType, bool excludeGlobalTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.ICollection GetTypes(class System.Type baseType, bool excludeGlobalTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.ITypeDiscoveryService.GetTypes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypes (baseType As Type, excludeGlobalTypes As Boolean) As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ICollection ^ GetTypes(Type ^ baseType, bool excludeGlobalTypes);" />
      <MemberSignature Language="F#" Value="abstract member GetTypes : Type * bool -&gt; System.Collections.ICollection" Usage="iTypeDiscoveryService.GetTypes (baseType, excludeGlobalTypes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseType" Type="System.Type" />
        <Parameter Name="excludeGlobalTypes" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="baseType"><span data-ttu-id="bb89e-103">要匹配的基类型。</span><span class="sxs-lookup"><span data-stu-id="bb89e-103">The base type to match.</span></span> <span data-ttu-id="bb89e-104">可以为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="bb89e-104">Can be <see langword="null" />.</span></span></param>
        <param name="excludeGlobalTypes"><span data-ttu-id="bb89e-105">指示是否应检查来自所有引用程序集的类型。</span><span class="sxs-lookup"><span data-stu-id="bb89e-105">Indicates whether types from all referenced assemblies should be checked.</span></span></param>
        <summary><span data-ttu-id="bb89e-106">检索可用类型的列表。</span><span class="sxs-lookup"><span data-stu-id="bb89e-106">Retrieves the list of available types.</span></span></summary>
        <returns><span data-ttu-id="bb89e-107">与 <paramref name="baseType" /> 和 <paramref name="excludeGlobalTypes" /> 指定的条件相匹配的类型的集合。</span><span class="sxs-lookup"><span data-stu-id="bb89e-107">A collection of types that match the criteria specified by <paramref name="baseType" /> and <paramref name="excludeGlobalTypes" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb89e-108">如果 `baseType` 为 `null` ，则返回所有类型。</span><span class="sxs-lookup"><span data-stu-id="bb89e-108">If `baseType` is `null`, all types are returned.</span></span> <span data-ttu-id="bb89e-109">否则，只返回从指定基类型派生的类型。</span><span class="sxs-lookup"><span data-stu-id="bb89e-109">Otherwise, only types derived from the specified base type are returned.</span></span> <span data-ttu-id="bb89e-110">如果 `excludeGlobalTypes` 为 `false` ，则检查所有引用的程序集中的类型。</span><span class="sxs-lookup"><span data-stu-id="bb89e-110">If `excludeGlobalTypes` is `false`, types from all referenced assemblies are checked.</span></span> <span data-ttu-id="bb89e-111">否则，仅检查来自非全局程序集缓存 (GAC) 被引用程序集的类型。</span><span class="sxs-lookup"><span data-stu-id="bb89e-111">Otherwise, only types from non-Global Assembly Cache (GAC) referenced assemblies are checked.</span></span> <span data-ttu-id="bb89e-112">有关详细信息，请参阅使用 [程序集和全局程序集缓存](/dotnet/framework/app-domains/working-with-assemblies-and-the-gac)。</span><span class="sxs-lookup"><span data-stu-id="bb89e-112">For more information, see [Working with Assemblies and the Global Assembly Cache](/dotnet/framework/app-domains/working-with-assemblies-and-the-gac).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
  </Members>
</Type>
