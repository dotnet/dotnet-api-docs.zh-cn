<Type Name="StringValidatorAttribute" FullName="System.Configuration.StringValidatorAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ca2fce2c45348e2b73b41596cd8165ffa745665f" /><Meta Name="ms.sourcegitcommit" Value="45d7745d094b38af5ccba8a4ca47efe84a312ef0" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="10/27/2020" /><Meta Name="ms.locfileid" Value="92685584" /></Metadata><TypeSignature Language="C#" Value="public sealed class StringValidatorAttribute : System.Configuration.ConfigurationValidatorAttribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit StringValidatorAttribute extends System.Configuration.ConfigurationValidatorAttribute" />
  <TypeSignature Language="DocId" Value="T:System.Configuration.StringValidatorAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class StringValidatorAttribute&#xA;Inherits ConfigurationValidatorAttribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class StringValidatorAttribute sealed : System::Configuration::ConfigurationValidatorAttribute" />
  <TypeSignature Language="F#" Value="type StringValidatorAttribute = class&#xA;    inherit ConfigurationValidatorAttribute" />
  <AssemblyInfo>
    <AssemblyName>System.Configuration</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.ConfigurationValidatorAttribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.AttributeUsage(System.AttributeTargets.Property)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.AttributeUsage(System.AttributeTargets.Property)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>以声明的方式指示 .NET 对配置属性执行字符串验证。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Configuration.StringValidatorAttribute> 来修饰配置属性。 这是为了指导 .NET 使用验证属性 <xref:System.Configuration.StringValidator> ，并向其传递修饰参数的值。  
  
 只能将对象应用于 <xref:System.Configuration.StringValidatorAttribute> 属性类型。
  
## Examples  
 下面的示例演示如何使用对象来修饰自定义对象的属性 <xref:System.Configuration.ConfigurationSection> <xref:System.Configuration.StringValidatorAttribute> 。  
  
 [!code-csharp[System.Configuration.ConfigurationValidatorAttributes#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Configuration.ConfigurationValidatorAttributes/CS/ConfigurationValidatorAttributes.cs#2)]
 [!code-vb[System.Configuration.ConfigurationValidatorAttributes#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Configuration.ConfigurationValidatorAttributes/VB/ConfigurationValidatorAttributes.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Configuration.ConfigurationValidatorAttribute" />
    <altmember cref="T:System.Configuration.ConfigurationPropertyAttribute" />
    <altmember cref="T:System.Configuration.StringValidator" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StringValidatorAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.StringValidatorAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StringValidatorAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Configuration.StringValidatorAttribute" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在特性化模型中使用此构造函数可确保分配给配置元素属性的值是字符串类型。  
  
   
  
## Examples  
 下面的示例演示如何使用 <xref:System.Configuration.StringValidatorAttribute.%23ctor%2A> 构造函数。  
  
 [!code-csharp[System.Configuration.ConfigurationValidatorAttributes#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Configuration.ConfigurationValidatorAttributes/CS/ConfigurationValidatorAttributes.cs#3)]
 [!code-vb[System.Configuration.ConfigurationValidatorAttributes#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Configuration.ConfigurationValidatorAttributes/VB/ConfigurationValidatorAttributes.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Configuration.StringValidator" />
      </Docs>
    </Member>
    <Member MemberName="InvalidCharacters">
      <MemberSignature Language="C#" Value="public string InvalidCharacters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InvalidCharacters" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.StringValidatorAttribute.InvalidCharacters" />
      <MemberSignature Language="VB.NET" Value="Public Property InvalidCharacters As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ InvalidCharacters { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InvalidCharacters : string with get, set" Usage="System.Configuration.StringValidatorAttribute.InvalidCharacters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置属性的无效字符。</summary>
        <value>包含属性不允许的字符集的字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示如何使用 <xref:System.Configuration.StringValidatorAttribute.InvalidCharacters%2A> 属性。  
  
 [!code-csharp[System.Configuration.ConfigurationValidatorAttributes#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Configuration.ConfigurationValidatorAttributes/CS/ConfigurationValidatorAttributes.cs#2)]
 [!code-vb[System.Configuration.ConfigurationValidatorAttributes#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Configuration.ConfigurationValidatorAttributes/VB/ConfigurationValidatorAttributes.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxLength">
      <MemberSignature Language="C#" Value="public int MaxLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxLength" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.StringValidatorAttribute.MaxLength" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxLength { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxLength : int with get, set" Usage="System.Configuration.StringValidatorAttribute.MaxLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置分配给属性的字符串允许的最大长度。</summary>
        <value>一个整数，指示分配给属性的字符串允许的最大长度。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示如何使用 <xref:System.Configuration.StringValidatorAttribute.MaxLength%2A> 属性。  
  
 [!code-csharp[System.Configuration.ConfigurationValidatorAttributes#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Configuration.ConfigurationValidatorAttributes/CS/ConfigurationValidatorAttributes.cs#2)]
 [!code-vb[System.Configuration.ConfigurationValidatorAttributes#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Configuration.ConfigurationValidatorAttributes/VB/ConfigurationValidatorAttributes.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">选定值小于 <see cref="P:System.Configuration.StringValidatorAttribute.MinLength" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="MinLength">
      <MemberSignature Language="C#" Value="public int MinLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MinLength" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.StringValidatorAttribute.MinLength" />
      <MemberSignature Language="VB.NET" Value="Public Property MinLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MinLength { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MinLength : int with get, set" Usage="System.Configuration.StringValidatorAttribute.MinLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置分配给属性的字符串允许的最小值。</summary>
        <value>一个整数，指示分配给属性的字符串允许的最小长度。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示如何使用 <xref:System.Configuration.StringValidatorAttribute.MinLength%2A> 属性。  
  
 [!code-csharp[System.Configuration.ConfigurationValidatorAttributes#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Configuration.ConfigurationValidatorAttributes/CS/ConfigurationValidatorAttributes.cs#2)]
 [!code-vb[System.Configuration.ConfigurationValidatorAttributes#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Configuration.ConfigurationValidatorAttributes/VB/ConfigurationValidatorAttributes.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">选定值大于 <see cref="P:System.Configuration.StringValidatorAttribute.MaxLength" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="ValidatorInstance">
      <MemberSignature Language="C#" Value="public override System.Configuration.ConfigurationValidatorBase ValidatorInstance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.ConfigurationValidatorBase ValidatorInstance" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.StringValidatorAttribute.ValidatorInstance" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ValidatorInstance As ConfigurationValidatorBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Configuration::ConfigurationValidatorBase ^ ValidatorInstance { System::Configuration::ConfigurationValidatorBase ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ValidatorInstance : System.Configuration.ConfigurationValidatorBase" Usage="System.Configuration.StringValidatorAttribute.ValidatorInstance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.ConfigurationValidatorBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Configuration.StringValidator" /> 类的实例。</summary>
        <value><see cref="T:System.Configuration.StringValidator" /> 验证程序实例中的当前 <see cref="T:System.Configuration.ConfigurationValidatorBase" /> 设置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Configuration.StringValidatorAttribute.ValidatorInstance%2A> 属性可通过调用其方法来执行字符串验证 <xref:System.Configuration.StringValidator.Validate%2A> 。  
  
   
  
## Examples  
 下面的示例演示如何使用 <xref:System.Configuration.StringValidatorAttribute.ValidatorInstance%2A> 属性。  
  
 [!code-csharp[System.Configuration.ConfigurationValidatorAttributes#14](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Configuration.ConfigurationValidatorAttributes/CS/ConfigurationValidatorAttributes.cs#14)]
 [!code-vb[System.Configuration.ConfigurationValidatorAttributes#14](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Configuration.ConfigurationValidatorAttributes/VB/ConfigurationValidatorAttributes.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Configuration.ConfigurationValidatorAttribute" />
      </Docs>
    </Member>
  </Members>
</Type>
