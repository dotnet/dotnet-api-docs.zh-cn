<Type Name="ApplicationSettingsBase" FullName="System.Configuration.ApplicationSettingsBase">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5ffca739d27e2f20d477fa8d42f246a2dbe7feef" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83926717" /></Metadata><TypeSignature Language="C#" Value="public abstract class ApplicationSettingsBase : System.Configuration.SettingsBase, System.ComponentModel.INotifyPropertyChanged" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ApplicationSettingsBase extends System.Configuration.SettingsBase implements class System.ComponentModel.INotifyPropertyChanged" />
  <TypeSignature Language="DocId" Value="T:System.Configuration.ApplicationSettingsBase" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ApplicationSettingsBase&#xA;Inherits SettingsBase&#xA;Implements INotifyPropertyChanged" />
  <TypeSignature Language="C++ CLI" Value="public ref class ApplicationSettingsBase abstract : System::Configuration::SettingsBase, System::ComponentModel::INotifyPropertyChanged" />
  <TypeSignature Language="F#" Value="type ApplicationSettingsBase = class&#xA;    inherit SettingsBase&#xA;    interface INotifyPropertyChanged" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.SettingsBase</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.INotifyPropertyChanged</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="751c5-101">作为派生具体包装类以实现 Window 窗体应用程序中的应用程序设置功能的基类。</span><span class="sxs-lookup"><span data-stu-id="751c5-101">Acts as a base class for deriving concrete wrapper classes to implement the application settings feature in Window Forms applications.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="751c5-102"><xref:System.Configuration.ApplicationSettingsBase> 将以下功能添加到基于 Web 的应用程序使用的 <xref:System.Configuration.SettingsBase> 类中：</span><span class="sxs-lookup"><span data-stu-id="751c5-102"><xref:System.Configuration.ApplicationSettingsBase> adds the following functionality to the <xref:System.Configuration.SettingsBase> class, which is used by Web-based applications:</span></span>  
  
-   <span data-ttu-id="751c5-103">检测派生的设置包装器类的属性的功能。</span><span class="sxs-lookup"><span data-stu-id="751c5-103">The ability to detect attributes on a derived, settings wrapper class.</span></span> <span data-ttu-id="751c5-104"><xref:System.Configuration.ApplicationSettingsBase> 支持用于包装类属性的声明性模型，如稍后所述。</span><span class="sxs-lookup"><span data-stu-id="751c5-104"><xref:System.Configuration.ApplicationSettingsBase> supports the declarative model used for wrapper class properties, as described later.</span></span>  
  
-   <span data-ttu-id="751c5-105">更高级别的 <xref:System.Configuration.ApplicationSettingsBase.Save%2A> 和 <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="751c5-105">Higher-level <xref:System.Configuration.ApplicationSettingsBase.Save%2A> and <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> methods.</span></span>  
  
-   <span data-ttu-id="751c5-106">其他验证事件，可对其进行处理以确保各个设置的正确性。</span><span class="sxs-lookup"><span data-stu-id="751c5-106">Additional validation events that you can handle to ensure the correctness of individual settings.</span></span>  
  
 <span data-ttu-id="751c5-107">在应用程序设置体系结构中，若要访问一组设置属性，需要从 <xref:System.Configuration.ApplicationSettingsBase>派生具体的包装类。</span><span class="sxs-lookup"><span data-stu-id="751c5-107">In the application settings architecture, to access a group of settings properties you need to derive a concrete wrapper class from <xref:System.Configuration.ApplicationSettingsBase>.</span></span> <span data-ttu-id="751c5-108">包装类通过以下方式自定义 <xref:System.Configuration.ApplicationSettingsBase>：</span><span class="sxs-lookup"><span data-stu-id="751c5-108">The wrapper class customizes <xref:System.Configuration.ApplicationSettingsBase> in the following ways:</span></span>  
  
-   <span data-ttu-id="751c5-109">对于每个要访问的设置属性，会将相应的强类型公共属性添加到包装类中。</span><span class="sxs-lookup"><span data-stu-id="751c5-109">For every settings property to be accessed, a corresponding strongly typed public property is added to the wrapper class.</span></span> <span data-ttu-id="751c5-110">此属性具有读/写应用程序设置 `get` 和 `set` 访问器，但只有 `get` 访问器用于只读设置。</span><span class="sxs-lookup"><span data-stu-id="751c5-110">This property has `get` and `set` accessors for read/write application settings, but only a `get` accessor for read-only settings.</span></span>  
  
-   <span data-ttu-id="751c5-111">相应特性必须应用于包装类的公共属性，以指示 settings 属性的特征，例如设置的范围（应用程序或用户）、设置是否应支持漫游、设置的默认值、要使用的设置提供程序等。</span><span class="sxs-lookup"><span data-stu-id="751c5-111">Appropriated attributes must be applied to the wrapper class's public properties to indicate characteristics of the settings property, such as the setting's scope (application or user), whether the setting should support roaming, the default value for the setting, the settings provider to be used, and so on.</span></span> <span data-ttu-id="751c5-112">每个属性都需要使用 <xref:System.Configuration.ApplicationScopedSettingAttribute> 或 <xref:System.Configuration.UserScopedSettingAttribute>来指定其作用域。</span><span class="sxs-lookup"><span data-stu-id="751c5-112">Each property is required to specify its scope, using either <xref:System.Configuration.ApplicationScopedSettingAttribute> or <xref:System.Configuration.UserScopedSettingAttribute>.</span></span> <span data-ttu-id="751c5-113">如果使用默认 <xref:System.Configuration.LocalFileSettingsProvider>，应用程序范围的设置为只读。</span><span class="sxs-lookup"><span data-stu-id="751c5-113">Application-scoped settings are read-only if the default <xref:System.Configuration.LocalFileSettingsProvider> is used.</span></span>  
  
 <span data-ttu-id="751c5-114"><xref:System.Configuration.ApplicationSettingsBase> 类使用反射在运行时检测这些特性。</span><span class="sxs-lookup"><span data-stu-id="751c5-114">The <xref:System.Configuration.ApplicationSettingsBase> class uses reflection to detect these attributes at run time.</span></span> <span data-ttu-id="751c5-115">此信息的大部分传递到设置提供程序层，后者负责存储、持久性格式等。</span><span class="sxs-lookup"><span data-stu-id="751c5-115">Most of this information gets passed to the settings provider layer, which is responsible for storage, persistence format, and so on.</span></span>  
  
 <span data-ttu-id="751c5-116">当应用程序具有多个设置包装类时，每个类都定义一个*设置组*。</span><span class="sxs-lookup"><span data-stu-id="751c5-116">When an application has multiple settings wrapper classes, each class defines a *settings group*.</span></span> <span data-ttu-id="751c5-117">每个组具有以下特征：</span><span class="sxs-lookup"><span data-stu-id="751c5-117">Each group has the following characteristics:</span></span>  
  
-   <span data-ttu-id="751c5-118">一个组可以包含任意数量或类型的属性设置。</span><span class="sxs-lookup"><span data-stu-id="751c5-118">A group can contain any number or type of property settings.</span></span>  
  
-   <span data-ttu-id="751c5-119">如果未通过使用 <xref:System.Configuration.SettingsGroupNameAttribute>修饰包装类来显式设置组名称，则会自动生成一个名称。</span><span class="sxs-lookup"><span data-stu-id="751c5-119">If the group name is not explicitly set by the decorating the wrapper class with a <xref:System.Configuration.SettingsGroupNameAttribute>, then a name is automatically generated.</span></span>  
  
 <span data-ttu-id="751c5-120">默认情况下，所有基于客户端的应用程序都使用 <xref:System.Configuration.LocalFileSettingsProvider> 来提供存储。</span><span class="sxs-lookup"><span data-stu-id="751c5-120">By default, all client-based applications use the <xref:System.Configuration.LocalFileSettingsProvider> to provide storage.</span></span> <span data-ttu-id="751c5-121">如果需要备用设置提供程序，则必须使用相应的 <xref:System.Configuration.SettingsProviderAttribute>修饰包装类或属性。</span><span class="sxs-lookup"><span data-stu-id="751c5-121">If an alternate settings provider is desired, then the wrapper class or property must be decorated with a corresponding <xref:System.Configuration.SettingsProviderAttribute>.</span></span>  
  
 <span data-ttu-id="751c5-122">有关使用应用程序设置的详细信息，请参阅[Windows 窗体的应用程序设置](/dotnet/framework/winforms/advanced/application-settings-for-windows-forms)。</span><span class="sxs-lookup"><span data-stu-id="751c5-122">For more information about using application settings, see [Application Settings for Windows Forms](/dotnet/framework/winforms/advanced/application-settings-for-windows-forms).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="751c5-123">下面的代码示例演示如何使用应用程序设置来持久保存主窗体的以下属性：位置、大小、背景色和标题栏文本。</span><span class="sxs-lookup"><span data-stu-id="751c5-123">The following code example demonstrates the use of application settings to persist the following attributes of the main form: location, size, background color, and title bar text.</span></span> <span data-ttu-id="751c5-124">所有这些属性都作为 `FormSettings` 类中的单个应用程序设置属性保留，分别名为 `FormLocation`、`FormSize`、`FormBackColor` 和 `FormText`。</span><span class="sxs-lookup"><span data-stu-id="751c5-124">All of these attributes are persisted as single application settings properties in the `FormSettings` class, named `FormLocation`, `FormSize`, `FormBackColor` and `FormText`, respectively.</span></span> <span data-ttu-id="751c5-125">除 `FormText` 和 `Size` 之外的所有数据都绑定到其关联的窗体属性，并使用 <xref:System.Configuration.DefaultSettingValueAttribute>应用默认设置值。</span><span class="sxs-lookup"><span data-stu-id="751c5-125">All except for `FormText` and `Size` are data bound to their associated form properties and have a default setting value applied using <xref:System.Configuration.DefaultSettingValueAttribute>.</span></span>  
  
 <span data-ttu-id="751c5-126">该窗体包含四个具有以下名称和函数的子控件：</span><span class="sxs-lookup"><span data-stu-id="751c5-126">The form contains four child controls that have the following names and functions:</span></span>  
  
-   <span data-ttu-id="751c5-127">一个名为 `btnBackColor` 的按钮，用于显示**颜色**通用对话框。</span><span class="sxs-lookup"><span data-stu-id="751c5-127">A button named `btnBackColor` used to display the **Color** common dialog box.</span></span>  
  
-   <span data-ttu-id="751c5-128">名为 `btnReload` 用于 <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> 应用程序设置的按钮。</span><span class="sxs-lookup"><span data-stu-id="751c5-128">A button named `btnReload` used to <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> the application settings.</span></span>  
  
-   <span data-ttu-id="751c5-129">名为 `btnReset` 用于 <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> 应用程序设置的按钮。</span><span class="sxs-lookup"><span data-stu-id="751c5-129">A button named `btnReset` used to <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> the application settings.</span></span>  
  
-   <span data-ttu-id="751c5-130">名为 `tbStatus` 的文本框，用于显示有关程序的状态信息。</span><span class="sxs-lookup"><span data-stu-id="751c5-130">A textbox named `tbStatus` used to display status information about the program.</span></span>  
  
 <span data-ttu-id="751c5-131">请注意，每次执行应用程序后，会在窗体的标题文本后附加一个句点字符。</span><span class="sxs-lookup"><span data-stu-id="751c5-131">Notice that after every execution of the application, an additional period character is appended to the title text of the form.</span></span>  
  
 <span data-ttu-id="751c5-132">此代码示例需要一个具有名为 `colorDialog1`的 <xref:System.Windows.Forms.ColorDialog> 类的窗体和一个具有名为 `tbStatus`的 <xref:System.Windows.Forms.ToolStripStatusLabel> 的 <xref:System.Windows.Forms.StatusStrip> 控件。</span><span class="sxs-lookup"><span data-stu-id="751c5-132">This code example requires a Form with a <xref:System.Windows.Forms.ColorDialog> class named `colorDialog1`, and a <xref:System.Windows.Forms.StatusStrip> control with a <xref:System.Windows.Forms.ToolStripStatusLabel> named `tbStatus`.</span></span> <span data-ttu-id="751c5-133">此外，它还需要三个名为 `btnReload`、`btnReset`和 `btnBackColor`的 <xref:System.Windows.Forms.Button> 对象。</span><span class="sxs-lookup"><span data-stu-id="751c5-133">Additionally, it requires three <xref:System.Windows.Forms.Button> objects named `btnReload`, `btnReset`, and `btnBackColor`.</span></span>  
  
 [!code-cpp[AppSettingsSample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/AppSettingsSample/cpp/AppSettingsSample.cpp#1)]
 [!code-csharp[AppSettingsSample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/AppSettingsSample/CS/AppSettingsSample.cs#1)]
 [!code-vb[AppSettingsSample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/AppSettingsSample/VB/Form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Configuration.LocalFileSettingsProvider" />
    <altmember cref="T:System.Configuration.ApplicationScopedSettingAttribute" />
    <altmember cref="T:System.Configuration.UserScopedSettingAttribute" />
    <altmember cref="T:System.Configuration.SettingsGroupNameAttribute" />
    <altmember cref="T:System.Configuration.SettingsProviderAttribute" />
    <related type="Article" href="https://msdn.microsoft.com/library/64090a34-8556-4904-8ea0-20efe9f8c886"><span data-ttu-id="751c5-134">Windows 窗体的应用程序设置</span><span class="sxs-lookup"><span data-stu-id="751c5-134">Application Settings for Windows Forms</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="751c5-135">初始化 <see cref="T:System.Configuration.ApplicationSettingsBase" /> 类的实例。</span><span class="sxs-lookup"><span data-stu-id="751c5-135">Initializes an instance of the <see cref="T:System.Configuration.ApplicationSettingsBase" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ApplicationSettingsBase ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.ApplicationSettingsBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ApplicationSettingsBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="751c5-136">将 <see cref="T:System.Configuration.ApplicationSettingsBase" /> 类的实例初始化为其默认状态。</span><span class="sxs-lookup"><span data-stu-id="751c5-136">Initializes an instance of the <see cref="T:System.Configuration.ApplicationSettingsBase" /> class to its default state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="751c5-137">无参数构造函数的设计目的是，假设没有与当前设置包装器类关联的组件，后者派生自 <xref:System.Configuration.ApplicationSettingsBase>。</span><span class="sxs-lookup"><span data-stu-id="751c5-137">The parameterless constructor was designed to work under the assumption that there is no component associated with the current settings wrapper class, which derives from <xref:System.Configuration.ApplicationSettingsBase>.</span></span>  
  
 <span data-ttu-id="751c5-138">创建包装类的实例时，继承的代码将自动执行以下操作：</span><span class="sxs-lookup"><span data-stu-id="751c5-138">When an instance of a wrapper class is created, inherited code will automatically perform the following actions:</span></span>  
  
1.  <span data-ttu-id="751c5-139">在类上反射。</span><span class="sxs-lookup"><span data-stu-id="751c5-139">Reflect over the class.</span></span>  
  
2.  <span data-ttu-id="751c5-140">对于标记为 `[UserScopedSettingAttribute]` 或 `[ApplicationScopedSettingAttribute]`的包装上的每个属性，将创建相应的 <xref:System.Configuration.SettingsProperty>。</span><span class="sxs-lookup"><span data-stu-id="751c5-140">For each property on the wrapper marked with either `[UserScopedSettingAttribute]` or `[ApplicationScopedSettingAttribute]`, a corresponding <xref:System.Configuration.SettingsProperty> is created.</span></span>  
  
3.  <span data-ttu-id="751c5-141">每个 <xref:System.Configuration.SettingsProperty> 都有一些属性，这些属性基于其他属性设置，这些属性可在包装器的属性中显示，例如默认值或设置提供程序。</span><span class="sxs-lookup"><span data-stu-id="751c5-141">Each <xref:System.Configuration.SettingsProperty> has some of its properties set based on other attributes that are optionally present on the wrapper's properties, such as the default value or the settings provider.</span></span>  
  
4.  <span data-ttu-id="751c5-142">所有其他特性只会置于特性包中，即 <xref:System.Configuration.SettingsProperty> 类的 <xref:System.Configuration.SettingsProperty.Attributes%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="751c5-142">All other attributes are simply put into an attribute bag, the <xref:System.Configuration.SettingsProperty.Attributes%2A> property of the <xref:System.Configuration.SettingsProperty> class.</span></span>  
  
5.  <span data-ttu-id="751c5-143">所有 <xref:System.Configuration.SettingsProperty> 对象将添加到 <xref:System.Configuration.ApplicationSettingsBase> 类的 <xref:System.Configuration.ApplicationSettingsBase.Properties%2A> 属性所表示的 <xref:System.Configuration.SettingsPropertyCollection> 中。</span><span class="sxs-lookup"><span data-stu-id="751c5-143">All <xref:System.Configuration.SettingsProperty> objects are added to a <xref:System.Configuration.SettingsPropertyCollection> represented by the <xref:System.Configuration.ApplicationSettingsBase.Properties%2A> property of the <xref:System.Configuration.ApplicationSettingsBase> class.</span></span> <span data-ttu-id="751c5-144">然后将此集合传递给 <xref:System.Configuration.SettingsBase.Initialize%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="751c5-144">This collection is then passed to the <xref:System.Configuration.SettingsBase.Initialize%2A> method.</span></span>  
  
 <span data-ttu-id="751c5-145">正如前面提到的步骤3所述，<xref:System.Configuration.ApplicationSettingsBase> 原本可以使用几个属性属性，具体如下： <xref:System.Configuration.SettingsProviderAttribute>、<xref:System.Configuration.DefaultSettingValueAttribute>和 <xref:System.Configuration.SettingsSerializeAsAttribute>。</span><span class="sxs-lookup"><span data-stu-id="751c5-145">As implied by step 3 mentioned previously, <xref:System.Configuration.ApplicationSettingsBase> natively works with several property attributes, specifically the following: <xref:System.Configuration.SettingsProviderAttribute>, <xref:System.Configuration.DefaultSettingValueAttribute>, and <xref:System.Configuration.SettingsSerializeAsAttribute>.</span></span> <span data-ttu-id="751c5-146">所有其他设置属性只会传递到适当的基础提供程序。</span><span class="sxs-lookup"><span data-stu-id="751c5-146">All other settings attributes are simply passed through to the appropriate underlying provider.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Configuration.SettingsProperty" />
        <altmember cref="T:System.Configuration.SettingsPropertyCollection" />
        <altmember cref="M:System.Configuration.SettingsBase.Initialize(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection,System.Configuration.SettingsProviderCollection)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ApplicationSettingsBase (System.ComponentModel.IComponent owner);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.IComponent owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.ApplicationSettingsBase.#ctor(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (owner As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ApplicationSettingsBase(System::ComponentModel::IComponent ^ owner);" />
      <MemberSignature Language="F#" Value="new System.Configuration.ApplicationSettingsBase : System.ComponentModel.IComponent -&gt; System.Configuration.ApplicationSettingsBase" Usage="new System.Configuration.ApplicationSettingsBase owner" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="owner" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="owner"><span data-ttu-id="751c5-147">将作为应用程序设置对象的所有者的组件。</span><span class="sxs-lookup"><span data-stu-id="751c5-147">The component that will act as the owner of the application settings object.</span></span></param>
        <summary><span data-ttu-id="751c5-148">使用提供的所有者组件初始化 <see cref="T:System.Configuration.ApplicationSettingsBase" /> 类的实例。</span><span class="sxs-lookup"><span data-stu-id="751c5-148">Initializes an instance of the <see cref="T:System.Configuration.ApplicationSettingsBase" /> class using the supplied owner component.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="751c5-149">此构造函数与使用调用的 <xref:System.Configuration.ApplicationSettingsBase.%23ctor%28System.ComponentModel.IComponent%2CSystem.String%29> 构造函数完全等效：</span><span class="sxs-lookup"><span data-stu-id="751c5-149">This constructor is exactly equivalent to the <xref:System.Configuration.ApplicationSettingsBase.%23ctor%28System.ComponentModel.IComponent%2CSystem.String%29> constructor using the invocation:</span></span>  
  
 `ApplicationSettingsBase(owner, String.Empty)`  
  
 <span data-ttu-id="751c5-150">有关如何在包装类的实例化过程中使用反射的信息，请参阅默认 <xref:System.Configuration.ApplicationSettingsBase.%23ctor> 构造函数。</span><span class="sxs-lookup"><span data-stu-id="751c5-150">For information about how reflection is used during the instantiation of a wrapper class, see the default <xref:System.Configuration.ApplicationSettingsBase.%23ctor> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="751c5-151"><paramref name="owner" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="751c5-151"><paramref name="owner" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Configuration.SettingsProviderAttribute" />
        <altmember cref="P:System.ComponentModel.Component.Site" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ApplicationSettingsBase (string settingsKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string settingsKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.ApplicationSettingsBase.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (settingsKey As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ApplicationSettingsBase(System::String ^ settingsKey);" />
      <MemberSignature Language="F#" Value="new System.Configuration.ApplicationSettingsBase : string -&gt; System.Configuration.ApplicationSettingsBase" Usage="new System.Configuration.ApplicationSettingsBase settingsKey" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="settingsKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="settingsKey"><span data-ttu-id="751c5-152">唯一标识包装类的单独实例的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="751c5-152">A <see cref="T:System.String" /> that uniquely identifies separate instances of the wrapper class.</span></span></param>
        <summary><span data-ttu-id="751c5-153">使用提供的设置键初始化 <see cref="T:System.Configuration.ApplicationSettingsBase" /> 类的实例。</span><span class="sxs-lookup"><span data-stu-id="751c5-153">Initializes an instance of the <see cref="T:System.Configuration.ApplicationSettingsBase" /> class using the supplied settings key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="751c5-154">此构造函数将 <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> 属性初始化为 `settingsKey` 参数的值。</span><span class="sxs-lookup"><span data-stu-id="751c5-154">This constructor initializes the <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> property to the value of the `settingsKey` parameter.</span></span> <span data-ttu-id="751c5-155">此属性在歧义同一应用程序域中设置包装器类的不同实例时非常有用。</span><span class="sxs-lookup"><span data-stu-id="751c5-155">This property is useful in disambiguating different instances of the settings wrapper class in the same application domain.</span></span>  
  
 <span data-ttu-id="751c5-156">有关如何在包装类的实例化过程中使用反射的信息，请参阅默认 <xref:System.Configuration.ApplicationSettingsBase.%23ctor> 构造函数。</span><span class="sxs-lookup"><span data-stu-id="751c5-156">For information about how reflection is used during the instantiation of a wrapper class, see the default <xref:System.Configuration.ApplicationSettingsBase.%23ctor> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Configuration.ApplicationSettingsBase.SettingsKey" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ApplicationSettingsBase (System.ComponentModel.IComponent owner, string settingsKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.IComponent owner, string settingsKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.ApplicationSettingsBase.#ctor(System.ComponentModel.IComponent,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (owner As IComponent, settingsKey As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ApplicationSettingsBase(System::ComponentModel::IComponent ^ owner, System::String ^ settingsKey);" />
      <MemberSignature Language="F#" Value="new System.Configuration.ApplicationSettingsBase : System.ComponentModel.IComponent * string -&gt; System.Configuration.ApplicationSettingsBase" Usage="new System.Configuration.ApplicationSettingsBase (owner, settingsKey)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="owner" Type="System.ComponentModel.IComponent" />
        <Parameter Name="settingsKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="owner"><span data-ttu-id="751c5-157">将作为应用程序设置对象的所有者的组件。</span><span class="sxs-lookup"><span data-stu-id="751c5-157">The component that will act as the owner of the application settings object.</span></span></param>
        <param name="settingsKey"><span data-ttu-id="751c5-158">唯一标识包装类的单独实例的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="751c5-158">A <see cref="T:System.String" /> that uniquely identifies separate instances of the wrapper class.</span></span></param>
        <summary><span data-ttu-id="751c5-159">使用提供的所有者组件和设置键初始化 <see cref="T:System.Configuration.ApplicationSettingsBase" /> 类的实例。</span><span class="sxs-lookup"><span data-stu-id="751c5-159">Initializes an instance of the <see cref="T:System.Configuration.ApplicationSettingsBase" /> class using the supplied owner component and settings key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="751c5-160">`owner` 参数指定的 <xref:System.ComponentModel.IComponent> 对象充当此应用程序设置类的当前实例的所有者。</span><span class="sxs-lookup"><span data-stu-id="751c5-160">The <xref:System.ComponentModel.IComponent> object specified by the `owner` parameter acts as the owner of the current instance of this applications settings class.</span></span> <span data-ttu-id="751c5-161">在从 <xref:System.Configuration.ApplicationSettingsBase>派生的设置包装类的初始化过程中，将查询所有者的站点以获取 <xref:System.Configuration.ISettingsProviderService>。</span><span class="sxs-lookup"><span data-stu-id="751c5-161">During the initialization of the settings wrapper class derived from <xref:System.Configuration.ApplicationSettingsBase>, the owner's site is queried for a <xref:System.Configuration.ISettingsProviderService>.</span></span> <span data-ttu-id="751c5-162">如果存在一个，则根据 <xref:System.Configuration.SettingsProviderAttribute>指定的包装类的所有属性，将其首选项用于本机设置提供程序（如果存在）。</span><span class="sxs-lookup"><span data-stu-id="751c5-162">If one exists, it is used in preference to native settings provider for all the properties of the wrapper class, as specified by the <xref:System.Configuration.SettingsProviderAttribute>.</span></span>  
  
 <span data-ttu-id="751c5-163">此构造函数将 <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> 属性初始化为 `settingsKey` 参数的值。</span><span class="sxs-lookup"><span data-stu-id="751c5-163">This constructor initializes the <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> property to the value of the `settingsKey` parameter.</span></span> <span data-ttu-id="751c5-164">此属性在同一应用程序域中歧义包装类的不同实例时非常有用。</span><span class="sxs-lookup"><span data-stu-id="751c5-164">This property is useful in disambiguating different instances of the wrapper class in the same application domain.</span></span>  
  
 <span data-ttu-id="751c5-165">有关如何在包装类的实例化过程中使用反射的信息，请参阅默认 <xref:System.Configuration.ApplicationSettingsBase.%23ctor> 构造函数。</span><span class="sxs-lookup"><span data-stu-id="751c5-165">For information about how reflection is used during the instantiation of a wrapper class, see the default <xref:System.Configuration.ApplicationSettingsBase.%23ctor> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="751c5-166"><paramref name="owner" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="751c5-166"><paramref name="owner" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Configuration.ISettingsProviderService" />
        <altmember cref="T:System.Configuration.SettingsProviderAttribute" />
        <altmember cref="P:System.Configuration.ApplicationSettingsBase.SettingsKey" />
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public override System.Configuration.SettingsContext Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.SettingsContext Context" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.ApplicationSettingsBase.Context" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Context As SettingsContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Configuration::SettingsContext ^ Context { System::Configuration::SettingsContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Context : System.Configuration.SettingsContext" Usage="System.Configuration.ApplicationSettingsBase.Context" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netcore-2.1;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.2;netcore-3.0;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.1;dotnet-plat-ext-5.0;net-5.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Configuration.SettingsContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="751c5-167">获取与设置组关联的应用程序设置上下文。</span><span class="sxs-lookup"><span data-stu-id="751c5-167">Gets the application settings context associated with the settings group.</span></span></summary>
        <value><span data-ttu-id="751c5-168">与设置组关联的 <see cref="T:System.Configuration.SettingsContext" />。</span><span class="sxs-lookup"><span data-stu-id="751c5-168">A <see cref="T:System.Configuration.SettingsContext" /> associated with the settings group.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="751c5-169">派生自 <xref:System.Configuration.ApplicationSettingsBase> 的每个设置包装器类都具有与之关联的上下文。</span><span class="sxs-lookup"><span data-stu-id="751c5-169">Each settings wrapper class derived from <xref:System.Configuration.ApplicationSettingsBase> has a context associated with it.</span></span> <span data-ttu-id="751c5-170">上下文会传递到每个属性的设置提供程序，以标识属性的使用方式。</span><span class="sxs-lookup"><span data-stu-id="751c5-170">The context is passed to the settings provider for each property to identify how the property is used.</span></span> <span data-ttu-id="751c5-171">因此，上下文将作为提示，以帮助设置提供程序确定如何最好地保留关联的应用程序设置值。</span><span class="sxs-lookup"><span data-stu-id="751c5-171">Context therefore acts as a hint to help the settings provider determine how best to persist the associated application settings values.</span></span>  
  
 <span data-ttu-id="751c5-172">与此相反，<xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> 属性使设置提供程序能够消除同一个包装类的多个实例的歧义。</span><span class="sxs-lookup"><span data-stu-id="751c5-172">In contrast, the <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> property enables the settings provider to disambiguate multiple instances of the same wrapper class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Configuration.ApplicationSettingsBase.SettingsKey" />
        <altmember cref="P:System.Configuration.ApplicationSettingsBase.Providers" />
        <altmember cref="T:System.Configuration.SettingsContext" />
        <altmember cref="T:System.Configuration.SettingsProvider" />
        <altmember cref="T:System.Configuration.ApplicationSettingsGroup" />
      </Docs>
    </Member>
    <Member MemberName="GetPreviousVersion">
      <MemberSignature Language="C#" Value="public object GetPreviousVersion (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetPreviousVersion(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.ApplicationSettingsBase.GetPreviousVersion(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPreviousVersion (propertyName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetPreviousVersion(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.GetPreviousVersion : string -&gt; obj" Usage="applicationSettingsBase.GetPreviousVersion propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="751c5-173">一个 <see cref="T:System.String" />，包含要返回其值的设置属性的名称。</span><span class="sxs-lookup"><span data-stu-id="751c5-173">A <see cref="T:System.String" /> containing the name of the settings property whose value is to be returned.</span></span></param>
        <summary><span data-ttu-id="751c5-174">返回同一应用程序的早期版本的命名设置属性的值。</span><span class="sxs-lookup"><span data-stu-id="751c5-174">Returns the value of the named settings property for the previous version of the same application.</span></span></summary>
        <returns><span data-ttu-id="751c5-175">一个 <see cref="T:System.Object" />，如果找到指定的 <see cref="T:System.Configuration.SettingsProperty" />，则为其值；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="751c5-175">An <see cref="T:System.Object" /> containing the value of the specified <see cref="T:System.Configuration.SettingsProperty" /> if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="751c5-176">在安装新版本的应用程序的过程中，当迁移应用程序设置时，<xref:System.Configuration.ApplicationSettingsBase.GetPreviousVersion%2A> 方法通常与 <xref:System.Configuration.ApplicationSettingsBase.Upgrade%2A> 方法结合使用。</span><span class="sxs-lookup"><span data-stu-id="751c5-176">The <xref:System.Configuration.ApplicationSettingsBase.GetPreviousVersion%2A> method is often used in conjunction with the <xref:System.Configuration.ApplicationSettingsBase.Upgrade%2A> method when migrating application settings during the installation of a new version of an application.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.SettingsPropertyNotFoundException"><span data-ttu-id="751c5-177">该属性不存在。</span><span class="sxs-lookup"><span data-stu-id="751c5-177">The property does not exist.</span></span> <span data-ttu-id="751c5-178">属性计数为零，或在数据存储区中找不到该属性。</span><span class="sxs-lookup"><span data-stu-id="751c5-178">The property count is zero or the property cannot be found in the data store.</span></span></exception>
        <altmember cref="T:System.Configuration.SettingsProperty" />
        <altmember cref="P:System.Configuration.ApplicationSettingsBase.Properties" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Upgrade" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Reload" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Reset" />
        <altmember cref="M:System.Configuration.IApplicationSettingsProvider.GetPreviousVersion(System.Configuration.SettingsContext,System.Configuration.SettingsProperty)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public override object this[string propertyName] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.ApplicationSettingsBase.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overrides Property Item(propertyName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ default[System::String ^] { System::Object ^ get(System::String ^ propertyName); void set(System::String ^ propertyName, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : obj with get, set" Usage="System.Configuration.ApplicationSettingsBase.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="751c5-179">包含要访问的属性名称的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="751c5-179">A <see cref="T:System.String" /> containing the name of the property to access.</span></span></param>
        <summary><span data-ttu-id="751c5-180">获取或设置指定的应用程序设置属性的值。</span><span class="sxs-lookup"><span data-stu-id="751c5-180">Gets or sets the value of the specified application settings property.</span></span></summary>
        <value><span data-ttu-id="751c5-181">如果找到的话，则为命名的设置属性的值；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="751c5-181">If found, the value of the named settings property; otherwise, <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="751c5-182"><xref:System.Configuration.ApplicationSettingsBase.Item%2A> 属性（也称为索引器）通常用于从 <xref:System.Configuration.ApplicationSettingsBase>派生的设置包装器类。</span><span class="sxs-lookup"><span data-stu-id="751c5-182">The <xref:System.Configuration.ApplicationSettingsBase.Item%2A> property, also known as the indexer, is routinely used in the settings wrapper class derived from <xref:System.Configuration.ApplicationSettingsBase>.</span></span> <span data-ttu-id="751c5-183"><xref:System.Configuration.ApplicationSettingsBase.Item%2A> 将包装类的公共属性绑定到相应的设置属性。</span><span class="sxs-lookup"><span data-stu-id="751c5-183"><xref:System.Configuration.ApplicationSettingsBase.Item%2A> binds the public property of the wrapper class to the corresponding settings property.</span></span>  
  
 <span data-ttu-id="751c5-184"><xref:System.Configuration.ApplicationSettingsBase.Item%2A> 引发若干事件，具体取决于正在执行的操作：</span><span class="sxs-lookup"><span data-stu-id="751c5-184"><xref:System.Configuration.ApplicationSettingsBase.Item%2A> raises several events depending on the operation being performed:</span></span>  
  
-   <span data-ttu-id="751c5-185">第一次检索属性时，将引发 <xref:System.Configuration.ApplicationSettingsBase.SettingsLoaded> 事件。</span><span class="sxs-lookup"><span data-stu-id="751c5-185">The first time a property is retrieved, the <xref:System.Configuration.ApplicationSettingsBase.SettingsLoaded> event is raised.</span></span>  
  
-   <span data-ttu-id="751c5-186">设置属性时，将引发 <xref:System.Configuration.ApplicationSettingsBase.OnSettingChanging%2A> 事件。</span><span class="sxs-lookup"><span data-stu-id="751c5-186">When a property is set, the <xref:System.Configuration.ApplicationSettingsBase.OnSettingChanging%2A> event is raised.</span></span> <span data-ttu-id="751c5-187">如果处理程序不取消事件，则设置属性值并引发 <xref:System.Configuration.ApplicationSettingsBase.PropertyChanged> 事件。</span><span class="sxs-lookup"><span data-stu-id="751c5-187">If the handler does not cancel the event, then the property value is set and the <xref:System.Configuration.ApplicationSettingsBase.PropertyChanged> event is raised.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.SettingsPropertyNotFoundException"><span data-ttu-id="751c5-188">没有与当前包装关联的属性，或者未能找到指定的属性。</span><span class="sxs-lookup"><span data-stu-id="751c5-188">There are no properties associated with the current wrapper or the specified property could not be found.</span></span></exception>
        <exception cref="T:System.Configuration.SettingsPropertyIsReadOnlyException"><span data-ttu-id="751c5-189">已尝试设置只读属性。</span><span class="sxs-lookup"><span data-stu-id="751c5-189">An attempt was made to set a read-only property.</span></span></exception>
        <exception cref="T:System.Configuration.SettingsPropertyWrongTypeException"><span data-ttu-id="751c5-190">在设置操作期间，所提供值的类型与设置属性不兼容。</span><span class="sxs-lookup"><span data-stu-id="751c5-190">The value supplied is of a type incompatible with the settings property, during a set operation.</span></span></exception>
        <exception cref="T:System.Configuration.ConfigurationErrorsException"><span data-ttu-id="751c5-191">未能分析配置文件。</span><span class="sxs-lookup"><span data-stu-id="751c5-191">The configuration file could not be parsed.</span></span></exception>
        <altmember cref="P:System.Configuration.ApplicationSettingsBase.Properties" />
        <altmember cref="P:System.Configuration.SettingsProperty.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanged (object sender, System.ComponentModel.PropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanged(object sender, class System.ComponentModel.PropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.ApplicationSettingsBase.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPropertyChanged (sender As Object, e As PropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPropertyChanged(System::Object ^ sender, System::ComponentModel::PropertyChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPropertyChanged : obj * System.ComponentModel.PropertyChangedEventArgs -&gt; unit&#xA;override this.OnPropertyChanged : obj * System.ComponentModel.PropertyChangedEventArgs -&gt; unit" Usage="applicationSettingsBase.OnPropertyChanged (sender, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.ComponentModel.PropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="sender"><span data-ttu-id="751c5-192">事件的源。</span><span class="sxs-lookup"><span data-stu-id="751c5-192">The source of the event.</span></span></param>
        <param name="e"><span data-ttu-id="751c5-193">一个包含事件数据的 <see cref="T:System.ComponentModel.PropertyChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="751c5-193">A <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="751c5-194">引发 <see cref="E:System.Configuration.ApplicationSettingsBase.PropertyChanged" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="751c5-194">Raises the <see cref="E:System.Configuration.ApplicationSettingsBase.PropertyChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="751c5-195">引发事件时，将通过委托调用事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="751c5-195">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="751c5-196">有关详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。</span><span class="sxs-lookup"><span data-stu-id="751c5-196">For more information, see [Handling and Raising Events](/dotnet/standard/events/).</span></span>  
  
 <span data-ttu-id="751c5-197"><xref:System.Configuration.ApplicationSettingsBase.OnPropertyChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。</span><span class="sxs-lookup"><span data-stu-id="751c5-197">The <xref:System.Configuration.ApplicationSettingsBase.OnPropertyChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="751c5-198">这是在派生类中处理事件的首选技术。</span><span class="sxs-lookup"><span data-stu-id="751c5-198">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="751c5-199">在派生类中重写 <see cref="M:System.Configuration.ApplicationSettingsBase.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Configuration.ApplicationSettingsBase.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</span><span class="sxs-lookup"><span data-stu-id="751c5-199">When overriding <see cref="M:System.Configuration.ApplicationSettingsBase.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Configuration.ApplicationSettingsBase.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Configuration.ApplicationSettingsBase.PropertyChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnSettingChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnSettingChanging (object sender, System.Configuration.SettingChangingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSettingChanging(object sender, class System.Configuration.SettingChangingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.ApplicationSettingsBase.OnSettingChanging(System.Object,System.Configuration.SettingChangingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSettingChanging (sender As Object, e As SettingChangingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSettingChanging(System::Object ^ sender, System::Configuration::SettingChangingEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSettingChanging : obj * System.Configuration.SettingChangingEventArgs -&gt; unit&#xA;override this.OnSettingChanging : obj * System.Configuration.SettingChangingEventArgs -&gt; unit" Usage="applicationSettingsBase.OnSettingChanging (sender, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.Configuration.SettingChangingEventArgs" />
      </Parameters>
      <Docs>
        <param name="sender"><span data-ttu-id="751c5-200">事件的源。</span><span class="sxs-lookup"><span data-stu-id="751c5-200">The source of the event.</span></span></param>
        <param name="e"><span data-ttu-id="751c5-201">一个包含事件数据的 <see cref="T:System.Configuration.SettingChangingEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="751c5-201">A <see cref="T:System.Configuration.SettingChangingEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="751c5-202">引发 <see cref="E:System.Configuration.ApplicationSettingsBase.SettingChanging" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="751c5-202">Raises the <see cref="E:System.Configuration.ApplicationSettingsBase.SettingChanging" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="751c5-203">引发事件时，将通过委托调用事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="751c5-203">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="751c5-204">有关详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。</span><span class="sxs-lookup"><span data-stu-id="751c5-204">For more information, see [Handling and Raising Events](/dotnet/standard/events/).</span></span>  
  
 <span data-ttu-id="751c5-205"><xref:System.Configuration.ApplicationSettingsBase.OnSettingChanging%2A> 方法还允许派生类对事件进行处理而不必附加委托。</span><span class="sxs-lookup"><span data-stu-id="751c5-205">The <xref:System.Configuration.ApplicationSettingsBase.OnSettingChanging%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="751c5-206">这是在派生类中处理事件的首选技术。</span><span class="sxs-lookup"><span data-stu-id="751c5-206">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="751c5-207">在派生类中重写 <see cref="M:System.Configuration.ApplicationSettingsBase.OnSettingChanging(System.Object,System.Configuration.SettingChangingEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Configuration.ApplicationSettingsBase.OnSettingChanging(System.Object,System.Configuration.SettingChangingEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</span><span class="sxs-lookup"><span data-stu-id="751c5-207">When overriding <see cref="M:System.Configuration.ApplicationSettingsBase.OnSettingChanging(System.Object,System.Configuration.SettingChangingEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Configuration.ApplicationSettingsBase.OnSettingChanging(System.Object,System.Configuration.SettingChangingEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Configuration.ApplicationSettingsBase.SettingChanging" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.OnSettingsLoaded(System.Object,System.Configuration.SettingsLoadedEventArgs)" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.OnSettingsSaving(System.Object,System.ComponentModel.CancelEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnSettingsLoaded">
      <MemberSignature Language="C#" Value="protected virtual void OnSettingsLoaded (object sender, System.Configuration.SettingsLoadedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSettingsLoaded(object sender, class System.Configuration.SettingsLoadedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.ApplicationSettingsBase.OnSettingsLoaded(System.Object,System.Configuration.SettingsLoadedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSettingsLoaded (sender As Object, e As SettingsLoadedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSettingsLoaded(System::Object ^ sender, System::Configuration::SettingsLoadedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSettingsLoaded : obj * System.Configuration.SettingsLoadedEventArgs -&gt; unit&#xA;override this.OnSettingsLoaded : obj * System.Configuration.SettingsLoadedEventArgs -&gt; unit" Usage="applicationSettingsBase.OnSettingsLoaded (sender, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.Configuration.SettingsLoadedEventArgs" />
      </Parameters>
      <Docs>
        <param name="sender"><span data-ttu-id="751c5-208">事件的源。</span><span class="sxs-lookup"><span data-stu-id="751c5-208">The source of the event.</span></span></param>
        <param name="e"><span data-ttu-id="751c5-209">一个包含事件数据的 <see cref="T:System.Configuration.SettingsLoadedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="751c5-209">A <see cref="T:System.Configuration.SettingsLoadedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="751c5-210">引发 <see cref="E:System.Configuration.ApplicationSettingsBase.SettingsLoaded" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="751c5-210">Raises the <see cref="E:System.Configuration.ApplicationSettingsBase.SettingsLoaded" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="751c5-211">引发事件时，将通过委托调用事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="751c5-211">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="751c5-212">有关详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。</span><span class="sxs-lookup"><span data-stu-id="751c5-212">For more information, see [Handling and Raising Events](/dotnet/standard/events/).</span></span>  
  
 <span data-ttu-id="751c5-213"><xref:System.Configuration.ApplicationSettingsBase.OnSettingsLoaded%2A> 方法还允许派生类对事件进行处理而不必附加委托。</span><span class="sxs-lookup"><span data-stu-id="751c5-213">The <xref:System.Configuration.ApplicationSettingsBase.OnSettingsLoaded%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="751c5-214">这是在派生类中处理事件的首选技术。</span><span class="sxs-lookup"><span data-stu-id="751c5-214">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="751c5-215">在派生类中重写 <see cref="M:System.Configuration.ApplicationSettingsBase.OnSettingsLoaded(System.Object,System.Configuration.SettingsLoadedEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Configuration.ApplicationSettingsBase.OnSettingsLoaded(System.Object,System.Configuration.SettingsLoadedEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</span><span class="sxs-lookup"><span data-stu-id="751c5-215">When overriding <see cref="M:System.Configuration.ApplicationSettingsBase.OnSettingsLoaded(System.Object,System.Configuration.SettingsLoadedEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Configuration.ApplicationSettingsBase.OnSettingsLoaded(System.Object,System.Configuration.SettingsLoadedEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Configuration.ApplicationSettingsBase.SettingsLoaded" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.OnSettingChanging(System.Object,System.Configuration.SettingChangingEventArgs)" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.OnSettingsSaving(System.Object,System.ComponentModel.CancelEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnSettingsSaving">
      <MemberSignature Language="C#" Value="protected virtual void OnSettingsSaving (object sender, System.ComponentModel.CancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSettingsSaving(object sender, class System.ComponentModel.CancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.ApplicationSettingsBase.OnSettingsSaving(System.Object,System.ComponentModel.CancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSettingsSaving (sender As Object, e As CancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSettingsSaving(System::Object ^ sender, System::ComponentModel::CancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSettingsSaving : obj * System.ComponentModel.CancelEventArgs -&gt; unit&#xA;override this.OnSettingsSaving : obj * System.ComponentModel.CancelEventArgs -&gt; unit" Usage="applicationSettingsBase.OnSettingsSaving (sender, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.ComponentModel.CancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="sender"><span data-ttu-id="751c5-216">事件的源。</span><span class="sxs-lookup"><span data-stu-id="751c5-216">The source of the event.</span></span></param>
        <param name="e"><span data-ttu-id="751c5-217">一个包含事件数据的 <see cref="T:System.ComponentModel.CancelEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="751c5-217">A <see cref="T:System.ComponentModel.CancelEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="751c5-218">引发 <see cref="E:System.Configuration.ApplicationSettingsBase.SettingsSaving" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="751c5-218">Raises the <see cref="E:System.Configuration.ApplicationSettingsBase.SettingsSaving" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="751c5-219">引发事件时，将通过委托调用事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="751c5-219">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="751c5-220">有关详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。</span><span class="sxs-lookup"><span data-stu-id="751c5-220">For more information, see [Handling and Raising Events](/dotnet/standard/events/).</span></span>  
  
 <span data-ttu-id="751c5-221"><xref:System.Configuration.ApplicationSettingsBase.OnSettingsSaving%2A> 方法还允许派生类对事件进行处理而不必附加委托。</span><span class="sxs-lookup"><span data-stu-id="751c5-221">The <xref:System.Configuration.ApplicationSettingsBase.OnSettingsSaving%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="751c5-222">这是在派生类中处理事件的首选技术。</span><span class="sxs-lookup"><span data-stu-id="751c5-222">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="751c5-223">在派生类中重写 <see cref="M:System.Configuration.ApplicationSettingsBase.OnSettingsSaving(System.Object,System.ComponentModel.CancelEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Configuration.ApplicationSettingsBase.OnSettingsSaving(System.Object,System.ComponentModel.CancelEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</span><span class="sxs-lookup"><span data-stu-id="751c5-223">When overriding <see cref="M:System.Configuration.ApplicationSettingsBase.OnSettingsSaving(System.Object,System.ComponentModel.CancelEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Configuration.ApplicationSettingsBase.OnSettingsSaving(System.Object,System.ComponentModel.CancelEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Configuration.ApplicationSettingsBase.SettingsSaving" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.OnSettingChanging(System.Object,System.Configuration.SettingChangingEventArgs)" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.OnSettingsLoaded(System.Object,System.Configuration.SettingsLoadedEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="public override System.Configuration.SettingsPropertyCollection Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.SettingsPropertyCollection Properties" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.ApplicationSettingsBase.Properties" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Properties As SettingsPropertyCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Configuration::SettingsPropertyCollection ^ Properties { System::Configuration::SettingsPropertyCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Properties : System.Configuration.SettingsPropertyCollection" Usage="System.Configuration.ApplicationSettingsBase.Properties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netcore-2.1;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.2;netcore-3.0;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.1;dotnet-plat-ext-5.0;net-5.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Configuration.SettingsPropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="751c5-224">获取包装中的设置属性的集合。</span><span class="sxs-lookup"><span data-stu-id="751c5-224">Gets the collection of settings properties in the wrapper.</span></span></summary>
        <value><span data-ttu-id="751c5-225">一个 <see cref="T:System.Configuration.SettingsPropertyCollection" />，包含当前包装中使用的所有 <see cref="T:System.Configuration.SettingsProperty" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="751c5-225">A <see cref="T:System.Configuration.SettingsPropertyCollection" /> containing all the <see cref="T:System.Configuration.SettingsProperty" /> objects used in the current wrapper.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="751c5-226"><xref:System.Configuration.ApplicationSettingsBase.Properties%2A> 属性的 `get` 访问器反映了设置包装类（派生自 <xref:System.Configuration.ApplicationSettingsBase>）的元数据以动态确定可用的应用程序设置属性集。</span><span class="sxs-lookup"><span data-stu-id="751c5-226">The `get` accessor of the <xref:System.Configuration.ApplicationSettingsBase.Properties%2A> property reflects over the metadata of the settings wrapper class, which is derived from <xref:System.Configuration.ApplicationSettingsBase>, to dynamically determine the set of available application settings properties.</span></span>  
  
 <span data-ttu-id="751c5-227"><xref:System.Configuration.ApplicationSettingsBase> 类以本机方式识别应用程序设置的某些特征，例如其名称、属性类型、设置提供程序、默认值、只读状态和序列化首选项。</span><span class="sxs-lookup"><span data-stu-id="751c5-227">The <xref:System.Configuration.ApplicationSettingsBase> class natively recognizes certain characteristics of an application setting, such as its name, property type, settings provider, default value, read only status, and a serialization preference.</span></span> <span data-ttu-id="751c5-228">这些特征作为 <xref:System.Configuration.SettingsProperty> 类中的属性进行镜像。</span><span class="sxs-lookup"><span data-stu-id="751c5-228">These characteristics are mirrored as properties in the <xref:System.Configuration.SettingsProperty> class.</span></span> <span data-ttu-id="751c5-229">设置属性的所有其他特性只传递到其关联的设置提供程序。</span><span class="sxs-lookup"><span data-stu-id="751c5-229">All other attributes of the settings property are just passed through to its associated settings provider.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException"><span data-ttu-id="751c5-230">未能找到关联的设置提供程序，或者其实例化失败。</span><span class="sxs-lookup"><span data-stu-id="751c5-230">The associated settings provider could not be found or its instantiation failed.</span></span></exception>
        <altmember cref="P:System.Configuration.SettingsBase.PropertyValues" />
        <altmember cref="P:System.Configuration.ApplicationSettingsBase.Item(System.String)" />
        <altmember cref="P:System.Configuration.ApplicationSettingsBase.Providers" />
        <altmember cref="E:System.Configuration.ApplicationSettingsBase.PropertyChanged" />
        <altmember cref="T:System.Configuration.SettingsProperty" />
      </Docs>
    </Member>
    <Member MemberName="PropertyChanged">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.PropertyChangedEventHandler PropertyChanged" />
      <MemberSignature Language="DocId" Value="E:System.Configuration.ApplicationSettingsBase.PropertyChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PropertyChanged As PropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::ComponentModel::PropertyChangedEventHandler ^ PropertyChanged;" />
      <MemberSignature Language="F#" Value="member this.PropertyChanged : System.ComponentModel.PropertyChangedEventHandler " Usage="member this.PropertyChanged : System.ComponentModel.PropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="751c5-231">发生在更改应用程序设置属性的值之后。</span><span class="sxs-lookup"><span data-stu-id="751c5-231">Occurs after the value of an application settings property is changed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="751c5-232">当通过 <xref:System.Configuration.ApplicationSettingsBase.Item%2A> 方法的 `set` 访问器更改设置属性，或对 <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> 或 <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> 方法调用时还原的每个属性，都会引发 <xref:System.Configuration.ApplicationSettingsBase.PropertyChanged> 事件。</span><span class="sxs-lookup"><span data-stu-id="751c5-232">The <xref:System.Configuration.ApplicationSettingsBase.PropertyChanged> event is raised when a settings property is changed through the `set` accessor of the <xref:System.Configuration.ApplicationSettingsBase.Item%2A> method, or for every property that is restored when a call is made to the <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> or <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> methods.</span></span>  
  
 <span data-ttu-id="751c5-233">此类没有对应的 `PropertyChanging` 事件;请参阅 <xref:System.Configuration.ApplicationSettingsBase.SettingChanging> 事件。</span><span class="sxs-lookup"><span data-stu-id="751c5-233">There is no corresponding `PropertyChanging` event for this class; instead, see the <xref:System.Configuration.ApplicationSettingsBase.SettingChanging> event.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)" />
        <altmember cref="T:System.ComponentModel.PropertyChangedEventArgs" />
        <altmember cref="E:System.Configuration.ApplicationSettingsBase.SettingChanging" />
        <altmember cref="P:System.Configuration.ApplicationSettingsBase.Item(System.String)" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Reload" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Reset" />
      </Docs>
    </Member>
    <Member MemberName="PropertyValues">
      <MemberSignature Language="C#" Value="public override System.Configuration.SettingsPropertyValueCollection PropertyValues { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.SettingsPropertyValueCollection PropertyValues" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.ApplicationSettingsBase.PropertyValues" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property PropertyValues As SettingsPropertyValueCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Configuration::SettingsPropertyValueCollection ^ PropertyValues { System::Configuration::SettingsPropertyValueCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PropertyValues : System.Configuration.SettingsPropertyValueCollection" Usage="System.Configuration.ApplicationSettingsBase.PropertyValues" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netcore-2.1;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.2;netcore-3.0;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.1;dotnet-plat-ext-5.0;net-5.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Configuration.SettingsPropertyValueCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="751c5-234">获取属性值的集合。</span><span class="sxs-lookup"><span data-stu-id="751c5-234">Gets a collection of property values.</span></span></summary>
        <value><span data-ttu-id="751c5-235">一个由属性值构成的 <see cref="T:System.Configuration.SettingsPropertyValueCollection" />。</span><span class="sxs-lookup"><span data-stu-id="751c5-235">A <see cref="T:System.Configuration.SettingsPropertyValueCollection" /> of property values.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Providers">
      <MemberSignature Language="C#" Value="public override System.Configuration.SettingsProviderCollection Providers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.SettingsProviderCollection Providers" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.ApplicationSettingsBase.Providers" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Providers As SettingsProviderCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Configuration::SettingsProviderCollection ^ Providers { System::Configuration::SettingsProviderCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Providers : System.Configuration.SettingsProviderCollection" Usage="System.Configuration.ApplicationSettingsBase.Providers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netcore-2.1;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.2;netcore-3.0;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.1;dotnet-plat-ext-5.0;net-5.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Configuration.SettingsProviderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="751c5-236">获取包装所使用的应用程序设置提供程序的集合。</span><span class="sxs-lookup"><span data-stu-id="751c5-236">Gets the collection of application settings providers used by the wrapper.</span></span></summary>
        <value><span data-ttu-id="751c5-237">一个 <see cref="T:System.Configuration.SettingsProviderCollection" />，包含当前设置包装的设置属性使用的所有 <see cref="T:System.Configuration.SettingsProvider" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="751c5-237">A <see cref="T:System.Configuration.SettingsProviderCollection" /> containing all the <see cref="T:System.Configuration.SettingsProvider" /> objects used by the settings properties of the current settings wrapper.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="751c5-238"><xref:System.Configuration.SettingsProviderAttribute> 确定设置包装器类或单个设置属性所使用的设置提供程序。</span><span class="sxs-lookup"><span data-stu-id="751c5-238">The <xref:System.Configuration.SettingsProviderAttribute> determines what setting provider is used by a settings wrapper class or an individual setting property.</span></span> <span data-ttu-id="751c5-239">如果未指定此属性，则客户端应用程序将使用 <xref:System.Configuration.LocalFileSettingsProvider>。</span><span class="sxs-lookup"><span data-stu-id="751c5-239">If this attribute is not specified, a client application will use the <xref:System.Configuration.LocalFileSettingsProvider>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Configuration.ApplicationSettingsBase.Properties" />
        <altmember cref="T:System.Configuration.SettingsProviderAttribute" />
        <altmember cref="M:System.Configuration.SettingsBase.Initialize(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection,System.Configuration.SettingsProviderCollection)" />
      </Docs>
    </Member>
    <Member MemberName="Reload">
      <MemberSignature Language="C#" Value="public void Reload ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reload() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.ApplicationSettingsBase.Reload" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reload ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reload();" />
      <MemberSignature Language="F#" Value="member this.Reload : unit -&gt; unit" Usage="applicationSettingsBase.Reload " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="751c5-240">从永久存储刷新应用程序设置属性值。</span><span class="sxs-lookup"><span data-stu-id="751c5-240">Refreshes the application settings property values from persistent storage.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="751c5-241"><xref:System.Configuration.ApplicationSettingsBase.Reload%2A> 方法清除当前缓存的属性值，从而导致在以后访问这些值时，将这些值从持久性存储中重新加载。</span><span class="sxs-lookup"><span data-stu-id="751c5-241">The <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> method clears the currently cached property values, causing a reload of these values from persistent storage when they are subsequently accessed.</span></span> <span data-ttu-id="751c5-242">此方法执行以下操作：</span><span class="sxs-lookup"><span data-stu-id="751c5-242">This method performs the following actions:</span></span>  
  
-   <span data-ttu-id="751c5-243">它通过清除 <xref:System.Configuration.SettingsBase.PropertyValues%2A> 属性表示的集合来清除当前缓存的属性。</span><span class="sxs-lookup"><span data-stu-id="751c5-243">It clears the currently cached properties by clearing the collection represented by the <xref:System.Configuration.SettingsBase.PropertyValues%2A> property.</span></span>  
  
-   <span data-ttu-id="751c5-244">它引发 <xref:System.Configuration.ApplicationSettingsBase.Properties%2A> 集合的每个成员的 <xref:System.Configuration.ApplicationSettingsBase.PropertyChanged> 事件。</span><span class="sxs-lookup"><span data-stu-id="751c5-244">It raises the <xref:System.Configuration.ApplicationSettingsBase.PropertyChanged> event for every member of the <xref:System.Configuration.ApplicationSettingsBase.Properties%2A> collection.</span></span>  
  
 <span data-ttu-id="751c5-245">与 <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> 比较，前者将加载最后一组已保存的应用程序设置值，而后者将加载保存的默认值。</span><span class="sxs-lookup"><span data-stu-id="751c5-245"><xref:System.Configuration.ApplicationSettingsBase.Reload%2A> contrasts with <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> in that the former will load the last set of saved application settings values, whereas the latter will load the saved default values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="751c5-246">下面的代码示例演示了在 <xref:System.Windows.Forms.Control.Click> 事件处理程序的正文中调用的 <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> 方法，该方法用于名为 `btnReload`的按钮。</span><span class="sxs-lookup"><span data-stu-id="751c5-246">The following code example shows the <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> method being invoked in the body of the <xref:System.Windows.Forms.Control.Click> event handler for a button named `btnReload`.</span></span> <span data-ttu-id="751c5-247">此调用的结果是，将应用程序设置的当前存储值重新加载到相应的属性中。</span><span class="sxs-lookup"><span data-stu-id="751c5-247">As a result of this call, the currently stored values for the application settings are reloaded into their corresponding properties.</span></span> <span data-ttu-id="751c5-248"><xref:System.Configuration.ApplicationSettingsBase> 类概述中列出了完整的代码示例。</span><span class="sxs-lookup"><span data-stu-id="751c5-248">The full code example is listed in the <xref:System.Configuration.ApplicationSettingsBase> class overview.</span></span>  
  
 [!code-cpp[AppSettingsSample#6](~/samples/snippets/cpp/VS_Snippets_Winforms/AppSettingsSample/cpp/AppSettingsSample.cpp#6)]
 [!code-csharp[AppSettingsSample#6](~/samples/snippets/csharp/VS_Snippets_Winforms/AppSettingsSample/CS/AppSettingsSample.cs#6)]
 [!code-vb[AppSettingsSample#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/AppSettingsSample/VB/Form1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Reset" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Save" />
        <altmember cref="P:System.Configuration.SettingsBase.PropertyValues" />
        <altmember cref="M:System.Configuration.SettingsPropertyValueCollection.Clear" />
        <altmember cref="E:System.Configuration.ApplicationSettingsBase.PropertyChanged" />
        <altmember cref="E:System.Configuration.ApplicationSettingsBase.SettingsLoaded" />
        <altmember cref="P:System.Configuration.ApplicationSettingsBase.Properties" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.ApplicationSettingsBase.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="applicationSettingsBase.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="751c5-249">将保持的应用程序设置值还原为其对应的默认属性。</span><span class="sxs-lookup"><span data-stu-id="751c5-249">Restores the persisted application settings values to their corresponding default properties.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="751c5-250"><xref:System.Configuration.ApplicationSettingsBase.Reset%2A> 方法通过还原每个应用程序设置的当前持久化值来覆盖用户范围的设置属性。</span><span class="sxs-lookup"><span data-stu-id="751c5-250">The <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> method overwrites the user-scoped settings properties by restoring the currently persisted value of each application settings.</span></span> <span data-ttu-id="751c5-251">此方法执行以下操作：</span><span class="sxs-lookup"><span data-stu-id="751c5-251">This method performs the following actions:</span></span>  
  
-   <span data-ttu-id="751c5-252">它在支持此可选方法的每个设置提供程序上调用 <xref:System.Configuration.IApplicationSettingsProvider.Reset%2A?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="751c5-252">It calls the <xref:System.Configuration.IApplicationSettingsProvider.Reset%2A?displayProperty=nameWithType> method on every settings provider that supports this optional method.</span></span>  
  
-   <span data-ttu-id="751c5-253">它调用 <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> 方法来强制刷新设置属性值。</span><span class="sxs-lookup"><span data-stu-id="751c5-253">It calls the <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> method to force a refresh of the settings property values.</span></span>  
  
 <span data-ttu-id="751c5-254">与 <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> 比较，前者将加载最后一组已保存的应用程序设置值，而后者将加载保存的默认值。</span><span class="sxs-lookup"><span data-stu-id="751c5-254"><xref:System.Configuration.ApplicationSettingsBase.Reload%2A> contrasts with <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> in that the former will load the last set of saved application settings values, whereas the latter will load the saved default values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="751c5-255">下面的代码示例演示了在 <xref:System.Windows.Forms.Control.Click> 事件处理程序的正文中调用的 <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> 方法，该方法用于名为 `btnReset`的按钮。</span><span class="sxs-lookup"><span data-stu-id="751c5-255">The following code example shows the <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> method being invoked in the body of the <xref:System.Windows.Forms.Control.Click> event handler for a button named `btnReset`.</span></span> <span data-ttu-id="751c5-256">作为此调用的结果，存储的应用程序设置的默认值将重新加载到其相应的属性中。</span><span class="sxs-lookup"><span data-stu-id="751c5-256">As a result of this call, the stored default values for the application settings are reloaded into their corresponding properties.</span></span> <span data-ttu-id="751c5-257"><xref:System.Configuration.ApplicationSettingsBase> 类概述中列出了完整的代码示例。</span><span class="sxs-lookup"><span data-stu-id="751c5-257">The full code example is listed in the <xref:System.Configuration.ApplicationSettingsBase> class overview.</span></span>  
  
 [!code-cpp[AppSettingsSample#5](~/samples/snippets/cpp/VS_Snippets_Winforms/AppSettingsSample/cpp/AppSettingsSample.cpp#5)]
 [!code-csharp[AppSettingsSample#5](~/samples/snippets/csharp/VS_Snippets_Winforms/AppSettingsSample/CS/AppSettingsSample.cs#5)]
 [!code-vb[AppSettingsSample#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/AppSettingsSample/VB/Form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException"><span data-ttu-id="751c5-258">未能分析配置文件。</span><span class="sxs-lookup"><span data-stu-id="751c5-258">The configuration file could not be parsed.</span></span></exception>
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Reload" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Save" />
        <altmember cref="M:System.Configuration.IApplicationSettingsProvider.Reset(System.Configuration.SettingsContext)" />
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public override void Save ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Save() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.ApplicationSettingsBase.Save" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Save ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Save();" />
      <MemberSignature Language="F#" Value="override this.Save : unit -&gt; unit" Usage="applicationSettingsBase.Save " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="751c5-259">存储应用程序设置属性的当前值。</span><span class="sxs-lookup"><span data-stu-id="751c5-259">Stores the current values of the application settings properties.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="751c5-260"><xref:System.Configuration.ApplicationSettingsBase.Save%2A> 方法将每个设置属性的当前值写入其关联的数据存储区。</span><span class="sxs-lookup"><span data-stu-id="751c5-260">The <xref:System.Configuration.ApplicationSettingsBase.Save%2A> method writes the current value of each settings property to its associated data store.</span></span> <span data-ttu-id="751c5-261">对于每个属性，此方法将调用关联的设置提供程序上的 <xref:System.Configuration.SettingsProvider.SetPropertyValues%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="751c5-261">For each property, this method calls the <xref:System.Configuration.SettingsProvider.SetPropertyValues%2A> method on the associated settings provider.</span></span>  
  
 <span data-ttu-id="751c5-262">此方法与基类实现的不同之处在于，它会在写入值之前引发 <xref:System.Configuration.ApplicationSettingsBase.SettingsSaving> 事件。</span><span class="sxs-lookup"><span data-stu-id="751c5-262">This method differs from the base class implementation in that it raises the <xref:System.Configuration.ApplicationSettingsBase.SettingsSaving> event before the values are written.</span></span>  
  
 <span data-ttu-id="751c5-263">如果唯一定义的设置是应用程序范围的设置，<xref:System.Configuration.ApplicationSettingsBase.Save%2A> 将不起作用，并且在使用默认 <xref:System.Configuration.LocalFileSettingsProvider>调用时不会返回错误。</span><span class="sxs-lookup"><span data-stu-id="751c5-263">If the only settings defined are application-scoped settings, <xref:System.Configuration.ApplicationSettingsBase.Save%2A> will have no effect and return no error if called with the default <xref:System.Configuration.LocalFileSettingsProvider>.</span></span> <span data-ttu-id="751c5-264"><xref:System.Configuration.LocalFileSettingsProvider> 仅保存用户范围的设置。</span><span class="sxs-lookup"><span data-stu-id="751c5-264"><xref:System.Configuration.LocalFileSettingsProvider> only saves user-scoped settings.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="751c5-265">没有相应的 Load 方法，因为应用程序设置的值会在包装类初始化期间自动加载。</span><span class="sxs-lookup"><span data-stu-id="751c5-265">There is no corresponding Load method because the values of application settings are automatically loaded during wrapper class initialization.</span></span> <span data-ttu-id="751c5-266">与此相反，当应用程序结束时，这些值不会自动保存。</span><span class="sxs-lookup"><span data-stu-id="751c5-266">In contrast, these values are not automatically saved when an application ends.</span></span> <span data-ttu-id="751c5-267">因此，你必须显式调用 <xref:System.Configuration.ApplicationSettingsBase.Save%2A> 方法，以保留应用程序设置的当前值。</span><span class="sxs-lookup"><span data-stu-id="751c5-267">Therefore, you must explicitly call the <xref:System.Configuration.ApplicationSettingsBase.Save%2A> method to persist the current values of the application settings.</span></span> <span data-ttu-id="751c5-268">这通常在主或包含 <xref:System.Windows.Forms.Form>的 <xref:System.Windows.Forms.Form.Closing> 事件处理程序中执行。</span><span class="sxs-lookup"><span data-stu-id="751c5-268">This is typically performed in the <xref:System.Windows.Forms.Form.Closing> event handler of the primary or containing <xref:System.Windows.Forms.Form>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="751c5-269">下面的代码示例演示从主窗体的 <xref:System.Windows.Forms.Form.Closing> 事件处理程序中调用的 <xref:System.Configuration.ApplicationSettingsBase.Save%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="751c5-269">The following code example shows the <xref:System.Configuration.ApplicationSettingsBase.Save%2A> method being called from the <xref:System.Windows.Forms.Form.Closing> event handler for the primary form.</span></span> <span data-ttu-id="751c5-270">此方法还会在与窗体的 <xref:System.Windows.Forms.Control.Text%2A> 属性关联的 settings 属性后面追加一个附加句点。</span><span class="sxs-lookup"><span data-stu-id="751c5-270">This method also appends an extra period to the settings property that is associated with the form's <xref:System.Windows.Forms.Control.Text%2A> property.</span></span>  
  
 <span data-ttu-id="751c5-271"><xref:System.Configuration.ApplicationSettingsBase> 类概述中列出了完整的代码示例。</span><span class="sxs-lookup"><span data-stu-id="751c5-271">The full code example is listed in the <xref:System.Configuration.ApplicationSettingsBase> class overview.</span></span>  
  
 [!code-cpp[AppSettingsSample#3](~/samples/snippets/cpp/VS_Snippets_Winforms/AppSettingsSample/cpp/AppSettingsSample.cpp#3)]
 [!code-csharp[AppSettingsSample#3](~/samples/snippets/csharp/VS_Snippets_Winforms/AppSettingsSample/CS/AppSettingsSample.cs#3)]
 [!code-vb[AppSettingsSample#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/AppSettingsSample/VB/Form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Reset" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Reload" />
        <altmember cref="E:System.Configuration.ApplicationSettingsBase.SettingsSaving" />
        <altmember cref="M:System.Configuration.SettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)" />
        <altmember cref="T:System.Configuration.SettingsProviderAttribute" />
      </Docs>
    </Member>
    <Member MemberName="SettingChanging">
      <MemberSignature Language="C#" Value="public event System.Configuration.SettingChangingEventHandler SettingChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Configuration.SettingChangingEventHandler SettingChanging" />
      <MemberSignature Language="DocId" Value="E:System.Configuration.ApplicationSettingsBase.SettingChanging" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SettingChanging As SettingChangingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Configuration::SettingChangingEventHandler ^ SettingChanging;" />
      <MemberSignature Language="F#" Value="member this.SettingChanging : System.Configuration.SettingChangingEventHandler " Usage="member this.SettingChanging : System.Configuration.SettingChangingEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.SettingChangingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="751c5-272">发生在更改应用程序设置属性的值之前。</span><span class="sxs-lookup"><span data-stu-id="751c5-272">Occurs before the value of an application settings property is changed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="751c5-273"><xref:System.Configuration.ApplicationSettingsBase.SettingChanging> 事件发生在应用程序设置值属性通过 <xref:System.Configuration.ApplicationSettingsBase.Item%2A> 方法更改之前。</span><span class="sxs-lookup"><span data-stu-id="751c5-273">The <xref:System.Configuration.ApplicationSettingsBase.SettingChanging> event occurs before an application setting value property is changed through the <xref:System.Configuration.ApplicationSettingsBase.Item%2A> method.</span></span> <span data-ttu-id="751c5-274">当调用 <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> 或 <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> 方法时，不会引发此事件。</span><span class="sxs-lookup"><span data-stu-id="751c5-274">This event is not raised when the <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> or <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> methods are called.</span></span> <span data-ttu-id="751c5-275">可以通过 <xref:System.Configuration.SettingChangingEventArgs> 事件数据类取消 <xref:System.Configuration.ApplicationSettingsBase.SettingChanging>。</span><span class="sxs-lookup"><span data-stu-id="751c5-275"><xref:System.Configuration.ApplicationSettingsBase.SettingChanging> can be canceled through the <xref:System.Configuration.SettingChangingEventArgs> event data class.</span></span>  
  
 <span data-ttu-id="751c5-276">通常使用 <xref:System.Configuration.ApplicationSettingsBase.SettingChanging> 事件来处理单个设置属性的立即验证。</span><span class="sxs-lookup"><span data-stu-id="751c5-276">You typically use the <xref:System.Configuration.ApplicationSettingsBase.SettingChanging> event to handle immediate validation of an individual settings property.</span></span> <span data-ttu-id="751c5-277">有关验证的详细信息，请参阅[如何：验证应用程序设置](/dotnet/framework/winforms/advanced/how-to-validate-application-settings)。</span><span class="sxs-lookup"><span data-stu-id="751c5-277">For more information about validation, see [How to: Validate Application Settings](/dotnet/framework/winforms/advanced/how-to-validate-application-settings).</span></span>  
  
 <span data-ttu-id="751c5-278">此类没有对应的 `SettingChanged` 事件;请参阅 <xref:System.Configuration.ApplicationSettingsBase.PropertyChanged> 事件。</span><span class="sxs-lookup"><span data-stu-id="751c5-278">There is no corresponding `SettingChanged` event for this class; instead, see the <xref:System.Configuration.ApplicationSettingsBase.PropertyChanged> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="751c5-279">下面的代码示例演示类型 `FormSettings`的对象的 <xref:System.Configuration.ApplicationSettingsBase.SettingChanging> 事件处理程序，它是从 <xref:System.Configuration.ApplicationSettingsBase>派生的包装类。</span><span class="sxs-lookup"><span data-stu-id="751c5-279">The following code example shows the <xref:System.Configuration.ApplicationSettingsBase.SettingChanging> event handler for object of type `FormSettings`, which is a wrapper class derived from <xref:System.Configuration.ApplicationSettingsBase>.</span></span> <span data-ttu-id="751c5-280">处理程序将事件信息显示在名为 `tbStatus`的文本框中。</span><span class="sxs-lookup"><span data-stu-id="751c5-280">The handler displays the event information in a textbox named `tbStatus`.</span></span> <span data-ttu-id="751c5-281"><xref:System.Configuration.ApplicationSettingsBase> 类概述中列出了完整的代码示例。</span><span class="sxs-lookup"><span data-stu-id="751c5-281">The full code example is listed in the <xref:System.Configuration.ApplicationSettingsBase> class overview.</span></span>  
  
 [!code-cpp[AppSettingsSample#7](~/samples/snippets/cpp/VS_Snippets_Winforms/AppSettingsSample/cpp/AppSettingsSample.cpp#7)]
 [!code-csharp[AppSettingsSample#7](~/samples/snippets/csharp/VS_Snippets_Winforms/AppSettingsSample/CS/AppSettingsSample.cs#7)]
 [!code-vb[AppSettingsSample#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/AppSettingsSample/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.OnSettingChanging(System.Object,System.Configuration.SettingChangingEventArgs)" />
        <altmember cref="T:System.Configuration.SettingChangingEventArgs" />
        <altmember cref="E:System.Configuration.ApplicationSettingsBase.PropertyChanged" />
        <altmember cref="P:System.Configuration.ApplicationSettingsBase.Item(System.String)" />
        <related type="Article" href="https://msdn.microsoft.com/library/9f145ada-4267-436a-aa4c-c4dcffd0afb7"><span data-ttu-id="751c5-282">如何：验证应用程序设置</span><span class="sxs-lookup"><span data-stu-id="751c5-282">How to: Validate Application Settings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SettingsKey">
      <MemberSignature Language="C#" Value="public string SettingsKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SettingsKey" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.ApplicationSettingsBase.SettingsKey" />
      <MemberSignature Language="VB.NET" Value="Public Property SettingsKey As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SettingsKey { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SettingsKey : string with get, set" Usage="System.Configuration.ApplicationSettingsBase.SettingsKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netcore-2.1;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.2;netcore-3.0;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.1;dotnet-plat-ext-5.0;net-5.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="751c5-283">获取或设置应用程序设置组的设置键。</span><span class="sxs-lookup"><span data-stu-id="751c5-283">Gets or sets the settings key for the application settings group.</span></span></summary>
        <value><span data-ttu-id="751c5-284">一个 <see cref="T:System.String" />，包含当前设置组的设置键。</span><span class="sxs-lookup"><span data-stu-id="751c5-284">A <see cref="T:System.String" /> containing the settings key for the current settings group.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="751c5-285">提供 <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> 属性是为了使客户端代码（尤其是设置提供程序）能够区分同一应用程序设置类的多个实例之间的歧义。</span><span class="sxs-lookup"><span data-stu-id="751c5-285">The <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> property is provided to enable client code, and in particular the settings provider, to disambiguate between multiple instances of the same application settings class.</span></span>  
  
 <span data-ttu-id="751c5-286">除非使用单独模式设计设置包装器类，否则单个应用程序中可以有多个相同应用程序设置类的实例。</span><span class="sxs-lookup"><span data-stu-id="751c5-286">Unless the settings wrapper class is designed using the singleton pattern, there can be multiple instances of the same application settings class in a single application.</span></span> <span data-ttu-id="751c5-287">应根据属性值的共享方式设置 <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> 的值。</span><span class="sxs-lookup"><span data-stu-id="751c5-287">The value of <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> should be set according to how the property values are intended to be shared.</span></span>  
  
-   <span data-ttu-id="751c5-288">如果要在同一应用程序中的包装的所有实例之间共享包装的设置属性，则 <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> 在所有实例中都应具有相同的值。</span><span class="sxs-lookup"><span data-stu-id="751c5-288">If the settings properties of the wrapper are intended to be shared across all instances of the wrapper in the same application, then <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> should have the same value in all of the instances.</span></span> <span data-ttu-id="751c5-289">这是 <xref:System.Configuration.ApplicationSettingsBase> 类的默认行为。</span><span class="sxs-lookup"><span data-stu-id="751c5-289">This is the default behavior of the <xref:System.Configuration.ApplicationSettingsBase> class.</span></span>  
  
-   <span data-ttu-id="751c5-290">如果包装的设置属性应为每个实例，则 <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> 应为每个实例提供唯一值。</span><span class="sxs-lookup"><span data-stu-id="751c5-290">If the settings properties of the wrapper are intended to be per instance, then <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> should have a unique value for every instance.</span></span> <span data-ttu-id="751c5-291">使用构造函数的 <xref:System.Configuration.ApplicationSettingsBase.%23ctor%28System.String%29> 版本，可以将 <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> 初始化为唯一字符串。</span><span class="sxs-lookup"><span data-stu-id="751c5-291">The <xref:System.Configuration.ApplicationSettingsBase.%23ctor%28System.String%29> version of the constructor enables you to initialize <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> to a unique string.</span></span>  
  
 <span data-ttu-id="751c5-292">与此相反，<xref:System.Configuration.ApplicationSettingsBase.Context%2A> 属性向设置提供程序提供提示，使其能够以有效且有序的方式持久保存值。</span><span class="sxs-lookup"><span data-stu-id="751c5-292">In contrast, the <xref:System.Configuration.ApplicationSettingsBase.Context%2A> property provides hints to the settings provider to enable it to persist values in an efficient and orderly manner.</span></span>  
  
 <span data-ttu-id="751c5-293"><xref:System.Configuration.SettingChangingEventArgs> 类包含一个类似的 <xref:System.Configuration.SettingChangingEventArgs.SettingKey%2A> 属性，可帮助标识 <xref:System.Configuration.ApplicationSettingsBase.SettingChanging> 事件的源。</span><span class="sxs-lookup"><span data-stu-id="751c5-293">The <xref:System.Configuration.SettingChangingEventArgs> class contains a similar <xref:System.Configuration.SettingChangingEventArgs.SettingKey%2A> property that helps identify the source of the <xref:System.Configuration.ApplicationSettingsBase.SettingChanging> event.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Configuration.ApplicationSettingsBase.Context" />
        <altmember cref="T:System.Configuration.SettingChangingEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="SettingsLoaded">
      <MemberSignature Language="C#" Value="public event System.Configuration.SettingsLoadedEventHandler SettingsLoaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Configuration.SettingsLoadedEventHandler SettingsLoaded" />
      <MemberSignature Language="DocId" Value="E:System.Configuration.ApplicationSettingsBase.SettingsLoaded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SettingsLoaded As SettingsLoadedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Configuration::SettingsLoadedEventHandler ^ SettingsLoaded;" />
      <MemberSignature Language="F#" Value="member this.SettingsLoaded : System.Configuration.SettingsLoadedEventHandler " Usage="member this.SettingsLoaded : System.Configuration.SettingsLoadedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.SettingsLoadedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="751c5-294">在从存储区中检索应用程序设置之后发生。</span><span class="sxs-lookup"><span data-stu-id="751c5-294">Occurs after the application settings are retrieved from storage.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="751c5-295">仅在对使用的第一个配置属性进行初始 `get` 访问（通常通过 <xref:System.Configuration.ApplicationSettingsBase.Item%2A> 方法）后，才会发生 <xref:System.Configuration.ApplicationSettingsBase.SettingsLoaded> 事件。</span><span class="sxs-lookup"><span data-stu-id="751c5-295">The <xref:System.Configuration.ApplicationSettingsBase.SettingsLoaded> event occurs only after the initial `get` access of the first configuration property used, typically through the <xref:System.Configuration.ApplicationSettingsBase.Item%2A> method.</span></span> <span data-ttu-id="751c5-296">后续访问使用本地缓存的设置属性的值。</span><span class="sxs-lookup"><span data-stu-id="751c5-296">Subsequent accesses use values for the settings property that are cached locally.</span></span> <span data-ttu-id="751c5-297"><xref:System.Configuration.ApplicationSettingsBase.Reset%2A> 和 <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> 方法将清除所有缓存的值，以便在后续属性访问时再次引发此事件。</span><span class="sxs-lookup"><span data-stu-id="751c5-297">The <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> and <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> methods will clear all cached values so this event will be raised again upon subsequent property access.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.OnSettingsLoaded(System.Object,System.Configuration.SettingsLoadedEventArgs)" />
        <altmember cref="T:System.Configuration.SettingsLoadedEventArgs" />
        <altmember cref="P:System.Configuration.ApplicationSettingsBase.Item(System.String)" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Reset" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Reload" />
      </Docs>
    </Member>
    <Member MemberName="SettingsSaving">
      <MemberSignature Language="C#" Value="public event System.Configuration.SettingsSavingEventHandler SettingsSaving;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Configuration.SettingsSavingEventHandler SettingsSaving" />
      <MemberSignature Language="DocId" Value="E:System.Configuration.ApplicationSettingsBase.SettingsSaving" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SettingsSaving As SettingsSavingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Configuration::SettingsSavingEventHandler ^ SettingsSaving;" />
      <MemberSignature Language="F#" Value="member this.SettingsSaving : System.Configuration.SettingsSavingEventHandler " Usage="member this.SettingsSaving : System.Configuration.SettingsSavingEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.SettingsSavingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="751c5-298">发生在将值保存到数据存储区中之前。</span><span class="sxs-lookup"><span data-stu-id="751c5-298">Occurs before values are saved to the data store.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="751c5-299"><xref:System.Configuration.ApplicationSettingsBase.SettingsSaving> 事件由 <xref:System.Configuration.ApplicationSettingsBase.Save%2A> 方法引发，然后将应用程序设置属性存储到其关联的数据存储区。</span><span class="sxs-lookup"><span data-stu-id="751c5-299">The <xref:System.Configuration.ApplicationSettingsBase.SettingsSaving> event is raised by the <xref:System.Configuration.ApplicationSettingsBase.Save%2A> method before it stores the application settings properties to their associated data store.</span></span> <span data-ttu-id="751c5-300">关联的事件处理程序可以取消此事件。</span><span class="sxs-lookup"><span data-stu-id="751c5-300">The associated event handler can cancel this event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="751c5-301">下面的代码示例演示类型 `FormSettings`的对象的 <xref:System.Configuration.ApplicationSettingsBase.SettingsSaving> 事件处理程序，它是从 <xref:System.Configuration.ApplicationSettingsBase>派生的包装类。</span><span class="sxs-lookup"><span data-stu-id="751c5-301">The following code example shows the <xref:System.Configuration.ApplicationSettingsBase.SettingsSaving> event handler for object of type `FormSettings`, which is a wrapper class derived from <xref:System.Configuration.ApplicationSettingsBase>.</span></span> <span data-ttu-id="751c5-302">处理程序将查询用户以保存当前的应用程序设置属性值。</span><span class="sxs-lookup"><span data-stu-id="751c5-302">The handler queries the user to save the current application settings property values.</span></span> <span data-ttu-id="751c5-303"><xref:System.Configuration.ApplicationSettingsBase> 类概述中列出了完整的代码示例。</span><span class="sxs-lookup"><span data-stu-id="751c5-303">The full code example is listed in the <xref:System.Configuration.ApplicationSettingsBase> class overview.</span></span>  
  
 [!code-cpp[AppSettingsSample#8](~/samples/snippets/cpp/VS_Snippets_Winforms/AppSettingsSample/cpp/AppSettingsSample.cpp#8)]
 [!code-csharp[AppSettingsSample#8](~/samples/snippets/csharp/VS_Snippets_Winforms/AppSettingsSample/CS/AppSettingsSample.cs#8)]
 [!code-vb[AppSettingsSample#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/AppSettingsSample/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.OnSettingsSaving(System.Object,System.ComponentModel.CancelEventArgs)" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Save" />
      </Docs>
    </Member>
    <Member MemberName="Upgrade">
      <MemberSignature Language="C#" Value="public virtual void Upgrade ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Upgrade() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.ApplicationSettingsBase.Upgrade" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Upgrade ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Upgrade();" />
      <MemberSignature Language="F#" Value="abstract member Upgrade : unit -&gt; unit&#xA;override this.Upgrade : unit -&gt; unit" Usage="applicationSettingsBase.Upgrade " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="751c5-304">更新应用程序设置，以反映最近安装的应用程序。</span><span class="sxs-lookup"><span data-stu-id="751c5-304">Updates application settings to reflect a more recent installation of the application.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="751c5-305"><xref:System.Configuration.ApplicationSettingsBase.Upgrade%2A> 方法执行两个操作，以确保平滑过渡到新版本的应用程序：</span><span class="sxs-lookup"><span data-stu-id="751c5-305">The <xref:System.Configuration.ApplicationSettingsBase.Upgrade%2A> method performs two actions to assure smooth transition to a new version of an application:</span></span>  
  
-   <span data-ttu-id="751c5-306">它通过调用 <xref:System.Configuration.IApplicationSettingsProvider.Upgrade%2A?displayProperty=nameWithType> 方法，通知所有相应的设置提供程序是否存在已升级的应用程序，前提是它们已经实现了 <xref:System.Configuration.IApplicationSettingsProvider> 接口。</span><span class="sxs-lookup"><span data-stu-id="751c5-306">It notifies all of the corresponding settings providers of the existence of the upgraded application through a call to their <xref:System.Configuration.IApplicationSettingsProvider.Upgrade%2A?displayProperty=nameWithType> method, assuming they have implemented the <xref:System.Configuration.IApplicationSettingsProvider> interface.</span></span> <span data-ttu-id="751c5-307">如果设置包装类标记有 <xref:System.Configuration.NoSettingsVersionUpgradeAttribute>，则不会执行此操作。</span><span class="sxs-lookup"><span data-stu-id="751c5-307">This action is not performed if the settings wrapper class is marked with <xref:System.Configuration.NoSettingsVersionUpgradeAttribute>.</span></span>  
  
-   <span data-ttu-id="751c5-308">它重新加载所有应用程序设置的值。</span><span class="sxs-lookup"><span data-stu-id="751c5-308">It reloads the values for all of the application settings.</span></span>  
  
 <span data-ttu-id="751c5-309">您可以重写 <xref:System.Configuration.ApplicationSettingsBase.Upgrade%2A> 的默认行为，以实现自定义升级或合并行为。</span><span class="sxs-lookup"><span data-stu-id="751c5-309">You can override the default behavior of <xref:System.Configuration.ApplicationSettingsBase.Upgrade%2A> to implement custom upgrading or merging behavior.</span></span> <span data-ttu-id="751c5-310">使用 <xref:System.Configuration.ApplicationSettingsBase.GetPreviousVersion%2A> 方法可以检索应用程序的前一版本的设置的各个值。</span><span class="sxs-lookup"><span data-stu-id="751c5-310">Use the <xref:System.Configuration.ApplicationSettingsBase.GetPreviousVersion%2A> method to retrieve individual values for a setting for the previous version of the application.</span></span> <span data-ttu-id="751c5-311">自定义升级行为的示例包括：</span><span class="sxs-lookup"><span data-stu-id="751c5-311">Examples of custom upgrade behavior include:</span></span>  
  
-   <span data-ttu-id="751c5-312">使用新的策略默认值覆盖以前的一个或多个用户指定的值或以前的默认值。</span><span class="sxs-lookup"><span data-stu-id="751c5-312">Using new policy defaults that override one or more of the previous user-specified values or previous defaults.</span></span>  
  
-   <span data-ttu-id="751c5-313">要与较新范围、其他设置属性组等兼容的旧值的特殊翻译。</span><span class="sxs-lookup"><span data-stu-id="751c5-313">Special translation of old values to be compatible with newer ranges, a different settings property group, and so on.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException"><span data-ttu-id="751c5-314">未能分析配置文件。</span><span class="sxs-lookup"><span data-stu-id="751c5-314">The configuration file could not be parsed.</span></span></exception>
        <altmember cref="P:System.Configuration.ApplicationSettingsBase.Providers" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Reload" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.GetPreviousVersion(System.String)" />
        <altmember cref="T:System.Configuration.NoSettingsVersionUpgradeAttribute" />
        <altmember cref="M:System.Configuration.IApplicationSettingsProvider.Upgrade(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)" />
      </Docs>
    </Member>
  </Members>
</Type>
