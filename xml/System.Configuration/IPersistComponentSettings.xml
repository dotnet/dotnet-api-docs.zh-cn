<Type Name="IPersistComponentSettings" FullName="System.Configuration.IPersistComponentSettings">
  <Metadata><Meta Name="ms.openlocfilehash" Value="93e0fdc807b0b1d60cd227b9be15f191d8570b0b" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89789142" /></Metadata><TypeSignature Language="C#" Value="public interface IPersistComponentSettings" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPersistComponentSettings" />
  <TypeSignature Language="DocId" Value="T:System.Configuration.IPersistComponentSettings" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPersistComponentSettings" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPersistComponentSettings" />
  <TypeSignature Language="F#" Value="type IPersistComponentSettings = interface" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="c64de-101">定义存储和检索应用程序设置的控件或类的标准功能。</span><span class="sxs-lookup"><span data-stu-id="c64de-101">Defines standard functionality for controls or libraries that store and retrieve application settings.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c64de-102">通常，可以通过创建一个从派生的设置包装器类， <xref:System.Configuration.ApplicationSettingsBase> 并向此类添加特殊属性，将应用程序设置支持添加到应用程序。</span><span class="sxs-lookup"><span data-stu-id="c64de-102">Typically, you can add application settings support to an application by creating a settings wrapper class, which is derived from <xref:System.Configuration.ApplicationSettingsBase>, and then add special properties to this class.</span></span> <span data-ttu-id="c64de-103">但是，此方法并不能充分封装控件的应用程序设置，因此无法从详细信息中屏蔽其容器。</span><span class="sxs-lookup"><span data-stu-id="c64de-103">However, this approach does not sufficiently encapsulate application settings for a control so that its container is shielded from the details.</span></span> <span data-ttu-id="c64de-104"><xref:System.Configuration.IPersistComponentSettings>接口为应用程序提供了一个标准接口，用于将应用程序设置状态更改请求与控件、组件或库模块通信。</span><span class="sxs-lookup"><span data-stu-id="c64de-104">The <xref:System.Configuration.IPersistComponentSettings> interface provides an application with a standard interface for communicating application settings state change requests to a control, component, or library module.</span></span> <span data-ttu-id="c64de-105">设计时工具还依赖于此接口以正确管理控件和组件。</span><span class="sxs-lookup"><span data-stu-id="c64de-105">Design-time tools also depend on this interface to properly manage controls and components.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Configuration.ApplicationSettingsBase" />
    <related type="Article" href="/dotnet/framework/winforms/advanced/application-settings-for-custom-controls"><span data-ttu-id="c64de-106">自定义控件的应用程序设置</span><span class="sxs-lookup"><span data-stu-id="c64de-106">Application Settings for Custom Controls</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="LoadComponentSettings">
      <MemberSignature Language="C#" Value="public void LoadComponentSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadComponentSettings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IPersistComponentSettings.LoadComponentSettings" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadComponentSettings ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadComponentSettings();" />
      <MemberSignature Language="F#" Value="abstract member LoadComponentSettings : unit -&gt; unit" Usage="iPersistComponentSettings.LoadComponentSettings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c64de-107">将控件的应用程序设置读入相应的属性中，并更新控件状态。</span><span class="sxs-lookup"><span data-stu-id="c64de-107">Reads the control's application settings into their corresponding properties and updates the control's state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c64de-108">通常， <xref:System.Configuration.IPersistComponentSettings.LoadComponentSettings%2A> 方法执行两项基本操作：</span><span class="sxs-lookup"><span data-stu-id="c64de-108">In general, the <xref:System.Configuration.IPersistComponentSettings.LoadComponentSettings%2A> method performs two essential operations:</span></span>  
  
-   <span data-ttu-id="c64de-109">它会导致控件包含的每个应用程序设置实例刷新其应用程序设置属性的值，通常通过调用其方法来刷新 <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c64de-109">It causes each application settings instance contained by the control to refresh the values of its application settings properties, typically by calling their <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> methods.</span></span>  
  
-   <span data-ttu-id="c64de-110">根据需要，它会更新依赖于这些重新加载的设置属性的常规属性。</span><span class="sxs-lookup"><span data-stu-id="c64de-110">As required, it updates those general properties that depend on these reloaded settings properties.</span></span> <span data-ttu-id="c64de-111">例如，如果 settings 类包含 `location` 设置属性， <xref:System.Configuration.IPersistComponentSettings.LoadComponentSettings%2A> 应确保更新控件的 <xref:System.Windows.Forms.Control.Location%2A> 属性以反映此重新加载的设置。</span><span class="sxs-lookup"><span data-stu-id="c64de-111">For example, if the settings class contained a `location` settings property, <xref:System.Configuration.IPersistComponentSettings.LoadComponentSettings%2A> should ensure that the control's <xref:System.Windows.Forms.Control.Location%2A> property is updated to reflect this reloaded setting.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.IPersistComponentSettings.SaveComponentSettings" />
        <altmember cref="M:System.Configuration.IPersistComponentSettings.ResetComponentSettings" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Reload" />
      </Docs>
    </Member>
    <Member MemberName="ResetComponentSettings">
      <MemberSignature Language="C#" Value="public void ResetComponentSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetComponentSettings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IPersistComponentSettings.ResetComponentSettings" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetComponentSettings ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetComponentSettings();" />
      <MemberSignature Language="F#" Value="abstract member ResetComponentSettings : unit -&gt; unit" Usage="iPersistComponentSettings.ResetComponentSettings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c64de-112">将控件的应用程序设置属性重置为其默认值。</span><span class="sxs-lookup"><span data-stu-id="c64de-112">Resets the control's application settings properties to their default values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c64de-113">方法的实现 <xref:System.Configuration.IPersistComponentSettings.ResetComponentSettings%2A> 通常对 <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> 它包含的应用程序设置类的每个实例调用方法。</span><span class="sxs-lookup"><span data-stu-id="c64de-113">The implementation of the <xref:System.Configuration.IPersistComponentSettings.ResetComponentSettings%2A> method typically calls the <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> method on each instance of an application settings class it contains.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.IPersistComponentSettings.LoadComponentSettings" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Reset" />
      </Docs>
    </Member>
    <Member MemberName="SaveComponentSettings">
      <MemberSignature Language="C#" Value="public void SaveComponentSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SaveComponentSettings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IPersistComponentSettings.SaveComponentSettings" />
      <MemberSignature Language="VB.NET" Value="Public Sub SaveComponentSettings ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SaveComponentSettings();" />
      <MemberSignature Language="F#" Value="abstract member SaveComponentSettings : unit -&gt; unit" Usage="iPersistComponentSettings.SaveComponentSettings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c64de-114">保持控件的应用程序设置属性。</span><span class="sxs-lookup"><span data-stu-id="c64de-114">Persists the control's application settings properties.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c64de-115"><xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A>方法将控件的应用程序设置属性的值写入关联的数据存储区。</span><span class="sxs-lookup"><span data-stu-id="c64de-115">The <xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A> method writes the values of the control's application settings properties to the associated data store.</span></span> <span data-ttu-id="c64de-116">方法使用的数据存储和序列化技术由与每个 settings 类相关联的设置提供程序确定 <xref:System.Configuration.SettingsProviderAttribute> 。</span><span class="sxs-lookup"><span data-stu-id="c64de-116">The data store and serialization technique the method uses is determined by the settings provider associated with each settings class through the <xref:System.Configuration.SettingsProviderAttribute>.</span></span> <span data-ttu-id="c64de-117">您可以使用接口覆盖设置提供程序的选择 <xref:System.Configuration.ISettingsProviderService> 。</span><span class="sxs-lookup"><span data-stu-id="c64de-117">You can override the choice of the settings provider by using the <xref:System.Configuration.ISettingsProviderService> interface.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c64de-118">如果 <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> 属性为 `true` ，则控件应调用 <xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A> 其自身的方法，以便在 <xref:System.Windows.Forms.Control.Dispose%2A> 应用程序结束之前自动存储控件的配置数据。</span><span class="sxs-lookup"><span data-stu-id="c64de-118">If the <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> property is `true`, the control should call <xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A> in its own <xref:System.Windows.Forms.Control.Dispose%2A> method so that the control's configuration data is stored automatically before the application ends.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Configuration.IPersistComponentSettings.SaveSettings" />
        <altmember cref="M:System.Configuration.IPersistComponentSettings.LoadComponentSettings" />
        <altmember cref="M:System.Configuration.IPersistComponentSettings.ResetComponentSettings" />
        <altmember cref="T:System.Configuration.SettingsProvider" />
        <altmember cref="T:System.Configuration.LocalFileSettingsProvider" />
        <altmember cref="T:System.Configuration.SettingsProviderAttribute" />
        <altmember cref="T:System.Configuration.ISettingsProviderService" />
      </Docs>
    </Member>
    <Member MemberName="SaveSettings">
      <MemberSignature Language="C#" Value="public bool SaveSettings { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SaveSettings" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.IPersistComponentSettings.SaveSettings" />
      <MemberSignature Language="VB.NET" Value="Public Property SaveSettings As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SaveSettings { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SaveSettings : bool with get, set" Usage="System.Configuration.IPersistComponentSettings.SaveSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c64de-119">获取或设置一个值，该值指示控件是否应自动保持其应用程序设置属性。</span><span class="sxs-lookup"><span data-stu-id="c64de-119">Gets or sets a value indicating whether the control should automatically persist its application settings properties.</span></span></summary>
        <value><span data-ttu-id="c64de-120">如果控件应自动保持其状态，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c64de-120"><see langword="true" /> if the control should automatically persist its state; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c64de-121">如果控件包含配置数据，则通常会保留此数据以响应对方法的显式调用， <xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A> 或在调用控件的方法时隐式调用 <xref:System.Windows.Forms.Control.Dispose%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c64de-121">If a control contains configuration data, it will typically persist this data in response to an explicit call to the <xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A> method or sometimes implicitly when the control's <xref:System.Windows.Forms.Control.Dispose%2A> method is invoked.</span></span> <span data-ttu-id="c64de-122"><xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A>属性确定控件在释放时是否自动保存其配置数据。</span><span class="sxs-lookup"><span data-stu-id="c64de-122">The <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> property determines whether a control automatically persists its configuration data when it is disposed.</span></span>  
  
 <span data-ttu-id="c64de-123">的默认值 <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> 取决于控件的实现。</span><span class="sxs-lookup"><span data-stu-id="c64de-123">The default value of <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> depends on the implementation of the control.</span></span> <span data-ttu-id="c64de-124">控件的文档应指示它使用的是应用程序设置、要保存的数据以及属性的默认值 <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c64de-124">The documentation for the control should indicate whether it uses application settings, what data is persisted, and what the default value of the <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> property is.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c64de-125">下面的代码示例演示了在 <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> 尝试自动保留其配置数据之前，控件检查属性值的正确方法。</span><span class="sxs-lookup"><span data-stu-id="c64de-125">The following code example shows the proper way for a control to check the value of the <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> property before it attempts to automatically persist its configuration data.</span></span>  
  
 `protected override void Dispose( bool disposing ) {`  
  
 `if(disposing) {`  
  
 `try {`  
  
 `if (SaveSettings) {`  
  
 `SaveComponentSettings();`  
  
 `}`  
  
 `}`  
  
 `finally {`  
  
 `//...`  
  
 `}`  
  
 `}`  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.IPersistComponentSettings.SaveComponentSettings" />
        <altmember cref="M:System.Configuration.SettingsBase.Save" />
      </Docs>
    </Member>
    <Member MemberName="SettingsKey">
      <MemberSignature Language="C#" Value="public string SettingsKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SettingsKey" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.IPersistComponentSettings.SettingsKey" />
      <MemberSignature Language="VB.NET" Value="Public Property SettingsKey As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SettingsKey { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SettingsKey : string with get, set" Usage="System.Configuration.IPersistComponentSettings.SettingsKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c64de-126">获取或设置控件当前实例的应用程序设置键的值。</span><span class="sxs-lookup"><span data-stu-id="c64de-126">Gets or sets the value of the application settings key for the current instance of the control.</span></span></summary>
        <value><span data-ttu-id="c64de-127">一个 <see cref="T:System.String" />，包含该控件的当前实例的设置键。</span><span class="sxs-lookup"><span data-stu-id="c64de-127">A <see cref="T:System.String" /> containing the settings key for the current instance of the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c64de-128"><xref:System.Configuration.IPersistComponentSettings.SettingsKey%2A>当存在多个具有相同包装类的实例时，请使用属性来消除应用程序设置属性组的歧义。</span><span class="sxs-lookup"><span data-stu-id="c64de-128">Use the <xref:System.Configuration.IPersistComponentSettings.SettingsKey%2A> property to disambiguate groups of application settings properties when there are multiple instances of the same wrapper class.</span></span> <span data-ttu-id="c64de-129">例如，如果控件包含关联的包装类，则在同一应用程序中放置同一控件的多个实例通常会导致包装类的多个实例。</span><span class="sxs-lookup"><span data-stu-id="c64de-129">For example, if a control contains an associated wrapper class, then placing multiple instances of the same control in the same application will typically result in multiple instances of the wrapper class.</span></span> <span data-ttu-id="c64de-130">仅当配置数据在每个实例上不同时，才需要设置键;例如，动态定位的控件的位置。</span><span class="sxs-lookup"><span data-stu-id="c64de-130">A settings key is required only when the configuration data differs on a per-instance basis; for example, the location of dynamically positioned controls.</span></span>  
  
 <span data-ttu-id="c64de-131">以下一般规则适用于使用 <xref:System.Configuration.IPersistComponentSettings.SettingsKey%2A> ：</span><span class="sxs-lookup"><span data-stu-id="c64de-131">The following general rules apply to the use of <xref:System.Configuration.IPersistComponentSettings.SettingsKey%2A>:</span></span>  
  
-   <span data-ttu-id="c64de-132">类似于任何类的控件可以包含从派生的零个或多个应用程序设置类 <xref:System.Configuration.ApplicationSettingsBase> 。</span><span class="sxs-lookup"><span data-stu-id="c64de-132">A control, like any class, may contain zero or more application settings classes, derived from <xref:System.Configuration.ApplicationSettingsBase>.</span></span> <span data-ttu-id="c64de-133">每个 settings 类都包含自己的 <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=nameWithType> 属性，这有助于消除该类的多个实例的歧义。</span><span class="sxs-lookup"><span data-stu-id="c64de-133">Each settings class contains its own <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=nameWithType> property, which helps disambiguate multiple instances of that class.</span></span>  
  
-   <span data-ttu-id="c64de-134">控件应将其每个实例的数据及其共享数据分隔到不同的设置类中。</span><span class="sxs-lookup"><span data-stu-id="c64de-134">A control should separate its per-instance data and its shared data into different settings classes.</span></span>  
  
-   <span data-ttu-id="c64de-135">对于包含每个实例配置数据的控件，属性的 `get` 访问器 <xref:System.Configuration.IPersistComponentSettings.SettingsKey%2A> 应默认为 <xref:System.Windows.Forms.Control.Name%2A> 控件的。</span><span class="sxs-lookup"><span data-stu-id="c64de-135">For a control with any per-instance configuration data, the `get` accessor of the <xref:System.Configuration.IPersistComponentSettings.SettingsKey%2A> property should default to the <xref:System.Windows.Forms.Control.Name%2A> of the control.</span></span> <span data-ttu-id="c64de-136">在大多数情况下，控件的名称将在应用程序中是唯一的。</span><span class="sxs-lookup"><span data-stu-id="c64de-136">In most cases the name of the control will be unique within an application.</span></span> <span data-ttu-id="c64de-137">如果控件仅包含共享的配置数据，则 `get` 默认为 `null` 。</span><span class="sxs-lookup"><span data-stu-id="c64de-137">If the control contains only shared configuration data, `get` should default to `null`.</span></span>  
  
-   <span data-ttu-id="c64de-138">`set`应实现此属性的访问器来区分包含每个实例的设置类和共享配置数据。</span><span class="sxs-lookup"><span data-stu-id="c64de-138">The `set` accessor for this property should be implemented to distinguish between settings classes containing per-instance and shared configuration data.</span></span> <span data-ttu-id="c64de-139">对于包含每个实例数据的每个 settings 类， `set` 只应传递到 <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=nameWithType> settings 类的属性。</span><span class="sxs-lookup"><span data-stu-id="c64de-139">For each settings class containing per-instance data, `set` should just pass-through to the <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=nameWithType> property of the settings class.</span></span> <span data-ttu-id="c64de-140">对于包含共享数据的设置类， `set` 不应对该设置类执行任何操作。</span><span class="sxs-lookup"><span data-stu-id="c64de-140">For settings classes containing shared data, `set` should perform no action for that settings class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.IPersistComponentSettings.SaveComponentSettings" />
        <altmember cref="P:System.Configuration.ApplicationSettingsBase.SettingsKey" />
        <related type="Article" href="/dotnet/framework/winforms/advanced/application-settings-for-custom-controls"><span data-ttu-id="c64de-141">自定义控件的应用程序设置</span><span class="sxs-lookup"><span data-stu-id="c64de-141">Application Settings for Custom Controls</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
