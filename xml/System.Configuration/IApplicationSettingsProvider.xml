<Type Name="IApplicationSettingsProvider" FullName="System.Configuration.IApplicationSettingsProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="99e2ea3baa0e029d42dedc154f41676580ba621e" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89789175" /></Metadata><TypeSignature Language="C#" Value="public interface IApplicationSettingsProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IApplicationSettingsProvider" />
  <TypeSignature Language="DocId" Value="T:System.Configuration.IApplicationSettingsProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IApplicationSettingsProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IApplicationSettingsProvider" />
  <TypeSignature Language="F#" Value="type IApplicationSettingsProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="280c5-101">为基于客户端的应用程序的设置提供程序定义扩展功能。</span><span class="sxs-lookup"><span data-stu-id="280c5-101">Defines extended capabilities for client-based application settings providers.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="280c5-102">利用应用程序设置体系结构，你可以通过创建自定义设置提供程序（一个派生自的类）为应用程序设置提供自定义存储机制 <xref:System.Configuration.SettingsProvider> 。</span><span class="sxs-lookup"><span data-stu-id="280c5-102">The application settings architecture enables you to provide a custom storage mechanism for application settings by creating a custom settings provider, which is a class derived from <xref:System.Configuration.SettingsProvider>.</span></span> <span data-ttu-id="280c5-103">此类包含用于存储和检索属性的基本功能。</span><span class="sxs-lookup"><span data-stu-id="280c5-103">Such a class contains the basic functionality for storing and retrieving properties.</span></span> <span data-ttu-id="280c5-104">但是，您可以通过 <xref:System.Configuration.IApplicationSettingsProvider> 在自定义设置提供程序中实现接口来添加其他标准化功能。</span><span class="sxs-lookup"><span data-stu-id="280c5-104">However, you can add additional standardized functionality by implementing the <xref:System.Configuration.IApplicationSettingsProvider> interface in the custom settings provider.</span></span> <span data-ttu-id="280c5-105">此接口包含三种方法，这些方法主要使设置提供程序能够更智能地处理应用程序版本更改。</span><span class="sxs-lookup"><span data-stu-id="280c5-105">This interface contains three methods that primarily enable the settings provider to more intelligently handle application version changes.</span></span> <span data-ttu-id="280c5-106">通常，设置提供程序将单独存储不同版本的应用程序的应用程序设置，以预见以下情况：</span><span class="sxs-lookup"><span data-stu-id="280c5-106">Typically, the settings provider will store application settings for different versions of an application separately to anticipate the following circumstances:</span></span>  
  
-   <span data-ttu-id="280c5-107">并行执行不同版本的应用程序。</span><span class="sxs-lookup"><span data-stu-id="280c5-107">Side-by-side execution of different versions of an application.</span></span>  
  
-   <span data-ttu-id="280c5-108">升级应用程序时保留应用程序设置。</span><span class="sxs-lookup"><span data-stu-id="280c5-108">Retaining application settings when upgrading an application.</span></span>  
  
-   <span data-ttu-id="280c5-109">将应用程序设置重置为当前所使用版本的默认值。</span><span class="sxs-lookup"><span data-stu-id="280c5-109">Resetting the application settings to their default values for the currently used version.</span></span>  
  
 <span data-ttu-id="280c5-110"><xref:System.Configuration.LocalFileSettingsProvider> 类实现 <xref:System.Configuration.IApplicationSettingsProvider> 接口。</span><span class="sxs-lookup"><span data-stu-id="280c5-110">The <xref:System.Configuration.LocalFileSettingsProvider> class implements the <xref:System.Configuration.IApplicationSettingsProvider> interface.</span></span> <span data-ttu-id="280c5-111">类中还提供了包含的一组相同的方法 <xref:System.Configuration.IApplicationSettingsProvider> <xref:System.Configuration.ApplicationSettingsBase> ，以便在应用程序设置包装器和其设置提供程序之间建立预定义的通信通道。</span><span class="sxs-lookup"><span data-stu-id="280c5-111">The same set of methods contained by <xref:System.Configuration.IApplicationSettingsProvider> is also found in the <xref:System.Configuration.ApplicationSettingsBase> class, enabling the establishment of a predefined communication channel between an application settings wrapper and its settings provider.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="280c5-112">此接口是可选的。</span><span class="sxs-lookup"><span data-stu-id="280c5-112">This interface is optional.</span></span> <span data-ttu-id="280c5-113">如果提供程序未实现此接口，则设置基础结构将在尝试访问此接口定义的任何方法时无通知就会失败。</span><span class="sxs-lookup"><span data-stu-id="280c5-113">If a provider does not implement this interface, the settings infrastructure will fail without notification if it attempts to access any of the methods defined by this interface.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Configuration.SettingsProvider" />
    <altmember cref="T:System.Configuration.ApplicationSettingsBase" />
    <related type="Article" href="/dotnet/framework/winforms/advanced/application-settings-architecture"><span data-ttu-id="280c5-114">应用程序设置体系结构</span><span class="sxs-lookup"><span data-stu-id="280c5-114">Application Settings Architecture</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="GetPreviousVersion">
      <MemberSignature Language="C#" Value="public System.Configuration.SettingsPropertyValue GetPreviousVersion (System.Configuration.SettingsContext context, System.Configuration.SettingsProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Configuration.SettingsPropertyValue GetPreviousVersion(class System.Configuration.SettingsContext context, class System.Configuration.SettingsProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IApplicationSettingsProvider.GetPreviousVersion(System.Configuration.SettingsContext,System.Configuration.SettingsProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPreviousVersion (context As SettingsContext, property As SettingsProperty) As SettingsPropertyValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Configuration::SettingsPropertyValue ^ GetPreviousVersion(System::Configuration::SettingsContext ^ context, System::Configuration::SettingsProperty ^ property);" />
      <MemberSignature Language="F#" Value="abstract member GetPreviousVersion : System.Configuration.SettingsContext * System.Configuration.SettingsProperty -&gt; System.Configuration.SettingsPropertyValue" Usage="iApplicationSettingsProvider.GetPreviousVersion (context, property)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.SettingsPropertyValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Configuration.SettingsContext" />
        <Parameter Name="property" Type="System.Configuration.SettingsProperty" />
      </Parameters>
      <Docs>
        <param name="context"><span data-ttu-id="280c5-115">描述当前应用程序用法的 <see cref="T:System.Configuration.SettingsContext" />。</span><span class="sxs-lookup"><span data-stu-id="280c5-115">A <see cref="T:System.Configuration.SettingsContext" /> describing the current application usage.</span></span></param>
        <param name="property"><span data-ttu-id="280c5-116">要返回其值的 <see cref="T:System.Configuration.SettingsProperty" />。</span><span class="sxs-lookup"><span data-stu-id="280c5-116">The <see cref="T:System.Configuration.SettingsProperty" /> whose value is to be returned.</span></span></param>
        <summary><span data-ttu-id="280c5-117">返回同一应用程序早期版本的指定设置属性的值。</span><span class="sxs-lookup"><span data-stu-id="280c5-117">Returns the value of the specified settings property for the previous version of the same application.</span></span></summary>
        <returns><span data-ttu-id="280c5-118">包含指定属性设置值的 <see cref="T:System.Configuration.SettingsPropertyValue" />，该值为早期版本的应用程序中最后设置的值；或者，如果找不到该设置，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="280c5-118">A <see cref="T:System.Configuration.SettingsPropertyValue" /> containing the value of the specified property setting as it was last set in the previous version of the application; or <see langword="null" /> if the setting cannot be found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="280c5-119">你可以将 <xref:System.Configuration.IApplicationSettingsProvider.GetPreviousVersion%2A> 方法与方法结合使用 <xref:System.Configuration.IApplicationSettingsProvider.Upgrade%2A> ，以便在安装新版本的应用程序期间或之后迁移应用程序设置。</span><span class="sxs-lookup"><span data-stu-id="280c5-119">You can use the <xref:System.Configuration.IApplicationSettingsProvider.GetPreviousVersion%2A> method in conjunction with the <xref:System.Configuration.IApplicationSettingsProvider.Upgrade%2A> method to migrate application settings during or after the installation of a new version of an application.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.IApplicationSettingsProvider.Upgrade(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.GetPreviousVersion(System.String)" />
        <related type="Article" href="/dotnet/framework/deployment/side-by-side-execution"><span data-ttu-id="280c5-120">并行执行</span><span class="sxs-lookup"><span data-stu-id="280c5-120">Side-by-Side Execution</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset (System.Configuration.SettingsContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset(class System.Configuration.SettingsContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IApplicationSettingsProvider.Reset(System.Configuration.SettingsContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset (context As SettingsContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset(System::Configuration::SettingsContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member Reset : System.Configuration.SettingsContext -&gt; unit" Usage="iApplicationSettingsProvider.Reset context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Configuration.SettingsContext" />
      </Parameters>
      <Docs>
        <param name="context"><span data-ttu-id="280c5-121">描述当前应用程序用法的 <see cref="T:System.Configuration.SettingsContext" />。</span><span class="sxs-lookup"><span data-stu-id="280c5-121">A <see cref="T:System.Configuration.SettingsContext" /> describing the current application usage.</span></span></param>
        <summary><span data-ttu-id="280c5-122">将与指定应用程序关联的应用程序设置重置为其默认值。</span><span class="sxs-lookup"><span data-stu-id="280c5-122">Resets the application settings associated with the specified application to their default values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="280c5-123"><xref:System.Configuration.IApplicationSettingsProvider.Reset%2A>方法重新初始化指定应用程序设置组的存储值。</span><span class="sxs-lookup"><span data-stu-id="280c5-123">The <xref:System.Configuration.IApplicationSettingsProvider.Reset%2A> method reinitializes the stored values of the specified application settings group.</span></span> <span data-ttu-id="280c5-124">与此相反， <xref:System.Configuration.DefaultSettingValueAttribute> 如果属性在初始化过程中没有存储值，则会为该属性提供一个默认值。</span><span class="sxs-lookup"><span data-stu-id="280c5-124">In contrast, <xref:System.Configuration.DefaultSettingValueAttribute> supplies a default value for a single settings property during property initialization, if it has no stored value.</span></span>  
  
 <span data-ttu-id="280c5-125">设置提供程序确定指定的应用程序设置组的合理默认值。</span><span class="sxs-lookup"><span data-stu-id="280c5-125">The settings provider determines what reasonable defaults are for the specified group of application settings.</span></span> <span data-ttu-id="280c5-126">例如，中的实现 <xref:System.Configuration.LocalFileSettingsProvider> 会将用户范围的设置重置为文件中的共享值 `application.exe.config` ; 相反，它会使应用程序范围的设置保持不变。</span><span class="sxs-lookup"><span data-stu-id="280c5-126">For example, the implementation in <xref:System.Configuration.LocalFileSettingsProvider> resets user-scoped settings to their shared values in the `application.exe.config` file; in contrast, it leaves the application-scoped settings unchanged.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Configuration.DefaultSettingValueAttribute" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Reset" />
      </Docs>
    </Member>
    <Member MemberName="Upgrade">
      <MemberSignature Language="C#" Value="public void Upgrade (System.Configuration.SettingsContext context, System.Configuration.SettingsPropertyCollection properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Upgrade(class System.Configuration.SettingsContext context, class System.Configuration.SettingsPropertyCollection properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IApplicationSettingsProvider.Upgrade(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Upgrade (context As SettingsContext, properties As SettingsPropertyCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Upgrade(System::Configuration::SettingsContext ^ context, System::Configuration::SettingsPropertyCollection ^ properties);" />
      <MemberSignature Language="F#" Value="abstract member Upgrade : System.Configuration.SettingsContext * System.Configuration.SettingsPropertyCollection -&gt; unit" Usage="iApplicationSettingsProvider.Upgrade (context, properties)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Configuration.SettingsContext" />
        <Parameter Name="properties" Type="System.Configuration.SettingsPropertyCollection" />
      </Parameters>
      <Docs>
        <param name="context"><span data-ttu-id="280c5-127">描述当前应用程序用法的 <see cref="T:System.Configuration.SettingsContext" />。</span><span class="sxs-lookup"><span data-stu-id="280c5-127">A <see cref="T:System.Configuration.SettingsContext" /> describing the current application usage.</span></span></param>
        <param name="properties"><span data-ttu-id="280c5-128">一个包含设置属性组（将要检索该组中的值）的 <see cref="T:System.Configuration.SettingsPropertyCollection" />。</span><span class="sxs-lookup"><span data-stu-id="280c5-128">A <see cref="T:System.Configuration.SettingsPropertyCollection" /> containing the settings property group whose values are to be retrieved.</span></span></param>
        <summary><span data-ttu-id="280c5-129">向提供程序指出应用程序已升级。</span><span class="sxs-lookup"><span data-stu-id="280c5-129">Indicates to the provider that the application has been upgraded.</span></span> <span data-ttu-id="280c5-130">这给提供程序提供了一个机会，使其可以相应地升级其存储的设置。</span><span class="sxs-lookup"><span data-stu-id="280c5-130">This offers the provider an opportunity to upgrade its stored settings as appropriate.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="280c5-131">.NET Framework 可以并行安装和执行同一应用程序的不同版本。</span><span class="sxs-lookup"><span data-stu-id="280c5-131">The .NET Framework enables side-by-side installation and execution of different versions of the same application.</span></span> <span data-ttu-id="280c5-132">应用程序设置提供程序单独存储应用程序的每个版本的应用程序设置，以确保隔离。</span><span class="sxs-lookup"><span data-stu-id="280c5-132">The application settings provider stores the application settings for each version of an application separately to ensure isolation.</span></span> <span data-ttu-id="280c5-133">但是，你可能想要将设置从应用程序的前一版本迁移到当前版本。</span><span class="sxs-lookup"><span data-stu-id="280c5-133">However, you may want to migrate settings from the previous version of an application to the current one.</span></span> <span data-ttu-id="280c5-134">若要提供此迁移功能，请使用 <xref:System.Configuration.IApplicationSettingsProvider.Upgrade%2A> 在派生自的类中实现的方法 <xref:System.Configuration.SettingsProvider> 。</span><span class="sxs-lookup"><span data-stu-id="280c5-134">To provide this migration functionality, use the <xref:System.Configuration.IApplicationSettingsProvider.Upgrade%2A> method, implemented in a class derived from <xref:System.Configuration.SettingsProvider>.</span></span>  
  
 <span data-ttu-id="280c5-135">你可以将 <xref:System.Configuration.IApplicationSettingsProvider.Upgrade%2A> 方法与方法结合使用 <xref:System.Configuration.IApplicationSettingsProvider.GetPreviousVersion%2A> ，以便在安装新版本的应用程序期间或之后迁移应用程序设置。</span><span class="sxs-lookup"><span data-stu-id="280c5-135">You can use the <xref:System.Configuration.IApplicationSettingsProvider.Upgrade%2A> method in conjunction with the <xref:System.Configuration.IApplicationSettingsProvider.GetPreviousVersion%2A> method to migrate application settings during or after the installation of a new version of an application.</span></span>  
  
 <span data-ttu-id="280c5-136">对于应用了的每个应用程序设置 <xref:System.Configuration.NoSettingsVersionUpgradeAttribute> ，或从派生自的整个设置包装器类，应禁止显示此方法 <xref:System.Configuration.ApplicationSettingsBase> 。</span><span class="sxs-lookup"><span data-stu-id="280c5-136">This method should be suppressed for every application setting that has the <xref:System.Configuration.NoSettingsVersionUpgradeAttribute> is applied to it, or to the entire settings wrapper class, derived from <xref:System.Configuration.ApplicationSettingsBase>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.IApplicationSettingsProvider.GetPreviousVersion(System.Configuration.SettingsContext,System.Configuration.SettingsProperty)" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Upgrade" />
        <altmember cref="T:System.Configuration.NoSettingsVersionUpgradeAttribute" />
        <related type="Article" href="/dotnet/framework/deployment/side-by-side-execution"><span data-ttu-id="280c5-137">并行执行</span><span class="sxs-lookup"><span data-stu-id="280c5-137">Side-by-Side Execution</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
