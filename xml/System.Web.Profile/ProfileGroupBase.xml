<Type Name="ProfileGroupBase" FullName="System.Web.Profile.ProfileGroupBase">
  <Metadata><Meta Name="ms.openlocfilehash" Value="509e44966f609e551dbbe565806d6b9f67483ed1" /><Meta Name="ms.sourcegitcommit" Value="397961a0164281b579f68064c3bb66c071f374d9" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/14/2020" /><Meta Name="ms.locfileid" Value="77103022" /></Metadata><TypeSignature Language="C#" Value="public class ProfileGroupBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ProfileGroupBase extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Profile.ProfileGroupBase" />
  <TypeSignature Language="VB.NET" Value="Public Class ProfileGroupBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProfileGroupBase" />
  <TypeSignature Language="F#" Value="type ProfileGroupBase = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供对分组的 ASP.NET 配置文件属性值的非类型化访问。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Profile.ProfileGroupBase>ASP.NET 使用类在当前的属性中创建分组属性 <xref:System.Web.HttpContext.Profile%2A> <xref:System.Web.HttpContext> 。 如果将属性指定为一组属性[（ASP.NET 设置架构的属性）的组元素](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164648(v=vs.100))，则 ASP.NET 将使用强类型访问器为组中的每个属性创建一个新类。 新类继承 <xref:System.Web.Profile.ProfileGroupBase> 基类。 新类的强类型访问器 <xref:System.Web.Profile.ProfileGroupBase.GetPropertyValue%2A> 分别调用基类的和 <xref:System.Web.Profile.ProfileGroupBase.SetPropertyValue%2A> 方法 <xref:System.Web.Profile.ProfileGroupBase> 来检索和设置配置文件属性值。

 <xref:System.Web.Profile.ProfileGroupBase>传递调用以获取属性值并将其设置为类，该类继承 <xref:System.Web.Profile.ProfileBase> 提供给类的方法的类 <xref:System.Web.Profile.ProfileGroupBase.Init%2A> <xref:System.Web.Profile.ProfileGroupBase> 。 <xref:System.Web.Profile.ProfileBase>有关行为、异常等的详细信息，请参阅类。

 此类不应从你的代码创建。



## Examples
 以下 Web.config 文件指定了一个用户配置文件，其中包含组名为的一组属性 `Address` 。 为当前的属性生成的分组属性 <xref:System.Web.HttpContext.Profile%2A> 将以 <xref:System.Web.HttpContext> 组名称开头，例如 `Profile.Address.Street` 。 第二个示例显示了存储和检索配置的配置文件属性的 ASP.NET 页。

```xml
<configuration>
  <connectionStrings>
    <add name="SqlServices" connectionString=
      "Data Source=localhost;Integrated Security=SSPI;Initial Catalog=aspnetdb;" />
  </connectionStrings>

  <system.web>
    <authentication mode="Forms" >
      <forms loginUrl="login.aspx"
        name=".ASPXFORMSAUTH" />
    </authentication>

    <authorization>
      <deny users="?" />
    </authorization>

    <membership defaultProvider="SqlProvider"
      userIsOnlineTimeWindow="15">
      <providers>
        <clear />
        <add
          name="SqlProvider"
          type="System.Web.Security.SqlMembershipProvider"
          connectionStringName="SqlServices"
          enablePasswordRetrieval="false"
          enablePasswordReset="true"
          requiresQuestionAndAnswer="true"
          requiresUniqueEmail="false"
          passwordFormat="Hashed"
          applicationName="MyApplication" />
      </providers>
    </membership>

    <profile enabled="true" defaultProvider="SqlProvider">
      <providers>
        <add
          name="SqlProvider"
          connectionStringName="SqlServices"
          applicationName="MyApplication"
          type="System.Web.Profile.SqlProfileProvider" />
      </providers>

      <properties>
        <add name="ZipCode" />
        <group name="Address">
          <add name="Street" />
          <add name="City" />
          <add name="State" />
          <add name="CountryOrRegion" />
        </group>
      </properties>
    </profile>
  </system.web>
</configuration>
```

 下面的代码示例演示一个 ASP.NET 页，该页读取和设置为用户配置文件指定的分组属性。

> [!IMPORTANT]
>  此示例包含一个文本框，该文本框接受用户输入，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))。

 [!code-aspx-csharp[System.Web.Profile.HttpProfileGroupBase#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Profile.HttpProfileGroupBase/CS/defaultcs.aspx#1)]
 [!code-aspx-vb[System.Web.Profile.HttpProfileGroupBase#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Profile.HttpProfileGroupBase/VB/defaultvb.aspx#1)]

 ]]></format>
    </remarks>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/2y3fs9xs(v=vs.100)">ASP.NET 配置文件属性概述</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100)">脚本攻击概述</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ProfileGroupBase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Profile.ProfileGroupBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ProfileGroupBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>创建 <see cref="T:System.Web.Profile.ProfileGroupBase" /> 类的实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 ASP.NET 使用 <xref:System.Web.Profile.ProfileGroupBase> 类在当前的属性中创建分组属性 <xref:System.Web.HttpContext.Profile%2A> <xref:System.Web.HttpContext> 。 如果将属性指定为一组属性[（ASP.NET 设置架构的属性）的组元素](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164648(v=vs.100))，则 ASP.NET 将使用强类型访问器为组中的每个属性创建一个新类。 新类继承 <xref:System.Web.Profile.ProfileGroupBase> 基类。

 此类不应从你的代码创建。



## Examples
 以下 Web.config 文件指定了一个用户配置文件，其中包含组名为的一组属性 `Address` 。 为当前的属性生成的分组属性 <xref:System.Web.HttpContext.Profile%2A> 将以 <xref:System.Web.HttpContext> 组名称开头，例如 `Profile.Address.Street` 。

```
<configuration>
  <connectionStrings>
    <add name="SqlServices" connectionString="Data Source=localhost;Integrated Security=SSPI;Initial Catalog=aspnetdb;" />
  </connectionStrings>

  <system.web>
    <authentication mode="Forms" >
      <forms loginUrl="login.aspx"
             name=".ASPXFORMSAUTH" />
    </authentication>

    <authorization>
      <deny users="?" />
    </authorization>

    <membership defaultProvider="SqlProvider"
                userIsOnlineTimeWindow="15">
      <providers>
        <clear />
        <add
          name="SqlProvider"
          type="System.Web.Security.SqlMembershipProvider"
          connectionStringName="SqlServices"
          enablePasswordRetrieval="false"
          enablePasswordReset="true"
          requiresQuestionAndAnswer="true"
          requiresUniqueEmail="false"
          passwordFormat="Hashed"
          applicationName="MyApplication" />
      </providers>
    </membership>

    <profile enabled="true" defaultProvider="SqlProvider">
      <providers>
        <add
          name="SqlProvider"
          connectionStringName="SqlServices"
          applicationName="MyApplication"
          type="System.Web.Profile.SqlProfileProvider" />
      </providers>

      <properties>
        <add name="ZipCode" />
        <group name="Address">
          <add name="Street" />
          <add name="City" />
          <add name="State" />
          <add name="CountryOrRegion" />
        </group>
      </properties>
    </profile>
  </system.web>
</configuration>
```

 以下 ASP.NET 页读取和设置为用户配置文件指定的分组属性。

> [!IMPORTANT]
>  此示例包含一个文本框，该文本框接受用户输入，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))。

 [!code-aspx-csharp[System.Web.Profile.HttpProfileGroupBase#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Profile.HttpProfileGroupBase/CS/defaultcs.aspx#1)]
 [!code-aspx-vb[System.Web.Profile.HttpProfileGroupBase#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Profile.HttpProfileGroupBase/VB/defaultvb.aspx#1)]

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/2y3fs9xs(v=vs.100)">ASP.NET 配置文件属性概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100)">脚本攻击概述</related>
      </Docs>
    </Member>
    <Member MemberName="GetPropertyValue">
      <MemberSignature Language="C#" Value="public object GetPropertyValue (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetPropertyValue(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Profile.ProfileGroupBase.GetPropertyValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPropertyValue (propertyName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetPropertyValue(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.GetPropertyValue : string -&gt; obj" Usage="profileGroupBase.GetPropertyValue propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">分组配置文件属性的名称。</param>
        <summary>获取分组配置文件属性的值。</summary>
        <returns>类型化为 <see langword="object" /> 的分组配置文件属性的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 ASP.NET 使用 <xref:System.Web.Profile.ProfileBase> 类为用户配置文件创建类。 当已启用用户配置文件的应用程序启动时，ASP.NET 将创建一个类型为的新类 `ProfileCommon` ，该类继承自 <xref:System.Web.Profile.ProfileBase> 类。 强类型访问器将添加到 `ProfileCommon` [配置文件元素（ASP.NET 设置架构）](https://msdn.microsoft.com/library/ccb9bf3a-a044-464d-b89b-5cb5a3d389dd)配置节中定义的每个组和属性的类。 类的强类型化访问器 `ProfileCommon` 调用 <xref:System.Web.Profile.ProfileGroupBase.GetPropertyValue%2A> 方法，以从生成的访问器中检索非类型化的值，然后将其 <xref:System.Web.Profile.ProfileProvider> 转换为指定的类型，并将作为分组属性值返回。

 可以使用 <xref:System.Web.Profile.ProfileGroupBase.GetPropertyValue%2A> 方法按名称检索应用程序的用户配置文件的分组属性值。 返回的值的类型为 `object` ，并且在检索时必须强制转换为特定的对象类型。 对于对配置文件属性值的强类型访问，你可以按名称将分组属性作为属性组的成员进行访问 <xref:System.Web.HttpContext.Profile%2A> ，例如 `Profile.Address.City` 。



## Examples
 下面的代码示例演示一个 ASP.NET 页，该页读取和设置为用户配置文件指定的分组属性。 有关为用户配置文件指定分组属性的 Web.config 文件的示例，请参阅为类提供的示例 <xref:System.Web.Profile.ProfileGroupBase> 。

> [!IMPORTANT]
>  此示例包含一个文本框，该文本框接受用户输入，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))。

 [!code-aspx-csharp[System.Web.Profile.HttpProfileGroupBase#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Profile.HttpProfileGroupBase/CS/defaultcs.aspx#1)]
 [!code-aspx-vb[System.Web.Profile.HttpProfileGroupBase#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Profile.HttpProfileGroupBase/VB/defaultvb.aspx#1)]

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/2y3fs9xs(v=vs.100)">ASP.NET 配置文件属性概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100)">脚本攻击概述</related>
      </Docs>
    </Member>
    <Member MemberName="Init">
      <MemberSignature Language="C#" Value="public void Init (System.Web.Profile.ProfileBase parent, string myName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Init(class System.Web.Profile.ProfileBase parent, string myName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Profile.ProfileGroupBase.Init(System.Web.Profile.ProfileBase,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Init (parent As ProfileBase, myName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Init(System::Web::Profile::ProfileBase ^ parent, System::String ^ myName);" />
      <MemberSignature Language="F#" Value="member this.Init : System.Web.Profile.ProfileBase * string -&gt; unit" Usage="profileGroupBase.Init (parent, myName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parent" Type="System.Web.Profile.ProfileBase" />
        <Parameter Name="myName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parent">继承已分配给 <see cref="T:System.Web.Profile.ProfileBase" /> 属性的 <see cref="P:System.Web.HttpContext.Profile" /> 的类。</param>
        <param name="myName">配置文件属性组的名称。</param>
        <summary>ASP.NET 用来初始化分组配置文件属性值和信息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 此方法不适于在您的代码中使用。

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/2y3fs9xs(v=vs.100)">ASP.NET 配置文件属性概述</related>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[string propertyName] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Web.Profile.ProfileGroupBase.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(propertyName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[System::String ^] { System::Object ^ get(System::String ^ propertyName); void set(System::String ^ propertyName, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : obj with get, set" Usage="System.Web.Profile.ProfileGroupBase.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">分组配置文件属性的名称。</param>
        <summary>获取或设置按属性名进行索引的分组配置文件属性值。</summary>
        <value>指定的分组配置文件属性的值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 您可以使用此属性来检索或设置应用程序的用户配置文件的分组属性值。 返回的值的类型为 <xref:System.Object> ，并且在检索时必须强制转换为特定的对象类型。 对于对配置文件属性值的强类型访问，你可以按名称作为属性组的成员访问属性 <xref:System.Web.HttpContext.Profile%2A?displayProperty=nameWithType> ，例如 `Profile.Address.City` 。



## Examples
 下面的代码示例演示一个 ASP.NET 页，该页读取和设置为用户配置文件指定的分组属性。 有关在配置文件中指定一组属性的 Web.config 文件的示例，请参阅为类提供的示例 <xref:System.Web.Profile.ProfileGroupBase> 。

> [!IMPORTANT]
>  此示例包含一个文本框，该文本框接受用户输入，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))。

 [!code-aspx-csharp[System.Web.Profile.HttpProfileGroupBase#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Profile.HttpProfileGroupBase/CS/defaultcs.aspx#1)]
 [!code-aspx-vb[System.Web.Profile.HttpProfileGroupBase#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Profile.HttpProfileGroupBase/VB/defaultvb.aspx#1)]

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/2y3fs9xs(v=vs.100)">ASP.NET 配置文件属性概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100)">脚本攻击概述</related>
      </Docs>
    </Member>
    <Member MemberName="SetPropertyValue">
      <MemberSignature Language="C#" Value="public void SetPropertyValue (string propertyName, object propertyValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetPropertyValue(string propertyName, object propertyValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Profile.ProfileGroupBase.SetPropertyValue(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetPropertyValue (propertyName As String, propertyValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetPropertyValue(System::String ^ propertyName, System::Object ^ propertyValue);" />
      <MemberSignature Language="F#" Value="member this.SetPropertyValue : string * obj -&gt; unit" Usage="profileGroupBase.SetPropertyValue (propertyName, propertyValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="propertyValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="propertyName">要设置的分组属性的名称。</param>
        <param name="propertyValue">要分配给分组属性的值。</param>
        <summary>设置分组配置文件属性的值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 ASP.NET 使用 <xref:System.Web.Profile.ProfileBase> 类创建用于用户配置文件的类。 当已启用用户配置文件的应用程序启动时，ASP.NET 将创建一个类型为的新类 `ProfileCommon` ，该类继承自 <xref:System.Web.Profile.ProfileBase> 类。 强类型访问器将添加到 `ProfileCommon` [配置文件元素（ASP.NET 设置架构）](https://msdn.microsoft.com/library/ccb9bf3a-a044-464d-b89b-5cb5a3d389dd)配置节中定义的每个组和属性的类。 类的强类型访问器 `ProfileCommon` 调用 <xref:System.Web.Profile.ProfileGroupBase.SetPropertyValue%2A> 方法，以将分组属性值传递到， <xref:System.Web.Profile.ProfileProvider> 以存储在数据源。

 您可以使用 <xref:System.Web.Profile.ProfileGroupBase.SetPropertyValue%2A> 方法为您的应用程序按名称将值分配给用户配置文件的已分组属性。 值的类型为 `object,` ，类型检查将在运行时（而非编译时）完成。 对于对配置文件属性值的强类型访问，你可以按名称将分组属性作为属性组的成员进行访问 <xref:System.Web.HttpContext.Profile%2A> ，例如 `Profile.Address.City` 。



## Examples
 以下 ASP.NET 页读取和设置为用户配置文件指定的分组属性。 有关为用户配置文件指定分组属性的 Web.config 文件的示例，请参阅为类提供的示例 <xref:System.Web.Profile.ProfileGroupBase> 。

> [!IMPORTANT]
>  此示例包含一个文本框，该文本框接受用户输入，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))。

 [!code-aspx-csharp[System.Web.Profile.HttpProfileGroupBase#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Profile.HttpProfileGroupBase/CS/defaultcs.aspx#1)]
 [!code-aspx-vb[System.Web.Profile.HttpProfileGroupBase#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Profile.HttpProfileGroupBase/VB/defaultvb.aspx#1)]

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/2y3fs9xs(v=vs.100)">ASP.NET 配置文件属性概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100)">脚本攻击概述</related>
      </Docs>
    </Member>
  </Members>
</Type>
