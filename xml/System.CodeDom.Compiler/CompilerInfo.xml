<Type Name="CompilerInfo" FullName="System.CodeDom.Compiler.CompilerInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ddfeed02c2a477173247a711271440c61e4d61a4" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86667730" /></Metadata><TypeSignature Language="C#" Value="public sealed class CompilerInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CompilerInfo extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.CodeDom.Compiler.CompilerInfo" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CompilerInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class CompilerInfo sealed" />
  <TypeSignature Language="F#" Value="type CompilerInfo = class" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.CodeDom</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示语言提供程序的配置设置。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.CodeDom.Compiler.CompilerInfo> 类来确定 <xref:System.CodeDom.Compiler.CodeDomProvider> 计算机上是否配置了实现，或检查特定语言提供程序的配置和编译器设置。  
  
 计算机配置文件中的[ &lt; system.object &gt; 元素](/dotnet/framework/configure-apps/file-schema/compiler/system-codedom-element)包含语言提供程序和编译器配置设置。 每个已配置的语言提供程序都有相应的编译器配置元素。 每个元素定义 <xref:System.CodeDom.Compiler.CodeDomProvider> 实现类型、支持的语言名称、支持的文件扩展名和编译器参数。  
  
 .NET Framework 在计算机配置文件中定义初始编译器设置。 开发人员和编译器供应商可以添加新 <xref:System.CodeDom.Compiler.CodeDomProvider> 实现的配置设置。  
  
 <xref:System.CodeDom.Compiler.CompilerInfo>类提供对计算机配置文件中这些设置的只读访问。 使用 <xref:System.CodeDom.Compiler.CompilerInfo.GetLanguages%2A> 、 <xref:System.CodeDom.Compiler.CompilerInfo.GetExtensions%2A> 和 <xref:System.CodeDom.Compiler.CompilerInfo.CodeDomProviderType%2A> 成员检查语言提供程序的相应配置特性。 使用 <xref:System.CodeDom.Compiler.CompilerInfo.CreateDefaultCompilerParameters%2A> 方法可获取语言提供程序的编译器选项和警告级别特性值。  
  
 有关配置文件中的语言提供程序设置的更多详细信息，请参阅 [编译器和语言提供程序设置架构](/dotnet/framework/configure-apps/file-schema/compiler/)。  
  
> [!NOTE]
>  此类包含类级别的链接要求，该请求应用于所有成员。 <xref:System.Security.SecurityException>当直接调用方不具有完全信任权限时，将引发。 有关链接要求的详细信息，请参阅 [链接需求](/dotnet/framework/misc/link-demands)。  
  
   
  
## Examples  
 下面的代码示例显示了语言提供程序的配置设置。 命令行参数用于指定语言、文件扩展名或提供程序类型。 对于给定的输入，该示例确定了相应的语言提供程序，并显示了配置的语言编译器设置。  
  
 [!code-cpp[CodeDom_CompilerInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#1)]
 [!code-csharp[CodeDom_CompilerInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#1)]
 [!code-vb[CodeDom_CompilerInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.CodeDom.Compiler.CompilerParameters" />
    <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
    <related type="Article" href="/dotnet/framework/configure-apps/file-schema/compiler/">编译器和语言提供程序设置架构</related>
  </Docs>
  <Members>
    <Member MemberName="CodeDomProviderType">
      <MemberSignature Language="C#" Value="public Type CodeDomProviderType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type CodeDomProviderType" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerInfo.CodeDomProviderType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CodeDomProviderType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ CodeDomProviderType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CodeDomProviderType : Type" Usage="System.CodeDom.Compiler.CompilerInfo.CodeDomProviderType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取已配置的 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实现的类型。</summary>
        <value>一个只读 <see cref="T:System.Type" /> 实例，它表示已配置的语言提供程序类型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 计算机配置文件包含计算机上每个实现的完全限定的类型名称 <xref:System.CodeDom.Compiler.CodeDomProvider> 。 <xref:System.CodeDom.Compiler.CompilerInfo.CodeDomProviderType%2A>属性值是一个 <xref:System.Type> 实例，表示已配置的语言提供程序实现。  
  
   
  
## Examples  
 下面的代码示例确定输入语言在计算机上是否有已配置的 <xref:System.CodeDom.Compiler.CodeDomProvider> 实现。 如果为指定的语言配置了提供程序，该示例将显示语言提供程序的配置设置。 此代码示例是为类提供的更大示例的一部分 <xref:System.CodeDom.Compiler.CompilerInfo> 。  
  
 [!code-cpp[CodeDom_CompilerInfo#7](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#7)]
 [!code-csharp[CodeDom_CompilerInfo#7](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#7)]
 [!code-vb[CodeDom_CompilerInfo#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationException">此计算机上没有配置语言提供程序。</exception>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">不能定位类型，因为它是 <see langword="null" /> 或空字符串。  
  
- 或 - 
不能定位类型，因为不能在配置文件中找到 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 的名称。</exception>
        <altmember cref="P:System.CodeDom.Compiler.CompilerInfo.IsCodeDomProviderTypeValid" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
      </Docs>
    </Member>
    <Member MemberName="CreateDefaultCompilerParameters">
      <MemberSignature Language="C#" Value="public System.CodeDom.Compiler.CompilerParameters CreateDefaultCompilerParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.CodeDom.Compiler.CompilerParameters CreateDefaultCompilerParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CompilerInfo.CreateDefaultCompilerParameters" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateDefaultCompilerParameters () As CompilerParameters" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::CodeDom::Compiler::CompilerParameters ^ CreateDefaultCompilerParameters();" />
      <MemberSignature Language="F#" Value="member this.CreateDefaultCompilerParameters : unit -&gt; System.CodeDom.Compiler.CompilerParameters" Usage="compilerInfo.CreateDefaultCompilerParameters " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerParameters</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取语言提供程序实现的配置的编译器设置。</summary>
        <returns>一个只读 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 实例，它包含为语言提供程序配置的编译器选项和设置。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.CodeDom.Compiler.CompilerInfo.CreateDefaultCompilerParameters%2A> 方法检查 <xref:System.CodeDom.Compiler.CompilerInfo> 和方法返回的实例的编译器设置 <xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A?displayProperty=nameWithType> <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A?displayProperty=nameWithType> 。  
  
 计算机配置文件中的[ &lt; system.object &gt; 元素](/dotnet/framework/configure-apps/file-schema/compiler/system-codedom-element)包含计算机上每个实现的语言提供程序和编译器配置设置 <xref:System.CodeDom.Compiler.CodeDomProvider> 。 每个语言提供程序配置元素都可以包含可选 `compilerOptions` 的和 `warningLevel` 属性。 这些属性定义了和属性的默认 <xref:System.CodeDom.Compiler.CompilerParameters.CompilerOptions%2A?displayProperty=nameWithType> 值 <xref:System.CodeDom.Compiler.CompilerParameters.WarningLevel%2A?displayProperty=nameWithType> 。  
  
 如果语言提供程序配置元素未定义 `compilerOptions` 属性，则 <xref:System.CodeDom.Compiler.CompilerParameters.CompilerOptions%2A?displayProperty=nameWithType> 属性值为空字符串 ( "" ) 。 如果语言提供程序配置元素未定义 `warningLevel` 特性，则 <xref:System.CodeDom.Compiler.CompilerParameters.WarningLevel%2A?displayProperty=nameWithType> 属性值为-1。  
  
   
  
## Examples  
 下面的代码示例确定输入语言在计算机上是否有已配置的 <xref:System.CodeDom.Compiler.CodeDomProvider> 实现。 如果为指定的语言配置了提供程序，该示例将显示语言提供程序的配置设置。 此代码示例是为类提供的更大示例的一部分 <xref:System.CodeDom.Compiler.CompilerInfo> 。  
  
 [!code-cpp[CodeDom_CompilerInfo#7](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#7)]
 [!code-csharp[CodeDom_CompilerInfo#7](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#7)]
 [!code-vb[CodeDom_CompilerInfo#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.Compiler.CompilerParameters" />
        <related type="Article" href="/dotnet/framework/configure-apps/file-schema/compiler/">编译器和语言提供程序设置架构</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateProvider">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回当前语言提供程序设置的 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateProvider">
      <MemberSignature Language="C#" Value="public System.CodeDom.Compiler.CodeDomProvider CreateProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.CodeDom.Compiler.CodeDomProvider CreateProvider() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CompilerInfo.CreateProvider" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateProvider () As CodeDomProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::CodeDom::Compiler::CodeDomProvider ^ CreateProvider();" />
      <MemberSignature Language="F#" Value="member this.CreateProvider : unit -&gt; System.CodeDom.Compiler.CodeDomProvider" Usage="compilerInfo.CreateProvider " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CodeDomProvider</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回当前语言提供程序设置的 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实例。</summary>
        <returns>与语言提供程序配置关联的 CodeDOM 提供程序。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.CodeDom.Compiler.CompilerInfo.CreateProvider%2A>方法返回 <xref:System.CodeDom.Compiler.CodeDomProvider> 当前语言提供程序设置的实例。  
  
 使用 <xref:System.CodeDom.Compiler.CompilerInfo.CreateProvider%2A> 方法可获取 <xref:System.CodeDom.Compiler.CodeDomProvider> <xref:System.CodeDom.Compiler.CompilerInfo> 或方法返回的实例的实现 <xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A?displayProperty=nameWithType> <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A?displayProperty=nameWithType> 。  
  
   
  
## Examples  
 下面的代码示例枚举计算机上的语言提供程序，并显示每个语言提供程序的配置和编译器设置。 此代码示例是为类提供的更大示例的一部分 <xref:System.CodeDom.Compiler.CompilerInfo> 。  
  
 [!code-cpp[CodeDom_CompilerInfo#8](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#8)]
 [!code-csharp[CodeDom_CompilerInfo#8](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#8)]
 [!code-vb[CodeDom_CompilerInfo#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <related type="Article" href="/dotnet/framework/configure-apps/file-schema/compiler/">编译器和语言提供程序设置架构</related>
      </Docs>
    </Member>
    <Member MemberName="CreateProvider">
      <MemberSignature Language="C#" Value="public System.CodeDom.Compiler.CodeDomProvider CreateProvider (System.Collections.Generic.IDictionary&lt;string,string&gt; providerOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.CodeDom.Compiler.CodeDomProvider CreateProvider(class System.Collections.Generic.IDictionary`2&lt;string, string&gt; providerOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CompilerInfo.CreateProvider(System.Collections.Generic.IDictionary{System.String,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateProvider (providerOptions As IDictionary(Of String, String)) As CodeDomProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::CodeDom::Compiler::CodeDomProvider ^ CreateProvider(System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ providerOptions);" />
      <MemberSignature Language="F#" Value="member this.CreateProvider : System.Collections.Generic.IDictionary&lt;string, string&gt; -&gt; System.CodeDom.Compiler.CodeDomProvider" Usage="compilerInfo.CreateProvider providerOptions" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CodeDomProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="providerOptions" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="providerOptions">来自配置文件的提供程序选项的集合。</param>
        <summary>返回当前语言提供程序设置和指定选项的 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实例。</summary>
        <returns>与语言提供程序配置和指定选项关联的 CodeDOM 提供程序。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.CodeDom.Compiler.CompilerInfo.CreateProvider%28System.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29>方法返回 <xref:System.CodeDom.Compiler.CodeDomProvider> 当前语言提供程序设置和指定提供程序选项的实例。 有关支持的提供程序选项的信息，请参阅特定的 CodeDOM 提供程序文档。  
  
 使用 <xref:System.CodeDom.Compiler.CompilerInfo.CreateProvider%28System.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29> 方法可获取 <xref:System.CodeDom.Compiler.CodeDomProvider> <xref:System.CodeDom.Compiler.CompilerInfo> 或方法返回的实例的实现 <xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A?displayProperty=nameWithType> <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A?displayProperty=nameWithType> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="providerOptions" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">提供程序不支持选项。</exception>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CompilerInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="compilerInfo.Equals o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">将与当前 <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 进行比较的对象。</param>
        <summary>确定指定的对象是否表示与当前 <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 相同的语言提供程序和编译器设置。</summary>
        <returns>如果 <paramref name="o" /> 为 <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 对象并且它的值与此实例相同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将重写 <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> 方法。  
  
 如果以下属性的值相等，则将两个实例视为相等：  
  
-   <xref:System.CodeDom.Compiler.CompilerInfo.CodeDomProviderType%2A> 属性。  
  
-   <xref:System.CodeDom.Compiler.CompilerParameters.WarningLevel%2A> <xref:System.CodeDom.Compiler.CompilerParameters.CompilerOptions%2A> 方法返回的实例的、和 <xref:System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation%2A> 属性 <xref:System.CodeDom.Compiler.CompilerParameters> <xref:System.CodeDom.Compiler.CompilerInfo.CreateDefaultCompilerParameters%2A> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Equals(System.Object)" />
        <altmember cref="P:System.CodeDom.Compiler.CompilerInfo.CodeDomProviderType" />
        <altmember cref="T:System.CodeDom.Compiler.CompilerParameters" />
      </Docs>
    </Member>
    <Member MemberName="GetExtensions">
      <MemberSignature Language="C#" Value="public string[] GetExtensions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetExtensions() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CompilerInfo.GetExtensions" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExtensions () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetExtensions();" />
      <MemberSignature Language="F#" Value="member this.GetExtensions : unit -&gt; string[]" Usage="compilerInfo.GetExtensions " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回受语言提供程序支持的文件扩展名。</summary>
        <returns>受语言提供程序支持的文件扩展名数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 计算机配置文件中的[ &lt; system.object &gt; 元素](/dotnet/framework/configure-apps/file-schema/compiler/system-codedom-element)包含计算机上每个实现的语言提供程序和编译器配置设置 <xref:System.CodeDom.Compiler.CodeDomProvider> 。 每个已配置的语言提供程序支持一个或多个文件扩展名。 例如， <xref:Microsoft.CSharp.CSharpCodeProvider?displayProperty=nameWithType> 可能支持文件扩展名 ".cs" 和 "c #"。  
  
   
  
## Examples  
 下面的代码示例枚举计算机上的语言提供程序，并显示每个语言提供程序的配置和编译器设置。 此代码示例是为类提供的更大示例的一部分 <xref:System.CodeDom.Compiler.CompilerInfo> 。  
  
 [!code-cpp[CodeDom_CompilerInfo#8](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#8)]
 [!code-csharp[CodeDom_CompilerInfo#8](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#8)]
 [!code-vb[CodeDom_CompilerInfo#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)" />
        <related type="Article" href="/dotnet/framework/configure-apps/file-schema/compiler/">编译器和语言提供程序设置架构</related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CompilerInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="compilerInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回当前实例的哈希代码。</summary>
        <returns>当前 <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 实例的 32 位带符号整数哈希代码，适合在哈希算法和数据结构（如哈希表）中使用。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将重写 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> 方法。  
  
 此方法为根据 <xref:System.CodeDom.Compiler.CompilerInfo.Equals%2A> 方法视为相等的两个对象生成相同的哈希代码。  
  
   
  
## Examples  
 下面的代码示例创建类的一个实例 <xref:Microsoft.VisualBasic.VBCodeProvider?displayProperty=nameWithType> 。 该示例显示了新提供程序实例的提供程序名称、哈希代码和默认文件扩展名。 此代码示例是为类提供的更大示例的一部分 <xref:System.CodeDom.Compiler.CompilerInfo> 。  
  
 [!code-cpp[CodeDom_CompilerInfo#3](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#3)]
 [!code-csharp[CodeDom_CompilerInfo#3](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#3)]
 [!code-vb[CodeDom_CompilerInfo#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="M:System.CodeDom.Compiler.CompilerInfo.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetLanguages">
      <MemberSignature Language="C#" Value="public string[] GetLanguages ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetLanguages() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CompilerInfo.GetLanguages" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLanguages () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetLanguages();" />
      <MemberSignature Language="F#" Value="member this.GetLanguages : unit -&gt; string[]" Usage="compilerInfo.GetLanguages " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取受语言提供程序支持的语言名称。</summary>
        <returns>受语言提供程序支持的语言名称数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 计算机配置文件中的[ &lt; system.object &gt; 元素](/dotnet/framework/configure-apps/file-schema/compiler/system-codedom-element)包含计算机上每个实现的语言提供程序和编译器配置设置 <xref:System.CodeDom.Compiler.CodeDomProvider> 。 每个已配置的语言提供程序支持一个或多个语言名称。 例如，的 <xref:System.CodeDom.Compiler.CompilerInfo> 对象 <xref:Microsoft.CSharp.CSharpCodeProvider?displayProperty=nameWithType> 可能返回语言名称为 "c #"、"cs" 和 "csharp" 的数组。  
  
   
  
## Examples  
 下面的代码示例枚举计算机上的语言提供程序，并显示每个语言提供程序的配置和编译器设置。 此代码示例是为类提供的更大示例的一部分 <xref:System.CodeDom.Compiler.CompilerInfo> 。  
  
 [!code-cpp[CodeDom_CompilerInfo#8](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#8)]
 [!code-csharp[CodeDom_CompilerInfo#8](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#8)]
 [!code-vb[CodeDom_CompilerInfo#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)" />
        <related type="Article" href="/dotnet/framework/configure-apps/file-schema/compiler/">编译器和语言提供程序设置架构</related>
      </Docs>
    </Member>
    <Member MemberName="IsCodeDomProviderTypeValid">
      <MemberSignature Language="C#" Value="public bool IsCodeDomProviderTypeValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCodeDomProviderTypeValid" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerInfo.IsCodeDomProviderTypeValid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCodeDomProviderTypeValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCodeDomProviderTypeValid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCodeDomProviderTypeValid : bool" Usage="System.CodeDom.Compiler.CompilerInfo.IsCodeDomProviderTypeValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回一个值，该值指示是否在计算机上配置了语言提供程序实现。</summary>
        <value>如果在计算机上配置了语言提供程序实现类型，则为 <see langword="true" />；否则，为<see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在 <xref:System.CodeDom.Compiler.CompilerInfo.IsCodeDomProviderTypeValid%2A> <xref:System.CodeDom.Compiler.CodeDomProvider> 访问提供程序属性或方法之前，请使用属性来检查实现。 例如，在从方法获取语言提供程序设置后 <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A> ，请在 <xref:System.CodeDom.Compiler.CompilerInfo.IsCodeDomProviderTypeValid%2A> 调用 <xref:System.CodeDom.Compiler.CompilerInfo.CreateProvider%2A> 方法或使用属性之前使用属性来验证提供程序类型实现 <xref:System.CodeDom.Compiler.CompilerInfo.CodeDomProviderType%2A> 。  
  
   
  
## Examples  
 下面的代码示例确定输入语言在计算机上是否有已配置的 <xref:System.CodeDom.Compiler.CodeDomProvider> 实现。 如果为指定的语言配置了提供程序，该示例将显示语言提供程序的配置设置。 此代码示例是为类提供的更大示例的一部分 <xref:System.CodeDom.Compiler.CompilerInfo> 。  
  
 [!code-cpp[CodeDom_CompilerInfo#7](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#7)]
 [!code-csharp[CodeDom_CompilerInfo#7](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#7)]
 [!code-vb[CodeDom_CompilerInfo#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.CodeDom.Compiler.CompilerInfo.CodeDomProviderType" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
      </Docs>
    </Member>
  </Members>
</Type>
