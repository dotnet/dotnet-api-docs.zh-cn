<Type Name="CodeDomProvider" FullName="System.CodeDom.Compiler.CodeDomProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f8b2a2a52a9aacd9194f6e9a815c02bcdad8477e" /><Meta Name="ms.sourcegitcommit" Value="13a6cb6fba7e05947f15d8d6cc802703ae9c21d5" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/18/2020" /><Meta Name="ms.locfileid" Value="90796839" /></Metadata><TypeSignature Language="C#" Value="public abstract class CodeDomProvider : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CodeDomProvider extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.CodeDom.Compiler.CodeDomProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CodeDomProvider&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeDomProvider abstract : System::ComponentModel::Component" />
  <TypeSignature Language="F#" Value="type CodeDomProvider = class&#xA;    inherit Component" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.CodeDom</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.ComponentModel.ToolboxItem(false)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.ToolboxItem(false)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="67adc-101">为 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实现提供基类。</span><span class="sxs-lookup"><span data-stu-id="67adc-101">Provides a base class for <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> implementations.</span></span> <span data-ttu-id="67adc-102">此类为抽象类。</span><span class="sxs-lookup"><span data-stu-id="67adc-102">This class is abstract.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67adc-103"><xref:System.CodeDom.Compiler.CodeDomProvider>可用于创建和检索代码生成器和代码编译器的实例。</span><span class="sxs-lookup"><span data-stu-id="67adc-103">A <xref:System.CodeDom.Compiler.CodeDomProvider> can be used to create and retrieve instances of code generators and code compilers.</span></span> <span data-ttu-id="67adc-104">代码生成器可用于以特定的语言生成代码，而代码编译器可用于将代码编译为程序集。</span><span class="sxs-lookup"><span data-stu-id="67adc-104">Code generators can be used to generate code in a particular language, and code compilers can be used to compile code into assemblies.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67adc-105">在中 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)] ，代码生成器和代码编译器中提供的方法可直接从代码提供程序获得。</span><span class="sxs-lookup"><span data-stu-id="67adc-105">In the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], the methods made available in the code generator and code compiler are available directly from the code provider.</span></span> <span data-ttu-id="67adc-106">不需要调用 <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> 或 <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A> 访问方法，这些方法被标记为过时。</span><span class="sxs-lookup"><span data-stu-id="67adc-106">You do not need to call <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> or <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A> to access the methods, and those methods are marked as obsolete.</span></span> <span data-ttu-id="67adc-107">这适用于预先存在的以及新的代码提供程序实现。</span><span class="sxs-lookup"><span data-stu-id="67adc-107">This applies to preexisting as well as new code provider implementations.</span></span>  
  
 <span data-ttu-id="67adc-108"><xref:System.CodeDom.Compiler.CodeDomProvider>实现通常提供代码生成和/或代码编译接口，用于为单一编程语言生成代码和管理编译。</span><span class="sxs-lookup"><span data-stu-id="67adc-108">A <xref:System.CodeDom.Compiler.CodeDomProvider> implementation typically provides code generation and/or code compilation interfaces for generating code and managing compilation for a single programming language.</span></span> <span data-ttu-id="67adc-109">Windows SDK 附带的实现支持多种语言 <xref:System.CodeDom.Compiler.CodeDomProvider> 。</span><span class="sxs-lookup"><span data-stu-id="67adc-109">Several languages are supported by <xref:System.CodeDom.Compiler.CodeDomProvider> implementations that ship with the Windows SDK.</span></span> <span data-ttu-id="67adc-110">这些语言包括 C#、Visual Basic、C++ 和 JScript。</span><span class="sxs-lookup"><span data-stu-id="67adc-110">These languages include C#, Visual Basic, C++, and JScript.</span></span> <span data-ttu-id="67adc-111">开发人员或编译器供应商可以实现 <xref:System.CodeDom.Compiler.ICodeGenerator> 和 <xref:System.CodeDom.Compiler.ICodeCompiler> 接口，并提供将 <xref:System.CodeDom.Compiler.CodeDomProvider> CodeDOM 支持扩展到其他编程语言的。</span><span class="sxs-lookup"><span data-stu-id="67adc-111">Developers or compiler vendors can implement the <xref:System.CodeDom.Compiler.ICodeGenerator> and <xref:System.CodeDom.Compiler.ICodeCompiler> interfaces and provide a <xref:System.CodeDom.Compiler.CodeDomProvider> that extends CodeDOM support to other programming languages.</span></span>  
  
 <span data-ttu-id="67adc-112">计算机配置文件中的[ &lt; system.object &gt; 元素](/dotnet/framework/configure-apps/file-schema/compiler/system-codedom-element) ( # A0) 为开发人员和编译器供应商提供一种机制，用于为其他实现添加配置设置 <xref:System.CodeDom.Compiler.CodeDomProvider> 。</span><span class="sxs-lookup"><span data-stu-id="67adc-112">The [&lt;system.codedom&gt; Element](/dotnet/framework/configure-apps/file-schema/compiler/system-codedom-element) in the machine configuration file (Machine.config) provides a mechanism for developers and compiler vendors to add configuration settings for additional <xref:System.CodeDom.Compiler.CodeDomProvider> implementations.</span></span>  
  
 <span data-ttu-id="67adc-113"><xref:System.CodeDom.Compiler.CodeDomProvider>类提供静态方法用于发现和枚举 <xref:System.CodeDom.Compiler.CodeDomProvider> 计算机上的实现。</span><span class="sxs-lookup"><span data-stu-id="67adc-113">The <xref:System.CodeDom.Compiler.CodeDomProvider> class provides static methods to discover and enumerate the <xref:System.CodeDom.Compiler.CodeDomProvider> implementations on a computer.</span></span> <span data-ttu-id="67adc-114"><xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A>方法返回 <xref:System.CodeDom.Compiler.CodeDomProvider> 计算机上所有实现的设置。</span><span class="sxs-lookup"><span data-stu-id="67adc-114">The <xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A> method returns the settings for all <xref:System.CodeDom.Compiler.CodeDomProvider> implementations on a computer.</span></span> <span data-ttu-id="67adc-115"><xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A>方法 <xref:System.CodeDom.Compiler.CodeDomProvider> 根据编程语言名称返回特定实现的设置。</span><span class="sxs-lookup"><span data-stu-id="67adc-115">The <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A> method returns the settings for a specific <xref:System.CodeDom.Compiler.CodeDomProvider> implementation, based on the programming language name.</span></span> <span data-ttu-id="67adc-116"><xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>方法返回 <xref:System.CodeDom.Compiler.CodeDomProvider> 特定语言的实现的实例。</span><span class="sxs-lookup"><span data-stu-id="67adc-116">The <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> method returns an instance of a <xref:System.CodeDom.Compiler.CodeDomProvider> implementation for a specific language.</span></span>  
  
 <span data-ttu-id="67adc-117">有关配置文件中的语言提供程序设置的更多详细信息，请参阅 [编译器和语言提供程序设置架构](/dotnet/framework/configure-apps/file-schema/compiler/)。</span><span class="sxs-lookup"><span data-stu-id="67adc-117">For more details on language provider settings in the configuration file, see [Compiler and Language Provider Settings Schema](/dotnet/framework/configure-apps/file-schema/compiler/).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67adc-118">此类在类级别建立链接要求和继承要求。</span><span class="sxs-lookup"><span data-stu-id="67adc-118">This class makes a link demand and an inheritance demand at the class level.</span></span> <span data-ttu-id="67adc-119"><xref:System.Security.SecurityException>如果直接调用方或派生类不具有 "完全信任" 权限，则会引发。</span><span class="sxs-lookup"><span data-stu-id="67adc-119">A <xref:System.Security.SecurityException> is thrown if either the immediate caller or the derived class does not have full trust permission.</span></span> <span data-ttu-id="67adc-120">有关安全要求的详细信息，请参阅 [链接要求](/dotnet/framework/misc/link-demands) 和 [继承要求](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/x4yx82e6(v=vs.100))。</span><span class="sxs-lookup"><span data-stu-id="67adc-120">For details about security demands, see [Link Demands](/dotnet/framework/misc/link-demands) and [Inheritance Demands](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/x4yx82e6(v=vs.100)).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67adc-121">下面的示例程序可以基于使用类打印 "Hello World" 的程序的 CodeDOM 模型生成和编译源代码 <xref:System.Console> 。</span><span class="sxs-lookup"><span data-stu-id="67adc-121">The following example program can generate and compile source code based on a CodeDOM model of a program that prints "Hello World" using the <xref:System.Console> class.</span></span> <span data-ttu-id="67adc-122">提供 Windows 窗体用户界面。</span><span class="sxs-lookup"><span data-stu-id="67adc-122">A Windows Forms user interface is provided.</span></span> <span data-ttu-id="67adc-123">用户可以从以下几个选项中选择目标编程语言： c #、Visual Basic 和 JScript。</span><span class="sxs-lookup"><span data-stu-id="67adc-123">The user can select the target programming language from several selections: C#, Visual Basic, and JScript.</span></span>  
  
 [!code-cpp[CodeDomExample#1](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomExample/CPP/source.cpp#1)]
 [!code-csharp[CodeDomExample#1](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomExample/CS/source.cs#1)]
 [!code-vb[CodeDomExample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomExample/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="67adc-124">在 .NET Framework 版本1.0 和1.1 中，代码提供程序由、、和的实现组成 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> <see cref="T:System.CodeDom.Compiler.ICodeParser" /> <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> 。</span><span class="sxs-lookup"><span data-stu-id="67adc-124">In the .NET Framework versions 1.0 and 1.1, code providers consist of implementations of <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />, <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />, <see cref="T:System.CodeDom.Compiler.ICodeParser" />, and <see cref="T:System.CodeDom.Compiler.ICodeCompiler" />.</span></span> <span data-ttu-id="67adc-125">在中， [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 、和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" /> <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> 方法已过时， <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> 并且和的方法 <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> 直接在类中可用 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 。</span><span class="sxs-lookup"><span data-stu-id="67adc-125">In the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />, <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" />, and <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> methods are obsolete, and the methods of <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> and <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> are directly available in the <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> class.</span></span> <span data-ttu-id="67adc-126">应在代码提供程序实现中重写这些方法，而不调用基方法。</span><span class="sxs-lookup"><span data-stu-id="67adc-126">You should override those methods in your code provider implementation and not call the base methods.</span></span></para></block>
    <altmember cref="T:System.CodeDom.Compiler.CompilerInfo" />
    <altmember cref="T:Microsoft.CSharp.CSharpCodeProvider" />
    <altmember cref="T:Microsoft.VisualBasic.VBCodeProvider" />
    <altmember cref="T:Microsoft.JScript.JScriptCodeProvider" />
    <related type="Article" href="/dotnet/framework/configure-apps/file-schema/compiler/"><span data-ttu-id="67adc-127">编译器和语言提供程序设置架构</span><span class="sxs-lookup"><span data-stu-id="67adc-127">Compiler and Language Provider Settings Schema</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CodeDomProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CodeDomProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="67adc-128">初始化 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="67adc-128">Initializes a new instance of the <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileAssemblyFromDom">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.CompilerResults CompileAssemblyFromDom (System.CodeDom.Compiler.CompilerParameters options, params System.CodeDom.CodeCompileUnit[] compilationUnits);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.CompilerResults CompileAssemblyFromDom(class System.CodeDom.Compiler.CompilerParameters options, class System.CodeDom.CodeCompileUnit[] compilationUnits) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CompileAssemblyFromDom (options As CompilerParameters, ParamArray compilationUnits As CodeCompileUnit()) As CompilerResults" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::CompilerResults ^ CompileAssemblyFromDom(System::CodeDom::Compiler::CompilerParameters ^ options, ... cli::array &lt;System::CodeDom::CodeCompileUnit ^&gt; ^ compilationUnits);" />
      <MemberSignature Language="F#" Value="abstract member CompileAssemblyFromDom : System.CodeDom.Compiler.CompilerParameters * System.CodeDom.CodeCompileUnit[] -&gt; System.CodeDom.Compiler.CompilerResults&#xA;override this.CompileAssemblyFromDom : System.CodeDom.Compiler.CompilerParameters * System.CodeDom.CodeCompileUnit[] -&gt; System.CodeDom.Compiler.CompilerResults" Usage="codeDomProvider.CompileAssemblyFromDom (options, compilationUnits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.CodeDom.Compiler.CompilerParameters" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="compilationUnits" Type="System.CodeDom.CodeCompileUnit[]" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-2.1">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="options"><span data-ttu-id="67adc-129">一个 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象，它指示编译的设置。</span><span class="sxs-lookup"><span data-stu-id="67adc-129">A <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> object that indicates the settings for the compilation.</span></span></param>
        <param name="compilationUnits"><span data-ttu-id="67adc-130"><see cref="T:System.CodeDom.CodeCompileUnit" /> 类型数组，指示要编译的代码。</span><span class="sxs-lookup"><span data-stu-id="67adc-130">An array of type <see cref="T:System.CodeDom.CodeCompileUnit" /> that indicates the code to compile.</span></span></param>
        <summary><span data-ttu-id="67adc-131">基于包含在 <see cref="N:System.CodeDom" /> 对象的指定数组中的 <see cref="T:System.CodeDom.CodeCompileUnit" /> 树，使用指定的编译器设置编译程序集。</span><span class="sxs-lookup"><span data-stu-id="67adc-131">Compiles an assembly based on the <see cref="N:System.CodeDom" /> trees contained in the specified array of <see cref="T:System.CodeDom.CodeCompileUnit" /> objects, using the specified compiler settings.</span></span></summary>
        <returns><span data-ttu-id="67adc-132">一个 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 对象，它指示编译的结果。</span><span class="sxs-lookup"><span data-stu-id="67adc-132">A <see cref="T:System.CodeDom.Compiler.CompilerResults" /> object that indicates the results of the compilation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="67adc-133">在 .NET Framework 版本1.0 和1.1 中，此方法由 <xref:System.CodeDom.Compiler.ICodeCompiler> 提供程序的方法返回的实现提供 <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A> 。</span><span class="sxs-lookup"><span data-stu-id="67adc-133">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeCompiler> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A> method of the provider.</span></span> <span data-ttu-id="67adc-134">在版本2.0 中，可以直接在代码提供程序上调用此方法，即使代码提供程序未重写此方法。</span><span class="sxs-lookup"><span data-stu-id="67adc-134">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="67adc-135">如果代码提供程序不重写此方法，则 <xref:System.CodeDom.Compiler.ICodeCompiler> 由基类调用实现。</span><span class="sxs-lookup"><span data-stu-id="67adc-135">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeCompiler> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="67adc-136">此方法和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> 方法均不在派生类中重写。</span><span class="sxs-lookup"><span data-stu-id="67adc-136">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> method is overridden in a derived class.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="67adc-137">如果重写此方法，则不能调用基类的相应方法。</span><span class="sxs-lookup"><span data-stu-id="67adc-137">If you override this method, you must not call the corresponding method of the base class.</span></span> <span data-ttu-id="67adc-138">基类方法使用已过时的方法在派生类中创建一个生成器， <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> 以便与使用代码编译器的预先存在的提供程序兼容。</span><span class="sxs-lookup"><span data-stu-id="67adc-138">The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> method for compatibility with preexisting providers that use code compilers.</span></span> <span data-ttu-id="67adc-139">然后，基类方法调用实现中的等效方法 <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> 来执行此函数。</span><span class="sxs-lookup"><span data-stu-id="67adc-139">The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> implementation to perform this function.</span></span> <span data-ttu-id="67adc-140"><see cref="T:System.NotImplementedException" />如果从不使用代码编译器的代码提供程序调用基类方法，则将收到。</span><span class="sxs-lookup"><span data-stu-id="67adc-140">You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code compiler.</span></span></para></block>
        <altmember cref="T:System.CodeDom.Compiler.CompilerParameters" />
        <altmember cref="T:System.CodeDom.CodeCompileUnit" />
        <altmember cref="T:System.CodeDom.Compiler.CompilerResults" />
      </Docs>
    </Member>
    <Member MemberName="CompileAssemblyFromFile">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.CompilerResults CompileAssemblyFromFile (System.CodeDom.Compiler.CompilerParameters options, params string[] fileNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.CompilerResults CompileAssemblyFromFile(class System.CodeDom.Compiler.CompilerParameters options, string[] fileNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CompileAssemblyFromFile (options As CompilerParameters, ParamArray fileNames As String()) As CompilerResults" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::CompilerResults ^ CompileAssemblyFromFile(System::CodeDom::Compiler::CompilerParameters ^ options, ... cli::array &lt;System::String ^&gt; ^ fileNames);" />
      <MemberSignature Language="F#" Value="abstract member CompileAssemblyFromFile : System.CodeDom.Compiler.CompilerParameters * string[] -&gt; System.CodeDom.Compiler.CompilerResults&#xA;override this.CompileAssemblyFromFile : System.CodeDom.Compiler.CompilerParameters * string[] -&gt; System.CodeDom.Compiler.CompilerResults" Usage="codeDomProvider.CompileAssemblyFromFile (options, fileNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.CodeDom.Compiler.CompilerParameters" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="fileNames" Type="System.String[]" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-2.1">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="options"><span data-ttu-id="67adc-141">一个 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象，它指示编译的设置。</span><span class="sxs-lookup"><span data-stu-id="67adc-141">A <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> object that indicates the settings for the compilation.</span></span></param>
        <param name="fileNames"><span data-ttu-id="67adc-142">要编译的文件名称的数组。</span><span class="sxs-lookup"><span data-stu-id="67adc-142">An array of the names of the files to compile.</span></span></param>
        <summary><span data-ttu-id="67adc-143">从包含在指定文件中的源代码，使用指定的编译器设置编译程序集。</span><span class="sxs-lookup"><span data-stu-id="67adc-143">Compiles an assembly from the source code contained in the specified files, using the specified compiler settings.</span></span></summary>
        <returns><span data-ttu-id="67adc-144">指示编译结果的 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="67adc-144">A <see cref="T:System.CodeDom.Compiler.CompilerResults" /> object that indicates the results of compilation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="67adc-145">在 .NET Framework 版本1.0 和1.1 中，此方法由 <xref:System.CodeDom.Compiler.ICodeCompiler> 提供程序的方法返回的实现提供 <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A> 。</span><span class="sxs-lookup"><span data-stu-id="67adc-145">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeCompiler> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A> method of the provider.</span></span> <span data-ttu-id="67adc-146">在版本2.0 中，可以直接在代码提供程序上调用此方法，即使代码提供程序未重写此方法。</span><span class="sxs-lookup"><span data-stu-id="67adc-146">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="67adc-147">如果代码提供程序不重写此方法，则 <xref:System.CodeDom.Compiler.ICodeCompiler> 由基类调用实现。</span><span class="sxs-lookup"><span data-stu-id="67adc-147">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeCompiler> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="67adc-148">此方法和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> 方法均不在派生类中重写。</span><span class="sxs-lookup"><span data-stu-id="67adc-148">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> method is overridden in a derived class.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="67adc-149">如果重写此方法，则不能调用基类的相应方法。</span><span class="sxs-lookup"><span data-stu-id="67adc-149">If you override this method, you must not call the corresponding method of the base class.</span></span> <span data-ttu-id="67adc-150">基类方法使用已过时的方法在派生类中创建一个生成器， <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> 以便与使用代码编译器的预先存在的提供程序兼容。</span><span class="sxs-lookup"><span data-stu-id="67adc-150">The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> method for compatibility with preexisting providers that use code compilers.</span></span> <span data-ttu-id="67adc-151">然后，基类方法调用实现中的等效方法 <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> 来执行此函数。</span><span class="sxs-lookup"><span data-stu-id="67adc-151">The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> implementation to perform this function.</span></span> <span data-ttu-id="67adc-152"><see cref="T:System.NotImplementedException" />如果从不使用代码编译器的代码提供程序调用基类方法，则将收到。</span><span class="sxs-lookup"><span data-stu-id="67adc-152">You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code compiler.</span></span></para></block>
        <altmember cref="T:System.CodeDom.Compiler.CompilerParameters" />
        <altmember cref="T:System.CodeDom.Compiler.CompilerResults" />
      </Docs>
    </Member>
    <Member MemberName="CompileAssemblyFromSource">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.CompilerResults CompileAssemblyFromSource (System.CodeDom.Compiler.CompilerParameters options, params string[] sources);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.CompilerResults CompileAssemblyFromSource(class System.CodeDom.Compiler.CompilerParameters options, string[] sources) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CompileAssemblyFromSource (options As CompilerParameters, ParamArray sources As String()) As CompilerResults" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::CompilerResults ^ CompileAssemblyFromSource(System::CodeDom::Compiler::CompilerParameters ^ options, ... cli::array &lt;System::String ^&gt; ^ sources);" />
      <MemberSignature Language="F#" Value="abstract member CompileAssemblyFromSource : System.CodeDom.Compiler.CompilerParameters * string[] -&gt; System.CodeDom.Compiler.CompilerResults&#xA;override this.CompileAssemblyFromSource : System.CodeDom.Compiler.CompilerParameters * string[] -&gt; System.CodeDom.Compiler.CompilerResults" Usage="codeDomProvider.CompileAssemblyFromSource (options, sources)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.CodeDom.Compiler.CompilerParameters" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="sources" Type="System.String[]" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-2.1">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="options"><span data-ttu-id="67adc-153">一个 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象，它指示此编译的编译器设置。</span><span class="sxs-lookup"><span data-stu-id="67adc-153">A <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> object that indicates the compiler settings for this compilation.</span></span></param>
        <param name="sources"><span data-ttu-id="67adc-154">要编译的源代码字符串的数组。</span><span class="sxs-lookup"><span data-stu-id="67adc-154">An array of source code strings to compile.</span></span></param>
        <summary><span data-ttu-id="67adc-155">从包含源代码的字符串的指定数组，使用指定的编译器设置编译程序集。</span><span class="sxs-lookup"><span data-stu-id="67adc-155">Compiles an assembly from the specified array of strings containing source code, using the specified compiler settings.</span></span></summary>
        <returns><span data-ttu-id="67adc-156">指示编译结果的 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="67adc-156">A <see cref="T:System.CodeDom.Compiler.CompilerResults" /> object that indicates the results of compilation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="67adc-157">在 .NET Framework 版本1.0 和1.1 中，此方法由 <xref:System.CodeDom.Compiler.ICodeCompiler> 提供程序的方法返回的实现提供 <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A> 。</span><span class="sxs-lookup"><span data-stu-id="67adc-157">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeCompiler> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A> method of the provider.</span></span> <span data-ttu-id="67adc-158">在版本2.0 中，可以直接在代码提供程序上调用此方法，即使代码提供程序未重写此方法。</span><span class="sxs-lookup"><span data-stu-id="67adc-158">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="67adc-159">如果代码提供程序不重写此方法，则 <xref:System.CodeDom.Compiler.ICodeCompiler> 由基类调用实现。</span><span class="sxs-lookup"><span data-stu-id="67adc-159">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeCompiler> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="67adc-160">此方法和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> 方法均不在派生类中重写。</span><span class="sxs-lookup"><span data-stu-id="67adc-160">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> method is overridden in a derived class.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="67adc-161">如果重写此方法，则不能调用基类的相应方法。</span><span class="sxs-lookup"><span data-stu-id="67adc-161">If you override this method, you must not call the corresponding method of the base class.</span></span> <span data-ttu-id="67adc-162">基类方法使用已过时的方法在派生类中创建一个生成器， <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> 以便与使用代码编译器的预先存在的提供程序兼容。</span><span class="sxs-lookup"><span data-stu-id="67adc-162">The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> method for compatibility with preexisting providers that use code compilers.</span></span> <span data-ttu-id="67adc-163">然后，基类方法调用实现中的等效方法 <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> 来执行此函数。</span><span class="sxs-lookup"><span data-stu-id="67adc-163">The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> implementation to perform this function.</span></span> <span data-ttu-id="67adc-164"><see cref="T:System.NotImplementedException" />如果从不使用代码编译器的代码提供程序调用基类方法，则将收到。</span><span class="sxs-lookup"><span data-stu-id="67adc-164">You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code compiler.</span></span></para></block>
        <altmember cref="T:System.CodeDom.Compiler.CompilerParameters" />
        <altmember cref="T:System.CodeDom.Compiler.CompilerResults" />
      </Docs>
    </Member>
    <Member MemberName="CreateCompiler">
      <MemberSignature Language="C#" Value="public abstract System.CodeDom.Compiler.ICodeCompiler CreateCompiler ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeCompiler CreateCompiler() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CreateCompiler () As ICodeCompiler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::CodeDom::Compiler::ICodeCompiler ^ CreateCompiler();" />
      <MemberSignature Language="F#" Value="abstract member CreateCompiler : unit -&gt; System.CodeDom.Compiler.ICodeCompiler" Usage="codeDomProvider.CreateCompiler " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Obsolete("Callers should not use the ICodeCompiler interface and should instead use the methods directly on the CodeDomProvider class. Those inheriting from CodeDomProvider must still implement this interface, and should exclude this warning or also obsolete this method.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Callers should not use the ICodeCompiler interface and should instead use the methods directly on the CodeDomProvider class. Those inheriting from CodeDomProvider must still implement this interface, and should exclude this warning or also obsolete this method.")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName Language="C#">[System.Obsolete("ICodeCompiler is obsolete")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("ICodeCompiler is obsolete")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeCompiler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="67adc-165">在派生类中重写时，创建一个新的代码编译器。</span><span class="sxs-lookup"><span data-stu-id="67adc-165">When overridden in a derived class, creates a new code compiler.</span></span></summary>
        <returns><span data-ttu-id="67adc-166"><see cref="T:System.CodeDom.Compiler.ICodeCompiler" />，可用于编译基于 <see cref="N:System.CodeDom" /> 的源代码表示形式。</span><span class="sxs-lookup"><span data-stu-id="67adc-166">An <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> that can be used for compilation of <see cref="N:System.CodeDom" /> based source code representations.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67adc-167">此方法在中已过时 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)] 。</span><span class="sxs-lookup"><span data-stu-id="67adc-167">This method is obsolete in the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)].</span></span> <span data-ttu-id="67adc-168">建议的替代方法是调用可 <xref:System.CodeDom.Compiler.ICodeCompiler> 直接在代码提供程序中使用的方法。</span><span class="sxs-lookup"><span data-stu-id="67adc-168">The recommended alternative is to call the <xref:System.CodeDom.Compiler.ICodeCompiler> methods that are directly available in the code provider.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="67adc-169">在中 [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] ，应在 <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> 类中实现成员 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> ，并在 <see cref="T:System.NotSupportedException" /> 调用此方法时引发。</span><span class="sxs-lookup"><span data-stu-id="67adc-169">In the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], you should implement the <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> members in the <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> class and throw a <see cref="T:System.NotSupportedException" /> when this method is called.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="CreateEscapedIdentifier">
      <MemberSignature Language="C#" Value="public virtual string CreateEscapedIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string CreateEscapedIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateEscapedIdentifier (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ CreateEscapedIdentifier(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member CreateEscapedIdentifier : string -&gt; string&#xA;override this.CreateEscapedIdentifier : string -&gt; string" Usage="codeDomProvider.CreateEscapedIdentifier value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67adc-170">要为其创建转义标识符的字符串。</span><span class="sxs-lookup"><span data-stu-id="67adc-170">The string for which to create an escaped identifier.</span></span></param>
        <summary><span data-ttu-id="67adc-171">创建指定值的转义标识符。</span><span class="sxs-lookup"><span data-stu-id="67adc-171">Creates an escaped identifier for the specified value.</span></span></summary>
        <returns><span data-ttu-id="67adc-172">值的转义标识符。</span><span class="sxs-lookup"><span data-stu-id="67adc-172">The escaped identifier for the value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67adc-173"><xref:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier%2A> 测试标识符是否与任何保留关键字或语言关键字冲突，如果是，则返回具有特定于语言的转义代码格式的等效名称。</span><span class="sxs-lookup"><span data-stu-id="67adc-173"><xref:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier%2A> tests whether the identifier conflicts with any reserved or language keywords, and if so, returns an equivalent name with language-specific escape code formatting.</span></span> <span data-ttu-id="67adc-174">这称为转义标识符。</span><span class="sxs-lookup"><span data-stu-id="67adc-174">This is referred to an escaped identifier.</span></span> <span data-ttu-id="67adc-175">该转义标识符包含相同的， `value` 但已添加转义码格式设置，以使标识符有别于关键字。</span><span class="sxs-lookup"><span data-stu-id="67adc-175">The escaped identifier contains the same `value` but has escape-code formatting added to differentiate the identifier from the keyword.</span></span> <span data-ttu-id="67adc-176">两个实现示例前面 `value` 带有 "@"，或括号为 `value` "[" 和 "]"。</span><span class="sxs-lookup"><span data-stu-id="67adc-176">Two implementation examples are preceding the `value` with "@" or bracketing the `value` with "[" and "]".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67adc-177">在 .NET Framework 版本1.0 和1.1 中，此方法由 <xref:System.CodeDom.Compiler.ICodeGenerator> 提供程序的方法返回的实现提供 <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> 。</span><span class="sxs-lookup"><span data-stu-id="67adc-177">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method of the provider.</span></span> <span data-ttu-id="67adc-178">在版本2.0 中，可以直接在代码提供程序上调用此方法，即使代码提供程序未重写此方法。</span><span class="sxs-lookup"><span data-stu-id="67adc-178">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="67adc-179">如果代码提供程序不重写此方法，则 <xref:System.CodeDom.Compiler.ICodeGenerator> 由基类调用实现。</span><span class="sxs-lookup"><span data-stu-id="67adc-179">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="67adc-180">此方法和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法均不在派生类中重写。</span><span class="sxs-lookup"><span data-stu-id="67adc-180">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method is overridden in a derived class.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="67adc-181">如果重写此方法，则不能调用基类的相应方法。</span><span class="sxs-lookup"><span data-stu-id="67adc-181">If you override this method, you must not call the corresponding method of the base class.</span></span> <span data-ttu-id="67adc-182">基类方法使用已过时的方法在派生类中创建一个生成器， <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 以便与使用代码生成器的预先存在的提供程序兼容。</span><span class="sxs-lookup"><span data-stu-id="67adc-182">The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method for compatibility with preexisting providers that use code generators.</span></span> <span data-ttu-id="67adc-183">然后，基类方法调用实现中的等效方法 <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> 来执行此函数。</span><span class="sxs-lookup"><span data-stu-id="67adc-183">The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementation to perform this function.</span></span> <span data-ttu-id="67adc-184"><see cref="T:System.NotImplementedException" />如果从不使用代码生成器的代码提供程序调用基类方法，则将收到。</span><span class="sxs-lookup"><span data-stu-id="67adc-184">You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code generator.</span></span></para></block>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateGenerator">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="67adc-185">在派生类中重写时，创建一个新的代码生成器。</span><span class="sxs-lookup"><span data-stu-id="67adc-185">When overridden in a derived class, creates a new code generator.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateGenerator">
      <MemberSignature Language="C#" Value="public abstract System.CodeDom.Compiler.ICodeGenerator CreateGenerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeGenerator CreateGenerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CreateGenerator () As ICodeGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::CodeDom::Compiler::ICodeGenerator ^ CreateGenerator();" />
      <MemberSignature Language="F#" Value="abstract member CreateGenerator : unit -&gt; System.CodeDom.Compiler.ICodeGenerator" Usage="codeDomProvider.CreateGenerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Obsolete("Callers should not use the ICodeGenerator interface and should instead use the methods directly on the CodeDomProvider class. Those inheriting from CodeDomProvider must still implement this interface, and should exclude this warning or also obsolete this method.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Callers should not use the ICodeGenerator interface and should instead use the methods directly on the CodeDomProvider class. Those inheriting from CodeDomProvider must still implement this interface, and should exclude this warning or also obsolete this method.")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName Language="C#">[System.Obsolete("ICodeGenerator is obsolete")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("ICodeGenerator is obsolete")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeGenerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="67adc-186">在派生类中重写时，创建一个新的代码生成器。</span><span class="sxs-lookup"><span data-stu-id="67adc-186">When overridden in a derived class, creates a new code generator.</span></span></summary>
        <returns><span data-ttu-id="67adc-187"><see cref="T:System.CodeDom.Compiler.ICodeGenerator" />，可用于生成基于 <see cref="N:System.CodeDom" /> 的源代码表示形式。</span><span class="sxs-lookup"><span data-stu-id="67adc-187">An <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> that can be used to generate <see cref="N:System.CodeDom" /> based source code representations.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67adc-188">此方法在中已过时 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)] 。</span><span class="sxs-lookup"><span data-stu-id="67adc-188">This method is obsolete in the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)].</span></span> <span data-ttu-id="67adc-189">建议的替代方法是调用 <xref:System.CodeDom.Compiler.ICodeGenerator> 类中直接可用的方法 <xref:System.CodeDom.Compiler.CodeDomProvider> 。</span><span class="sxs-lookup"><span data-stu-id="67adc-189">The recommended alternative is to call the <xref:System.CodeDom.Compiler.ICodeGenerator> methods that are directly available in the <xref:System.CodeDom.Compiler.CodeDomProvider> class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="67adc-190">在中 [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] ，应在 <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> 类中实现成员 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> ，并在 <see cref="T:System.NotSupportedException" /> 调用此方法时引发。</span><span class="sxs-lookup"><span data-stu-id="67adc-190">In the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], you should implement the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> members in the <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> class and throw a <see cref="T:System.NotSupportedException" /> when this method is called.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="CreateGenerator">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.ICodeGenerator CreateGenerator (System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeGenerator CreateGenerator(class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateGenerator (output As TextWriter) As ICodeGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::ICodeGenerator ^ CreateGenerator(System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="abstract member CreateGenerator : System.IO.TextWriter -&gt; System.CodeDom.Compiler.ICodeGenerator&#xA;override this.CreateGenerator : System.IO.TextWriter -&gt; System.CodeDom.Compiler.ICodeGenerator" Usage="codeDomProvider.CreateGenerator output" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeGenerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="output"><span data-ttu-id="67adc-191">用于输出的 <see cref="T:System.IO.TextWriter" />。</span><span class="sxs-lookup"><span data-stu-id="67adc-191">A <see cref="T:System.IO.TextWriter" /> to use to output.</span></span></param>
        <summary><span data-ttu-id="67adc-192">在派生类中重写时，使用指定的 <see cref="T:System.IO.TextWriter" /> 创建新的代码生成器以用于输出。</span><span class="sxs-lookup"><span data-stu-id="67adc-192">When overridden in a derived class, creates a new code generator using the specified <see cref="T:System.IO.TextWriter" /> for output.</span></span></summary>
        <returns><span data-ttu-id="67adc-193"><see cref="T:System.CodeDom.Compiler.ICodeGenerator" />，可用于生成基于 <see cref="N:System.CodeDom" /> 的源代码表示形式。</span><span class="sxs-lookup"><span data-stu-id="67adc-193">An <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> that can be used to generate <see cref="N:System.CodeDom" /> based source code representations.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67adc-194">此方法使用 <xref:System.IO.TextWriter> 为输出指定的。</span><span class="sxs-lookup"><span data-stu-id="67adc-194">This method uses the specified <xref:System.IO.TextWriter> for output.</span></span> <span data-ttu-id="67adc-195">此方法支持更多优化的代码生成，以增量方式更新源代码。</span><span class="sxs-lookup"><span data-stu-id="67adc-195">This method supports more optimized code generation that incrementally updates the source code.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67adc-196">基类实现调用 <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> 方法，该方法在中已过时， [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)] <xref:System.NotSupportedException> 如果不返回对象，则会生成 <xref:System.CodeDom.Compiler.ICodeGenerator> 。</span><span class="sxs-lookup"><span data-stu-id="67adc-196">The base class implementation calls the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method, which is obsolete in the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)] and results in a <xref:System.NotSupportedException> if an <xref:System.CodeDom.Compiler.ICodeGenerator> object is not returned.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="CreateGenerator">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.ICodeGenerator CreateGenerator (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeGenerator CreateGenerator(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateGenerator (fileName As String) As ICodeGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::ICodeGenerator ^ CreateGenerator(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="abstract member CreateGenerator : string -&gt; System.CodeDom.Compiler.ICodeGenerator&#xA;override this.CreateGenerator : string -&gt; System.CodeDom.Compiler.ICodeGenerator" Usage="codeDomProvider.CreateGenerator fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeGenerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="67adc-197">要输出到的文件名。</span><span class="sxs-lookup"><span data-stu-id="67adc-197">The file name to output to.</span></span></param>
        <summary><span data-ttu-id="67adc-198">在派生类中重写时，使用指定文件名创建新的代码生成器以用于输出。</span><span class="sxs-lookup"><span data-stu-id="67adc-198">When overridden in a derived class, creates a new code generator using the specified file name for output.</span></span></summary>
        <returns><span data-ttu-id="67adc-199"><see cref="T:System.CodeDom.Compiler.ICodeGenerator" />，可用于生成基于 <see cref="N:System.CodeDom" /> 的源代码表示形式。</span><span class="sxs-lookup"><span data-stu-id="67adc-199">An <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> that can be used to generate <see cref="N:System.CodeDom" /> based source code representations.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67adc-200">此方法使用指定的输出文件名。</span><span class="sxs-lookup"><span data-stu-id="67adc-200">This method uses the specified file name for output.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67adc-201">基类实现调用 <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> 方法，该方法在中已过时， [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)] <xref:System.NotSupportedException> 如果不返回对象，则会生成 <xref:System.CodeDom.Compiler.ICodeGenerator> 。</span><span class="sxs-lookup"><span data-stu-id="67adc-201">The base class implementation calls the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method, which is obsolete in the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)] and results in a <xref:System.NotSupportedException> if an <xref:System.CodeDom.Compiler.ICodeGenerator> object is not returned.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateParser">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.ICodeParser CreateParser ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeParser CreateParser() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateParser () As ICodeParser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::ICodeParser ^ CreateParser();" />
      <MemberSignature Language="F#" Value="abstract member CreateParser : unit -&gt; System.CodeDom.Compiler.ICodeParser&#xA;override this.CreateParser : unit -&gt; System.CodeDom.Compiler.ICodeParser" Usage="codeDomProvider.CreateParser " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Obsolete("Callers should not use the ICodeParser interface and should instead use the methods directly on the CodeDomProvider class. Those inheriting from CodeDomProvider must still implement this interface, and should exclude this warning or also obsolete this method.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Callers should not use the ICodeParser interface and should instead use the methods directly on the CodeDomProvider class. Those inheriting from CodeDomProvider must still implement this interface, and should exclude this warning or also obsolete this method.")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName Language="C#">[System.Obsolete("ICodeParser is obsolete")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("ICodeParser is obsolete")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeParser</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="67adc-202">在派生类中重写时，创建一个新的代码分析器。</span><span class="sxs-lookup"><span data-stu-id="67adc-202">When overridden in a derived class, creates a new code parser.</span></span></summary>
        <returns><span data-ttu-id="67adc-203"><see cref="T:System.CodeDom.Compiler.ICodeParser" />，可用于分析源代码。</span><span class="sxs-lookup"><span data-stu-id="67adc-203">An <see cref="T:System.CodeDom.Compiler.ICodeParser" /> that can be used to parse source code.</span></span> <span data-ttu-id="67adc-204">此基实现总是返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="67adc-204">The base implementation always returns <see langword="null" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateProvider">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="67adc-205">获取指定语言的 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="67adc-205">Gets a <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> instance for the specified language.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateProvider">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CodeDomProvider CreateProvider (string language);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CodeDomProvider CreateProvider(string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateProvider (language As String) As CodeDomProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::Compiler::CodeDomProvider ^ CreateProvider(System::String ^ language);" />
      <MemberSignature Language="F#" Value="static member CreateProvider : string -&gt; System.CodeDom.Compiler.CodeDomProvider" Usage="System.CodeDom.Compiler.CodeDomProvider.CreateProvider language" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CodeDomProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="language"><span data-ttu-id="67adc-206">语言名称。</span><span class="sxs-lookup"><span data-stu-id="67adc-206">The language name.</span></span></param>
        <summary><span data-ttu-id="67adc-207">获取指定语言的 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="67adc-207">Gets a <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> instance for the specified language.</span></span></summary>
        <returns><span data-ttu-id="67adc-208">为指定语言名称实现的 CodeDOM 提供程序。</span><span class="sxs-lookup"><span data-stu-id="67adc-208">A CodeDOM provider that is implemented for the specified language name.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="67adc-209">此方法最常用于在应用程序中创建代码提供程序的实例，该实例可以选择使用多个提供程序之一。</span><span class="sxs-lookup"><span data-stu-id="67adc-209">This method is most commonly used to create an instance of a code provider in an application that may optionally use one of several providers.</span></span> <span data-ttu-id="67adc-210"><xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> 允许你在运行时指定要实例化的代码提供程序。</span><span class="sxs-lookup"><span data-stu-id="67adc-210"><xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> allows you to specify at run time the code provider you wish to instantiate.</span></span> <span data-ttu-id="67adc-211">如果您在设计时知道要使用哪一个代码提供程序，则应创建该代码提供程序的实例，而不是使用 <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="67adc-211">If you know at design time which code provider is to be used, you should create an instance of that code provider rather than use the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> method.</span></span>  
  
 <span data-ttu-id="67adc-212"><xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>方法返回 <xref:System.CodeDom.Compiler.CodeDomProvider> 特定语言名称的实例; 与 <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> 使用语言提供程序类型调用方法类似。</span><span class="sxs-lookup"><span data-stu-id="67adc-212">The <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> method returns a <xref:System.CodeDom.Compiler.CodeDomProvider> instance for a specific language name; it is similar to calling the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method with the language provider type.</span></span> <span data-ttu-id="67adc-213"><xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>需要动态查找语言名称的已配置提供程序实现时，请使用。</span><span class="sxs-lookup"><span data-stu-id="67adc-213">Use <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> when you want to dynamically find a configured provider implementation for a language name.</span></span>  
  
 <span data-ttu-id="67adc-214">如果为语言名称配置了多个提供程序实现，则 <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> 返回最后一个匹配配置元素的提供程序实例。</span><span class="sxs-lookup"><span data-stu-id="67adc-214">If more than one provider implementation is configured for the language name, <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> returns a provider instance for the last matching configuration element.</span></span>  
  
 <span data-ttu-id="67adc-215"><xref:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object%5B%5D,System.Globalization.CultureInfo)?displayProperty=nameWithType>如果需要特定的语言提供程序实现，请使用方法重载。</span><span class="sxs-lookup"><span data-stu-id="67adc-215">Use the <xref:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object%5B%5D,System.Globalization.CultureInfo)?displayProperty=nameWithType> method overload when you want a specific language provider implementation.</span></span> <span data-ttu-id="67adc-216">例如，使用 <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> 方法获取支持语言名称的提供程序实例 `"CSharp"` ; 使用 <xref:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object%5B%5D,System.Globalization.CultureInfo)?displayProperty=nameWithType> 方法重载获取专用于实现的提供程序实例 <xref:Microsoft.CSharp.CSharpCodeProvider?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="67adc-216">For example, use the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> method to get a provider instance that supports the language name `"CSharp"`; use the <xref:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object%5B%5D,System.Globalization.CultureInfo)?displayProperty=nameWithType> method overload to get a provider instance specifically for the <xref:Microsoft.CSharp.CSharpCodeProvider?displayProperty=nameWithType> implementation.</span></span> <span data-ttu-id="67adc-217"><xref:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object%5B%5D,System.Globalization.CultureInfo,System.Object%5B%5D)?displayProperty=nameWithType>如果有多个用于语言的代码提供程序并且需要实例化特定的代码提供程序，请使用方法。</span><span class="sxs-lookup"><span data-stu-id="67adc-217">Use the <xref:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object%5B%5D,System.Globalization.CultureInfo,System.Object%5B%5D)?displayProperty=nameWithType> method if you have multiple code providers for a language and you desire to instantiate a specific code provider.</span></span>  
  
 <span data-ttu-id="67adc-218"><xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A>方法检查是否至少有一个提供程序实现支持特定语言。</span><span class="sxs-lookup"><span data-stu-id="67adc-218">The <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> method checks whether at least one provider implementation supports a specific language.</span></span> <span data-ttu-id="67adc-219">在将语言名称传递给之前，可以使用对 <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> 其进行验证 <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> 。</span><span class="sxs-lookup"><span data-stu-id="67adc-219">You can validate a language name using <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> before passing it to <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>.</span></span> <span data-ttu-id="67adc-220">如果将不支持的语言名称传递 <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> 到 <xref:System.Configuration.ConfigurationException?displayProperty=nameWithType> ，则会引发。</span><span class="sxs-lookup"><span data-stu-id="67adc-220">If you pass an unsupported language name to <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> a <xref:System.Configuration.ConfigurationException?displayProperty=nameWithType> is thrown.</span></span>  
  
 <span data-ttu-id="67adc-221"><xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A>方法可用于确定计算机上的所有 <xref:System.CodeDom.Compiler.CodeDomProvider> 实现，包括开发人员和编译器供应商提供的、在计算机配置文件 ( # A0 [ &lt; &gt; ](/dotnet/framework/configure-apps/file-schema/compiler/system-codedom-element)) 中标识的其他实现。</span><span class="sxs-lookup"><span data-stu-id="67adc-221">The <xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A> method can be used to determine all <xref:System.CodeDom.Compiler.CodeDomProvider> implementations on a computer, including additional implementations provided by developers and compiler vendors that are identified in the [&lt;system.codedom&gt; Element](/dotnet/framework/configure-apps/file-schema/compiler/system-codedom-element) in the machine configuration file (Machine.config).</span></span>  
  
 <span data-ttu-id="67adc-222"><xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>方法返回 <xref:System.CodeDom.Compiler.CodeDomProvider> 特定语言的实现的实例。</span><span class="sxs-lookup"><span data-stu-id="67adc-222">The <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> method returns an instance of a <xref:System.CodeDom.Compiler.CodeDomProvider> implementation for a specific language.</span></span>  
  
 <span data-ttu-id="67adc-223">语言名称不区分大小写。</span><span class="sxs-lookup"><span data-stu-id="67adc-223">Language names are case-insensitive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67adc-224">下面的代码示例确定 <xref:System.CodeDom.Compiler.CodeDomProvider> 输入语言的实现，并显示语言提供程序的配置设置。</span><span class="sxs-lookup"><span data-stu-id="67adc-224">The following code example determines the <xref:System.CodeDom.Compiler.CodeDomProvider> implementation for an input language and displays the configured settings for the language provider.</span></span> <span data-ttu-id="67adc-225">此代码示例是为类提供的更大示例的一部分 <xref:System.CodeDom.Compiler.CompilerInfo> 。</span><span class="sxs-lookup"><span data-stu-id="67adc-225">This code example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CompilerInfo> class.</span></span>  
  
 [!code-cpp[CodeDom_CompilerInfo#6](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#6)]
 [!code-csharp[CodeDom_CompilerInfo#6](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#6)]
 [!code-vb[CodeDom_CompilerInfo#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException"><span data-ttu-id="67adc-226"><paramref name="language" /> 在此计算机上没有已配置的提供程序。</span><span class="sxs-lookup"><span data-stu-id="67adc-226">The <paramref name="language" /> does not have a configured provider on this computer.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="67adc-227"><paramref name="language" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="67adc-227">The <paramref name="language" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="67adc-228">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="67adc-228">The caller does not have the required permission.</span></span></exception>
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateProvider">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CodeDomProvider CreateProvider (string language, System.Collections.Generic.IDictionary&lt;string,string&gt; providerOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CodeDomProvider CreateProvider(string language, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; providerOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateProvider (language As String, providerOptions As IDictionary(Of String, String)) As CodeDomProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::Compiler::CodeDomProvider ^ CreateProvider(System::String ^ language, System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ providerOptions);" />
      <MemberSignature Language="F#" Value="static member CreateProvider : string * System.Collections.Generic.IDictionary&lt;string, string&gt; -&gt; System.CodeDom.Compiler.CodeDomProvider" Usage="System.CodeDom.Compiler.CodeDomProvider.CreateProvider (language, providerOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CodeDomProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="providerOptions" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="language"><span data-ttu-id="67adc-229">语言名称。</span><span class="sxs-lookup"><span data-stu-id="67adc-229">The language name.</span></span></param>
        <param name="providerOptions"><span data-ttu-id="67adc-230">来自配置文件的提供程序选项的集合。</span><span class="sxs-lookup"><span data-stu-id="67adc-230">A collection of provider options from the configuration file.</span></span></param>
        <summary><span data-ttu-id="67adc-231">获取指定的语言和提供程序选项的 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="67adc-231">Gets a <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> instance for the specified language and provider options.</span></span></summary>
        <returns><span data-ttu-id="67adc-232">为指定语言名称和选项实现的 CodeDOM 提供程序。</span><span class="sxs-lookup"><span data-stu-id="67adc-232">A CodeDOM provider that is implemented for the specified language name and options.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="67adc-233">此方法最常用于在应用程序中创建代码提供程序的实例，该实例可以选择使用多个提供程序之一。</span><span class="sxs-lookup"><span data-stu-id="67adc-233">This method is most commonly used to create an instance of a code provider in an application that may optionally use one of several providers.</span></span> <span data-ttu-id="67adc-234"><xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary%7BSystem.String,System.String%7D)> 使你能够在运行时指定要实例化的代码提供程序的版本。</span><span class="sxs-lookup"><span data-stu-id="67adc-234"><xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary%7BSystem.String,System.String%7D)> enables you to specify at run time the version of the code provider you want to instantiate.</span></span> <span data-ttu-id="67adc-235">如果在设计时知道要使用哪种代码提供程序，则应创建该代码提供程序的实例，而不是使用 <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary%7BSystem.String,System.String%7D)> 方法。</span><span class="sxs-lookup"><span data-stu-id="67adc-235">If you know at design time which code provider is to be used, you should create an instance of that code provider instead of using the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary%7BSystem.String,System.String%7D)> method.</span></span>  
  
 <span data-ttu-id="67adc-236"><xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary%7BSystem.String,System.String%7D)>当你想要针对特定语言和选项动态查找配置的提供程序实现时，请使用。</span><span class="sxs-lookup"><span data-stu-id="67adc-236">Use <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary%7BSystem.String,System.String%7D)> when you want to dynamically find a configured provider implementation for a specific language and options.</span></span> <span data-ttu-id="67adc-237">语言名称不区分大小写。</span><span class="sxs-lookup"><span data-stu-id="67adc-237">Language names are case-insensitive.</span></span> <span data-ttu-id="67adc-238">有关支持的提供程序选项的信息，请参阅特定的 CodeDOM 提供程序文档。</span><span class="sxs-lookup"><span data-stu-id="67adc-238">For information about supported provider options, see the specific CodeDOM provider documentation.</span></span>  
  
 <span data-ttu-id="67adc-239">有关为语言名称配置了多个提供程序实现的验证提供程序和调用提供程序的信息，请参见方法的 "备注" 部分 <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)> 。</span><span class="sxs-lookup"><span data-stu-id="67adc-239">For information about validating a provider and calling a provider if more than one provider implementation is configured for the language name, see the Remarks section of the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67adc-240">下面的示例演示如何使用参数创建提供程序的实例 `providerOptions` 。</span><span class="sxs-lookup"><span data-stu-id="67adc-240">The following example shows how to create an instance of a provider by using the `providerOptions` parameter.</span></span>  
  
 [!code-csharp[CodeDomProvider.ProviderOptions#1](~/samples/snippets/csharp/VS_Snippets_CLR/codedomprovider.provideroptions/cs/program.cs#1)]
 [!code-vb[CodeDomProvider.ProviderOptions#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/codedomprovider.provideroptions/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateValidIdentifier">
      <MemberSignature Language="C#" Value="public virtual string CreateValidIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string CreateValidIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateValidIdentifier (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ CreateValidIdentifier(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member CreateValidIdentifier : string -&gt; string&#xA;override this.CreateValidIdentifier : string -&gt; string" Usage="codeDomProvider.CreateValidIdentifier value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67adc-241">要为其生成有效标识符的字符串。</span><span class="sxs-lookup"><span data-stu-id="67adc-241">The string for which to generate a valid identifier.</span></span></param>
        <summary><span data-ttu-id="67adc-242">为指定的值创建有效标识符。</span><span class="sxs-lookup"><span data-stu-id="67adc-242">Creates a valid identifier for the specified value.</span></span></summary>
        <returns><span data-ttu-id="67adc-243">指定值的有效标识符。</span><span class="sxs-lookup"><span data-stu-id="67adc-243">A valid identifier for the specified value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67adc-244"><xref:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier%2A> 测试标识符是否与保留关键字或语言关键字冲突，如果是，则将尝试返回一个不冲突的有效标识符名称。</span><span class="sxs-lookup"><span data-stu-id="67adc-244"><xref:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier%2A> tests whether the identifier conflicts with reserved or language keywords, and if so, attempts to return a valid identifier name that does not conflict.</span></span> <span data-ttu-id="67adc-245">通常，只会略微修改返回的标识符，以区别关键字中的标识符;例如，名称前面可能有下划线 ( "_" ) 字符。</span><span class="sxs-lookup"><span data-stu-id="67adc-245">Usually the returned identifier is only slightly modified to differentiate the identifier from the keyword; for example, the name might be preceded by the underscore ("_") character.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67adc-246">在 .NET Framework 版本1.0 和1.1 中，此方法由 <xref:System.CodeDom.Compiler.ICodeGenerator> 提供程序的方法返回的实现提供 <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> 。</span><span class="sxs-lookup"><span data-stu-id="67adc-246">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method of the provider.</span></span> <span data-ttu-id="67adc-247">在版本2.0 中，可以直接在代码提供程序上调用此方法，即使代码提供程序未重写此方法。</span><span class="sxs-lookup"><span data-stu-id="67adc-247">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="67adc-248">如果代码提供程序不重写此方法，则 <xref:System.CodeDom.Compiler.ICodeGenerator> 由基类调用实现。</span><span class="sxs-lookup"><span data-stu-id="67adc-248">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="67adc-249">此方法和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法均不在派生类中重写。</span><span class="sxs-lookup"><span data-stu-id="67adc-249">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method is overridden in a derived class.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="67adc-250">如果重写此方法，则不能调用基类的相应方法。</span><span class="sxs-lookup"><span data-stu-id="67adc-250">If you override this method, you must not call the corresponding method of the base class.</span></span> <span data-ttu-id="67adc-251">基类方法使用已过时的方法在派生类中创建一个生成器， <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 以便与使用代码生成器的预先存在的提供程序兼容。</span><span class="sxs-lookup"><span data-stu-id="67adc-251">The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method for compatibility with preexisting providers that use code generators.</span></span> <span data-ttu-id="67adc-252">然后，基类方法调用实现中的等效方法 <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> 来执行此函数。</span><span class="sxs-lookup"><span data-stu-id="67adc-252">The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementation to perform this function.</span></span> <span data-ttu-id="67adc-253"><see cref="T:System.NotImplementedException" />如果从不使用代码生成器的代码提供程序调用基类方法，则将收到。</span><span class="sxs-lookup"><span data-stu-id="67adc-253">You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code generator.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="FileExtension">
      <MemberSignature Language="C#" Value="public virtual string FileExtension { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FileExtension" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property FileExtension As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ FileExtension { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FileExtension : string" Usage="System.CodeDom.Compiler.CodeDomProvider.FileExtension" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67adc-254">获取用于当前语言的源代码文件的默认文件扩展名。</span><span class="sxs-lookup"><span data-stu-id="67adc-254">Gets the default file name extension to use for source code files in the current language.</span></span></summary>
        <value><span data-ttu-id="67adc-255">与当前语言的源文件扩展名相对应的文件扩展名。</span><span class="sxs-lookup"><span data-stu-id="67adc-255">A file name extension corresponding to the extension of the source files of the current language.</span></span> <span data-ttu-id="67adc-256">此基实现总是返回 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="67adc-256">The base implementation always returns <see cref="F:System.String.Empty" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67adc-257">代码生成器和代码编译器使用此属性来指示应生成或使用的文件扩展名。</span><span class="sxs-lookup"><span data-stu-id="67adc-257">This property is used by code generators and code compilers to indicate what file extensions should be generated or used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67adc-258">下面的代码示例创建的一个实例 <xref:Microsoft.VisualBasic.VBCodeProvider?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="67adc-258">The following code example creates an instance of <xref:Microsoft.VisualBasic.VBCodeProvider?displayProperty=nameWithType>.</span></span> <span data-ttu-id="67adc-259">该示例显示了新提供程序实例的提供程序名称、哈希代码和默认文件扩展名。</span><span class="sxs-lookup"><span data-stu-id="67adc-259">The example displays the provider name, hash code and default file name extension for the new provider instance.</span></span>  
  
 [!code-cpp[CodeDom_CompilerInfo#3](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#3)]
 [!code-csharp[CodeDom_CompilerInfo#3](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#3)]
 [!code-vb[CodeDom_CompilerInfo#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromCompileUnit">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromCompileUnit (System.CodeDom.CodeCompileUnit compileUnit, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromCompileUnit(class System.CodeDom.CodeCompileUnit compileUnit, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromCompileUnit (compileUnit As CodeCompileUnit, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromCompileUnit(System::CodeDom::CodeCompileUnit ^ compileUnit, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromCompileUnit : System.CodeDom.CodeCompileUnit * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromCompileUnit : System.CodeDom.CodeCompileUnit * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromCompileUnit (compileUnit, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="compileUnit" Type="System.CodeDom.CodeCompileUnit" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="writer" Type="System.IO.TextWriter" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="compileUnit"><span data-ttu-id="67adc-260">要为其生成代码的 <see cref="T:System.CodeDom.CodeCompileUnit" />。</span><span class="sxs-lookup"><span data-stu-id="67adc-260">A <see cref="T:System.CodeDom.CodeCompileUnit" /> for which to generate code.</span></span></param>
        <param name="writer"><span data-ttu-id="67adc-261">输出代码将被发送到的 <see cref="T:System.IO.TextWriter" />。</span><span class="sxs-lookup"><span data-stu-id="67adc-261">The <see cref="T:System.IO.TextWriter" /> to which the output code is sent.</span></span></param>
        <param name="options"><span data-ttu-id="67adc-262"><see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，指示用于生成代码的选项。</span><span class="sxs-lookup"><span data-stu-id="67adc-262">A <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> that indicates the options to use for generating code.</span></span></param>
        <summary><span data-ttu-id="67adc-263">为指定的代码文档对象模型 (CodeDOM) 编译单元生成代码，并使用指定的选项将代码发送到指定的文本编写器。</span><span class="sxs-lookup"><span data-stu-id="67adc-263">Generates code for the specified Code Document Object Model (CodeDOM) compilation unit and sends it to the specified text writer, using the specified options.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="67adc-264">在 .NET Framework 版本1.0 和1.1 中，此方法由 <xref:System.CodeDom.Compiler.ICodeGenerator> 提供程序的方法返回的实现提供 <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> 。</span><span class="sxs-lookup"><span data-stu-id="67adc-264">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method of the provider.</span></span> <span data-ttu-id="67adc-265">在版本2.0 中，可以直接在代码提供程序上调用此方法，即使代码提供程序未重写此方法。</span><span class="sxs-lookup"><span data-stu-id="67adc-265">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="67adc-266">如果代码提供程序不重写此方法，则 <xref:System.CodeDom.Compiler.ICodeGenerator> 由基类调用实现。</span><span class="sxs-lookup"><span data-stu-id="67adc-266">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation is called by the base class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67adc-267">下面的代码示例演示 <xref:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit%2A> 如何使用方法为中的 "Hello World" 应用程序生成代码 <xref:System.CodeDom.CodeCompileUnit> 。</span><span class="sxs-lookup"><span data-stu-id="67adc-267">The following code example shows the use of the <xref:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit%2A> method to generate code for a "Hello World" application from a <xref:System.CodeDom.CodeCompileUnit>.</span></span> <span data-ttu-id="67adc-268">此示例是为类提供的更大示例的一部分 <xref:System.CodeDom.Compiler.CodeDomProvider> 。</span><span class="sxs-lookup"><span data-stu-id="67adc-268">This example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CodeDomProvider> class.</span></span>  
  
 [!code-cpp[CodeDomExample#3](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomExample/CPP/source.cpp#3)]
 [!code-csharp[CodeDomExample#3](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomExample/CS/source.cs#3)]
 [!code-vb[CodeDomExample#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomExample/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="67adc-269">此方法和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法均不在派生类中重写。</span><span class="sxs-lookup"><span data-stu-id="67adc-269">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method is overridden in a derived class.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="67adc-270">如果重写此方法，则不能调用基类的相应方法。</span><span class="sxs-lookup"><span data-stu-id="67adc-270">If you override this method, you must not call the corresponding method of the base class.</span></span> <span data-ttu-id="67adc-271">基类方法使用已过时的方法在派生类中创建一个生成器， <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 以便与使用代码生成器的预先存在的提供程序兼容。</span><span class="sxs-lookup"><span data-stu-id="67adc-271">The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method for compatibility with preexisting providers that use code generators.</span></span> <span data-ttu-id="67adc-272">然后，基类方法调用实现中的等效方法 <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> 来执行此函数。</span><span class="sxs-lookup"><span data-stu-id="67adc-272">The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementation to perform this function.</span></span> <span data-ttu-id="67adc-273"><see cref="T:System.NotImplementedException" />如果从不使用代码生成器的代码提供程序调用基类方法，则将收到。</span><span class="sxs-lookup"><span data-stu-id="67adc-273">You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code generator.</span></span></para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromExpression">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromExpression (System.CodeDom.CodeExpression expression, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromExpression(class System.CodeDom.CodeExpression expression, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromExpression (expression As CodeExpression, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromExpression(System::CodeDom::CodeExpression ^ expression, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromExpression : System.CodeDom.CodeExpression * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromExpression : System.CodeDom.CodeExpression * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromExpression (expression, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.CodeDom.CodeExpression" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="writer" Type="System.IO.TextWriter" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="67adc-274">一个 <see cref="T:System.CodeDom.CodeExpression" /> 对象，指示要为其生成代码的表达式。</span><span class="sxs-lookup"><span data-stu-id="67adc-274">A <see cref="T:System.CodeDom.CodeExpression" /> object that indicates the expression for which to generate code.</span></span></param>
        <param name="writer"><span data-ttu-id="67adc-275">输出代码将被发送到的 <see cref="T:System.IO.TextWriter" />。</span><span class="sxs-lookup"><span data-stu-id="67adc-275">The <see cref="T:System.IO.TextWriter" /> to which output code is sent.</span></span></param>
        <param name="options"><span data-ttu-id="67adc-276"><see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，指示用于生成代码的选项。</span><span class="sxs-lookup"><span data-stu-id="67adc-276">A <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> that indicates the options to use for generating code.</span></span></param>
        <summary><span data-ttu-id="67adc-277">为指定的代码文档对象模型 (CodeDOM) 表达式生成代码，并使用指定的选项将代码发送到指定的文本编写器。</span><span class="sxs-lookup"><span data-stu-id="67adc-277">Generates code for the specified Code Document Object Model (CodeDOM) expression and sends it to the specified text writer, using the specified options.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="67adc-278">在 .NET Framework 版本1.0 和1.1 中，此方法由 <xref:System.CodeDom.Compiler.ICodeGenerator> 提供程序的方法返回的实现提供 <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> 。</span><span class="sxs-lookup"><span data-stu-id="67adc-278">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method of the provider.</span></span> <span data-ttu-id="67adc-279">在版本2.0 中，可以直接在代码提供程序上调用此方法，即使代码提供程序未重写此方法。</span><span class="sxs-lookup"><span data-stu-id="67adc-279">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="67adc-280">如果代码提供程序不重写此方法，则 <xref:System.CodeDom.Compiler.ICodeGenerator> 由基类调用实现。</span><span class="sxs-lookup"><span data-stu-id="67adc-280">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="67adc-281">此方法和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法均不在派生类中重写。</span><span class="sxs-lookup"><span data-stu-id="67adc-281">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method is overridden in a derived class.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="67adc-282">如果重写此方法，则不能调用基类的相应方法。</span><span class="sxs-lookup"><span data-stu-id="67adc-282">If you override this method, you must not call the corresponding method of the base class.</span></span> <span data-ttu-id="67adc-283">基类方法使用已过时的方法在派生类中创建一个生成器， <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 以便与使用代码生成器的预先存在的提供程序兼容。</span><span class="sxs-lookup"><span data-stu-id="67adc-283">The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method for compatibility with preexisting providers that use code generators.</span></span> <span data-ttu-id="67adc-284">然后，基类方法调用实现中的等效方法 <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> 来执行此函数。</span><span class="sxs-lookup"><span data-stu-id="67adc-284">The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementation to perform this function.</span></span> <span data-ttu-id="67adc-285"><see cref="T:System.NotImplementedException" />如果从不使用代码生成器的代码提供程序调用基类方法，则将收到。</span><span class="sxs-lookup"><span data-stu-id="67adc-285">You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code generator.</span></span></para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromMember">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromMember (System.CodeDom.CodeTypeMember member, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromMember(class System.CodeDom.CodeTypeMember member, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromMember (member As CodeTypeMember, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromMember(System::CodeDom::CodeTypeMember ^ member, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromMember : System.CodeDom.CodeTypeMember * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromMember : System.CodeDom.CodeTypeMember * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromMember (member, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.CodeDom.CodeTypeMember" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="writer" Type="System.IO.TextWriter" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="member"><span data-ttu-id="67adc-286">一个 <see cref="T:System.CodeDom.CodeTypeMember" /> 对象，指示要为其生成代码的成员。</span><span class="sxs-lookup"><span data-stu-id="67adc-286">A <see cref="T:System.CodeDom.CodeTypeMember" /> object that indicates the member for which to generate code.</span></span></param>
        <param name="writer"><span data-ttu-id="67adc-287">输出代码将被发送到的 <see cref="T:System.IO.TextWriter" />。</span><span class="sxs-lookup"><span data-stu-id="67adc-287">The <see cref="T:System.IO.TextWriter" /> to which output code is sent.</span></span></param>
        <param name="options"><span data-ttu-id="67adc-288"><see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，指示用于生成代码的选项。</span><span class="sxs-lookup"><span data-stu-id="67adc-288">A <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> that indicates the options to use for generating code.</span></span></param>
        <summary><span data-ttu-id="67adc-289">为指定的代码文档对象模型 (CodeDOM) 成员声明生成代码，并使用指定的选项将代码发送到指定的文本编写器。</span><span class="sxs-lookup"><span data-stu-id="67adc-289">Generates code for the specified Code Document Object Model (CodeDOM) member declaration and sends it to the specified text writer, using the specified options.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67adc-290">基类实现引发 <xref:System.NotImplementedException> 。</span><span class="sxs-lookup"><span data-stu-id="67adc-290">The base class implementation throws a <xref:System.NotImplementedException>.</span></span> <span data-ttu-id="67adc-291"><xref:Microsoft.CSharp.CSharpCodeProvider.GenerateCodeFromMember%2A?displayProperty=nameWithType>有关描述此方法的实现的文档，请参阅。</span><span class="sxs-lookup"><span data-stu-id="67adc-291">See <xref:Microsoft.CSharp.CSharpCodeProvider.GenerateCodeFromMember%2A?displayProperty=nameWithType> for documentation describing an implementation of this method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67adc-292">下面的代码示例演示如何使用 <xref:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember%2A> 和类实现的方法 <xref:Microsoft.CSharp.CSharpCodeProvider> <xref:Microsoft.VisualBasic.VBCodeProvider> 。</span><span class="sxs-lookup"><span data-stu-id="67adc-292">The following code example shows the use of the <xref:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember%2A> method as implemented by the <xref:Microsoft.CSharp.CSharpCodeProvider> and <xref:Microsoft.VisualBasic.VBCodeProvider> classes.</span></span>  
  
 [!code-csharp[CodeDom_GenerateCodeFromMember#1](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_GenerateCodeFromMember/cs/program.cs#1)]
 [!code-vb[CodeDom_GenerateCodeFromMember#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_GenerateCodeFromMember/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="67adc-293">此方法不会在派生类中被重写。</span><span class="sxs-lookup"><span data-stu-id="67adc-293">This method is not overridden in a derived class.</span></span></exception>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeTypeMember" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromNamespace">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromNamespace (System.CodeDom.CodeNamespace codeNamespace, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromNamespace(class System.CodeDom.CodeNamespace codeNamespace, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromNamespace (codeNamespace As CodeNamespace, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromNamespace(System::CodeDom::CodeNamespace ^ codeNamespace, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromNamespace : System.CodeDom.CodeNamespace * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromNamespace : System.CodeDom.CodeNamespace * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromNamespace (codeNamespace, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codeNamespace" Type="System.CodeDom.CodeNamespace" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="writer" Type="System.IO.TextWriter" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="codeNamespace"><span data-ttu-id="67adc-294">一个 <see cref="T:System.CodeDom.CodeNamespace" /> 对象，指示要为其生成代码的命名空间。</span><span class="sxs-lookup"><span data-stu-id="67adc-294">A <see cref="T:System.CodeDom.CodeNamespace" /> object that indicates the namespace for which to generate code.</span></span></param>
        <param name="writer"><span data-ttu-id="67adc-295">输出代码将被发送到的 <see cref="T:System.IO.TextWriter" />。</span><span class="sxs-lookup"><span data-stu-id="67adc-295">The <see cref="T:System.IO.TextWriter" /> to which output code is sent.</span></span></param>
        <param name="options"><span data-ttu-id="67adc-296"><see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，指示用于生成代码的选项。</span><span class="sxs-lookup"><span data-stu-id="67adc-296">A <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> that indicates the options to use for generating code.</span></span></param>
        <summary><span data-ttu-id="67adc-297">为指定的代码文档对象模型 (CodeDOM) 命名空间生成代码，并使用指定的选项将代码发送到指定的文本编写器。</span><span class="sxs-lookup"><span data-stu-id="67adc-297">Generates code for the specified Code Document Object Model (CodeDOM) namespace and sends it to the specified text writer, using the specified options.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="67adc-298">在 .NET Framework 版本1.0 和1.1 中，此方法由 <xref:System.CodeDom.Compiler.ICodeGenerator> 提供程序的方法返回的实现提供 <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> 。</span><span class="sxs-lookup"><span data-stu-id="67adc-298">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method of the provider.</span></span> <span data-ttu-id="67adc-299">在版本2.0 中，可以直接在代码提供程序上调用此方法，即使代码提供程序未重写此方法。</span><span class="sxs-lookup"><span data-stu-id="67adc-299">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="67adc-300">如果代码提供程序不重写此方法，则 <xref:System.CodeDom.Compiler.ICodeGenerator> 由基类调用实现。</span><span class="sxs-lookup"><span data-stu-id="67adc-300">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="67adc-301">此方法和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法均不在派生类中重写。</span><span class="sxs-lookup"><span data-stu-id="67adc-301">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method is overridden in a derived class.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="67adc-302">如果重写此方法，则不能调用基类的相应方法。</span><span class="sxs-lookup"><span data-stu-id="67adc-302">If you override this method, you must not call the corresponding method of the base class.</span></span> <span data-ttu-id="67adc-303">基类方法使用已过时的方法在派生类中创建一个生成器， <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 以便与使用代码生成器的预先存在的提供程序兼容。</span><span class="sxs-lookup"><span data-stu-id="67adc-303">The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method for compatibility with preexisting providers that use code generators.</span></span> <span data-ttu-id="67adc-304">然后，基类方法调用实现中的等效方法 <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> 来执行此函数。</span><span class="sxs-lookup"><span data-stu-id="67adc-304">The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementation to perform this function.</span></span> <span data-ttu-id="67adc-305"><see cref="T:System.NotImplementedException" />如果从不使用代码生成器的代码提供程序调用基类方法，则将收到。</span><span class="sxs-lookup"><span data-stu-id="67adc-305">You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code generator.</span></span></para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeNamespace" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromStatement">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromStatement (System.CodeDom.CodeStatement statement, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromStatement(class System.CodeDom.CodeStatement statement, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromStatement (statement As CodeStatement, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromStatement(System::CodeDom::CodeStatement ^ statement, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromStatement : System.CodeDom.CodeStatement * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromStatement : System.CodeDom.CodeStatement * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromStatement (statement, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="statement" Type="System.CodeDom.CodeStatement" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="writer" Type="System.IO.TextWriter" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="statement"><span data-ttu-id="67adc-306"><see cref="T:System.CodeDom.CodeStatement" />，包含要为其生成代码的 CodeDOM 元素。</span><span class="sxs-lookup"><span data-stu-id="67adc-306">A <see cref="T:System.CodeDom.CodeStatement" /> containing the CodeDOM elements for which to generate code.</span></span></param>
        <param name="writer"><span data-ttu-id="67adc-307">输出代码将被发送到的 <see cref="T:System.IO.TextWriter" />。</span><span class="sxs-lookup"><span data-stu-id="67adc-307">The <see cref="T:System.IO.TextWriter" /> to which output code is sent.</span></span></param>
        <param name="options"><span data-ttu-id="67adc-308"><see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，指示用于生成代码的选项。</span><span class="sxs-lookup"><span data-stu-id="67adc-308">A <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> that indicates the options to use for generating code.</span></span></param>
        <summary><span data-ttu-id="67adc-309">为指定的代码文档对象模型 (CodeDOM) 语句生成代码，并使用指定的选项将代码发送到指定的文本编写器。</span><span class="sxs-lookup"><span data-stu-id="67adc-309">Generates code for the specified Code Document Object Model (CodeDOM) statement and sends it to the specified text writer, using the specified options.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="67adc-310">在 .NET Framework 版本1.0 和1.1 中，此方法由 <xref:System.CodeDom.Compiler.ICodeGenerator> 提供程序的方法返回的实现提供 <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> 。</span><span class="sxs-lookup"><span data-stu-id="67adc-310">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method of the provider.</span></span> <span data-ttu-id="67adc-311">在版本2.0 中，可以直接在代码提供程序上调用此方法，即使代码提供程序未重写此方法。</span><span class="sxs-lookup"><span data-stu-id="67adc-311">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="67adc-312">如果代码提供程序不重写此方法，则 <xref:System.CodeDom.Compiler.ICodeGenerator> 由基类调用实现。</span><span class="sxs-lookup"><span data-stu-id="67adc-312">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="67adc-313">此方法和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法均不在派生类中重写。</span><span class="sxs-lookup"><span data-stu-id="67adc-313">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method is overridden in a derived class.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="67adc-314">如果重写此方法，则不能调用基类的相应方法。</span><span class="sxs-lookup"><span data-stu-id="67adc-314">If you override this method, you must not call the corresponding method of the base class.</span></span> <span data-ttu-id="67adc-315">基类方法使用已过时的方法在派生类中创建一个生成器， <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 以便与使用代码生成器的预先存在的提供程序兼容。</span><span class="sxs-lookup"><span data-stu-id="67adc-315">The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method for compatibility with preexisting providers that use code generators.</span></span> <span data-ttu-id="67adc-316">然后，基类方法调用实现中的等效方法 <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> 来执行此函数。</span><span class="sxs-lookup"><span data-stu-id="67adc-316">The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementation to perform this function.</span></span> <span data-ttu-id="67adc-317"><see cref="T:System.NotImplementedException" />如果从不使用代码生成器的代码提供程序调用基类方法，则将收到。</span><span class="sxs-lookup"><span data-stu-id="67adc-317">You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code generator.</span></span></para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeStatement" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromType">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromType (System.CodeDom.CodeTypeDeclaration codeType, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromType(class System.CodeDom.CodeTypeDeclaration codeType, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromType (codeType As CodeTypeDeclaration, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromType(System::CodeDom::CodeTypeDeclaration ^ codeType, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromType : System.CodeDom.CodeTypeDeclaration * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromType : System.CodeDom.CodeTypeDeclaration * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromType (codeType, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codeType" Type="System.CodeDom.CodeTypeDeclaration" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="writer" Type="System.IO.TextWriter" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="codeType"><span data-ttu-id="67adc-318">一个 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 对象，指示要为其生成代码的类型。</span><span class="sxs-lookup"><span data-stu-id="67adc-318">A <see cref="T:System.CodeDom.CodeTypeDeclaration" /> object that indicates the type for which to generate code.</span></span></param>
        <param name="writer"><span data-ttu-id="67adc-319">输出代码将被发送到的 <see cref="T:System.IO.TextWriter" />。</span><span class="sxs-lookup"><span data-stu-id="67adc-319">The <see cref="T:System.IO.TextWriter" /> to which output code is sent.</span></span></param>
        <param name="options"><span data-ttu-id="67adc-320"><see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，指示用于生成代码的选项。</span><span class="sxs-lookup"><span data-stu-id="67adc-320">A <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> that indicates the options to use for generating code.</span></span></param>
        <summary><span data-ttu-id="67adc-321">为指定的代码文档对象模型 (CodeDOM) 类型声明生成代码，并使用指定的选项将代码发送到指定的文本编写器。</span><span class="sxs-lookup"><span data-stu-id="67adc-321">Generates code for the specified Code Document Object Model (CodeDOM) type declaration and sends it to the specified text writer, using the specified options.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="67adc-322">在 .NET Framework 版本1.0 和1.1 中，此方法由 <xref:System.CodeDom.Compiler.ICodeGenerator> 提供程序的方法返回的实现提供 <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> 。</span><span class="sxs-lookup"><span data-stu-id="67adc-322">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method of the provider.</span></span> <span data-ttu-id="67adc-323">在版本2.0 中，可以直接在代码提供程序上调用此方法，即使代码提供程序未重写此方法。</span><span class="sxs-lookup"><span data-stu-id="67adc-323">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="67adc-324">如果代码提供程序不重写此方法，则 <xref:System.CodeDom.Compiler.ICodeGenerator> 由基类调用实现。</span><span class="sxs-lookup"><span data-stu-id="67adc-324">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="67adc-325">此方法和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法均不在派生类中重写。</span><span class="sxs-lookup"><span data-stu-id="67adc-325">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method is overridden in a derived class.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="67adc-326">如果重写此方法，则不能调用基类的相应方法。</span><span class="sxs-lookup"><span data-stu-id="67adc-326">If you override this method, you must not call the corresponding method of the base class.</span></span> <span data-ttu-id="67adc-327">基类方法使用已过时的方法在派生类中创建一个生成器， <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 以便与使用代码生成器的预先存在的提供程序兼容。</span><span class="sxs-lookup"><span data-stu-id="67adc-327">The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method for compatibility with preexisting providers that use code generators.</span></span> <span data-ttu-id="67adc-328">然后，基类方法调用实现中的等效方法 <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> 来执行此函数。</span><span class="sxs-lookup"><span data-stu-id="67adc-328">The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementation to perform this function.</span></span> <span data-ttu-id="67adc-329"><see cref="T:System.NotImplementedException" />如果从不使用代码生成器的代码提供程序调用基类方法，则将收到。</span><span class="sxs-lookup"><span data-stu-id="67adc-329">You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code generator.</span></span></para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GetAllCompilerInfo">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CompilerInfo[] GetAllCompilerInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CompilerInfo[] GetAllCompilerInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAllCompilerInfo () As CompilerInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::CodeDom::Compiler::CompilerInfo ^&gt; ^ GetAllCompilerInfo();" />
      <MemberSignature Language="F#" Value="static member GetAllCompilerInfo : unit -&gt; System.CodeDom.Compiler.CompilerInfo[]" Usage="System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="67adc-330">返回此计算机的语言提供程序和编译器配置设置。</span><span class="sxs-lookup"><span data-stu-id="67adc-330">Returns the language provider and compiler configuration settings for this computer.</span></span></summary>
        <returns><span data-ttu-id="67adc-331">一个 <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 类型的数组，表示所有配置的 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实现的设置。</span><span class="sxs-lookup"><span data-stu-id="67adc-331">An array of type <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> representing the settings of all configured <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> implementations.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67adc-332">使用 <xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A> 方法可枚举计算机上的语言提供程序设置。</span><span class="sxs-lookup"><span data-stu-id="67adc-332">Use the <xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A> method to enumerate the language provider settings on a computer.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67adc-333">在中 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)] ，不会在[ &lt; system.web &gt; 元素](/dotnet/framework/configure-apps/file-schema/compiler/system-codedom-element)编译器配置节中指定 .NET Framework 提供的默认语言提供程序，因此，此方法将返回在配置文件中指定的默认提供程序和任何指定的信息。</span><span class="sxs-lookup"><span data-stu-id="67adc-333">In the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], the default language providers supplied by the .NET Framework are not specified in the [&lt;system.codedom&gt; Element](/dotnet/framework/configure-apps/file-schema/compiler/system-codedom-element) compiler configuration section and cannot be removed, so this method returns information about the default providers and any specified in the configuration file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67adc-334">下面的代码示例枚举计算机上的语言提供程序，并显示每个语言提供程序的配置和编译器设置。</span><span class="sxs-lookup"><span data-stu-id="67adc-334">The following code example enumerates the language providers on the computer and displays the configuration and compiler settings for each language provider.</span></span> <span data-ttu-id="67adc-335">此代码示例是为类提供的更大示例的一部分 <xref:System.CodeDom.Compiler.CompilerInfo> 。</span><span class="sxs-lookup"><span data-stu-id="67adc-335">This code example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CompilerInfo> class.</span></span>  
  
 [!code-cpp[CodeDom_CompilerInfo#8](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#8)]
 [!code-csharp[CodeDom_CompilerInfo#8](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#8)]
 [!code-vb[CodeDom_CompilerInfo#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="67adc-336">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="67adc-336">The caller does not have the required permission.</span></span></exception>
        <altmember cref="T:System.CodeDom.Compiler.CompilerInfo" />
        <related type="Article" href="/dotnet/framework/configure-apps/file-schema/compiler/"><span data-ttu-id="67adc-337">编译器和语言提供程序设置架构</span><span class="sxs-lookup"><span data-stu-id="67adc-337">Compiler and Language Provider Settings Schema</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetCompilerInfo">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CompilerInfo GetCompilerInfo (string language);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CompilerInfo GetCompilerInfo(string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCompilerInfo (language As String) As CompilerInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::Compiler::CompilerInfo ^ GetCompilerInfo(System::String ^ language);" />
      <MemberSignature Language="F#" Value="static member GetCompilerInfo : string -&gt; System.CodeDom.Compiler.CompilerInfo" Usage="System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo language" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="language"><span data-ttu-id="67adc-338">语言名称。</span><span class="sxs-lookup"><span data-stu-id="67adc-338">A language name.</span></span></param>
        <summary><span data-ttu-id="67adc-339">返回指定语言的语言提供程序和编译器配置设置。</span><span class="sxs-lookup"><span data-stu-id="67adc-339">Returns the language provider and compiler configuration settings for the specified language.</span></span></summary>
        <returns><span data-ttu-id="67adc-340">一个 <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 对象，由已配置的 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实现的设置填充。</span><span class="sxs-lookup"><span data-stu-id="67adc-340">A <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> object populated with settings of the configured <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> implementation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67adc-341">计算机配置文件中的[ &lt; system.object &gt; 元素](/dotnet/framework/configure-apps/file-schema/compiler/system-codedom-element)包含计算机上每个实现的语言提供程序和编译器配置设置 <xref:System.CodeDom.Compiler.CodeDomProvider> 。</span><span class="sxs-lookup"><span data-stu-id="67adc-341">The [&lt;system.codedom&gt; Element](/dotnet/framework/configure-apps/file-schema/compiler/system-codedom-element) in the machine configuration file contains the language provider and compiler configuration settings for each <xref:System.CodeDom.Compiler.CodeDomProvider> implementation on the computer.</span></span> <span data-ttu-id="67adc-342">有关计算机配置文件的信息，请参阅 [配置应用](/dotnet/framework/configure-apps/)中的计算机配置文件部分。</span><span class="sxs-lookup"><span data-stu-id="67adc-342">For information about machine configuration files, see the Machine Configuration Files section in [Configuring Apps](/dotnet/framework/configure-apps/).</span></span> <span data-ttu-id="67adc-343"><xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A>方法搜索指定语言名称的每个提供程序配置元素。</span><span class="sxs-lookup"><span data-stu-id="67adc-343">The <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A> method searches each provider configuration element for the specified language name.</span></span> <span data-ttu-id="67adc-344">返回 <xref:System.CodeDom.Compiler.CompilerInfo> 的实例包含已配置的语言提供程序和编译器设置。</span><span class="sxs-lookup"><span data-stu-id="67adc-344">The returned <xref:System.CodeDom.Compiler.CompilerInfo> instance contains the configured language provider and compiler settings.</span></span>  
  
 <span data-ttu-id="67adc-345"><xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A>方法检查是否至少有一个提供程序实现支持特定语言。</span><span class="sxs-lookup"><span data-stu-id="67adc-345">The <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> method checks whether at least one provider implementation supports a specific language.</span></span> <span data-ttu-id="67adc-346">在将语言名称传递给之前，可以使用对 <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> 其进行验证 <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A> 。</span><span class="sxs-lookup"><span data-stu-id="67adc-346">You can validate a language name using <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> before passing it to <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A>.</span></span> <span data-ttu-id="67adc-347">这会阻止在 <xref:System.Configuration.ConfigurationException?displayProperty=nameWithType> 访问 <xref:System.CodeDom.Compiler.CompilerInfo> 不受支持的语言名称的实例时引发。</span><span class="sxs-lookup"><span data-stu-id="67adc-347">This prevents throwing a <xref:System.Configuration.ConfigurationException?displayProperty=nameWithType> when you access the <xref:System.CodeDom.Compiler.CompilerInfo> instance for an unsupported language name.</span></span>  
  
 <span data-ttu-id="67adc-348">如果为输入语言名称配置了多个提供程序实现，则将 <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A> 返回最后一个匹配提供程序配置元素中的设置。</span><span class="sxs-lookup"><span data-stu-id="67adc-348">If more than one provider implementation is configured for the input language name, <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A> returns the settings from the last matching provider configuration element.</span></span>  
  
 <span data-ttu-id="67adc-349">语言名称不区分大小写。</span><span class="sxs-lookup"><span data-stu-id="67adc-349">Language names are case-insensitive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67adc-350">下面的代码示例确定 <xref:System.CodeDom.Compiler.CodeDomProvider> 输入语言的实现，并显示语言提供程序的配置设置。</span><span class="sxs-lookup"><span data-stu-id="67adc-350">The following code example determines the <xref:System.CodeDom.Compiler.CodeDomProvider> implementation for an input language and displays the configured settings for the language provider.</span></span> <span data-ttu-id="67adc-351">此代码示例是为类提供的更大示例的一部分 <xref:System.CodeDom.Compiler.CompilerInfo> 。</span><span class="sxs-lookup"><span data-stu-id="67adc-351">This code example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CompilerInfo> class.</span></span>  
  
 [!code-cpp[CodeDom_CompilerInfo#6](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#6)]
 [!code-csharp[CodeDom_CompilerInfo#6](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#6)]
 [!code-vb[CodeDom_CompilerInfo#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationException"><span data-ttu-id="67adc-352"><paramref name="language" /> 在此计算机上没有已配置的提供程序。</span><span class="sxs-lookup"><span data-stu-id="67adc-352">The <paramref name="language" /> does not have a configured provider on this computer.</span></span></exception>
        <exception cref="T:System.Configuration.ConfigurationErrorsException"><span data-ttu-id="67adc-353"><paramref name="language" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="67adc-353">The <paramref name="language" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="67adc-354">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="67adc-354">The caller does not have the required permission.</span></span></exception>
        <altmember cref="T:System.CodeDom.Compiler.CompilerInfo" />
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)" />
        <related type="Article" href="/dotnet/framework/configure-apps/file-schema/compiler/"><span data-ttu-id="67adc-355">编译器和语言提供程序设置架构</span><span class="sxs-lookup"><span data-stu-id="67adc-355">Compiler and Language Provider Settings Schema</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetConverter">
      <MemberSignature Language="C#" Value="public virtual System.ComponentModel.TypeConverter GetConverter (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ComponentModel.TypeConverter GetConverter(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetConverter(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetConverter (type As Type) As TypeConverter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::ComponentModel::TypeConverter ^ GetConverter(Type ^ type);" />
      <MemberSignature Language="F#" Value="abstract member GetConverter : Type -&gt; System.ComponentModel.TypeConverter&#xA;override this.GetConverter : Type -&gt; System.ComponentModel.TypeConverter" Usage="codeDomProvider.GetConverter type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.TypeConverter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="67adc-356">要为其检索类型转换器的对象类型。</span><span class="sxs-lookup"><span data-stu-id="67adc-356">The type of object to retrieve a type converter for.</span></span></param>
        <summary><span data-ttu-id="67adc-357">获取指定数据类型的 <see cref="T:System.ComponentModel.TypeConverter" />。</span><span class="sxs-lookup"><span data-stu-id="67adc-357">Gets a <see cref="T:System.ComponentModel.TypeConverter" /> for the specified data type.</span></span></summary>
        <returns><span data-ttu-id="67adc-358">指定类型的 <see cref="T:System.ComponentModel.TypeConverter" />；如果无法找到指定类型的 <see cref="T:System.ComponentModel.TypeConverter" />，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="67adc-358">A <see cref="T:System.ComponentModel.TypeConverter" /> for the specified type, or <see langword="null" /> if a <see cref="T:System.ComponentModel.TypeConverter" /> for the specified type cannot be found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67adc-359">派生类可以重写此方法，以便为特定的数据类型提供类型转换器的特定类型。</span><span class="sxs-lookup"><span data-stu-id="67adc-359">A derived class can override this method to provide specific types of type converters for specific data types.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.TypeConverter" />
      </Docs>
    </Member>
    <Member MemberName="GetLanguageFromExtension">
      <MemberSignature Language="C#" Value="public static string GetLanguageFromExtension (string extension);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetLanguageFromExtension(string extension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetLanguageFromExtension (extension As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetLanguageFromExtension(System::String ^ extension);" />
      <MemberSignature Language="F#" Value="static member GetLanguageFromExtension : string -&gt; string" Usage="System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension extension" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extension" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="extension"><span data-ttu-id="67adc-360">文件扩展名。</span><span class="sxs-lookup"><span data-stu-id="67adc-360">A file name extension.</span></span></param>
        <summary><span data-ttu-id="67adc-361">返回与指定文件扩展名关联的语言名称，如 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 编译器配置节中所配置的那样。</span><span class="sxs-lookup"><span data-stu-id="67adc-361">Returns a language name associated with the specified file name extension, as configured in the <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> compiler configuration section.</span></span></summary>
        <returns><span data-ttu-id="67adc-362">与文件扩展名关联的语言名称，如 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 编译器配置设置中所配置的那样。</span><span class="sxs-lookup"><span data-stu-id="67adc-362">A language name associated with the file name extension, as configured in the <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> compiler configuration settings.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67adc-363">计算机配置文件 ( # A0) 包含计算机上每个实现的语言提供程序和编译器配置[ &lt; &gt; 设置。](/dotnet/framework/configure-apps/file-schema/compiler/system-codedom-element) <xref:System.CodeDom.Compiler.CodeDomProvider></span><span class="sxs-lookup"><span data-stu-id="67adc-363">The [&lt;system.codedom&gt; Element](/dotnet/framework/configure-apps/file-schema/compiler/system-codedom-element) in the machine configuration file (Machine.config) contains the language provider and compiler configuration settings for each <xref:System.CodeDom.Compiler.CodeDomProvider> implementation on the computer.</span></span> <span data-ttu-id="67adc-364"><xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A>方法在每个提供程序配置元素中搜索指定的文件扩展名。</span><span class="sxs-lookup"><span data-stu-id="67adc-364">The <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A> method searches each provider configuration element for the specified file name extension.</span></span>  
  
 <span data-ttu-id="67adc-365"><xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A>方法检查是否至少有一个提供程序实现支持特定的文件扩展名。</span><span class="sxs-lookup"><span data-stu-id="67adc-365">The <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A> method checks whether at least one provider implementation supports a specific file name extension.</span></span> <span data-ttu-id="67adc-366">在将文件扩展名传递到之前，可以使用对 <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A> 其进行验证 <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A> 。</span><span class="sxs-lookup"><span data-stu-id="67adc-366">You can validate a file name extension using <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A> before passing it to <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A>.</span></span> <span data-ttu-id="67adc-367">这会阻止 <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A> <xref:System.Configuration.ConfigurationException?displayProperty=nameWithType> 为不受支持的文件扩展名引发。</span><span class="sxs-lookup"><span data-stu-id="67adc-367">This prevents <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A> from throwing a <xref:System.Configuration.ConfigurationException?displayProperty=nameWithType> for an unsupported file name extension.</span></span>  
  
 <span data-ttu-id="67adc-368">如果提供程序实现支持输入文件扩展名，并且为该提供程序配置了多个受支持的语言，则将 <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A> 返回该提供程序的第一个语言名称。</span><span class="sxs-lookup"><span data-stu-id="67adc-368">If a provider implementation supports the input file name extension, and there are multiple supported languages configured for that provider, then <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A> returns the first language name for that provider.</span></span> <span data-ttu-id="67adc-369">如果为输入文件扩展名配置了多个提供程序实现，则将 <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A> 返回最后一个匹配提供程序配置元素中的语言名称。</span><span class="sxs-lookup"><span data-stu-id="67adc-369">If more than one provider implementation is configured for the input file name extension, <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A> returns the language name from the last matching provider configuration element.</span></span>  
  
 <span data-ttu-id="67adc-370">语言名称和文件扩展名不区分大小写。</span><span class="sxs-lookup"><span data-stu-id="67adc-370">Language names and file name extensions are case-insensitive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67adc-371">下面的代码示例确定 <xref:System.CodeDom.Compiler.CodeDomProvider> 输入文件扩展名的实现并显示语言提供程序的配置设置。</span><span class="sxs-lookup"><span data-stu-id="67adc-371">The following code example determines the <xref:System.CodeDom.Compiler.CodeDomProvider> implementation for an input file name extension and displays the configured settings for the language provider.</span></span> <span data-ttu-id="67adc-372">此代码示例是为类提供的更大示例的一部分 <xref:System.CodeDom.Compiler.CompilerInfo> 。</span><span class="sxs-lookup"><span data-stu-id="67adc-372">This code example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CompilerInfo> class.</span></span>  
  
 [!code-cpp[CodeDom_CompilerInfo#5](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#5)]
 [!code-csharp[CodeDom_CompilerInfo#5](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#5)]
 [!code-vb[CodeDom_CompilerInfo#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationException"><span data-ttu-id="67adc-373"><paramref name="extension" /> 在此计算机上没有已配置的语言提供程序。</span><span class="sxs-lookup"><span data-stu-id="67adc-373">The <paramref name="extension" /> does not have a configured language provider on this computer.</span></span></exception>
        <exception cref="T:System.Configuration.ConfigurationErrorsException"><span data-ttu-id="67adc-374"><paramref name="extension" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="67adc-374">The <paramref name="extension" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="67adc-375">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="67adc-375">The caller does not have the required permission.</span></span></exception>
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)" />
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)" />
        <related type="Article" href="/dotnet/framework/configure-apps/file-schema/compiler/"><span data-ttu-id="67adc-376">编译器和语言提供程序设置架构</span><span class="sxs-lookup"><span data-stu-id="67adc-376">Compiler and Language Provider Settings Schema</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetTypeOutput">
      <MemberSignature Language="C#" Value="public virtual string GetTypeOutput (System.CodeDom.CodeTypeReference type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetTypeOutput(class System.CodeDom.CodeTypeReference type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTypeOutput (type As CodeTypeReference) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetTypeOutput(System::CodeDom::CodeTypeReference ^ type);" />
      <MemberSignature Language="F#" Value="abstract member GetTypeOutput : System.CodeDom.CodeTypeReference -&gt; string&#xA;override this.GetTypeOutput : System.CodeDom.CodeTypeReference -&gt; string" Usage="codeDomProvider.GetTypeOutput type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.CodeDom.CodeTypeReference" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="67adc-377">指示返回类型的 <see cref="T:System.CodeDom.CodeTypeReference" />。</span><span class="sxs-lookup"><span data-stu-id="67adc-377">A <see cref="T:System.CodeDom.CodeTypeReference" /> that indicates the type to return.</span></span></param>
        <summary><span data-ttu-id="67adc-378">获取由指定的 <see cref="T:System.CodeDom.CodeTypeReference" /> 指示的类型。</span><span class="sxs-lookup"><span data-stu-id="67adc-378">Gets the type indicated by the specified <see cref="T:System.CodeDom.CodeTypeReference" />.</span></span></summary>
        <returns><span data-ttu-id="67adc-379">指定类型的文本表示形式，针对此代码生成器生成代码时所用的语言进行了格式设置。</span><span class="sxs-lookup"><span data-stu-id="67adc-379">A text representation of the specified type, formatted for the language in which code is generated by this code generator.</span></span> <span data-ttu-id="67adc-380">例如，在 Visual Basic 中，为 <see cref="T:System.CodeDom.CodeTypeReference" /> 类型传入 <see cref="T:System.Int32" /> 将返回“Integer”。</span><span class="sxs-lookup"><span data-stu-id="67adc-380">In Visual Basic, for example, passing in a <see cref="T:System.CodeDom.CodeTypeReference" /> for the <see cref="T:System.Int32" /> type will return "Integer".</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="67adc-381">在 .NET Framework 版本1.0 和1.1 中，此方法由 <xref:System.CodeDom.Compiler.ICodeGenerator> 提供程序的方法返回的实现提供 <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> 。</span><span class="sxs-lookup"><span data-stu-id="67adc-381">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method of the provider.</span></span> <span data-ttu-id="67adc-382">在版本2.0 中，可以直接在代码提供程序上调用此方法，即使代码提供程序未重写此方法。</span><span class="sxs-lookup"><span data-stu-id="67adc-382">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="67adc-383">如果代码提供程序不重写此方法，则 <xref:System.CodeDom.Compiler.ICodeGenerator> 由基类调用实现。</span><span class="sxs-lookup"><span data-stu-id="67adc-383">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="67adc-384">此方法和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法均不在派生类中重写。</span><span class="sxs-lookup"><span data-stu-id="67adc-384">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method is overridden in a derived class.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="67adc-385">如果重写此方法，则不能调用基类的相应方法。</span><span class="sxs-lookup"><span data-stu-id="67adc-385">If you override this method, you must not call the corresponding method of the base class.</span></span> <span data-ttu-id="67adc-386">基类方法使用已过时的方法在派生类中创建一个生成器， <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 以便与使用代码生成器的预先存在的提供程序兼容。</span><span class="sxs-lookup"><span data-stu-id="67adc-386">The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method for compatibility with preexisting providers that use code generators.</span></span> <span data-ttu-id="67adc-387">然后，基类方法调用实现中的等效方法 <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> 来执行此函数。</span><span class="sxs-lookup"><span data-stu-id="67adc-387">The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementation to perform this function.</span></span> <span data-ttu-id="67adc-388"><see cref="T:System.NotImplementedException" />如果从不使用代码生成器的代码提供程序调用基类方法，则将收到。</span><span class="sxs-lookup"><span data-stu-id="67adc-388">You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code generator.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="IsDefinedExtension">
      <MemberSignature Language="C#" Value="public static bool IsDefinedExtension (string extension);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefinedExtension(string extension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDefinedExtension (extension As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDefinedExtension(System::String ^ extension);" />
      <MemberSignature Language="F#" Value="static member IsDefinedExtension : string -&gt; bool" Usage="System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension extension" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extension" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="extension"><span data-ttu-id="67adc-389">文件扩展名。</span><span class="sxs-lookup"><span data-stu-id="67adc-389">A file name extension.</span></span></param>
        <summary><span data-ttu-id="67adc-390">测试文件扩展名是否在计算机上配置了关联的 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实现。</span><span class="sxs-lookup"><span data-stu-id="67adc-390">Tests whether a file name extension has an associated <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> implementation configured on the computer.</span></span></summary>
        <returns><span data-ttu-id="67adc-391">如果为指定的文件扩展名配置了 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实现，则为 <see langword="true" />；否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67adc-391"><see langword="true" /> if a <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> implementation is configured for the specified file name extension; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67adc-392">计算机配置文件 ( # A0) 包含计算机上每个实现的语言提供程序和编译器配置[ &lt; &gt; 设置。](/dotnet/framework/configure-apps/file-schema/compiler/system-codedom-element) <xref:System.CodeDom.Compiler.CodeDomProvider></span><span class="sxs-lookup"><span data-stu-id="67adc-392">The [&lt;system.codedom&gt; Element](/dotnet/framework/configure-apps/file-schema/compiler/system-codedom-element) in the machine configuration file (Machine.config) contains the language provider and compiler configuration settings for each <xref:System.CodeDom.Compiler.CodeDomProvider> implementation on the computer.</span></span> <span data-ttu-id="67adc-393"><xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A>方法在提供程序配置元素中搜索指定的文件扩展名。</span><span class="sxs-lookup"><span data-stu-id="67adc-393">The <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A> method searches the provider configuration elements for the specified file name extension.</span></span>  
  
 <span data-ttu-id="67adc-394">文件扩展名不区分大小写。</span><span class="sxs-lookup"><span data-stu-id="67adc-394">File name extensions are case-insensitive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67adc-395">下面的代码示例确定 <xref:System.CodeDom.Compiler.CodeDomProvider> 输入文件扩展名的实现并显示语言提供程序的配置设置。</span><span class="sxs-lookup"><span data-stu-id="67adc-395">The following code example determines the <xref:System.CodeDom.Compiler.CodeDomProvider> implementation for an input file name extension and displays the configured settings for the language provider.</span></span> <span data-ttu-id="67adc-396">此代码示例是为类提供的更大示例的一部分 <xref:System.CodeDom.Compiler.CompilerInfo> 。</span><span class="sxs-lookup"><span data-stu-id="67adc-396">This code example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CompilerInfo> class.</span></span>  
  
 [!code-cpp[CodeDom_CompilerInfo#5](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#5)]
 [!code-csharp[CodeDom_CompilerInfo#5](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#5)]
 [!code-vb[CodeDom_CompilerInfo#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="67adc-397"><paramref name="extension" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="67adc-397">The <paramref name="extension" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="67adc-398">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="67adc-398">The caller does not have the required permission.</span></span></exception>
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)" />
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)" />
        <related type="Article" href="/dotnet/framework/configure-apps/file-schema/compiler/"><span data-ttu-id="67adc-399">编译器和语言提供程序设置架构</span><span class="sxs-lookup"><span data-stu-id="67adc-399">Compiler and Language Provider Settings Schema</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsDefinedLanguage">
      <MemberSignature Language="C#" Value="public static bool IsDefinedLanguage (string language);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefinedLanguage(string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDefinedLanguage (language As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDefinedLanguage(System::String ^ language);" />
      <MemberSignature Language="F#" Value="static member IsDefinedLanguage : string -&gt; bool" Usage="System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage language" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="language"><span data-ttu-id="67adc-400">语言名称。</span><span class="sxs-lookup"><span data-stu-id="67adc-400">The language name.</span></span></param>
        <summary><span data-ttu-id="67adc-401">测试某语言是否已在计算机上配置了 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实现。</span><span class="sxs-lookup"><span data-stu-id="67adc-401">Tests whether a language has a <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> implementation configured on the computer.</span></span></summary>
        <returns><span data-ttu-id="67adc-402">如果为指定语言配置了 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实现，则为 <see langword="true" />；否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67adc-402"><see langword="true" /> if a <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> implementation is configured for the specified language; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67adc-403">计算机配置文件 ( # A0) 包含计算机上每个实现的语言提供程序和编译器配置[ &lt; &gt; 设置。](/dotnet/framework/configure-apps/file-schema/compiler/system-codedom-element) <xref:System.CodeDom.Compiler.CodeDomProvider></span><span class="sxs-lookup"><span data-stu-id="67adc-403">The [&lt;system.codedom&gt; Element](/dotnet/framework/configure-apps/file-schema/compiler/system-codedom-element) in the machine configuration file (Machine.config) contains the language provider and compiler configuration settings for each <xref:System.CodeDom.Compiler.CodeDomProvider> implementation on the computer.</span></span> <span data-ttu-id="67adc-404"><xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A>方法在提供程序配置元素中搜索指定的语言名称。</span><span class="sxs-lookup"><span data-stu-id="67adc-404">The <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> method searches the provider configuration elements for the specified language name.</span></span>  
  
 <span data-ttu-id="67adc-405">语言名称不区分大小写。</span><span class="sxs-lookup"><span data-stu-id="67adc-405">Language names are case-insensitive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67adc-406">下面的代码示例确定 <xref:System.CodeDom.Compiler.CodeDomProvider> 输入语言的实现，并显示语言提供程序的配置设置。</span><span class="sxs-lookup"><span data-stu-id="67adc-406">The following code example determines the <xref:System.CodeDom.Compiler.CodeDomProvider> implementation for an input language and displays the configured settings for the language provider.</span></span> <span data-ttu-id="67adc-407">此代码示例是为类提供的更大示例的一部分 <xref:System.CodeDom.Compiler.CompilerInfo> 。</span><span class="sxs-lookup"><span data-stu-id="67adc-407">This code example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CompilerInfo> class.</span></span>  
  
 [!code-cpp[CodeDom_CompilerInfo#6](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#6)]
 [!code-csharp[CodeDom_CompilerInfo#6](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#6)]
 [!code-vb[CodeDom_CompilerInfo#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="67adc-408"><paramref name="language" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="67adc-408">The <paramref name="language" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="67adc-409">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="67adc-409">The caller does not have the required permission.</span></span></exception>
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)" />
        <related type="Article" href="/dotnet/framework/configure-apps/file-schema/compiler/"><span data-ttu-id="67adc-410">编译器和语言提供程序设置架构</span><span class="sxs-lookup"><span data-stu-id="67adc-410">Compiler and Language Provider Settings Schema</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsValidIdentifier">
      <MemberSignature Language="C#" Value="public virtual bool IsValidIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsValidIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsValidIdentifier (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsValidIdentifier(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member IsValidIdentifier : string -&gt; bool&#xA;override this.IsValidIdentifier : string -&gt; bool" Usage="codeDomProvider.IsValidIdentifier value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="67adc-411">要验证为一个有效标识符的值。</span><span class="sxs-lookup"><span data-stu-id="67adc-411">The value to verify as a valid identifier.</span></span></param>
        <summary><span data-ttu-id="67adc-412">返回一个值，该值指示指定的值是否是当前语言的有效标识符。</span><span class="sxs-lookup"><span data-stu-id="67adc-412">Returns a value that indicates whether the specified value is a valid identifier for the current language.</span></span></summary>
        <returns><span data-ttu-id="67adc-413">如果 <paramref name="value" /> 参数是有效标识符，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67adc-413"><see langword="true" /> if the <paramref name="value" /> parameter is a valid identifier; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67adc-414">此方法测试标识符是否有效。</span><span class="sxs-lookup"><span data-stu-id="67adc-414">This method tests whether an identifier is valid.</span></span> <span data-ttu-id="67adc-415"><xref:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier%2A>方法是特定于提供程序的。</span><span class="sxs-lookup"><span data-stu-id="67adc-415">The <xref:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier%2A> method is provider specific.</span></span> <span data-ttu-id="67adc-416">对于一个提供程序有效的标识符可能对其他提供程序无效。</span><span class="sxs-lookup"><span data-stu-id="67adc-416">Identifiers that are valid for one provider might not be valid for other providers.</span></span> <span data-ttu-id="67adc-417">如果 `value` 包含 ASCII 字符范围之外的字符，请检查可用于编译代码的所有语言的标识符。</span><span class="sxs-lookup"><span data-stu-id="67adc-417">If `value` contains characters outside of the ASCII character range, check the identifier for all the languages that might be used to compile the code.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67adc-418">在 .NET Framework 版本1.0 和1.1 中，此方法由 <xref:System.CodeDom.Compiler.ICodeGenerator> 提供程序的方法返回的实现提供 <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> 。</span><span class="sxs-lookup"><span data-stu-id="67adc-418">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method of the provider.</span></span> <span data-ttu-id="67adc-419">在版本2.0 中，可以直接在代码提供程序上调用此方法，即使代码提供程序未重写此方法。</span><span class="sxs-lookup"><span data-stu-id="67adc-419">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="67adc-420">如果代码提供程序不重写此方法，则 <xref:System.CodeDom.Compiler.ICodeGenerator> 由基类调用实现。</span><span class="sxs-lookup"><span data-stu-id="67adc-420">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="67adc-421">此方法和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法均不在派生类中重写。</span><span class="sxs-lookup"><span data-stu-id="67adc-421">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method is overridden in a derived class.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="67adc-422">当 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)" /> 在派生类中重写时，将方法设计为 <see langword="true" /> 仅当值符合语言的规则并且不与关键字冲突时返回。</span><span class="sxs-lookup"><span data-stu-id="67adc-422">When overriding <see cref="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)" /> in a derived class, design the method to return <see langword="true" /> only if the value fits the rules of the language and does not conflict with a keyword.</span></span>  
  
<span data-ttu-id="67adc-423">如果重写此方法，则不能调用基类的相应方法。</span><span class="sxs-lookup"><span data-stu-id="67adc-423">If you override this method, you must not call the corresponding method of the base class.</span></span> <span data-ttu-id="67adc-424">基类方法使用已过时的方法在派生类中创建一个生成器， <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 以便与使用代码生成器的预先存在的提供程序兼容。</span><span class="sxs-lookup"><span data-stu-id="67adc-424">The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method for compatibility with preexisting providers that use code generators.</span></span> <span data-ttu-id="67adc-425">然后，基类方法调用实现中的等效方法 <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> 来执行此函数。</span><span class="sxs-lookup"><span data-stu-id="67adc-425">The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementation to perform this function.</span></span> <span data-ttu-id="67adc-426"><see cref="T:System.NotImplementedException" />如果从不使用代码生成器的代码提供程序调用基类方法，则将收到。</span><span class="sxs-lookup"><span data-stu-id="67adc-426">You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code generator.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="LanguageOptions">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.LanguageOptions LanguageOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.CodeDom.Compiler.LanguageOptions LanguageOptions" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CodeDomProvider.LanguageOptions" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property LanguageOptions As LanguageOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::CodeDom::Compiler::LanguageOptions LanguageOptions { System::CodeDom::Compiler::LanguageOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.LanguageOptions : System.CodeDom.Compiler.LanguageOptions" Usage="System.CodeDom.Compiler.CodeDomProvider.LanguageOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.LanguageOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67adc-427">获取语言功能标识符。</span><span class="sxs-lookup"><span data-stu-id="67adc-427">Gets a language features identifier.</span></span></summary>
        <value><span data-ttu-id="67adc-428">指示语言的特殊功能的 <see cref="T:System.CodeDom.Compiler.LanguageOptions" />。</span><span class="sxs-lookup"><span data-stu-id="67adc-428">A <see cref="T:System.CodeDom.Compiler.LanguageOptions" /> that indicates special features of the language.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.CodeCompileUnit Parse (System.IO.TextReader codeStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.CodeCompileUnit Parse(class System.IO.TextReader codeStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Parse (codeStream As TextReader) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::CodeCompileUnit ^ Parse(System::IO::TextReader ^ codeStream);" />
      <MemberSignature Language="F#" Value="abstract member Parse : System.IO.TextReader -&gt; System.CodeDom.CodeCompileUnit&#xA;override this.Parse : System.IO.TextReader -&gt; System.CodeDom.CodeCompileUnit" Usage="codeDomProvider.Parse codeStream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codeStream" Type="System.IO.TextReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="codeStream"><span data-ttu-id="67adc-429">用于读取待分析代码的 <see cref="T:System.IO.TextReader" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="67adc-429">A <see cref="T:System.IO.TextReader" /> object that is used to read the code to be parsed.</span></span></param>
        <summary><span data-ttu-id="67adc-430">将从指定文本流读取的代码编译进 <see cref="T:System.CodeDom.CodeCompileUnit" />。</span><span class="sxs-lookup"><span data-stu-id="67adc-430">Compiles the code read from the specified text stream into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span></span></summary>
        <returns><span data-ttu-id="67adc-431"><see cref="T:System.CodeDom.CodeCompileUnit" />，包含已分析代码的表示形式。</span><span class="sxs-lookup"><span data-stu-id="67adc-431">A <see cref="T:System.CodeDom.CodeCompileUnit" /> that contains a representation of the parsed code.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="67adc-432">在 .NET Framework 版本1.0 和1.1 中，此方法由 <xref:System.CodeDom.Compiler.ICodeParser> 提供程序的方法返回的实现提供 <xref:System.CodeDom.Compiler.CodeDomProvider.CreateParser%2A> 。</span><span class="sxs-lookup"><span data-stu-id="67adc-432">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeParser> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateParser%2A> method of the provider.</span></span> <span data-ttu-id="67adc-433">在版本2.0 中，可以直接在代码提供程序上调用此方法，即使代码提供程序未重写此方法。</span><span class="sxs-lookup"><span data-stu-id="67adc-433">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="67adc-434">如果代码提供程序不重写此方法，则 <xref:System.CodeDom.Compiler.ICodeParser> 由基类调用实现。</span><span class="sxs-lookup"><span data-stu-id="67adc-434">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeParser> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="67adc-435">此方法和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法均不在派生类中重写。</span><span class="sxs-lookup"><span data-stu-id="67adc-435">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method is overridden in a derived class.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="67adc-436">如果重写此方法，则不能调用基类的相应方法。</span><span class="sxs-lookup"><span data-stu-id="67adc-436">If you override this method, you must not call the corresponding method of the base class.</span></span> <span data-ttu-id="67adc-437">基类方法使用已过时的方法在派生类中创建分析器， <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" /> 以便与使用代码分析器的预先存在的提供程序兼容。</span><span class="sxs-lookup"><span data-stu-id="67adc-437">The base-class method creates a parser in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" /> method for compatibility with preexisting providers that use code parsers.</span></span> <span data-ttu-id="67adc-438">然后，基类方法调用实现中的等效方法 <see cref="T:System.CodeDom.Compiler.ICodeParser" /> 来执行此函数。</span><span class="sxs-lookup"><span data-stu-id="67adc-438">The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeParser" /> implementation to perform this function.</span></span> <span data-ttu-id="67adc-439"><see cref="T:System.NotImplementedException" />如果从不使用代码分析器的代码提供程序调用基类方法，则将收到。</span><span class="sxs-lookup"><span data-stu-id="67adc-439">You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code parser.</span></span></para></block>
        <altmember cref="T:System.CodeDom.CodeCompileUnit" />
        <altmember cref="T:System.IO.TextReader" />
      </Docs>
    </Member>
    <Member MemberName="Supports">
      <MemberSignature Language="C#" Value="public virtual bool Supports (System.CodeDom.Compiler.GeneratorSupport generatorSupport);" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Supports(valuetype System.CodeDom.Compiler.GeneratorSupport generatorSupport) cil managed" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Supports (generatorSupport As GeneratorSupport) As Boolean" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Supports(System::CodeDom::Compiler::GeneratorSupport generatorSupport);" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="abstract member Supports : System.CodeDom.Compiler.GeneratorSupport -&gt; bool&#xA;override this.Supports : System.CodeDom.Compiler.GeneratorSupport -&gt; bool" Usage="codeDomProvider.Supports generatorSupport" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C#" Value="public virtual bool Supports (System.CodeDom.Compiler.GeneratorSupport supports);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Supports(valuetype System.CodeDom.Compiler.GeneratorSupport supports) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Supports (supports As GeneratorSupport) As Boolean" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Supports(System::CodeDom::Compiler::GeneratorSupport supports);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member Supports : System.CodeDom.Compiler.GeneratorSupport -&gt; bool&#xA;override this.Supports : System.CodeDom.Compiler.GeneratorSupport -&gt; bool" Usage="codeDomProvider.Supports supports" FrameworkAlternate="xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="generatorSupport" Type="System.CodeDom.Compiler.GeneratorSupport" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="supports" Type="System.CodeDom.Compiler.GeneratorSupport" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="generatorSupport"><span data-ttu-id="67adc-440">一个 <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> 对象，指示要验证的代码生成支持类型。</span><span class="sxs-lookup"><span data-stu-id="67adc-440">A <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> object that indicates the type of code generation support to verify.</span></span></param>
        <param name="supports">To be added.</param>
        <summary><span data-ttu-id="67adc-441">返回一个值，该值指示是否提供了指定的代码生成支持。</span><span class="sxs-lookup"><span data-stu-id="67adc-441">Returns a value indicating whether the specified code generation support is provided.</span></span></summary>
        <returns><span data-ttu-id="67adc-442">如果提供了指定的代码生成支持，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="67adc-442"><see langword="true" /> if the specified code generation support is provided; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67adc-443">可以一次使用多个标志来调用此方法 <xref:System.CodeDom.Compiler.GeneratorSupport> ，通过将一组相应的功能标志与一个二元 `OR` 运算符联接 ( # A0) ，来测试一组功能。</span><span class="sxs-lookup"><span data-stu-id="67adc-443">This method can be called with a number of <xref:System.CodeDom.Compiler.GeneratorSupport> flags at once to test for a set of capabilities by joining a set of appropriate capability flags together with a binary `OR` operator (&#124;).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67adc-444">在 .NET Framework 版本1.0 和1.1 中，此方法由 <xref:System.CodeDom.Compiler.ICodeGenerator> 提供程序的方法返回的实现提供 <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> 。</span><span class="sxs-lookup"><span data-stu-id="67adc-444">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method of the provider.</span></span> <span data-ttu-id="67adc-445">在版本2.0 中，可以直接在代码提供程序上调用此方法，即使代码提供程序未重写此方法。</span><span class="sxs-lookup"><span data-stu-id="67adc-445">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="67adc-446">如果代码提供程序不重写此方法，则 <xref:System.CodeDom.Compiler.ICodeGenerator> 由基类调用实现。</span><span class="sxs-lookup"><span data-stu-id="67adc-446">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="67adc-447">此方法和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法均不在派生类中重写。</span><span class="sxs-lookup"><span data-stu-id="67adc-447">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method is overridden in a derived class.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="67adc-448">如果重写此方法，则不能调用基类的相应方法。</span><span class="sxs-lookup"><span data-stu-id="67adc-448">If you override this method, you must not call the corresponding method of the base class.</span></span> <span data-ttu-id="67adc-449">基类方法使用已过时的方法在派生类中创建一个生成器， <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 以便与使用代码生成器的预先存在的提供程序兼容。</span><span class="sxs-lookup"><span data-stu-id="67adc-449">The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method for compatibility with preexisting providers that use code generators.</span></span> <span data-ttu-id="67adc-450">然后，基类方法调用实现中的等效方法 <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> 来执行此函数。</span><span class="sxs-lookup"><span data-stu-id="67adc-450">The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementation to perform this function.</span></span> <span data-ttu-id="67adc-451"><see cref="T:System.NotImplementedException" />如果从不使用代码生成器的代码提供程序调用基类方法，则将收到。</span><span class="sxs-lookup"><span data-stu-id="67adc-451">You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code generator.</span></span></para></block>
        <altmember cref="T:System.CodeDom.Compiler.GeneratorSupport" />
      </Docs>
    </Member>
  </Members>
</Type>
