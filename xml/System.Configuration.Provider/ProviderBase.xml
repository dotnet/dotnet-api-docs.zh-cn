<Type Name="ProviderBase" FullName="System.Configuration.Provider.ProviderBase">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d1b229fa440172c171f9a3ede99df7ae0c34e985" /><Meta Name="ms.sourcegitcommit" Value="8fab45da9f77f8bbc3ae5817515b40ac6ff205a2" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="01/20/2021" /><Meta Name="ms.locfileid" Value="98617864" /></Metadata><TypeSignature Language="C#" Value="public abstract class ProviderBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ProviderBase extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Configuration.Provider.ProviderBase" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ProviderBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProviderBase abstract" />
  <TypeSignature Language="F#" Value="type ProviderBase = class" />
  <AssemblyInfo>
    <AssemblyName>System.Configuration</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="6008f-101">提供了针对可扩展的提供程序模型的基实现。</span><span class="sxs-lookup"><span data-stu-id="6008f-101">Provides a base implementation for the extensible provider model.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6008f-102">提供程序模型旨在封装多个 ASP.NET 功能的全部或部分功能，例如成员身份、配置文件和受保护配置。</span><span class="sxs-lookup"><span data-stu-id="6008f-102">The provider model is intended to encapsulate all or part of the functionality of multiple ASP.NET features, such as membership, profiles, and protected configuration.</span></span> <span data-ttu-id="6008f-103">它允许开发人员创建提供封装功能的多个实现的支持类。</span><span class="sxs-lookup"><span data-stu-id="6008f-103">It allows the developer to create supporting classes that provide multiple implementations of the encapsulated functionality.</span></span> <span data-ttu-id="6008f-104">此外，开发人员可以使用提供程序模型编写新功能。</span><span class="sxs-lookup"><span data-stu-id="6008f-104">In addition, developers can write new features using the provider model.</span></span> <span data-ttu-id="6008f-105">如果需要更改实现方法，这可能是一种有效的方法，可支持功能的多个实现，而无需复制功能代码或对应用程序层进行编码。</span><span class="sxs-lookup"><span data-stu-id="6008f-105">This can be an effective way to support multiple implementations of a feature's functionality without duplicating the feature code or recoding the application layer if the implementation method needs to be changed.</span></span>  
  
 <span data-ttu-id="6008f-106">此 <xref:System.Configuration.Provider.ProviderBase> 类很简单，只包含一些对所有提供程序通用的基本方法和属性。</span><span class="sxs-lookup"><span data-stu-id="6008f-106">The <xref:System.Configuration.Provider.ProviderBase> class is simple, containing only a few basic methods and properties that are common to all providers.</span></span> <span data-ttu-id="6008f-107">特定于功能的提供程序 (如 <xref:System.Web.Security.MembershipProvider>) 从继承 <xref:System.Configuration.Provider.ProviderBase> ，并建立该功能的特定于实现的提供程序必须支持的必要方法和属性。</span><span class="sxs-lookup"><span data-stu-id="6008f-107">Feature-specific providers (such as <xref:System.Web.Security.MembershipProvider>) inherit from <xref:System.Configuration.Provider.ProviderBase> and establish the necessary methods and properties that the implementation-specific providers for that feature must support.</span></span> <span data-ttu-id="6008f-108">特定于实现的提供程序 (如 <xref:System.Web.Security.SqlMembershipProvider>) 从特定于功能的提供程序继承 (在这种情况下， <xref:System.Web.Security.MembershipProvider>) 。</span><span class="sxs-lookup"><span data-stu-id="6008f-108">Implementation-specific providers (such as <xref:System.Web.Security.SqlMembershipProvider>) inherit in turn from a feature-specific provider (in this case, <xref:System.Web.Security.MembershipProvider>).</span></span>  
  
 <span data-ttu-id="6008f-109">提供程序模型的最重要方面是实现 (例如，将数据保存为文本文件还是数据库中) 从应用程序代码中提取的数据。</span><span class="sxs-lookup"><span data-stu-id="6008f-109">The most important aspect of the provider model is that the implementation (for example, whether data is persisted as a text file or in a database) is abstracted from the application code.</span></span> <span data-ttu-id="6008f-110">给定功能的特定于实现的提供程序的类型是在配置文件中指定的。</span><span class="sxs-lookup"><span data-stu-id="6008f-110">The type of the implementation-specific provider for the given feature is designated in a configuration file.</span></span> <span data-ttu-id="6008f-111">然后，功能级别提供程序从配置文件中读取类型并充当功能代码的工厂。</span><span class="sxs-lookup"><span data-stu-id="6008f-111">The feature-level provider then reads in the type from the configuration file and acts as a factory to the feature code.</span></span> <span data-ttu-id="6008f-112">然后，应用程序开发人员可以在应用程序代码中使用功能类。</span><span class="sxs-lookup"><span data-stu-id="6008f-112">The application developer can then use the feature classes in the application code.</span></span> <span data-ttu-id="6008f-113">实现类型可以在配置文件中换出，无需重写代码来容纳不同的实现方法。</span><span class="sxs-lookup"><span data-stu-id="6008f-113">The implementation type can be swapped out in the configuration file, eliminating the need to rewrite the code to accommodate the different implementation methodology.</span></span>  
  
 <span data-ttu-id="6008f-114">ASP.NET 中包含的提供程序主要用于功能（如配置文件或成员身份）的数据持久性实现。</span><span class="sxs-lookup"><span data-stu-id="6008f-114">The providers included with ASP.NET are mostly abstractions of data persistence implementations for features like profiles or membership.</span></span> <span data-ttu-id="6008f-115">但是，可以将此模型应用于任何其他类型的功能，这些功能可通过多种方式进行抽象和实现。</span><span class="sxs-lookup"><span data-stu-id="6008f-115">However, this model can be applied to any other kind of feature functionality that could be abstracted and implemented in multiple ways.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6008f-116">有关如何使用类的示例 <xref:System.Configuration.Provider.ProviderBase> ，请参阅 [分析提供程序实现示例](/previous-versions/aspnet/ta63b872(v=vs.100))。</span><span class="sxs-lookup"><span data-stu-id="6008f-116">For an example of how to use the <xref:System.Configuration.Provider.ProviderBase> class, see [Profile Provider Implementation Example](/previous-versions/aspnet/ta63b872(v=vs.100)).</span></span>  
  
 ]]></format>
    </remarks>
    <related type="Article" href="/previous-versions/aspnet/ta63b872(v=vs.100)"><span data-ttu-id="6008f-117">配置文件提供程序实现示例</span><span class="sxs-lookup"><span data-stu-id="6008f-117">Profile Provider Implementation Example</span></span></related>
    <related type="Article" href="/previous-versions/aspnet/xwac61a0(v=vs.100)"><span data-ttu-id="6008f-118">受保护的配置提供程序实现示例</span><span class="sxs-lookup"><span data-stu-id="6008f-118">Protected Configuration Provider Implementation Example</span></span></related>
    <related type="Article" href="/previous-versions/aspnet/6tc47t75(v=vs.100)"><span data-ttu-id="6008f-119">如何：为成员资格提供程序实现提供示例</span><span class="sxs-lookup"><span data-stu-id="6008f-119">How to: Sample Membership Provider Implementation</span></span></related>
    <related type="Article" href="/previous-versions/aspnet/317sza4k(v=vs.100)"><span data-ttu-id="6008f-120">如何： Role-Provider 实现示例</span><span class="sxs-lookup"><span data-stu-id="6008f-120">How to: Sample Role-Provider Implementation</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ProviderBase ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.Provider.ProviderBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ProviderBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6008f-121">初始化 <see cref="T:System.Configuration.Provider.ProviderBase" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="6008f-121">Initializes a new instance of the <see cref="T:System.Configuration.Provider.ProviderBase" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public virtual string Description { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.Provider.ProviderBase.Description" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Description { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Description : string" Usage="System.Configuration.Provider.ProviderBase.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6008f-122">获取一条简短的易懂描述，它适合在管理工具或其他用户界面 (UI) 中显示。</span><span class="sxs-lookup"><span data-stu-id="6008f-122">Gets a brief, friendly description suitable for display in administrative tools or other user interfaces (UIs).</span></span></summary>
        <value><span data-ttu-id="6008f-123">简短的易懂描述，适合在管理工具或其他 UI 中显示。</span><span class="sxs-lookup"><span data-stu-id="6008f-123">A brief, friendly description suitable for display in administrative tools or other UIs.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6008f-124">如果已配置的提供程序未提供说明，则该属性的值 <xref:System.Configuration.Provider.ProviderBase.Name%2A> 将返回为默认值。</span><span class="sxs-lookup"><span data-stu-id="6008f-124">If a configured provider does not supply a description, the value of the <xref:System.Configuration.Provider.ProviderBase.Name%2A> property is returned as a default.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public virtual void Initialize (string name, System.Collections.Specialized.NameValueCollection config);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Initialize(string name, class System.Collections.Specialized.NameValueCollection config) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Initialize (name As String, config As NameValueCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Initialize(System::String ^ name, System::Collections::Specialized::NameValueCollection ^ config);" />
      <MemberSignature Language="F#" Value="abstract member Initialize : string * System.Collections.Specialized.NameValueCollection -&gt; unit&#xA;override this.Initialize : string * System.Collections.Specialized.NameValueCollection -&gt; unit" Usage="providerBase.Initialize (name, config)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="config" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="6008f-125">提供程序的友好名称。</span><span class="sxs-lookup"><span data-stu-id="6008f-125">The friendly name of the provider.</span></span></param>
        <param name="config"><span data-ttu-id="6008f-126">名称/值对的集合，表示在配置中为该提供程序指定的提供程序特定的属性。</span><span class="sxs-lookup"><span data-stu-id="6008f-126">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</span></span></param>
        <summary><span data-ttu-id="6008f-127">初始化配置生成器。</span><span class="sxs-lookup"><span data-stu-id="6008f-127">Initializes the configuration builder.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6008f-128">基类实现在内部跟踪提供程序 `Initialize` 方法的调用次数。</span><span class="sxs-lookup"><span data-stu-id="6008f-128">The base class implementation internally tracks the number of times the provider's `Initialize` method has been called.</span></span> <span data-ttu-id="6008f-129">如果提供程序多次初始化， `InvalidOperationException` 则会引发，指出提供程序已经初始化。</span><span class="sxs-lookup"><span data-stu-id="6008f-129">If a provider is initialized more than once, an `InvalidOperationException` is thrown stating that the provider is already initialized.</span></span>  
  
 <span data-ttu-id="6008f-130">由于大多数功能提供程序在 <xref:System.Configuration.Provider.ProviderBase.Initialize%2A> 执行特定于提供程序的初始化之前调用，因此此方法是一个用于阻止双初始化的中心位置。</span><span class="sxs-lookup"><span data-stu-id="6008f-130">Because most feature providers call <xref:System.Configuration.Provider.ProviderBase.Initialize%2A> prior to performing provider-specific initialization, this method is a central location for preventing double initialization.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6008f-131">有关如何使用的示例 <xref:System.Configuration.Provider.ProviderBase.Initialize%2A> ，请参阅 [分析提供程序实现示例](/previous-versions/aspnet/ta63b872(v=vs.100))。</span><span class="sxs-lookup"><span data-stu-id="6008f-131">For an example of how to use <xref:System.Configuration.Provider.ProviderBase.Initialize%2A>, see [Profile Provider Implementation Example](/previous-versions/aspnet/ta63b872(v=vs.100)).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6008f-132">提供程序的名称是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6008f-132">The name of the provider is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6008f-133">提供程序名称的长度为零。</span><span class="sxs-lookup"><span data-stu-id="6008f-133">The name of the provider has a length of zero.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6008f-134">初始化提供程序后尝试在提供程序上调用 <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)" />。</span><span class="sxs-lookup"><span data-stu-id="6008f-134">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)" /> on a provider after the provider has already been initialized.</span></span></exception>
        <related type="Article" href="/previous-versions/aspnet/ta63b872(v=vs.100)"><span data-ttu-id="6008f-135">配置文件提供程序实现示例</span><span class="sxs-lookup"><span data-stu-id="6008f-135">Profile Provider Implementation Example</span></span></related>
        <related type="Article" href="/previous-versions/aspnet/xwac61a0(v=vs.100)"><span data-ttu-id="6008f-136">受保护的配置提供程序实现示例</span><span class="sxs-lookup"><span data-stu-id="6008f-136">Protected Configuration Provider Implementation Example</span></span></related>
        <related type="Article" href="/previous-versions/aspnet/6tc47t75(v=vs.100)"><span data-ttu-id="6008f-137">如何：为成员资格提供程序实现提供示例</span><span class="sxs-lookup"><span data-stu-id="6008f-137">How to: Sample Membership Provider Implementation</span></span></related>
        <related type="Article" href="/previous-versions/aspnet/317sza4k(v=vs.100)"><span data-ttu-id="6008f-138">如何： Role-Provider 实现示例</span><span class="sxs-lookup"><span data-stu-id="6008f-138">How to: Sample Role-Provider Implementation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.Provider.ProviderBase.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Configuration.Provider.ProviderBase.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6008f-139">获得一个友好名称，用于在配置过程中引用提供程序。</span><span class="sxs-lookup"><span data-stu-id="6008f-139">Gets the friendly name used to refer to the provider during configuration.</span></span></summary>
        <value><span data-ttu-id="6008f-140">用于在配置过程中引用提供程序的友好名称。</span><span class="sxs-lookup"><span data-stu-id="6008f-140">The friendly name used to refer to the provider during configuration.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6008f-141">此字符串的建议模式为： [*Provider Creator*] [*实现类型*] [*功能*] 提供程序。</span><span class="sxs-lookup"><span data-stu-id="6008f-141">The recommended pattern for this string is: [*Provider Creator*][*Implementation Type*][*Feature*]Provider.</span></span> <span data-ttu-id="6008f-142">尽管 <xref:System.Configuration.Provider.ProviderBase.Description%2A> 属性还提供了友好说明，但该 <xref:System.Configuration.Provider.ProviderBase.Name%2A> 属性将用作提供程序的标识符。</span><span class="sxs-lookup"><span data-stu-id="6008f-142">Although the <xref:System.Configuration.Provider.ProviderBase.Description%2A> property also provides a friendly description, the <xref:System.Configuration.Provider.ProviderBase.Name%2A> property is used as an identifier for the provider.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
