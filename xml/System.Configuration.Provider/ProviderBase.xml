<Type Name="ProviderBase" FullName="System.Configuration.Provider.ProviderBase">
  <Metadata><Meta Name="ms.openlocfilehash" Value="26347c46799c2a38958a90c26438a8d06816960f" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89896387" /></Metadata><TypeSignature Language="C#" Value="public abstract class ProviderBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ProviderBase extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Configuration.Provider.ProviderBase" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ProviderBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProviderBase abstract" />
  <TypeSignature Language="F#" Value="type ProviderBase = class" />
  <AssemblyInfo>
    <AssemblyName>System.Configuration</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供了针对可扩展的提供程序模型的基实现。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 提供程序模型旨在封装多个 ASP.NET 功能的全部或部分功能，例如成员身份、配置文件和受保护配置。 它允许开发人员创建提供封装功能的多个实现的支持类。 此外，开发人员可以使用提供程序模型编写新功能。 如果需要更改实现方法，这可能是一种有效的方法，可支持功能的多个实现，而无需复制功能代码或对应用程序层进行编码。  
  
 此 <xref:System.Configuration.Provider.ProviderBase> 类很简单，只包含一些对所有提供程序通用的基本方法和属性。 特定于功能的提供程序 (如 <xref:System.Web.Security.MembershipProvider>) 从继承 <xref:System.Configuration.Provider.ProviderBase> ，并建立该功能的特定于实现的提供程序必须支持的必要方法和属性。 特定于实现的提供程序 (如 <xref:System.Web.Security.SqlMembershipProvider>) 从特定于功能的提供程序继承 (在这种情况下， <xref:System.Web.Security.MembershipProvider>) 。  
  
 提供程序模型的最重要方面是实现 (例如，将数据保存为文本文件还是数据库中) 从应用程序代码中提取的数据。 给定功能的特定于实现的提供程序的类型是在配置文件中指定的。 然后，功能级别提供程序从配置文件中读取类型并充当功能代码的工厂。 然后，应用程序开发人员可以在应用程序代码中使用功能类。 实现类型可以在配置文件中换出，无需重写代码来容纳不同的实现方法。  
  
 ASP.NET 中包含的提供程序主要用于功能（如配置文件或成员身份）的数据持久性实现。 但是，可以将此模型应用于任何其他类型的功能，这些功能可通过多种方式进行抽象和实现。  
  
   
  
## Examples  
 有关如何使用类的示例 <xref:System.Configuration.Provider.ProviderBase> ，请参阅 [分析提供程序实现示例](https://msdn.microsoft.com/library/c36e8a56-b416-40b7-95c1-c662cfb8f906)。  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/c36e8a56-b416-40b7-95c1-c662cfb8f906">配置文件提供程序实现示例</related>
    <related type="Article" href="https://msdn.microsoft.com/library/bfa00166-2e56-4234-a596-30cf9d197792">受保护的配置提供程序实现示例</related>
    <related type="Article" href="https://msdn.microsoft.com/library/4634e914-dcd1-48aa-914b-58aecfb86879">如何：为成员资格提供程序实现提供示例</related>
    <related type="Article" href="https://msdn.microsoft.com/library/13efc440-bc9c-4c43-825f-dc38465d8bce">如何：为角色提供程序实现提供示例</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ProviderBase ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.Provider.ProviderBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ProviderBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Configuration.Provider.ProviderBase" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public virtual string Description { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.Provider.ProviderBase.Description" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Description { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Description : string" Usage="System.Configuration.Provider.ProviderBase.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一条简短的易懂描述，它适合在管理工具或其他用户界面 (UI) 中显示。</summary>
        <value>简短的易懂描述，适合在管理工具或其他 UI 中显示。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果已配置的提供程序未提供说明，则该属性的值 <xref:System.Configuration.Provider.ProviderBase.Name%2A> 将返回为默认值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public virtual void Initialize (string name, System.Collections.Specialized.NameValueCollection config);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Initialize(string name, class System.Collections.Specialized.NameValueCollection config) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Initialize (name As String, config As NameValueCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Initialize(System::String ^ name, System::Collections::Specialized::NameValueCollection ^ config);" />
      <MemberSignature Language="F#" Value="abstract member Initialize : string * System.Collections.Specialized.NameValueCollection -&gt; unit&#xA;override this.Initialize : string * System.Collections.Specialized.NameValueCollection -&gt; unit" Usage="providerBase.Initialize (name, config)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="config" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="name">提供程序的友好名称。</param>
        <param name="config">名称/值对的集合，表示在配置中为该提供程序指定的提供程序特定的属性。</param>
        <summary>初始化配置生成器。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 基类实现在内部跟踪提供程序 `Initialize` 方法的调用次数。 如果提供程序多次初始化， `InvalidOperationException` 则会引发，指出提供程序已经初始化。  
  
 由于大多数功能提供程序在 <xref:System.Configuration.Provider.ProviderBase.Initialize%2A> 执行特定于提供程序的初始化之前调用，因此此方法是一个用于阻止双初始化的中心位置。  
  
   
  
## Examples  
 有关如何使用的示例 <xref:System.Configuration.Provider.ProviderBase.Initialize%2A> ，请参阅 [分析提供程序实现示例](https://msdn.microsoft.com/library/c36e8a56-b416-40b7-95c1-c662cfb8f906)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">提供程序的名称是 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">提供程序名称的长度为零。</exception>
        <exception cref="T:System.InvalidOperationException">初始化提供程序后尝试在提供程序上调用 <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)" />。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/c36e8a56-b416-40b7-95c1-c662cfb8f906">配置文件提供程序实现示例</related>
        <related type="Article" href="https://msdn.microsoft.com/library/bfa00166-2e56-4234-a596-30cf9d197792">受保护的配置提供程序实现示例</related>
        <related type="Article" href="https://msdn.microsoft.com/library/4634e914-dcd1-48aa-914b-58aecfb86879">如何：为成员资格提供程序实现提供示例</related>
        <related type="Article" href="https://msdn.microsoft.com/library/13efc440-bc9c-4c43-825f-dc38465d8bce">如何：为角色提供程序实现提供示例</related>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.Provider.ProviderBase.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Configuration.Provider.ProviderBase.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获得一个友好名称，用于在配置过程中引用提供程序。</summary>
        <value>用于在配置过程中引用提供程序的友好名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此字符串的建议模式为： [*Provider Creator*] [*实现类型*] [*功能*] 提供程序。 尽管 <xref:System.Configuration.Provider.ProviderBase.Description%2A> 属性还提供了友好说明，但该 <xref:System.Configuration.Provider.ProviderBase.Name%2A> 属性将用作提供程序的标识符。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
